<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2024-10-02T00:00:00-07:00</updated><entry><title>DevOps Vancouver Meetup Learnings</title><link href="https://wsbctechnicalblog.github.io/devops-vancouver-meetup-learnings.html" rel="alternate"></link><published>2024-10-02T00:00:00-07:00</published><updated>2024-10-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-10-02:/devops-vancouver-meetup-learnings.html</id><summary type="html">&lt;p&gt;Insights gained from hosting six community meetups this year: the positives, negatives, and challenges.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I need to share my learnings from community events with my peers, and summarising them here seemed a great idea. Hopefully, it benefits both my peers and you (the community). We have been running the DevOps Vancouver meetup for years, enduring fantastic and tough sessions as well as the Covid pandemic. This year, we emerged from the pandemic and shifted from virtual-only meetings to a mix of virtual, hybrid, and in-person events. In this brief post, I will share insights from a busy first half of 2024, a summer break, and upcoming events.&lt;/p&gt;
&lt;p&gt;One major realization I have made this year is that DevOps has matured, and the engineering community now embraces the mindset. We have progressed from basic DevOps to sharing innovations in the synergy of people, process, and products - there remains little interest in the fundamentals of DevOps. Additionally, Artificial Intelligence (AI)'s impact on DevOps is significant, and we are beginning to struggle with maintaining focus as AI overlaps with other areas, leading to conflicts with other meetups and duplication of events/focus.&lt;/p&gt;
&lt;h1&gt;Negatives and Challenges&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="negatives" src="../images/devops-vancouver-meetup-learnings-1.jpg"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will start by discussing the challenges of hosting meetups that meet both community needs and sponsor expectations. These are just my personal candid observations! Please be patient; we will get to the positives, because meetups are certainly valuable!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Meetups have hidden costs&lt;/strong&gt; - While free, meetups demand significant personal and business time (cost), venues, refreshments, equipment, and promotion (cost), and above all, effort to provide engaging content for diverse attendees (cost). Without these investments, the content might become niche or irrelevant, leading to decreased interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keeping momentum is tough&lt;/strong&gt; - When content loses relevance, community interest drops. To maintain engagement, we need to frequently remind the community of the meetup’s purpose and host regular meetups. For instance, out of 2882 meetup members, only 3.5% attend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;25-50% of RSVPs are unreliable&lt;/strong&gt; - Comparing actual meetup attendance with RSVPs (Répondez s'il vous plaît") shows many people do not show up due to other plans or commitments like family dinners. This makes planning venues and catering difficult and risky.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;20% Poll Response Rate&lt;/strong&gt; - Achieving an adequate response rate for online surveys is always challenging. Given that we are engaging with a part-time community, the typical 20-30% response rate decreases to 5-10% of active participants, on a good day. This limited feedback complicates efforts to enhance meetups or determine which topics to schedule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hybrid meetups are a nightmare&lt;/strong&gt; - during the pandemic, we switched from in-person to virtual. This year, we tried hybrid meetups with both in-person and virtual attendance but concluded we will either host fully virtual or in-person events going forward. Firstly, in-person events see less drop-off as attendees who travel are more engaged. Secondly, online attendees often get distracted by multiple monitors. Thirdly, time is wasted due to communication issues or unprepared users online. Therefore, our preference now is for recorded in-person meetups, sharing recordings a month later. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading this far. Let us context switch to the positives.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Positives&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="positives" src="../images/devops-vancouver-meetup-learnings-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, I focus on the positives, which undeniably surpass the disadvantages, though we might feel differently during hectic periods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Collaboration is energizing&lt;/strong&gt; - One key lesson from my army days is that we can overcome any challenge together, whether it is trekking 50km through the Alps with gear, running 5km, or facing life's hurdles. As a community, we can collaborate, share knowledge, support one another, and avoid common pitfalls and redundant efforts in a tech environment. During meetups, I prefer to observe from the back and explore the hallways during breaks to meet new engineers, each bringing unique challenges, insights, and skills to share with the DevOps Vancouver community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;In-person rocks&lt;/strong&gt; - While I appreciate remote work, I prefer in-person meetings for certain situations. They help me connect with new community members without distractions from multiple screens and constant chat notifications. During in-person meetups, it is not acceptable to be sidetracked by emails or chats, ensuring everyone stays focused.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid combining in-person and virtual meetups&lt;/strong&gt; - Hybrid events can be extremely challenging. Instead, opt for either a virtual or an in-person event, record it, and release the recording a month later. Why wait that long? If participants know they will not have immediate access to the recording, they are more likely to stay engaged during the session and less inclined to cancel their RSVP or fail to attend on short notice. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Demos are effective&lt;/strong&gt; - creating a session that pleases everyone is challenging, but combining an information session with practical, real-world demos is a hit. Meetup participants enjoy demos, and pairing them with live exercises in collaborative, in-person events result in a win-win situation. Think back to your school days – did you like the history teacher who listed events and dates, or the science teacher who mixed theory with exciting, live demonstrations?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Opt for shorter, related sessions over marathon ones&lt;/strong&gt; - If you have seen the &lt;a href="Horizon: An American Saga - Wikipedia"&gt;Horizon: An American Saga&lt;/a&gt; movie featuring Kevin Costner in a theater, you might relate to this point. Rather than having a single 1, 2, or 3-hour session with one presenter, divide the session into several short segments separated by brief collaboration breaks and presented by various subject matter experts to create variation of content, tone, and flow. Personally, I enjoyed the movie, but I watched it at home in three segments across a weekend – I cannot remain focused for 3-hours.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.mentimeter.com/"&gt;Mentimeter is effective&lt;/a&gt;&lt;/strong&gt; - Polls and surveys usually struggle with response rates as attendees prefer to leave rather than complete them. I saw a meetup use Mentimeter polls during the session by linking it on slide footers, referring to it in each session, and reviewing results in subsequent topics. This method kept attendees engaged, provided instant feedback, and allowed them to see how their responses compared to others. It was a great way to engage the audience and collect actionable feedback without the need to plead and grovel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Top 7 Tips when (co-)hosting a meetup!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bulb" src="../images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Arrange your meetups in advance&lt;/strong&gt; to avoid last-minute plans. It is crucial for attendees to be able to schedule, especially since most meetups happen after work hours and can clash with family responsibilities.&lt;/li&gt;
&lt;li&gt;Ensure there is a &lt;strong&gt;break&lt;/strong&gt; between sessions so that attendees can &lt;strong&gt;relax&lt;/strong&gt; and &lt;strong&gt;network&lt;/strong&gt;. Have a colleague with you to handle the potential influx of questions from multiple attendees, as you will also need breaks occasionally.&lt;/li&gt;
&lt;li&gt;Release a meetup &lt;strong&gt;agenda&lt;/strong&gt; (context) and align the sessions to avoid any surprises. One of the worst experiences is being trapped in a 2-hour session and realizing it's not what you expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Promote&lt;/strong&gt; your meetup through various channels like LinkedIn, meetup, and X before the event and on the day it occurs. Keep reminding your community repeatedly.&lt;/li&gt;
&lt;li&gt;Prefer multiple &lt;strong&gt;short&lt;/strong&gt; sessions with &lt;strong&gt;breaks&lt;/strong&gt; in between rather than one long continuous session. Emphasize &lt;strong&gt;real-world learning&lt;/strong&gt; with &lt;strong&gt;demos&lt;/strong&gt; over theoretical content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrate your poll&lt;/strong&gt;(s) into the sessions and engage the audience to collect feedback during the meetup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be YOU and enjoy yourself!&lt;/strong&gt; - meetups are generally community-driven events without the constraints of corporate sponsorship, branding, and messaging. They foster collaborative environments where you can be authentic and appreciate informal interactions. **
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;What &lt;code&gt;meetup&lt;/code&gt; &lt;strong&gt;learnings&lt;/strong&gt; can you share?&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Quick Reference Poster</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-poster.html" rel="alternate"></link><published>2024-09-30T00:00:00-07:00</published><updated>2024-09-30T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-30:/ai-fundamentals-ai900-poster.html</id><summary type="html">&lt;p&gt;A consolidated poster / cheat sheet of my AI-900 study notes.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an aggregated view of my personal &lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html.html"&gt;guiding-principles&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;, and &lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt; study notes, with report images from the Microsoft Learning site.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="poster" src="../images/ai-fundamentals-cheatsheet.png"&gt; &lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/ai-fundamentals-cheatsheet.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Guiding Principles</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-ai-guiding-principles.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-ai-guiding-principles.html</id><summary type="html">&lt;p&gt;"Guiding principles aim to ensure responsible and ethical AI development and deployment." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="guiding-principles" src="../images/ai-fundamentals-ai900-guiding-principles.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Here are a few examples of solutions that adhere to guiding principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accountability&lt;/strong&gt; - &lt;em&gt;Solutions designed to conform to governance frameworks and organizational standards, ensuring compliance with established legal and ethical principles.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inclusivity&lt;/strong&gt; - &lt;em&gt;Solutions created to support individuals who are visually impaired or blind.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparency&lt;/strong&gt; - &lt;em&gt;Share details on a solution's features, possibilities, and constraints. People understand how to use the AI solution.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy &amp;amp; Security&lt;/strong&gt; - &lt;em&gt;Solutions that safeguard user data while still gathering valuable insights for enhancing services.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fairness&lt;/strong&gt; - &lt;em&gt;Solutions that yield the same outcomes for individuals residing in both urban and rural areas, gender, race, or other bias.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reliability &amp;amp; Safety&lt;/strong&gt; - &lt;em&gt;Solutions designed to include resistance to harmful manipulation.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unintended Consequences&lt;/strong&gt; - &lt;em&gt;Solutions designed to identify and reduce the spread of harmful content, such as misinformation, hate speech, and fake news on its platform.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Help around the corner&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft's &lt;a href="https://www.microsoft.com/en-us/research/project/ai-fairness-checklist/?msockid=00c538c26eda63c107f52ca16fce622e"&gt;AI Fairness Checklist&lt;/a&gt; encourages engineers to evaluate bias risks throughout every phase of the model lifecycle.&lt;/li&gt;
&lt;li&gt;Microsoft’s &lt;a href="https://www.microsoft.com/en-us/garage/wall-of-fame/seeing-ai/?msockid=00c538c26eda63c107f52ca16fce622e"&gt;Seeing AI&lt;/a&gt; solution helps visually impaired people by describing their surroundings, recognizing people, and reading text aloud, promoting inclusivity and access to technology for everyone.&lt;/li&gt;
&lt;li&gt;Microsoft's &lt;a href="https://news.microsoft.com/apac/features/ai-for-earth-helping-save-the-planet-with-data-science/?msockid=00c538c26eda63c107f52ca16fce622e"&gt;AI for Earth&lt;/a&gt; uses AI to address environmental challenges, from climate change to biodiversity loss, ensuring AI contributes positively to the planet’s sustainability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;FRAUPIT&lt;/h2&gt;
&lt;p&gt;Not ideal, but I use the FRAUPIT catch phrase to remember: &lt;strong&gt;F&lt;/strong&gt;airness, &lt;strong&gt;R&lt;/strong&gt;eliability &amp;amp; Safety, &lt;strong&gt;A&lt;/strong&gt;ccountability, &lt;strong&gt;U&lt;/strong&gt;nintended Consequences, &lt;strong&gt;P&lt;/strong&gt;rivacy &amp;amp; Security, &lt;strong&gt;I&lt;/strong&gt;nclusivity, and &lt;strong&gt;T&lt;/strong&gt;ransparency.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Bots</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-bots.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-bots.html</id><summary type="html">&lt;p&gt;Conversational AI workloads - no longer part of AI-900 certification!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="bots" src="../images/ai-fundamentals-ai900-bots.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even though conversational AI is no longer part of the AI-900 certification and has been replaced by generative AI, I will still share my notes for nostalgia.&lt;/p&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;QnA Maker&lt;/strong&gt; Service can populate a knowledgebase using a question&amp;amp;answer (Q&amp;amp;A) document. Being retired in March 2025.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Common Machine Learning Types</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-common-machine-learning-types.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-common-machine-learning-types.html</id><summary type="html">&lt;p&gt;"AI machine learning (ML) refers to the subset of artificial intelligence focused on developing algorithms and models that enable computers to learn from data and improve their performance over time without being explicitly programmed." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="common-machine-learning-types" src="../images/ai-fundamentals-ai900-common-machine-learning-types.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classification&lt;/strong&gt; predicts categories of data, such as sentiment if users on the X platform.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clustering algorithm&lt;/strong&gt; automatically finds the optimal way to split a data set into groups without training.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature engineering&lt;/strong&gt; is the method of creating new features, based on existing features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature selection&lt;/strong&gt; allows us to narrow down the features that are important for &lt;strong&gt;label&lt;/strong&gt; predictions.&lt;/li&gt;
&lt;li&gt;Training a &lt;strong&gt;Regression&lt;/strong&gt; model involves data gathering and transformation: &lt;strong&gt;Feature selection&lt;/strong&gt; --&amp;gt; &lt;strong&gt;Finding and Cleaning&lt;/strong&gt; outliers --&amp;gt; &lt;strong&gt;Impute&lt;/strong&gt; missing values --&amp;gt; &lt;strong&gt;Normalization&lt;/strong&gt; or &lt;strong&gt;Feature engineering&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Metrics&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Confusion Matrix Terms
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;True Positive (TP)&lt;/strong&gt; - number of positive cases predicted correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;True Negative (TN)&lt;/strong&gt; - number of negative cases predicted correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;False Positive (FP)&lt;/strong&gt; - number of positive cases predicted incorrectly - Type 1 error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;False Negative (FN)&lt;/strong&gt; - number of negative cases predicted incorrectly - Type 2 error.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Classification model
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt; - the ratio of predictions that exactly match the true class labels. Closer to 1 the better. Range: [0, 1]. Metric = (TP+TN)/(TP+FP+TN+FN).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Area Under Curve (AUC)&lt;/strong&gt; reflects the model's performance - AUC=&lt;strong&gt;1&lt;/strong&gt; is best fitted model and AUC&amp;lt;&lt;strong&gt;0.5&lt;/strong&gt; is worse than random. Range: [0, 1].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AveragePrecision (AP)&lt;/strong&gt; is the combined metrics of both Precision and Recall, used in vision model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confusion matrix&lt;/strong&gt; provides a tabulated view of predicted abd actual values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F1 Score&lt;/strong&gt; - machine learning evaluation metric that combines precision and recall scores. Metric = (2&lt;em&gt;Precision&lt;/em&gt;Recall)/(Precision+Recall).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Precision&lt;/strong&gt; - the ability of a model to avoid labeling negative samples as positive. Closer to 1 the better. Range: [0, 1]. Metric = TP/(TP+FP).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recall&lt;/strong&gt; - the ability of a model to detect all positive samples. Closer to 1 the better. Range: [0, 1]. TP/(TP+FN), where TP=true positive, FN=False negative.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Selectivity&lt;/strong&gt; - measures the ability of the model to correctly identify negative samples (i.e., true negatives) out of all the actual negative samples. Metric = TN/(TN+FP).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Specificity&lt;/strong&gt; - the ability of a model to correctly identify negative instances. TN/(TN+FP)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weighted accuracy&lt;/strong&gt; is accuracy where each sample is weighted by the total number of samples belonging to the same class. Closer to 1 the better. Range: [0, 1].&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Regression Model
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coefficient of determination&lt;/strong&gt;, often referred to as R2, represents the predictive power of the model. Closer to 1 the better. Range: [0, 1].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mean absolute error (MAE)&lt;/strong&gt; measures how close the predictions are to the actual outcomes. A lower score is better.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Root mean squared error (RMSE)&lt;/strong&gt; creates a single value that summarizes the error in the model. By squaring the difference, the metric disregards the difference between over-prediction and under-prediction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative absolute error (RAE)&lt;/strong&gt; is the relative absolute difference between expected and actual values. The mean difference is divided by the arithmetic mean.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative squared error (RSE)&lt;/strong&gt; similarly normalizes the total squared error of the predicted values by dividing by the total squared error of the actual values.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Clustering Model
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Distance to Other Center&lt;/strong&gt; represent how close, on average, each point in the cluster is to the centroids of all other clusters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Average Distance to Cluster Center&lt;/strong&gt; represent the closeness of all points in a cluster to the centroid of that cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Combined Evaluation&lt;/strong&gt; score at the bottom of each section of results lists the averaged scores for the clusters created in that particular model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximal Distance to Cluster Center&lt;/strong&gt; represent the max of the distances between each point and the centroid of that point's cluster. High = dispersed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Points&lt;/strong&gt; shows how many data points were assigned to each cluster, along with the total overall number of data points in any cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You need to examine historical data to forecast price ranges for your product. Label = prediction = price range.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;classification&lt;/strong&gt; model is &lt;code&gt;suitable&lt;/code&gt; for supervised learning to determine &lt;code&gt;is it&lt;/code&gt; a low, medium, high, or very high price.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;regression&lt;/strong&gt; model is &lt;code&gt;inappropriate&lt;/code&gt; because it forecasts numerical values rather than determining whether something belongs to the "is it" class.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;clustering&lt;/strong&gt; model is &lt;code&gt;inappropriate&lt;/code&gt; because it clusters unlabeled data into similar groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Common Workloads</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-common-workloads.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-common-workloads.html</id><summary type="html">&lt;p&gt;"Common workloads in AI and machine learning include data processing, model training, inference, natural language processing, computer vision, recommendation systems, time series forecasting, and robotics/automation tasks." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="common-workloads" src="../images/ai-fundamentals-ai900-common-workloads.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anomaly Detection&lt;/strong&gt; is one of five key elements of Microsoft AI, which ingests data, automatically selects the best ML model, and alerts user when an anomaly arises.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Computer Vision&lt;/strong&gt; - enables machines to interpret and understand visual information from the world.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversational AI&lt;/strong&gt; - enables machines to understand, process, and respond to human language in a natural and meaningful way. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generative AI&lt;/strong&gt; - generate new content, such as text, images, music, or even code, based on the data machines have been trained on. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; - focuses on the development of algorithms and statistical models that enable computers to learn from and make predictions or decisions based on data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural Language Processing&lt;/strong&gt; - focuses on the interaction between computers and humans through natural language.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Generative AI</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-generative-ai.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-generative-ai.html</id><summary type="html">&lt;p&gt;"Generative AI refers to a subset of artificial intelligence that creates new content—such as text, images, audio, or video." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="generative-ai" src="../images/ai-fundamentals-ai900-generative-ai.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copilots&lt;/strong&gt; are generative AI assistants that are integrated into applications often as chat interfaces. development potal. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copilot Studio&lt;/strong&gt; is designed to work well with low-code development scenarios, whereas &lt;strong&gt;Azure AI Studio&lt;/strong&gt; is a PaaS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural language&lt;/strong&gt; generation - images and code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt; avails &lt;strong&gt;small&lt;/strong&gt; and &lt;strong&gt;large&lt;/strong&gt; language models.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Natural Language Processing</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-natural-language-processing.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-natural-language-processing.html</id><summary type="html">&lt;p&gt;"Natural Language Processing (NLP) is a branch of AI that enables computers to understand, interpret, and generate human language." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="natural-language-processing" src="../images/ai-fundamentals-ai900-natural-language-processing.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTES&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Azure AI Language Service&lt;/strong&gt; provides the &lt;strong&gt;entity linking&lt;/strong&gt;, &lt;strong&gt;PII detection&lt;/strong&gt;, and Sentiment analysis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure AI Service&lt;/strong&gt; provides direct access to bot Az AI Translator and Az AI Speech services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure AI Speech Service&lt;/strong&gt; provides &lt;strong&gt;Language identification&lt;/strong&gt;, &lt;strong&gt;speaker recognition&lt;/strong&gt;, and &lt;strong&gt;voice assistants&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Entity recognition&lt;/strong&gt; returns links to exterbal webstes to disambiguate terms (entities) in a text.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language training&lt;/strong&gt; requires us to provide &lt;strong&gt;Entities&lt;/strong&gt;, &lt;strong&gt;Utterances&lt;/strong&gt;, and &lt;strong&gt;Intents&lt;/strong&gt;, using LUIS.&lt;/li&gt;
&lt;li&gt;Language training: &lt;strong&gt;Entities&lt;/strong&gt; - The word "light" in "turn the light on."&lt;/li&gt;
&lt;li&gt;Language training: &lt;strong&gt;Intents&lt;/strong&gt; - "Turn On".&lt;/li&gt;
&lt;li&gt;Language training: &lt;strong&gt;Utterances&lt;/strong&gt; - "Turn on the lights" or "Turn the lights on."&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Understanding Intelligent Service (LUIS)&lt;/strong&gt; understands voice or text commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Analysis&lt;/strong&gt; service helps to analyse documents, detect documents' &lt;strong&gt;language&lt;/strong&gt;, extract &lt;strong&gt;key phrases&lt;/strong&gt;, determine &lt;strong&gt;entities&lt;/strong&gt;, and provide &lt;strong&gt;sentiment analysis&lt;/strong&gt; (postive = 1, neutral/undefined = 0.5, negative = 0).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vectorization&lt;/strong&gt; represents the semantic connections between words by placing them in an n-dimensional space.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Vision Workloads</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-vision-workloads.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-vision-workloads.html</id><summary type="html">&lt;p&gt;"Vision workloads in AI refer to tasks that involve processing and analyzing visual data, such as images and videos." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="vision-workloads" src="../images/ai-fundamentals-ai900-vision-workloads.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Custom Vision&lt;/strong&gt; service has a model you can build and train for classification or object detection (class name, probability score, bounding box).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Computer Vision&lt;/strong&gt; detects faces, &lt;strong&gt;Face Service&lt;/strong&gt; finds and recognizes similar faces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Face Detection&lt;/strong&gt; helps detect and recognize people's faces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Form Recognizer&lt;/strong&gt; service has a custom model users can train, or a pre-built receipt model trained to work with receipts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image Analysis&lt;/strong&gt; helps extract information from the images, tag them, and create descriptive image summary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image Classification&lt;/strong&gt; classifies objects based on their content to answer the "what is the image?" question.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic Segmentation&lt;/strong&gt; classifies pixels that belong to objects (detects) and highlights the object boundaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Stop the Confusing Language Madness in IT!</title><link href="https://wsbctechnicalblog.github.io/stop-the-confusing-language-madness-in-it.html" rel="alternate"></link><published>2024-09-23T00:00:00-07:00</published><updated>2024-09-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-23:/stop-the-confusing-language-madness-in-it.html</id><summary type="html">&lt;p&gt;Using a common language in IT helps avoid misunderstandings, conserves time, and enhances teamwork.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from the &lt;a href="./why-i-hate-tlas.html"&gt;Why I loathe when engineers use TLAs, such as CD vs CD!&lt;/a&gt; and switch gears to the need for a common language. Establishing a shared terminology (common language) for technical terms in an IT environment is key to avoiding miscommunication, saving time, and ensuring teams work together effectively on complex projects. One of our first &lt;a href="./ceremony-center-of-enablement.html"&gt;Center of Enablement (CoE)&lt;/a&gt; &lt;a href="./ceremony-working-group.html"&gt;working groups&lt;/a&gt; aimed to create a glossary of common TLAs, business terms, and technical terms to clarify our written and verbal communications.&lt;/p&gt;
&lt;p&gt;One of our first &lt;a href="./ceremony-center-of-enablement.html"&gt;Center of Enablement (CoE)&lt;/a&gt; focused &lt;a href="./ceremony-working-group.html"&gt;working groups&lt;/a&gt; was focused on creating a glossary of common three/four-lettered acronyms (TLAs), business, and technical terms to ensure we all know what we are talking about in written and verbal communications. Naturally, its effectiveness relies on people being able to find and use it.&lt;/p&gt;
&lt;p&gt;In combination with the common language, our suggested way to communicate is to use the format: &lt;code&gt;WHAT&lt;/code&gt; ASK &lt;code&gt;WHY&lt;/code&gt;. For instance, rather than saying "&lt;em&gt;Delete my repo XYZ&lt;/em&gt;", say "&lt;em&gt;Delete my Azure DevOps (AzDO) Azure Repo XYZ, &lt;REPO-URL&gt;, because we are decommissioning our proof of concept.&lt;/em&gt;" &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bulb" src="../images/azuredevop-automation-stakeholders-3.png"&gt;
WHAT + &lt;strong&gt;ASK&lt;/strong&gt; + WHY = &lt;strong&gt;ACT&lt;/strong&gt;IONABLE
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The latter question will result in less back-and-forth communication, confusion, and dramatically reduce both frustration and lead times, because the communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is &lt;strong&gt;clear&lt;/strong&gt; and &lt;strong&gt;precise&lt;/strong&gt;, minimizing mistakes, confusion, and delays.&lt;/li&gt;
&lt;li&gt;Provides &lt;strong&gt;context&lt;/strong&gt; to explain WHY we are undertaking certain actions.&lt;/li&gt;
&lt;li&gt;Enhances &lt;strong&gt;accountability&lt;/strong&gt; by clearly documenting the WHAT and WHY.&lt;/li&gt;
&lt;li&gt;Helps with &lt;strong&gt;prioritization&lt;/strong&gt; with cues like decommissioning.&lt;/li&gt;
&lt;li&gt;Is &lt;strong&gt;ACTIONABLE&lt;/strong&gt;, avoiding unnecessary clarification steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us explore three examples from our operational support bucket to highlight the issue.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Help, my PROJECT is broken!&lt;/h1&gt;
&lt;p&gt;We begin with a simple, yet typical example.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Project" src="../images/common-engineering-stop-the-confusing-language-madness-in-it-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imagine being an engineer handling Azure DevOps services and receiving three requests saying, "&lt;em&gt;My project is broken!&lt;/em&gt;" &lt;/p&gt;
&lt;p&gt;Questions that will pop into your mind include: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WHAT project? &lt;/li&gt;
&lt;li&gt;WHERE can I find more details about it? &lt;/li&gt;
&lt;li&gt;HOW is it broken?&lt;/li&gt;
&lt;li&gt;WHAT troubleshooting has the user done? Usually a futile question. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need to start a discussion with each user to get these answers before you can understand and prioritize the issue.&lt;/p&gt;
&lt;p&gt;While waiting, you might investigate who the users are and assume they refer to their &lt;strong&gt;business&lt;/strong&gt; application, &lt;strong&gt;Visual Studio&lt;/strong&gt; project, or &lt;strong&gt;Test&lt;/strong&gt; project based on their profiles. I have tried this approach to be proactive, but it often leads me astray because each project context is unique.&lt;/p&gt;
&lt;p&gt;Here is an example by the developer persona for an actionable request:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;My Visual Studio XYZ solution is throwing an error &lt;code&gt;CODE, DESCRIPTION&lt;/code&gt; in my &lt;code&gt;URL&lt;/code&gt; continuous integration pipeline. I have researched the error using our Stack Overflow and Google search, finding &lt;code&gt;THIS URL&lt;/code&gt; information. I am working on an urgent hotfix for &lt;code&gt;P1 INCIDENT ID&lt;/code&gt;.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The request provides a clear, well-structured overview of the issue, along with details that enable the recipient to understand, prioritize, and &lt;strong&gt;act&lt;/strong&gt;. Key parts of the revised request:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clear description of the issue (WHAT).&lt;/li&gt;
&lt;li&gt;Context and location information (WHERE).&lt;/li&gt;
&lt;li&gt;Shows effort made by the requestor and references outcome.&lt;/li&gt;
&lt;li&gt;Urgency and priority (P1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It becomes &lt;strong&gt;actionable&lt;/strong&gt; and minimizes assumptions and back-and-forth communication&lt;/p&gt;
&lt;p&gt;In this first and simple example, the term &lt;strong&gt;project&lt;/strong&gt; is used in conversation. The individual who begins the dialogue fully grasps what the project entails and the related issue, while the person being addressed has no context and thus cannot act effectively.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;SOLUTION, &amp;lt;...&amp;gt; down?&lt;/h1&gt;
&lt;p&gt;In the second example, I will simply provide a few more instances of tricky words when used without context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blueprint&lt;/li&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;li&gt;Container&lt;/li&gt;
&lt;li&gt;Goal&lt;/li&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;li&gt;Product&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Template&lt;/li&gt;
&lt;li&gt;Tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I trust you have encountered these and others in your ecosystem.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;code&gt;... --- ...&lt;/code&gt; My ENVIRONMENT needs rescue!&lt;/h1&gt;
&lt;p&gt;Unfortunately, a recent incident involving environments not only introduced a new word with gazillion meanings for us, but also caused me to lose my temper. Not productive or healthy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;Environment" src="../images/common-engineering-stop-the-confusing-language-madness-in-it-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Azure is integral to our daily operations, and Azure DevOps anchors our software development lifecycle. When considering just these two environments – do not get me started with the name "Azure DevOps" – expecting two environments can mean various things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Azure DevOps (AzDO) environment&lt;/strong&gt; covers the infrastructure and services which support the entire software development lifecycle (SDLC), including boards, repositories, pipelines, test plans, and artifacts. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure DevOps (AzDO) Pipeline environment&lt;/strong&gt; enables you to define and manage resources across various environments (development, staging, production) with enhanced traceability and control over deployments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build and Test Environments&lt;/strong&gt;, where Azure DevOps oversees the CI process by constructing the application and executing unit, integration, and automated tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Environment&lt;/strong&gt;, equipped with resources like virtual machines, containers, and services (e.g., Azure App Service, Azure SQL Database), is set up for developers to create and test their code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infrastructure as Code (IaC) environments&lt;/strong&gt;, such as Terraform or ARM templates, facilitate the management of environments through code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lower/Upper Environments&lt;/strong&gt; that delineate different stages of readiness.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production Environment&lt;/strong&gt;, where the application operates and serves its users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sandbox Environment&lt;/strong&gt;, a controlled setting for experimentation, learning, and testing without impacting production or other environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staging Environment&lt;/strong&gt;, which replicates the production setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing/QA Environment&lt;/strong&gt;, used for validating code changes through both automated and manual tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As previously mentioned, had the user requested using our &lt;code&gt;WHAT&lt;/code&gt; ASK &lt;code&gt;WHY&lt;/code&gt; approach, like "&lt;em&gt;I need two Azure DevOps Pipeline environments for our infrastructure-as-code environments&lt;/em&gt;," the engineer would have needed fewer follow-up questions, reducing frustration and shortening lead times. In this scenario, Azure environments play a crucial role in our operations, with Azure DevOps environments central to our software development process. Requesting two environments without clarity can be ambiguous.&lt;/p&gt;
&lt;p&gt;This recent real-world example involved three days of back-and-forth communication, made worse by the fact that two users made similar requests for different &lt;strong&gt;environments&lt;/strong&gt;, engaging at least five engineers. This situation clearly demonstrates a significant amount of &lt;strong&gt;WASTE&lt;/strong&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The choice is yours ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Choice" src="../images/common-engineering-stop-the-confusing-language-madness-in-it-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Are you facing similar confusion and miscommunication within your IT environment? If so, how are you managing it?&lt;/p&gt;</content><category term="Posts"></category><category term="101"></category><category term="eliminate-waste"></category></entry><entry><title>Journal 5 - Unlocking the Potential of Generative AI</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-5.html" rel="alternate"></link><published>2024-08-30T00:00:00-07:00</published><updated>2024-08-30T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-08-30:/common-engineering-journal-5.html</id><summary type="html">&lt;p&gt;Explore GitHub Copilot's potential to revolutionize code quality, collaboration, and productivity.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Generative Artificial Intelligence (AI) systems create new content like text, images, music, or code by learning from existing data. Unlike traditional AI that analyzes data or automates tasks, generative AI is creative and can produce original outputs. Embracing this technology is essential as it fosters innovation, boosts productivity, and transforms industries with personalized experiences, efficient content creation, and advanced problem-solving. Adopting generative models will give a competitive advantage in a digital world.&lt;/p&gt;
&lt;h1&gt;Step 1 - Introduce the product&lt;/h1&gt;
&lt;p&gt;This journal is focused on GitHub Copilot, developed with OpenAI, is an AI coding assistant that suggests code snippets, functions, and algorithms within your IDE. Trained on public code, it offers context-aware suggestions to speed up coding and minimize repetitive tasks. Its adaptability to different programming languages makes it useful for both experienced developers and beginners, enhancing productivity and promoting efficient software development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt; - are we doing this? &lt;/p&gt;
&lt;p&gt;&lt;img alt="Confused" src="../images/common-engineering-journal-5-2.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our mission centers on the belief that technology should &lt;strong&gt;empower&lt;/strong&gt;, not replace, our engineers. GitHub Copilot serves as an assistant or wingman, enhancing &lt;strong&gt;productivity&lt;/strong&gt; and relieving engineers of repetitive tasks. This enables them to concentrate on the more &lt;strong&gt;enjoyable&lt;/strong&gt;, &lt;strong&gt;creative&lt;/strong&gt;, and &lt;strong&gt;valuable&lt;/strong&gt; parts of their work.&lt;/p&gt;
&lt;h1&gt;Step 2 - Create a community around the product&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHAT&lt;/strong&gt; - can we achieve?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plan" src="../images/common-engineering-journal-5-3.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We recognized the importance of collaborating with our developer community of practice (CoP) and launched a focused GitHub Copilot CoP. Building a strong community fosters continuous &lt;strong&gt;improvement&lt;/strong&gt;, &lt;strong&gt;trust&lt;/strong&gt;, and &lt;strong&gt;teamwork&lt;/strong&gt; among engineers to share insights, troubleshoot, and find solutions. Benefits include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sharing&lt;/strong&gt; insights, tips, and best practices to improve Copilot use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt; and &lt;strong&gt;adoption&lt;/strong&gt; through successful user experiences.&lt;/li&gt;
&lt;li&gt;Providing ongoing &lt;strong&gt;feedback&lt;/strong&gt; for Copilot's stakeholders.&lt;/li&gt;
&lt;li&gt;Enhancing &lt;strong&gt;collaboration&lt;/strong&gt; for problem-solving and new use cases.&lt;/li&gt;
&lt;li&gt;Supporting newcomers to ease &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;onboarding&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Discussing optimal integration of Copilot into workflows and &lt;strong&gt;cultures&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHAT&lt;/strong&gt; - is in it for me?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Benefits" src="../images/common-engineering-journal-5-4.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As &lt;a href="/common-engineering-journal-1.html"&gt;Common Engineering&lt;/a&gt;, we promote the following core GitHub Copilot benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mentorship&lt;/strong&gt;: offers code suggestions, auto-completions, and can generate entire functions from natural language comments and past code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: analyses, explains, and documents, particularly helpful for maintaining older code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productivity &amp;amp; Creativity&lt;/strong&gt;: speeds up coding, handles repetitive tasks, and frees engineers for complex problem-solving and innovation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduced Cognitive Load&lt;/strong&gt;: minimizes context-switching and mental strain, allowing focus on design and logic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Reduction&lt;/strong&gt;: provides real-time suggestions to catch errors early, enhancing code reliability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Step 3 - Evaluate the use and value of the product&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HOW&lt;/strong&gt; - can we add value?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Value" src="../images/common-engineering-journal-5-5.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our evaluation is continuing. We are monitoring the product's adoption and usage over 20 two-week iterations, spanning two planning intervals. For this, we employ the open-source &lt;a href="https://github.com/github-copilot-resources/copilot-metrics-viewer"&gt;GitHub Copilot Metrics Viewer&lt;/a&gt;, conduct regular feedback polls, and interview individual teams and engineers.&lt;/p&gt;
&lt;p&gt;The interviews and polls provide us with engineers' feedback, while the viewer offers deep and real-time insights into Copilot's impact and adoption.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Real-time GitHub Copilot insights&lt;/p&gt;
&lt;p&gt;&lt;img alt="Metrics" src="../images/common-engineering-journal-5-6.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the end of each iteration, we compile a report summarizing the review and share it with all stakeholders to ensure &lt;strong&gt;transparency&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Report index, per iteration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Metrics" src="../images/common-engineering-journal-5-7.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is everything for today, everyone!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Feel free to contact me at any time. I am eager to share insights that will aid us all in understanding the rapidly evolving AI landscape, its impact, and the importance of maintaining &lt;strong&gt;guiding principles&lt;/strong&gt; like safety and security. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Principles" src="../images/common-engineering-journal-5-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;References:
- &lt;a href="/common-engineering-journal-1.html"&gt;Journal 1 - What is origin of our common engineering team?&lt;/a&gt;
- &lt;a href="/common-engineering-journal-2.html"&gt;Journal 2 - Why do we need our common engineering team?&lt;/a&gt;
- &lt;a href="/common-engineering-journal-3.html"&gt;Journal 3 - Explore the trajectory of our Common Engineering (Ce) ecosystem&lt;/a&gt;
- &lt;a href="/common-engineering-journal-4.html"&gt;Journal 4 - Why are we a (the) place to work for? &lt;/a&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="ai"></category><category term="devops"></category><category term="journal"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240816</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240816.html" rel="alternate"></link><published>2024-08-19T00:00:00-07:00</published><updated>2024-08-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-08-19:/azure-pipeline-blueprints-oss-sync-20240816.html</id><summary type="html">&lt;p&gt;Improving the configuration file user experience.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have been silent for a while because we have been busy with operations, technology debt reduction, and self-service automation. We will share more on that later. In this update, we have tackled an issue that has bothered us for months, and more importantly causing some concern among our engineers using the v2 CI/CD blueprints.&lt;/p&gt;
&lt;h1&gt;LOOKING BACK&lt;/h1&gt;
&lt;p&gt;We stored all our configuration templates in a separate repository called &lt;strong&gt;*.Configuration.v2&lt;/strong&gt;, protected by branch policies and monitored by our common engineering and security teams. This caused annoying delays when the team needed to change configurations and get reviews that added little value.&lt;/p&gt;
&lt;h1&gt;LOOKING FORWARD&lt;/h1&gt;
&lt;p&gt;We moved the &lt;strong&gt;*-config.yml&lt;/strong&gt; from the &lt;strong&gt;*.Configuration.v2&lt;/strong&gt; repository to the same one where the team's application code and pipeline are tracked. The &lt;strong&gt;*-control.yml&lt;/strong&gt; line referencing the file changed from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the &lt;strong&gt;@self&lt;/strong&gt; which highlights that we refer to the repository where the original pipeline was found.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We also removed the following line from all &lt;strong&gt;*-start.yml&lt;/strong&gt; templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CeConfiguration&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__TODO_INSERT_AZURE_DEVOPS_NAME_HERE__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only exception is the NuGet v2 CI/CD blueprint, where the &lt;strong&gt;*-start.yml&lt;/strong&gt; template remains unchanged and allows loading the centralized configuration file from &lt;strong&gt;*.Configuration.v2&lt;/strong&gt; or from the same repository as the team's code and pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/deploy/default.config/nuget-package-config.yml@CeConfiguration

-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usePortfolioConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/deploy/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}/nuget-package-config.yml@CeConfiguration

-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usePortfolioConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/deploy/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}-config.yml@self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;OUTCOME&lt;/h1&gt;
&lt;p&gt;Now, the pipeline and its configuration templates are version controlled and managed by the same team that owns the code, making the process simpler and more efficient.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/29"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All &lt;strong&gt;blueprints/wepapp/azure-pipeline-*-control*.yml&lt;/strong&gt; templates have been updated.&lt;/li&gt;
&lt;li&gt;All &lt;strong&gt;blueprints/wepapp/azure-pipeline-*-start*.yml&lt;/strong&gt; templates have been updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Embrace the Future - Use Automation and AI to Elevate Your Engineering Career!</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-fear-of-change.html" rel="alternate"></link><published>2024-07-17T00:00:00-07:00</published><updated>2024-07-17T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-17:/back-to-basics-fear-of-change.html</id><summary type="html">&lt;p&gt;The era of manual testing and coding to a specification is nearly over!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Previously, I described &lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-engineering.html"&gt;effective engineers&lt;/a&gt; as curious, adaptable learners keen on evolving and improving their collaborative and communicative skills. They are detail-oriented, view challenges as a springboard for innovation akin to what Elon Musk advocates and turn failures into lessons. They seek better practices and results with creative thinking, overcome difficulties with logic and optimism, and endorse deep, varied skills to solve problems and foster teamwork.&lt;/p&gt;
&lt;p&gt;Today, I would like to touch on the significance of automation and artificial intelligence (AI). Before that, I will recount key experiences from my IT career to illustrate the constant evolution in technology and the role AI will play in upcoming groundbreaking advancements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="timeline" src="/images/back-to-basics-fear-of-change-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My professional journey began with the modular, message-passing, multi-process, and multi-user CTOS operating system by Convergent Technologies. To this day, I consider it to be one of the finest operating systems I have had the opportunity to use – we had diskless workstations, we had multi-tasking, multi-processing, and we wrote programs in segments of 64K. Here is a picture of the B21, the machine I miss the most, and on the right the B25, fondly referred to as the stackable toaster.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="b21" src="/images/back-to-basics-fear-of-change-2.png"&gt; &lt;img alt="b25" src="/images/back-to-basics-fear-of-change-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, it did not have certain features that OS/2 offered at the time, and it certainly did not include the extensive range of additional functionalities and graphical interface (windows) that Microsoft Windows boasts today. There was also an occasion where I encountered a significant setback while developing a system service meant to integrate a new DES encryption module with the operating system. This setback (failure) led me to travel to San Jose in California, one of the operating system's development hubs, where I collaborated with a highly skilled guru who taught me extensively about operating system debugging and helped resolve the gremlin I had introduced in the service. The whole experience was astonishingly educational and became my initial lesson in how failure can lead to growth and spark innovation.&lt;/p&gt;
&lt;p&gt;Upon the release of Windows 1.0, I immersed myself in assembler programming and particularly in resolving compatibility issues between CTOS and Windows. In the '90s, I recall the debut of Microsoft Solution Framework (MSF), NT 3.5, the original Visual Studio, and Visual Source Safe, which was developed by One Tree Software from North Carolina. The latter became a product and its creator, Brian Harry, became one of the leaders I admire most, as well as the driving force behind Team Foundation Server and Azure DevOps. This era introduced my second favourite device, the COMPAQ portable computer – although, when I reflect, I question the “portability.”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="compaq" src="/images/back-to-basics-fear-of-change-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The early 2000s marked the inception of the Agile Manifesto, introduced Team Foundation Server 2005 with its extensive setup checklist, and saw the rise of the DevOps approach that would go on to impact my career significantly. This period led me to a new continent and company, where I had the honor to contribute to Agile and DevOps initiatives within the TFS team at Microsoft. My peers often hear me advocate for our transformation efforts; we automated extensively, executed over 70,000 unit tests in merely seven minutes on every pull-request, and embodied &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown’s definition of DevOps&lt;/a&gt;: "&lt;em&gt;The union of people, process, and products to enable continuous delivery of value to our end users.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;In the 2010’s we welcomed Azure and I joined WorkSafeBC in 2018 – see &lt;a href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html"&gt;Can government agencies be innovative?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Lastly, we have seen the introduction of Azure OpenAI, GitHub Copilot, ChatGPT, and an overwhelming array of other AI innovations and chances for advancement. We are at the conclusion of the initial phase!&lt;/p&gt;
&lt;p&gt;Below the timeline, you will find the major programming languages I have used, space programs I have tracked, and five books where I have ve consolidated my insights for others to enjoy. I may have omitted some key points, but remember, the digital realm is always evolving. Having highlighted these to underline the need for continuous learning as the technology landscape evolves, let us circle back to this blog's main topic: the inevitable change in an engineer's life and the critical roles of automation and AI going forward.&lt;/p&gt;
&lt;p&gt;Here are two of my predictions that I would like to share and hear your views on:&lt;/p&gt;
&lt;h1&gt;Automation will not take your job, but an engineer using automation will!&lt;/h1&gt;
&lt;p&gt;Our team is committed to pioneering improvements and striving for engineering mastery by stewarding their insights and establishing guidelines to help safely navigate the realm of information technology. We implement automation to standardize and streamline monotonous tasks, freeing engineers to tackle more engaging and worthwhile projects. Yet, we observe that some engineers opt out of using automated systems, choosing instead to handle tasks manually.&lt;/p&gt;
&lt;p&gt;Is it a resistance to change or distrust in automation that hinders adaptation? Regardless, adapting is crucial. For instance, QA testers should shift towards QA engineering and harness AI for test automation, integrating it early into the development cycle. Software programmers, too, should transition into software engineers, employing AI for routine tasks and code generation, to stay relevant in an increasingly automated field and rapidly evolving environment. The era of manual testing and coding to a specification (distinct from general development) is near the end!
Keep in mind, machines excel at repetitive tasks with greater efficiency and reliability compared to humans, who may become distracted and lose concentration as their interest wanders.&lt;/p&gt;
&lt;h1&gt;Artificial Intelligence (AI) will not take your job, but an engineer using AI will!&lt;/h1&gt;
&lt;p&gt;Artificial intelligence (AI) has quickly become an integral part of our environment, processing vast amounts of data, automating routine tasks, offering tailored experiences, predicting in milli-seconds what took us days-weeks to analyse, and aiding in making decisions, thus fostering innovation and efficiency. The digital realm is brimming with potential for the optimistic and bold who aim high. I relish the chance to contribute to this crucial phase in the digital domain, with AI enabling me to tackle innovative and more strategic challenges.
So, why is there such an Angst for AI?&lt;/p&gt;
&lt;p&gt;It is unthinkable that anyone aspires to be an engineer secluded in a dim and solitary space, fearing change. We are inherently inclined to collaborate, exchange insights, innovate, investigate, and collectively concentrate on creating solutions, not fixating on issues, while consistently providing worth to satisfied users. We wish to engage in compelling and valuable work instead of monotonous and tedious tasks. Therefore, we should embrace automation and, at present, artificial intelligence. And no, we are not welcoming SkyNet or a horde of terminators – not just yet.&lt;/p&gt;
&lt;p&gt;Looking forward to my team revealing their AI success stories on this technical blog and/or the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vancouver&lt;/a&gt; meetup in the near future.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Nonetheless, based on my current knowledge, I believe that neither automation nor artificial intelligence will be a substitute for an effective (open-minded) and skilled (continuous learning) engineer.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;</content><category term="Posts"></category><category term="devops"></category><category term="agile"></category></entry><entry><title>Unleashing the Power of Teamwork: Key Takeaways from Collaboration Ceremonies and Events</title><link href="https://wsbctechnicalblog.github.io/ceremony-learnings.html" rel="alternate"></link><published>2024-07-12T00:00:00-07:00</published><updated>2024-07-12T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-12:/ceremony-learnings.html</id><summary type="html">&lt;p&gt;Fostering a culture of continuous improvement and innovation through events&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are committed to managing several internal initiatives, including hackathons, town halls, and Centers of Enablement (CoE) that further inspire the formation of Communities of Practice (CoP), dojos, and working committees. Additionally, we orchestrate and enjoy external engagements like workshops, training sessions, seminars, and networking events, such as our &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vancouver Meetup&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Events" src="../images/ceremony-learnings-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can review &lt;a href="/ceremony-overview.html"&gt;Ceremony Overview&lt;/a&gt; for more insight into the internal ceremonies - in this post I will focus on the takeaways from hosting public &lt;strong&gt;meetups&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A meetup is a casual event&lt;/strong&gt; where individuals with shared interests like DevOps come together to mingle, exchange ideas, connect, or participate in related activities. The term "meetup" gained prominence with &lt;a href="https://www.meetup.com/home"&gt;Meetup.com&lt;/a&gt;, a site that facilitates the organization and discovery of such events. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;But first, why are these events pivotal?&lt;/h1&gt;
&lt;p&gt;Events such as technical meetups and communities of practice (CoP) are essential for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Best Practices and Standards&lt;/strong&gt; - They aid in setting and spreading industry benchmarks. Our centers of enablement (CoE), for example, Provide guardrails (aka governance).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is a guardrail?&lt;/strong&gt; 
A guardrail is likened to the safety barriers on a bridge, serving as a metaphor to guide our engineers in safely and efficiently using our software development lifecycle (SDLC). It represents our commitment to setting standards and governance in a way that empowers rather than dictates. Our team promotes engineering practices and while engineers can disregard these 'guardrails,' doing so often leads to a higher chance of issues, with less support available.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Community Building&lt;/strong&gt; - They cultivate a sense of community and improve job satisfaction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback and Improvement&lt;/strong&gt; - Offers a chance for critique and improvement of work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Innovation&lt;/strong&gt; - Exposure to diverse thoughts encourages innovative thinking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inspiration and Motivation&lt;/strong&gt; - Witnessing peers' achievements can stimulate personal drive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Knowledge Sharing&lt;/strong&gt; - They promote ideas, experiences, and industry trends exchange.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Networking Opportunities&lt;/strong&gt; - They help build connections with colleagues and leaders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem Solving&lt;/strong&gt; - They offer venues for tackling challenges collaboratively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skill Development&lt;/strong&gt; - Dojos, workshops and presentations facilitate learning and skill enhancement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visibility and Recognition&lt;/strong&gt; - Participation raises profile and might create leadership chances.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our events contribute to continuous professional development, continuous learning, and collective progress.&lt;/p&gt;
&lt;h1&gt;What is the catch?&lt;/h1&gt;
&lt;p&gt;Although there are several challenges, typically the advantages of collaboration events surpass issues, such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Catch" src="../images/ceremony-learnings-2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt; - Event planning can incur high expenses, including venue rental, catering, advertising, and speaker honorariums.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logistics&lt;/strong&gt; - Arranging the event specifics, such as location, date, time, can be intricate and time-consuming.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low Attendance&lt;/strong&gt; - A successful event often depends on a high turnout for effective networking, promotion, and value for hosts and speakers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk Management&lt;/strong&gt; - It is critical to plan for unexpected issues like cancellations, poor attendance, or emergencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Inevitable One&lt;/strong&gt; - Handling that one attendee who comes just for the free food or to create continuous interruptions is a known challenge.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Back to the core topic - our learnings!&lt;/h1&gt;
&lt;p&gt;For a meetup to be effective, we've realized the importance of these six key components:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Learnings" src="../images/ceremony-learnings-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt; – It is critical to define the purpose and desired results for your meetup, providing clear answers to "what will I gain from this and why should I spend my valuable time attending?" &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 1&lt;/strong&gt; - &lt;strong&gt;Purpose&lt;/strong&gt; is the most important ingredient to cook up a successful event!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Engaging Content&lt;/strong&gt; - Present exciting and pertinent material to keep participants involved and provide value.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 2&lt;/strong&gt; - Minimize text and slides for a better presentation; maximize demonstrations and involve the audience more.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Organization&lt;/strong&gt; -  It is crucial to meticulously plan everything from choosing a suitable venue to organizing and handling logistics efficiently. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 3&lt;/strong&gt; - Post-pandemic findings indicate that in-person gatherings draw larger crowds compared to online events, with about 70% attendance for face-to-face meetings against roughly 50% for virtual ones, compared to RSVPs (Répondez s'il vous plait). Additionally, incorporating a live stream into your physical event might lead to a decrease in attendance since potential participants may opt to stay home at the last minute and view it online instead.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Promotion&lt;/strong&gt; - Effective advertising is key to drawing in attendees, and clear communication keeps all parties informed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback Loop&lt;/strong&gt; - It is crucial to collect and utilize feedback from participants to enhance future events and meet community expectations. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 4&lt;/strong&gt; - We have observed that the response rate to surveys after meetups is quite low, less than 20%. The best method to obtain feedback about the session and meetup seems to be collecting it in &lt;strong&gt;real-time&lt;/strong&gt;. I find it engaging when the speaker incorporates an interactive poll during their talk, like using &lt;a href="https://www.mentimeter.com/"&gt;Mentimeter&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Committed Leadership&lt;/strong&gt; - Having eager and passionate coordinators is essential for addressing unexpected challenges and making sure that the event runs smoothly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What have you learned from your meetups?&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>DevOps Vancouver Meetup - May 28, 2024</title><link href="https://wsbctechnicalblog.github.io/meetup-devops-meetup-2024-05-28.html" rel="alternate"></link><published>2024-07-08T00:00:00-07:00</published><updated>2024-07-08T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-08:/meetup-devops-meetup-2024-05-28.html</id><summary type="html">&lt;p&gt;How I learned to develop software like a bureaucrat?&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently hosted an amazing online &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/events/301182207/"&gt;DevOps Vancouver Meetup&lt;/a&gt; on May 28, 2024. Our presenter &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Alex Bundarzic ... see authors for details&lt;/a&gt;, agreed to present a session at short-notice.&lt;/p&gt;
&lt;p&gt;The discussion "How I learned to develop software like a bureaucrat" highlighted the issue of fragile software systems due to interdependencies which cause systems to fail when changes are made. Alex suggests that despite their inefficiency, bureaucratic methods used in large organizations can offer insights into creating more stable and adaptable software systems. This session will present ways to alter the software development process to enhance system robustness and prepare for inevitable changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/how-I-learned-to-develop-software-like-a-bureaucrat.pdf"&gt;Presentation slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Rq-UuLS2yMc"&gt;Presentation recording&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;When will &lt;strong&gt;you join&lt;/strong&gt; us at the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vandouver Meetup&lt;/a&gt; and how can we improve the meetup? Thoughts?&lt;/p&gt;</content><category term="Events"></category><category term="devops"></category><category term="engineering"></category></entry><entry><title>Revolutionizing Quality Assurance: Unleashing the Power of Automation and AI</title><link href="https://wsbctechnicalblog.github.io/quality-assurance-automation-ai.html" rel="alternate"></link><published>2024-07-08T00:00:00-07:00</published><updated>2024-07-08T00:00:00-07:00</updated><author><name>Vikas Jawa</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-08:/quality-assurance-automation-ai.html</id><summary type="html">&lt;p&gt;Automation and Artificial Intelligence in Quality Assurance&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quality Assurance (QA) is vital in any organization as it ensures that products meet high standards of quality, reliability, and performance before they reach customers. QA is essential in software development, requiring collaboration among software developers, QA engineers and everyone involved in the process to ensure the success of projects.&lt;/p&gt;
&lt;p&gt;Insufficient QA practices have been responsible for numerous high-profile project failures, highlighting the critical importance of thorough quality control measures. Effective QA practices not only identify defects early but also ensure that software meets functional requirements, performance expectations, and user needs. &lt;/p&gt;
&lt;p&gt;By integrating robust QA processes, teams can mitigate risks, enhance reliability, and deliver software products that meet high standards of quality and usability.&lt;/p&gt;
&lt;p&gt;Here are a few notable instances of project failures attributed to inadequate QA practices/processes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jpl.nasa.gov/news/mars-climate-orbiter-team-finds-likely-cause-of-loss"&gt;The Mars Climate Orbiter (1999)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.forbes.com/sites/steveschaefer/2012/08/02/knight-capital-trading-disaster-carries-440-million-price-tag/"&gt;Knight Capital Group Trading Loss (2012)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://d3.harvard.edu/platform-rctom/submission/the-failed-launch-of-www-healthcare-gov/"&gt;Healthcare.gov Launch (2013)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boeing.mediaroom.com/2019-04-04-Boeing-CEO-Dennis-Muilenburg-Addresses-the-Ethiopian-Airlines-Flight-302-Preliminary-Report"&gt;Boeing 737 MAX (2018-2019)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The drive for efficiency, reliability and flexibility has led to the incorporation of automation and artificial intelligence (AI) into quality assurance (QA) processes. The shift towards automation in QA can significantly enhance efficiency, accuracy, and coverage of tests, allowing teams to identify and resolve issues faster and more effectively. Automation empowers QA professionals by reducing repetitive manual tasks, freeing up time to focus on more strategic, creative, and complex aspects of testing that require human insight. By embracing automation, QA teams can not only improve their productivity but also contribute to delivering superior products, fostering a culture of continuous improvement and innovation within the organization.&lt;/p&gt;
&lt;p&gt;Here are some links describing how big technology companies are implementing their Automation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://itrevolution.com/articles/case-study-automated-testing-google/"&gt;Google: The birth of automated testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/nts-real-time-streaming-for-test-automation-7cb000e933a1"&gt;Netflix Test Studio: Real-time streaming for test automation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Automation in QA&lt;/h1&gt;
&lt;p&gt;Automation has transformed conventional QA methods by swiftly and consistently executing repetitive tasks. This approach releases human testers from mundane, time-consuming activities, enabling them to concentrate on more intricate scenarios and strategic testing activities. 
Major areas benefiting significantly from automation include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Test Execution&lt;/strong&gt;: Automated scripts can execute tests across different environments and configurations, ensuring thorough validation of software functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regression Testing&lt;/strong&gt;: Automation of regression tests can help teams in identifying potential regression after the code changes without manual intervention, thus maintaining the software stability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance Testing&lt;/strong&gt;: Automating various performance tests can assess how an application performs under various situations, and it can identify bottlenecks and help in optimizing performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automated testing fits seamlessly into Continuous Integration/Continuous Deployment (CI/CD) pipelines, facilitating rapid feedback loops and faster delivery.&lt;/p&gt;
&lt;h1&gt;Leveraging AI in QA&lt;/h1&gt;
&lt;p&gt;Artificial Intelligence (AI) is a game changer in QA.  AI offers capabilities that extend beyond what traditional automation can achieve. AI-powered QA tools leverage machine learning algorithms to analyze vast amount of data, identify patterns, and make intelligent decisions. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Test Case Generation&lt;/strong&gt;: AI algorithms can analyze code changes and automatically generate test cases to cover new functionalities as well as identify missing test cases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defect Prevention&lt;/strong&gt;: Machine Learning models can analyze historical data to predict where defects are likely to occur and take proactive measures to prevent issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural Language Processing (NLP) for Testing&lt;/strong&gt;: AI-driven tools can interpret natural language requirements and generate test scenarios, improving accuracy and test coverage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-powered systems can do many more things to improve the quality of the software including detecting anomalies and detecting potential security threats etc.&lt;/p&gt;
&lt;h1&gt;Challenges and Considerations&lt;/h1&gt;
&lt;p&gt;Although there are huge benefits of automation and AI in QA, there are challenges come with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Setup and Learning&lt;/strong&gt;: Implementing automation and AI requires upfront investment in tools, infrastructure, and expertise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;: Automated tests and AI models need regular updates and maintenance to remain effective as software evolves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Human Expertise&lt;/strong&gt;: Despite advancements, human QA engineers play a crucial role in designing test strategies, interpreting results, and ultimately ensuring overall quality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As technology continues to evolve, the future of QA in software development will likely see even greater integration of automation and AI. Emerging trends and technologies will further streamline QA processes and ultimately enhance the quality of the software. By harnessing these technologies effectively, organizations can reduce overall costs and deliver superior products. Integration of automation and AI in QA is about embracing the mindset of continuous improvement in software development.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="quality"></category></entry><entry><title>Unproductive Communication - The Silent Productivity Killer That Drives Me Crazy</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-communication.html" rel="alternate"></link><published>2024-06-21T00:00:00-07:00</published><updated>2024-06-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-21:/back-to-basics-communication.html</id><summary type="html">&lt;p&gt;Stop the context-less "hi, hello, ping, pong, ..."&lt;/p&gt;</summary><content type="html">&lt;p&gt;I already discussed the issues of &lt;a href="/stop-the-meeting-hell.html"&gt;Stop the meeting overload!&lt;/a&gt;, &lt;a href="/optimize-and-track-emails.md.html"&gt;How to track (and optimize) your email traffic&lt;/a&gt;, &lt;a href="/optimize-and-avoid-emails.md.html"&gt;How to tame your vacation email traffic&lt;/a&gt;, and &lt;a href="/context-switching-no-more.html"&gt;Stop the context switching, reduce waste, and focus on value&lt;/a&gt; in 2021 and 2022. &lt;/p&gt;
&lt;p&gt;I continue to deal with unhelpful chat messages, excessive emails, and experience big meetings dominated by a few, leaving many engineers questioning their presence. When multitasking begins, the sudden "what do you think &lt;yourname&gt;?" often attempts to reengage those who have disengaged from the talk – a common pattern in our new world of remote and hybrid (in-person and remote) collaboration.&lt;/p&gt;
&lt;p&gt;If you have read this far, I assume you are in a similar boat. Let me go back to basics and see what I have learned and recommend for effective email, meetings, and chats.]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Email&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email" src="../images/back-to-basics-communication-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some email etiquettes and rules to follow are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use chat&lt;/strong&gt;, like Microsoft teams, or an in-person spit-balling whiteboard session for discussions or ideation, not emails.&lt;/li&gt;
&lt;li&gt;Only expect recipients on &lt;strong&gt;To&lt;/strong&gt; to respond, not those on Cc (for your information) or Bcc (hidden).&lt;/li&gt;
&lt;li&gt;Keep an email on one topic and thread, do not &lt;strong&gt;split&lt;/strong&gt; or &lt;strong&gt;mix it up&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Do not change the subject or reuse a finished email thread for a new topic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reply all with caution&lt;/strong&gt; - you could start an email storm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a new one we have added to our list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Please provide &lt;strong&gt;context&lt;/strong&gt; when you add someone to an email thread, especially a long one, so they do not have to spend time reading the thread backwards. Not everyone has Copilot for Microsoft 365 to get an AI assisted recap. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Meetings" src="../images/back-to-basics-communication-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As per the image above, some meeting etiquettes to improve your work:life balance and productivity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Give and get &lt;strong&gt;value&lt;/strong&gt; or leave.&lt;/li&gt;
&lt;li&gt;Stop &lt;strong&gt;T-5 minutes&lt;/strong&gt; before the end.&lt;/li&gt;
&lt;li&gt;No meetings on &lt;strong&gt;Friday&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;No meeting without &lt;strong&gt;agenda&lt;/strong&gt; or &lt;strong&gt;purpose&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;acronyms&lt;/strong&gt; or &lt;strong&gt;jargon&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Limit your invite list to &lt;strong&gt;essential participants&lt;/strong&gt; only, rather than inviting a large audience. Less is more!&lt;/li&gt;
&lt;li&gt;Write down &lt;strong&gt;notes&lt;/strong&gt; and share them with &lt;strong&gt;action items&lt;/strong&gt; - or use Copilot for Microsoft Teams to do it for you. I LOVE that productivity feature, powered by AI!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus&lt;/strong&gt; on the meeting, without laptops, when meeting in-person.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not make someone who arrives late to an in-person meeting in a huge building do pushups for each minute they are late – they might have run a long way from another meeting that was valuable but finished on time or ran over. This is another reason we need the T-5 minute rule, to allow people to move between back-to-back meeting.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Teams / Slack / Chat&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Chat" src="../images/back-to-basics-communication-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As in scenario 1, I get stressed when people use chat programs like Microsoft Teams, Slack, or text messages to say "hi", "ping", or "do you have a second" and then make me wait for context.&lt;/p&gt;
&lt;p&gt;Please do not take it personally - I do not react to these 'ello pings anymore, because it is unproductive. Before, I used to &lt;strong&gt;switch context&lt;/strong&gt;, &lt;strong&gt;wait&lt;/strong&gt; patiently, or politely ask for the missing &lt;strong&gt;context&lt;/strong&gt; - but it is frustrating and distracting, especially when I am trying to focus.&lt;/p&gt;
&lt;p&gt;Instead, as in scenario 2, please be courteous and say "Hi", but more importantly add the context and/or question. That way the receiver can decide whether to reply right away, or later.&lt;/p&gt;
&lt;p&gt;Add &lt;a href="https://sbmueller.github.io/nohello/"&gt;NoHello&lt;/a&gt; to your email signature and/or your collaboration tool status message to remind everyone of keeping the collaboration &lt;strong&gt;simple&lt;/strong&gt; and &lt;strong&gt;productive&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Anything else that drives you crazy?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Automate Azure DevOps work item state transitions like a Pro</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-azdo-backlog-automation.html" rel="alternate"></link><published>2024-06-17T00:00:00-07:00</published><updated>2024-06-17T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-17:/back-to-basics-azdo-backlog-automation.html</id><summary type="html">&lt;p&gt;Maintain your backlog by changing the status of work items according to the status of their subitems.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I review our Azure DevOps (AzDO) backlogs and team settings, I sometimes ask myself why teams do not tidy up their backlogs to prevent subtle, but significant state inconsistencies. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Anomalies" src="/images/back-to-basics-azdo-backlog-automation-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, I often encounter parents in a &lt;strong&gt;new&lt;/strong&gt; or &lt;strong&gt;active&lt;/strong&gt; state, with all their children in a &lt;strong&gt;closed&lt;/strong&gt; state – are we expecting more children or has the parent been overlooked? Alternatively we see parents in a &lt;strong&gt;new&lt;/strong&gt; state and children in an &lt;strong&gt;active&lt;/strong&gt; state – have we wrongly started work, mistakenly moved the child work item into an active state, or has the parent again been neglected?&lt;/p&gt;
&lt;p&gt;Maybe the AzDO team snuck in a new and useful feature to the product as part of the &lt;strong&gt;New Boards Hubs&lt;/strong&gt; preview feature and the teams do not know yet. I will assume this to be the case and show you 3 easy steps to create magic.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Turn on the New Boards Hubs preview feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="New Board" src="/images/back-to-basics-azdo-backlog-automation-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check your Team Settings and look at Automation – Rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Settings" src="/images/back-to-basics-azdo-backlog-automation-2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up how you want to automate your parent work item states.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Automation" src="/images/back-to-basics-azdo-backlog-automation-3.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do steps 2 and 3 for each backlog level that needs this great feature.  &lt;/p&gt;
&lt;p&gt;That is all – enjoy the &lt;strong&gt;magic&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTES&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Automation is &lt;strong&gt;team&lt;/strong&gt; specific.&lt;/li&gt;
&lt;li&gt;Automation is &lt;strong&gt;backlog-level&lt;/strong&gt; specific.&lt;/li&gt;
&lt;li&gt;Automation only triggers for work items that &lt;strong&gt;belong to the same team&lt;/strong&gt;!
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;A special note for my colleague &lt;strong&gt;Pam&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPACT ON PORTFOLIO AND SCORECARD BACKLOGS&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Number 3 in above notes affects our portfolio and scorecard backlogs. The automation will not work when linked children from other AzDO projects and/or teams are closed, if they are attached to portfolio or scorecard parents.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For more information read &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/backlogs/automate-work-item-state-transitions?view=azure-devops"&gt;Automate work item state transitions&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Related &lt;a href="https://azure.microsoft.com/en-us/products/devops"&gt;AzDO&lt;/a&gt; Board posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips - Stop messing with our backlog!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-boards-tips-retain-hierarchy-with-filter.html"&gt;Azure Boards Tips - Retain hierarchy with filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Have you discovered and are you enjoying this nifty automation rule?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Exploring the future Software Development Lifecycle (SDLC) flow</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-sdlc-improvements.html" rel="alternate"></link><published>2024-06-07T00:00:00-07:00</published><updated>2024-06-07T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-07:/engineering-practices-sdlc-improvements.html</id><summary type="html">&lt;p&gt;Looking for Insights and Feedback from other pioneers of continuous SDLC improvements.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We want to "&lt;em&gt;Unite people, process, and products to empower and enable us to deliver continuous value to delighted end-users&lt;/em&gt;", following &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan's definition of DevOps&lt;/a&gt;, and our aim is to "&lt;em&gt;Create an SDLC with consistent, standardized, secure, simple, and cost-effective processes, practices, and products&lt;/em&gt;". We always try to improve our people (80%), processes (15%), and products (5%). In this post I will highlight one topic we are investigating and I hope you will join us and share your views on whether we are on track, or need some adjustment – &lt;strong&gt;SDLC Flow&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;SDLC / FLOW / TODAY&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="SDLC of today" src="../images/engineering-practices-sdlc-improvements-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As illustrated, our current software development lifecycle (SDLC) flow involves four main environments – sometimes fewer, sometimes more, but this is the usual pattern. Development, unit testing, and verification are performed in one or more &lt;strong&gt;dev + test&lt;/strong&gt; environment(s), integration testing, performance testing, and user acceptance testing are conducted in tone or more &lt;strong&gt;dev + test&lt;/strong&gt; environment(s), additional user acceptance testing and ad-hoc bug analysis are carried out in &lt;strong&gt;pre-Production&lt;/strong&gt;, and we are all familiar with what happens in &lt;strong&gt;Production&lt;/strong&gt;.  &lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clear separation of duties.&lt;/li&gt;
&lt;li&gt;Capacity to work on and deliver a lot of value (super tankers).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple environments that need careful operational attention.&lt;/li&gt;
&lt;li&gt;Multiple environments that produce carbon emissions.&lt;/li&gt;
&lt;li&gt;Multiple environments that can diverge from each other in terms of data, setup, 3rd party software, for example .NET, and our solution artifacts.&lt;/li&gt;
&lt;li&gt;Multiple environments that increase &lt;strong&gt;complexity&lt;/strong&gt; and &lt;strong&gt;total cost of ownership&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;SDLC / FLOW / FUTURE&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="SDLC of the future" src="../images/engineering-practices-sdlc-improvements-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We want to move as much of our quality and security scans to the left as far as we can, adopt a mindset of continuous delivery and release on demand, and decrease the number of environments. We want to gradually show features in a new (green) version, while keeping the live production (blue) version. That way we can switch from green to blue and switch back if needed.  &lt;/p&gt;
&lt;p&gt;Development, testing, integration testing, performance testing, user acceptance testing, and verifications moves to the left and all activities are run continuously. While the new (green) version is not switched to production, [optional] user acceptance testing and bug analysis can be done. The blue/green environments also create a new possibility to use active-active and passive-active disaster recovery.&lt;/p&gt;
&lt;p&gt;A minor detail in the visual above, is that we could have multiple development environments, which we would provision on-demand and delete as needed.&lt;/p&gt;
&lt;p&gt;Another topic that is relevant is resolving problems - with this simpler model, we also prefer to fix-forward, not roll-back by default.  &lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Focus on delivering value continuously (small changes, aka speed boats).&lt;/li&gt;
&lt;li&gt;Giving business the power to choose when their features are launched.&lt;/li&gt;
&lt;li&gt;Fewer environments to maintain and smaller environmental impact.&lt;/li&gt;
&lt;li&gt;Fewer environments enables lower cost of ownership.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automation, automation, automation - which I personally see as an advantage, not disadvantage.&lt;/li&gt;
&lt;li&gt;Some hefty prerequisites, as below.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Continuous delivery&lt;/strong&gt; of value - think nimble speed boats not super tankers - and &lt;strong&gt;release on demand&lt;/strong&gt;. Requires a culture (PEOPLE) mindset change. &lt;/li&gt;
&lt;li&gt;Welcome &lt;strong&gt;feature flags&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shift-left&lt;/strong&gt; and &lt;strong&gt;QUALITY&lt;/strong&gt; mindset. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;standardization&lt;/strong&gt;, and &lt;strong&gt;simplicity&lt;/strong&gt; to enable automation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated&lt;/strong&gt; unit, user interface, integration, and regression testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated&lt;/strong&gt; (self-service) provisioning of architecture, infrastructure, and CI/CD blueprints.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;How has your SDLC changed and improved over time? Are we making the wrong choices or are we on the right path to continuously enhance our SDLC?&lt;/p&gt;
&lt;p&gt;Let us start a conversation and please post your thoughts in the comments below. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2016/august/devops-applying-devops-to-a-software-development-project"&gt;Applying DevOps to a Software Development Project&lt;/a&gt; / August 2016&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/connect/vsts-the-road-to-continuous-delivery-with-visual-studio-team-services"&gt;VSTS - The Road to Continuous Delivery with Visual Studio Team Services&lt;/a&gt; / December 2017&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; / February, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/may/devops-any-language-any-platform-with-azure-devops-projects"&gt;Any Language, Any Platform with Azure DevOps Projects&lt;/a&gt; / May 2018&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="engineering"></category><category term="automation"></category></entry><entry><title>Decoding the Acronyms: MMP vs. MVP vs. POC</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-mmp-mvp-poc.html" rel="alternate"></link><published>2024-06-03T00:00:00-07:00</published><updated>2024-06-03T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-03:/back-to-basics-mmp-mvp-poc.html</id><summary type="html">&lt;p&gt;MMP, MVP, and POC: Understanding Their Differences and Choosing the Right Approach&lt;/p&gt;</summary><content type="html">&lt;p&gt;I attended a workshop where they used many TLAs (two/three-lettered acronyms) that were hard to follow, especially after lunch when everyone was tired. Not all the participants knew what the TLAs meant, and they could cause misunderstandings or confusion. For example, SA could mean solution architect, systems architecture, or South-Africa. My team has an agreement to avoid TLAs in spoken communication and to only use them in written communication if there is a table of acronyms or the full form with the acronym in brackets is used first.  But, this is not the main point of this short blog post. In the same workshop we talked about MMP, MVP, and POC and I thought it was a good chance to clarify the acronyms and explain how I see the difference.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Proof of Concept (POC)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="POC" src="../images/back-to-basics-mmp-mvp-poc-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Proof-of-Concept (POC) is a preliminary version or a small sample that evaluates the &lt;strong&gt;feasibility&lt;/strong&gt; of an idea or concept. Its main goal is to show to its &lt;strong&gt;internal stakeholders&lt;/strong&gt;, such as engineers and investors, that a solution of the idea could be created and would work as intended. &lt;/p&gt;
&lt;p&gt;A MVP usually follows one or more POCs - let us continue with the acronym MMP.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Minimally Viable Product (MVP)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="MVP" src="../images/back-to-basics-mmp-mvp-poc-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Minimally Viable Product (MVP) is a new product that has only the core features needed to satisfy the demands of &lt;strong&gt;early adopters&lt;/strong&gt; and selected users, who can give &lt;strong&gt;feedback&lt;/strong&gt; for further improvement. Its purpose is to test the product concept with minimal resources, offering value to users, but missing the features needed for a marketable product and most importantly the need for funding.&lt;/p&gt;
&lt;p&gt;A MMP usually follows one or more MVPs - let us wrap up with the acronym MMP.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Minimally Marketable Product (MMP)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="MMP" src="../images/back-to-basics-mmp-mvp-poc-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Minimally Marketable Product (MMP) is a product that has enough features to be sold and offers comprehensive user experience. It satisfies the demands of a broader group of &lt;strong&gt;users&lt;/strong&gt; beyond early adopters, can be released, and &lt;strong&gt;marketed&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Usually, a market winning product is preceded by one or more MMPs. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thoughts? Do you agree?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Technology Framework Monitor - Open Source Software Sync 20240510</title><link href="https://wsbctechnicalblog.github.io/azure-tfm-oss-sync-202400510.html" rel="alternate"></link><published>2024-05-10T00:00:00-07:00</published><updated>2024-05-10T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-05-10:/azure-tfm-oss-sync-202400510.html</id><summary type="html">&lt;p&gt;Shake Off the Dust: Our TFM Software Spring Cleaning!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The ongoing evolution of our Technology Framework Monitor (TFM) open-source project empowers us to expand our horizons in identifying end-of-life products and detecting engineering practice drift. In this latest update, we have performed tons of spring cleanups. Our next step involves adding support to detect drift from our engineering practices.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor/pull/31"&gt;Click here to peruse associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes as documented by Andreas Mertens encompasses three main changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eliminated Dead Weight&lt;/strong&gt;: Purged unused code, resolved null warnings, and adhered to naming conventions. Enhanced project stability by incorporating AssemblyVersion and AssemblyFileVersion attributes into the AssemblyInfo.cs file. Updated NuGet package versions for optimal performance. Implemented a more efficient method, sourced from StackOverflow, to delete repositories after processing. Streamlined code for clarity, eliminating unnecessary warnings and informational messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Optimization&lt;/strong&gt;: Introduced a new database view - ReportsScan - refining data presentation from the Reports table, excluding select fields and introducing Timestamp for enhanced insights. Transitioned smoothly from EntityFramework to EntityFrameworkCore, necessitating a revamp of the ProjectScannerSaveToSqlServer project. Enhanced the DbCore class to manage disposal and monitor open connections effectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fine-Tuning&lt;/strong&gt;: Empowered the main executable with parameters for single scan phases, enhancing flexibility. Addressed scenarios where repositories are disabled or not downloaded, providing clear console comments for troubleshooting. Improved performance by adding an index to the Reports table, optimizing the ReportScan view for faster access."&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our TFM product? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Why Metrics?</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-metrics.html" rel="alternate"></link><published>2024-05-03T00:00:00-07:00</published><updated>2024-05-03T00:00:00-07:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-05-03:/engineering-practices-metrics.html</id><summary type="html">&lt;p&gt;Why should I be concerned about metrics as long as my code works?&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Set the Stage&lt;/h1&gt;
&lt;p&gt;No matter what stage of your career or size of business you are working with – and especially if you have aspirations of starting your own business or being partner in a startup, metrics are your key to success.  Let me explain why.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Teams collaborating driven by metric" src="/images/engineering-practices-why-metrics-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I first began software engineering, as a hobbyist – it was always about performance – how fast could what I built process the input and provide accurate output.  I would change the code, look for ways to optimize, and try again.  How could I tell I was moving in the right direction?  You guessed it – metrics.  It became a challenge of its own, to best my previous notions on good and fast logic – and how to use the latest capabilities of the language I was using (at the time, Rocky Mountain Basic – circa 1977).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Developing driven by metric" src="/images/engineering-practices-why-metrics-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At that early stage, I knew that I had to track my code – in terms of performance, size, and complexity.  As my career grew, I began to see the picture and importance broaden.  As I transitioned through different roles and sizes of engagements, projects and onto products – metrics became how measured our success at each and every phase of development.  It sets your team apart; it demonstrates your attention to detail and focus (and help to clarify what is important).
At WorkSafe BC, I am thrilled to see Metrics as a key factor in everything, every initiative and at every level within our Enterprise DevOps division.  As practitioner of SAFe (Scalable Agile Framework for the Enterprise), we have many teams working across various initiatives serving all aspects of the business and we use metrics to frame business benefit and track realization.&lt;/p&gt;
&lt;h1&gt;Metrics are the Key to Success&lt;/h1&gt;
&lt;p&gt;Let me list the Metrics I see in play, and why they are crucial to our collective success.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Performance Evaluation:&lt;/strong&gt; Metrics provide quantitative measures to evaluate the performance of software development processes, teams, and individual developers. They help identify areas of improvement and track progress over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Quality Assurance:&lt;/strong&gt; Metrics help assess the quality of software products by measuring factors such as code complexity, code coverage, defect density, and adherence to coding standards. This information enables teams to identify and address quality issues early in the development lifecycle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Management:&lt;/strong&gt; Metrics help in resource allocation by providing insights into project timelines, resource utilization, and budget management. They assist in identifying bottlenecks, optimizing workflows, and making informed decisions about resource allocation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Risk Management:&lt;/strong&gt; Metrics help identify and mitigate risks associated with software development projects. By tracking metrics related to project scope, schedule adherence, and budget, teams can proactively manage risks and avoid potential project failures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Process Improvement:&lt;/strong&gt; Metrics facilitate continuous process improvement by providing objective data to identify inefficiencies, optimize workflows, and implement best practices. They enable teams to measure the impact of process changes and make data-driven decisions to improve overall productivity and quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Communication and Transparency:&lt;/strong&gt; Metrics provide a common language for communication and collaboration among stakeholders, including developers, managers, customers, and other project stakeholders. They help foster transparency by providing visibility into project progress, performance, and quality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall, metrics play a vital role in software engineering by providing objective data to evaluate performance, ensure quality, optimize resources, manage risks, drive process improvement, and facilitate communication and transparency among project stakeholders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Organization driven by metric" src="/images/engineering-practices-why-metrics-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you embrace and share the value of metrics, use them to demonstrate your ability to execute on all levels of delivery - collaborating and working to improve them with each team member and group you work with.  Rember to track the value returned on your metrics too; all metrics are not created or perform equally.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240405</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240405.html" rel="alternate"></link><published>2024-04-10T00:00:00-07:00</published><updated>2024-04-10T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-04-10:/azure-pipeline-blueprints-oss-sync-20240405.html</id><summary type="html">&lt;p&gt;Adding a new blueprint - webapp.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This open-source update adds the new &lt;strong&gt;webapp&lt;/strong&gt; blueprint to our collection of templates and blueprints. It can be used to build and deploy any web-based .Net application to be deployed as an Azure App Service.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/28"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New web-app blueprint, which we use for web &lt;strong&gt;apps&lt;/strong&gt;, web &lt;strong&gt;apis&lt;/strong&gt;, with &lt;strong&gt;Razor&lt;/strong&gt; or &lt;strong&gt;Blazor&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/wepapp/azure-pipeline-webapp-cd-stage.yml&lt;/strong&gt; - new&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-cd.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-ci.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-config.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-control.yml&lt;/strong&gt; - new. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-start.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Technology Framework Monitor - Open Source Software Sync 20240322</title><link href="https://wsbctechnicalblog.github.io/azure-tfm-oss-sync-20240322.html" rel="alternate"></link><published>2024-04-02T00:00:00-07:00</published><updated>2024-04-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-04-02:/azure-tfm-oss-sync-20240322.html</id><summary type="html">&lt;p&gt;The broader our scanning efforts, the more technical debt we uncover, enabling proactive resolution.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The ongoing evolution of our Technology Framework Monitor (TFM) open-source project empowers us to expand our horizons in identifying end-of-life products and detecting engineering practice drift. In this latest update, we have integrated &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops"&gt;Azure Pipeline&lt;/a&gt; referencing and exploration logic. Our next step involves adding support for NODE scans and automating Azure DevOps work item generation for identified issues.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor/pull/27"&gt;Click here to peruse associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes as documented by Andreas Mertens encompasses four main changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Addition of YAML and Classic Build pipeline scans.&lt;/li&gt;
&lt;li&gt;Incorporation of Classic Release pipeline scans.&lt;/li&gt;
&lt;li&gt;Resolution of a bug causing duplicate File records. Previously, the FileID for a file was mistakenly considered a hash code, leading to duplication. This has been rectified by using the Path to uniquely identify files in the repository.&lt;/li&gt;
&lt;li&gt;Identification and resolution of a database connection leak. The base (DBCore) of all connections has been made IDisposable, ensuring proper disposal once the connection's work is completed.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: A known issue with Classic Release pipelines, particularly regarding Artifacts, has been addressed in the code update. The auto-generated code from JSON contained a reference to internal information as a field, which has been removed for clarity and security.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our TFM product? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240322</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240322.html" rel="alternate"></link><published>2024-04-01T00:00:00-07:00</published><updated>2024-04-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-04-01:/azure-pipeline-blueprints-oss-sync-20240322.html</id><summary type="html">&lt;p&gt;Second update to complete the &lt;strong&gt;101&lt;/strong&gt; simplification.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This open-source update is minor, but aligns our NuGet-Package blueprint with the recent &lt;a href="https://wsbctechnicalblog.github.io/azure-pipeline-yaml-refactor-parameter-objects.html"&gt;Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240318&lt;/a&gt; simplifications. Now all blueprints are consistent!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/27"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-cd-stage.yml&lt;/strong&gt; - replace the configuration variables with the &lt;code&gt;config&lt;/code&gt; object, which encapsulates an array of data structures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-cd.yml&lt;/strong&gt; - 
Replace the conditionals using &lt;code&gt;text&lt;/code&gt; stage names with &lt;code&gt;boolean&lt;/code&gt; stage validations for a simpler and less error-prone approach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-config.yml&lt;/strong&gt; - remove the stage names designated as &lt;code&gt;text&lt;/code&gt; and replace them with &lt;code&gt;boolean&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-control.yml&lt;/strong&gt; - instead of passing individual configuration variables, create an array of config &lt;code&gt;objects&lt;/code&gt; and pass it instead. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-start.yml&lt;/strong&gt; - change &lt;code&gt;suppressCD&lt;/code&gt; from false to true to facilitate self-service automation, allowing the injection of a placeholder config template which would break the continuous delivery (CD).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>DevOps Vancouver Meetup - March 26, 2024</title><link href="https://wsbctechnicalblog.github.io/meetup-devops-meetup-2024-03-26.html" rel="alternate"></link><published>2024-03-22T00:00:00-07:00</published><updated>2024-03-22T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-22:/meetup-devops-meetup-2024-03-26.html</id><summary type="html">&lt;p&gt;Recognizing effective DevOps teams and anchors&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently hosted an amazing in-person &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/events/299881836/"&gt;DevOps Vancouver Meetup&lt;/a&gt; on  March 26, 2024. Dive into &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:7178961872275091456/"&gt;Eduard Maievskyi's Comprehensive Report&lt;/a&gt; and &lt;a href="https://www.linkedin.com/posts/autimo_amazing-night-of-chats-networking-and-deep-activity-7178863991912325121-8f6g?utm_source=share&amp;amp;utm_medium=member_desktop"&gt;Autimo's insightful update&lt;/a&gt; for two fantastic event recaps!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/in/julian-subda-6269597/"&gt;Julian Subda&lt;/a&gt; grabbed my attention when he displayed the following image on his slides, reminiscent of the outstanding community session we hosted years ago in Victoria. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="DevOps" src="../images/meetup-devops-meetup-2024-03-26-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Knowing that we have made a positive impact always serves as a significant morale boost.&lt;/p&gt;
&lt;p&gt;When &lt;a href="https://www.linkedin.com/in/wills/"&gt;Will Sheldon&lt;/a&gt; presented &lt;strong&gt;Evolving a DevOps team&lt;/strong&gt;, one slide and the menti poll results caught my attention.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Team" src="../images/meetup-devops-meetup-2024-03-26-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I scanned through the characteristics, my immediate thought was of my team, Common Engineering. Upon sharing the slide with them, we collectively agreed, but also acknowledged the need to enhance our collaboration with the rest of our group. I am immensely proud of how our team has evolved into a vibrant, self-organized, self-managed entity, bursting with a thirst for learning and innovation.&lt;/p&gt;
&lt;p&gt;Next, the Menti poll results emerged, centered around the question: "&lt;em&gt;What is currently preventing your team from succeeding?&lt;/em&gt;"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Anchor" src="../images/meetup-devops-meetup-2024-03-26-2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The top three &lt;strong&gt;anchors&lt;/strong&gt; we are struggling with our engineers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Addressing &lt;strong&gt;technical debt&lt;/strong&gt; is crucial, but it's equally important to empower teams to resolve it without accumulating further debt, as I discussed in &lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-dealing-with-technical-debt.html"&gt;Back to Basics: Dealing with Technical Debt&lt;/a&gt;. Do it right, not fast!&lt;/li&gt;
&lt;li&gt;Fear of change and failure is another anchor that is dragging progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;People&lt;/strong&gt; and &lt;strong&gt;Culure&lt;/strong&gt;, however, is the Achilles' heel. DevOps is &lt;strong&gt;80%&lt;/strong&gt; PEOPLE, &lt;strong&gt;15%&lt;/strong&gt; PROCESS, and &lt;strong&gt;5%&lt;/strong&gt; PRODUCTS! &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all an interesting and fun evening.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When will &lt;strong&gt;you join&lt;/strong&gt; us at the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vandouver Meetup&lt;/a&gt; and how can we improve the meetup? Thoughts?&lt;/p&gt;</content><category term="Events"></category><category term="devops"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240318</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240318.html" rel="alternate"></link><published>2024-03-20T00:00:00-07:00</published><updated>2024-03-20T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-20:/azure-pipeline-blueprints-oss-sync-20240318.html</id><summary type="html">&lt;p&gt;“&lt;em&gt;Constantly think about how you could be doing things better.&lt;/em&gt;” - Elon Musk.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We decided to align our internal blueprint updates with the cutting-edge templates provided by &lt;a href="https://github.com/WorkSafeBC-Common-Engineering"&gt;WorkSafeBC-Common-Engineering&lt;/a&gt;, an open-source project. This synchronization guarantees that you are always equipped with the most up-to-date enhancements and innovations from our team. Below is an overview of all the recent modifications. You can review the latest template changes in this closed &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/25"&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Drop Samples&lt;/h1&gt;
&lt;p&gt;Sharing the samples we inject into our &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure Repos&lt;/a&gt; as part of our self-service automation has been linked with our blueprint efforts. However, it has become evident that this initiative has received minimal attention, provided limited value, and diverted our focus away from blueprint innovations. Consequently, I have taken the decisive step to remove these samples from our open-source repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.universal-artifact&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.generic-multiple-jobs&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.generic-single-job&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.azure-function&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.nuget-package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need them, ping me!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;.NET 8&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;End-of-life (EOL) Roadmap&lt;/p&gt;
&lt;p&gt;&lt;img alt=".NET EOL" src="../images/azure-pipeline-blueprints-oss-sync-20240318-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anticipating the impending end of support for .NET 6 in November, we have taken proactive measures to elevate our open-source and internal blueprints to the latest version of .Net 8 by default, but will support .Net 6 as an option.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Simplifications&lt;/h1&gt;
&lt;p&gt;We have aligned all our blueprints with the &lt;a href="/azure-pipeline-yaml-refactor-parameter-objects.html"&gt;Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management&lt;/a&gt; improvements and simplifications, which affected the following blueprints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/azure-function"&gt;azure-function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/nuget-package"&gt;nuget-package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... as well as the following templates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/generic-multiple-jobs"&gt;generic-multiple-jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/generic-single-job"&gt;generic-simple-jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Open Source Software (OSS)</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-oss.html" rel="alternate"></link><published>2024-03-11T00:00:00-07:00</published><updated>2024-03-11T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-11:/back-to-basics-oss.html</id><summary type="html">&lt;p&gt;Raising awareness of our open-source projects for knowledge sharing.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our open-source software (OSS) projects, &lt;a href="https://github.com/wsbctechnicalblog/wsbctechnicalblog.github.io"&gt;wsbctechnicalblog&lt;/a&gt;, &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;Azure DevOps Automation Pipeline Templates&lt;/a&gt;, and &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor"&gt;Technology Framework Monitor&lt;/a&gt;, are readily available on GitHub, and we are committed to their ongoing development whenever time and opportunities allow. The first OSS project and the most evident is our technical blog, serving as a platform where we share fundamental principles, insights, and advanced knowledge gathered throughout our bits and bytes journeys. We share whatever we feel is important to our fellow Agile, DevOps, and Software Engineering communities, fostering collaboration and continual learning.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Azure DevOps Automation Pipeline Templates&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;Pipelines - Meet our second-generation app-type blueprints&lt;/a&gt; touches on the core rationale behind our investment in this OSS project. When tasked with creating a continuous delivery pipeline, soliciting input from 13 software engineers is akin to inviting a multitude of perspectives, potentially resulting in more than 13 different approaches. While this diversity underscores autonomy and fosters innovation, it can inadvertently divert our delivery teams from their primary obligation of consistently delivering functional code and value. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline status" src="/images/back-to-basics-oss-1.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moreover, the drift and sprawl of pipeline configuration snowflakes complicates reuse and inflates support and maintenance overheads and cost of ownership. Analogous to architectural blueprints, our standardized pipeline templates — both generic and application-specific — facilitate the swift and uniform creation of countless delivery pipelines. This approach champions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Using predefined pipeline templates, we ensure uniformity across our delivery processes. This consistency minimizes errors and discrepancies, fostering predictability and reliability in our software delivery lifecycle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardization&lt;/strong&gt;: Standardized pipeline blueprints establish a common framework for development teams to follow. This alignment streamlines collaboration, simplifies onboarding of new team members, and enhances overall efficiency by reducing the need for custom solutions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-Service Automation&lt;/strong&gt;: Using predefined pipeline templates empower us to create and delivery software development lifecycle &lt;a href="https://learn.microsoft.com/en-us/azure/devops/repos/?view=azure-devops"&gt;Azure Repos&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"&gt;Azure Pipelines&lt;/a&gt;. Using self-service automation, teams can rapidly iterate on their development environment, reducing dependency on centralized resources and accelerating time to market.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: By integrating security best practices into our pipeline blueprints, we embed security measures directly into the software delivery process. This proactive approach helps identify and mitigate security vulnerabilities early in the development cycle, enhancing the overall resilience and robustness of our applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Callout" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPLORE&lt;/strong&gt; our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;Application-type CI/CD blueprint template&lt;/a&gt; OSS project, collaborate, and continuously improve the templates with us. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To get an insight into WHY we engineered these blueprints, HOW they evolved, and HOW we use them, please refer to the &lt;a href="/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; series. We are also working on a v2 blueprint cookbook, which we may self-publish this year - watch this space.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Technology Framework Monitor (TFM)&lt;/h1&gt;
&lt;p&gt;The Technology Framework Monitor project is a side project by &lt;a href="/pages/authors.html"&gt;Andreas Mertens&lt;/a&gt;, who wanted to help us find out the use of outdated versions of .NET that are used by solutions in hundreds of Azure Repos. The TFM product will go through and collect information on every project in an Azure Developer Operations organization, or repository, check the files inside, and then save the data collected into a Microsoft Standard Query Language (SQL) server database.&lt;/p&gt;
&lt;p&gt;Some features of the TFM product are to do a scan that will go through projects with different file extensions, get a file list, and store information in the SQL database. The file list information gathered can include which .NET version, .nuget package versions, npm package versions and more depending on the configuration settings. The data being published is stored in the SQL server database for analysis and reporting purposes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="TFM Observation" src="/images/back-to-basics-oss-2.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In 2023, we were lucky to work with Andreas and two BCIT students, Daniel Chellapan and &lt;a href="https://www.linkedin.com/in/samuel-tjahjadi-952b03205/"&gt;Samuel Tjahjadi&lt;/a&gt;, on a special project to refactor and open-source the project, once again sharing our learnings and an OSS solution that serves as a pivotal tool to address several critical issues within software development, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Outdated Products&lt;/strong&gt;: Identify and flag end-of-life (EoL) technologies, such as out of support versions of .NET, across various solutions stored in Azure Repositories. By pinpointing these outdated products, development teams can prioritize updates and ensure they are leveraging the latest features, performance enhancements, and security patches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Debt&lt;/strong&gt;: Detection of technical debt allows teams to identify areas where shortcuts or temporary solutions have been implemented, leading to increased complexity and maintenance overhead. Addressing technical debt early helps prevent future development bottlenecks and ensures the long-term sustainability of software systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Poor Software Development Practices&lt;/strong&gt;: Through its scanning capabilities, TFM sheds light on poor software development practices, such as inconsistent naming conventions, out-of-support dependencies, and unhealthy branching strategies. By surfacing these practices, teams can implement corrective measures, enforce coding standards, and foster a culture of continuous improvement, ultimately leading to higher-quality software products.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Callout" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPLORE&lt;/strong&gt; our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor"&gt;Technology Framework Monitor&lt;/a&gt; OSS project, collaborate, and continuously improve the templates with us. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since then, we have to keep telling Andreas to add a technical enabler card to our team’s backlog, as he explores more innovations to improve the product, our software development lifecycle, and automation of technical debt. There is a plethora of fantastic ideas for enhancing TFM (Technology Framework Monitor). I will take a pause here and pass the baton over to Andreas to delve into these potential improvements further.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Handing over to &lt;a href="/pages/authors.html"&gt;Andreas Mertens&lt;/a&gt;, who will start blogging on this blog on these open source topics. He will lift and explore the bits and bytes under the bonnet! &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Dealing with Technical Debt</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-dealing-with-technical-debt.html" rel="alternate"></link><published>2024-03-06T00:00:00-08:00</published><updated>2024-03-06T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-06:/back-to-basics-dealing-with-technical-debt.html</id><summary type="html">&lt;p&gt;Breaking Free: A Guide to Tackling Technical Debt Head-On&lt;/p&gt;</summary><content type="html">&lt;p&gt;Upon initial review of our &lt;a href="https://learn.microsoft.com/en-us/azure/devops/user-guide/what-is-azure-devops?view=azure-devops"&gt;Azure DevOps&lt;/a&gt; technical debt backlog, it became evident that we face a pivotal challenge in our pursuit of QUALITY and INNOVATION. Dealing with the seemingly impossible can be daunting for any DevOps product team. Similar to financial debt, addressing technical debt demands a well-defined strategy and commitment to implementation, leaving no space for compromise or excuses.&lt;/p&gt;
&lt;p&gt;To commence your technical debt remediation journey, consider the following steps:&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embrace the Reality and acknowledge the Problem&lt;/strong&gt; - Collaborate with your product owner, stakeholders, and team to establish a clear strategy for tackling technical debt head-on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Draw the Line and distinguish Bugs from Technical Debt&lt;/strong&gt; - Explore why bugs should not be mistaken for technical debt in the discussion on &lt;a href="/engineering-practices-why-bugs-are-not-technical-debt.html"&gt;Why Bugs are NOT Technical Debt&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Categorize Technical Debt&lt;/strong&gt; - Organize your technical debt into categories like Architectural, Automation, Billing, Code, Design, End-of-Life (EoL), External Component, Infrastructure, Operational, Product, Security, and Test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Prioritize Technical Debt&lt;/strong&gt; - Focus on addressing the most critical and valuable issues first to prevent compounding interest, leveraging an experienced panel or working group to collaboratively prioritize tasks. Should you tackle end-of-life software or known vulnerabilities first, considering their potential impact on tomorrow's headlines or the return on investment?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Track Technical Debt&lt;/strong&gt; - Routinely review and archive technical debt that has lingered for over a year or two, keeping it accessible for reference but out of public view. If your product and users have tolerated it for this long, its impact is likely minimal. We have adopted a similar strategy for shelving "would-be-cool" features from cluttering our product backlog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Invest in Automated Solutions&lt;/strong&gt; - Empower your engineers with automation tools to detect, comprehend, and mitigate technical debt efficiently. Consider initiatives like our AI Software Sentinel experiments, paving the way for proactive identification and resolution of potential issues through artificial intelligence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sentinel Mascot" src="/images/back-to-basics-dealing-with-technical-debt-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;How are you dealing effectively with your technical debt?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="engineering"></category></entry><entry><title>Cheat sheet to migrate generic v1 templates to v2</title><link href="https://wsbctechnicalblog.github.io/cheat-sheet-to-migrate-generic-v1-templates-to-v2.html" rel="alternate"></link><published>2024-03-01T00:00:00-08:00</published><updated>2024-03-01T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-01:/cheat-sheet-to-migrate-generic-v1-templates-to-v2.html</id><summary type="html">&lt;p&gt;Questioning the recommended approach to upgrades and the use of generic templates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We shared our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprints&lt;/a&gt; for &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"&gt;Azure Pipelines&lt;/a&gt; as open source, which include our generic templates that we created as a temporary solution to replace the classic Azure Build Pipelines for continuous integration (CI). They are helpful to begin with YAML-based build pipelines and link them with classic Azure Release Pipelines, but not our preferred approach. We will explain more about that later.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;v1 versus v2 generic template&lt;/h1&gt;
&lt;p&gt;First, let us answer our engineer's question of how to migrate from our v1 generic templates to the v2 versions. The image below compares v1 with v2, as at 2024-02-22. The only differences (all highlighted in yellow) are minor cleanups and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repository reference name (&lt;strong&gt;@CeBlueprints&lt;/strong&gt;) and repository name (&lt;strong&gt;*.v2&lt;/strong&gt;) reference the repository with the v2 templates and blueprints, aka &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The v2 template uses the &lt;strong&gt;checkout: self&lt;/strong&gt;, before calling the git-tools-git-version.yml template. Checkout &lt;a href="https://wsbctechnicalblog.github.io/share-your-toolbox-with-pipelines.html"&gt;Two ways to share your toolbox with your pipelines&lt;/a&gt; and &lt;a href="https://wsbctechnicalblog.github.io/checkout-at-the-right-time.html"&gt;Checkout your git repos at the right time!&lt;/a&gt; for an explanation of why we moved to using &lt;strong&gt;checkout&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="v1 --&amp;gt; v2" src="../images/cheat-sheet-to-migrate-generic-v1-templates-to-v2-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Make the right choice!&lt;/h1&gt;
&lt;p&gt;Before you proceed with the migration, you need to determine &lt;strong&gt;WHY&lt;/strong&gt; you should be using the generic template. Here is a simple checklist to help you with the decision:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Is there a v2 CI/CD blueprint for your application type?&lt;/strong&gt; If yes, use the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprint&lt;/a&gt;. We are phasing out the &lt;strong&gt;classic&lt;/strong&gt; Azure Pipelines and so should you.&lt;/li&gt;
&lt;li&gt;Else, &lt;strong&gt;Do you have to use a Classic Azure Release Pipeline?&lt;/strong&gt; If yes, use the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-single-job/azure-pipeline-generic-single-job-start.yml"&gt;single-job v2 generic template&lt;/a&gt; for your CI/Build pipeline.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do you need the multi-job v2 generic template?&lt;/strong&gt; &lt;strong&gt;NO&lt;/strong&gt;, we strongly recommend keeping it simple and only using the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-single-job/azure-pipeline-generic-single-job-start.yml"&gt;single-job v2 generic template&lt;/a&gt;. You should only use the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-multiple-jobs/azure-pipeline-generic-multiple-jobs-start.yml"&gt;multi-job template&lt;/a&gt; in rare situations and try to avoid it as it makes things more complicated and can put pressure on your Azure DevOps agents. See &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt; for an explanation of the two types of generic templates.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;OK back to: How to migrate from v1 to v2 generic build-only template?&lt;/h1&gt;
&lt;h3&gt;Migrate v1 --&amp;gt; v2, option 1 – move your pipeline to v2 (recommended)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a new pipeline, using the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-single-job/azure-pipeline-generic-single-job-start.yml"&gt;single-job v2 generic template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Look for &lt;strong&gt;TODO&lt;/strong&gt; placeholders and migrate (copy-paste) the code from your v1 to your new v2-based Azure Pipeline.&lt;/li&gt;
&lt;li&gt;Reconnect your classic Azure Release Pipeline to the new v2-based Azure Pipeline.&lt;/li&gt;
&lt;li&gt;Validate the new pipeline.&lt;/li&gt;
&lt;li&gt;Deprecate (delete) your old v1-based pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simple!&lt;/p&gt;
&lt;h3&gt;Migrate v1 --&amp;gt; v2, option 2 – upgrade your v1 pipeline&lt;/h3&gt;
&lt;p&gt;Using the comparison between v1 and v2 as per image above, update your v1 pipeline and upgrade it to the v2 pipeline format, following these basic steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update template repo name from CeSTemplates to &lt;strong&gt;CeBlueprints&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Update template repo name, by appending &lt;strong&gt;.v2&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Remove variables section and add checkout logic under at the beginning of the stage definition.&lt;/li&gt;
&lt;li&gt;Rename /Templates/ to &lt;strong&gt;templates/&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use either &lt;strong&gt;dotnet&lt;/strong&gt; or &lt;strong&gt;other&lt;/strong&gt; for applicationType.&lt;/li&gt;
&lt;li&gt;Validate the updated pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope our internal "how to" discussions are interesting and add value to the open source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprints&lt;/a&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Back to Basics - Engineering</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-engineering.html" rel="alternate"></link><published>2024-02-26T00:00:00-08:00</published><updated>2024-02-26T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-26:/back-to-basics-engineering.html</id><summary type="html">&lt;p&gt;The notion of developers relying on testers to validate changes can be so startling that it feels like my head might explode.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am from an era characterized by distinct roles of programmers, testers, and systems analysts, each with their specialized tasks and a rigid handoff of responsibilities for testing. However, over past decades I have transitioned into a modern &lt;strong&gt;DevOps&lt;/strong&gt; landscape where &lt;strong&gt;engineers&lt;/strong&gt; function as integral members of cross-functional teams. In this DevOps environment, every team member holds themselves accountable for the entire product lifecycle, from conceptualization to retirement, fostering a collective commitment to product excellence, quality assurance, and delighted end-users.&lt;/p&gt;
&lt;p&gt;To thrive in our software development ecosystem, it is imperative for all team members to grasp these fundamental principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Embracing cross-functional product teams&lt;/strong&gt;, where diverse expertise converges to achieve common goals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cultivating a T-shaped engineering mindset&lt;/strong&gt;, blending deep expertise in one area with a broad understanding across disciplines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understanding the key traits that define an effective engineer&lt;/strong&gt;, encompassing technical prowess, adaptability, collaborative spirit, and a relentless pursuit of excellence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me delve into these three pillars.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Cross-functional product team&lt;/h1&gt;
&lt;p&gt;A cross-functional product team is a group of people who have various abilities and experiences and work together as a unit to accomplish a common objective related to the development, evaluation, deployment, upkeep, and enhancement of a product from beginning to end. Each team member contributes their distinct viewpoint, knowledge, and skills to form a product team that can adapt to changing needs and take responsibility for quality and service excellence.&lt;/p&gt;
&lt;p&gt;Terminology that has no place in a effective cross-functional product team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Them and us.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Organizational and/or responsibility silos.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Specific role functions, such as developers and testers.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to call a cross-functional product team a smooth-working team of engineers.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;T-Shaped Engineers&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="t-shaped" src="/images/back-to-basics-engineering-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A T-shaped engineer is a term that refers to a professional who has both specialization in one area and a wide range of skills and knowledge across various areas. &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;vertical&lt;/strong&gt; part of the "T" represents the specialization – the depth of knowledge and skill in a particular technical area, such as software development. &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;horizontal&lt;/strong&gt; part of the "T" shows the engineer's ability to cooperate and work across different technical areas, such as project management, communication, teamwork, problem-solving skills, and &lt;strong&gt;quality assurance&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="quality" src="/images/back-to-basics-engineering-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I argue, for example, that &lt;strong&gt;quality&lt;/strong&gt; is the responsibility of every member of the team. This includes development, maintaining, running, and analyzing quality assurance – such as unit, integration, system, and regression tests.&lt;/p&gt;
&lt;p&gt;As shown above, I expect everyone on the product team to be experienced in, to own, and to collaborate around &lt;strong&gt;QUALITY&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Some terms that are not helpful in a productive cross-functional product team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Not my job.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Not my responsibility.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You do the coding, I do the testing – or vice versa.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Effective Engineers&lt;/h1&gt;
&lt;p&gt;Finally, I want to discuss what traits are essential for being an engineer. As you can see below, I look for thirteen (13) traits in engineers who join our team(s).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="DNA" src="/images/back-to-basics-engineering-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sorted alphabetically ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CHANGE&lt;/strong&gt; - thirst for change, evolution, and continuous learning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COLLABORATE&lt;/strong&gt; - collaboration and presentation skills and a constant desire to improve them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CURIOSITY&lt;/strong&gt; - peek under the hood, open the black-box, and show an unstoppable curiosity of finding out the WHAT, WHO, and WHY.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DETAIL&lt;/strong&gt; - notice the details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FAIL&lt;/strong&gt; - do not be afraid to try new things and fail. "If things are not failing, you are not innovating enough." - Elon Musk.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPROVE&lt;/strong&gt; - make things better, more efficient and effective.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INNOVATE&lt;/strong&gt; - think creatively, experiment continuously, learn, pivot, and apply new ideas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOGIC&lt;/strong&gt; - having a logical mind and analytical skills.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OPTIMISM&lt;/strong&gt; - stay optimistic when dealing with challenges and uncertainties that are part of an engineer's world.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PASSION&lt;/strong&gt; - show a deep passion and strong commitment to specialized and generalized knowledge and role areas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOLVE PROBLEMS&lt;/strong&gt; - problem-solving skill and eagerness to constantly overcome and solve problems we face daily.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TEAM&lt;/strong&gt; - help the team succeed. "We are in this together."&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TRUST&lt;/strong&gt; - trust is crucial for creating strong bonds between colleagues, teams, and organizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expressions that send shivers down my spine when uttered by someone claiming to be an engineer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;I have no time to explore and learn.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Why would I want to learn something new?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It is 5 o'clock and time to call it a day. We will troubleshoot tomorrow.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No need to change, this has worked for us for many years.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have been a software engineer for four decades and &lt;strong&gt;LOVE&lt;/strong&gt; my work - which is why I have probably never felt like working in my life q;-)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Am I off course? What are your thoughts on this topic?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special thanks to Office 365 Copilot for helping me copy-edit this post&lt;/em&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Why are we moving to v2 CI/CD Blueprints for Azure Pipelines?</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-why-are-we-moving-to-v2-blueprints.html" rel="alternate"></link><published>2024-02-16T00:00:00-08:00</published><updated>2024-02-16T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-16:/back-to-basics-why-are-we-moving-to-v2-blueprints.html</id><summary type="html">&lt;p&gt;Understanding why we are disabling classic Azure Pipelines and embracing YAML-based Azure Pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We covered our move from classic to YAML-based Azure Pipelines in a detailed series, which begins at &lt;a href="/yaml-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; and  triggered in our open-source initiative as covered in posts such as &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part11.html"&gt;Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request&lt;/a&gt;, &lt;a href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt; and &lt;a href="https://wsbctechnicalblog.github.io/azure-devops-pipeline-oss-v2-1-flow.html"&gt;Azure DevOps Pipeline OSS v2.1 Flow&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In this post, I will only answer the question of &lt;strong&gt;WHY&lt;/strong&gt; and let you peruse our other posts for the implementation details.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY are we moving away from and disabling classic Azure Pipelines?&lt;/h1&gt;
&lt;p&gt;The following image shows that &lt;strong&gt;Classic&lt;/strong&gt; pipelines are the new name for the pipelines that started with MSBuild in Team Foundation Server (TFS) 2005, developed to XAML-based pipelines in TFS 2010, and finally to visual JSON-based pipelines in TFS 2015. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Classic" src="/images/back-to-basics-why-are-we-moving-to-v2-blueprints-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In 2013 Microsoft added the InRelease product, from InCycle Software, to include deployment in the build tools. The visual editor to create and configure the Classic Azure Pipelines was a useful feature for engineers who had problems with the changes of MSBuild, XAML, and JSON formats.&lt;/p&gt;
&lt;p&gt;We are leaving the Classic pipelines behind for these reasons:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The term "&lt;strong&gt;classic&lt;/strong&gt;" does not convey innovation or long-term support confidence.&lt;/li&gt;
&lt;li&gt;Although the &lt;strong&gt;visual editor&lt;/strong&gt; is quite user friendly, the json it creates behind the scenes is complicated. A basic hello world classic build pipeline creates a JSON file of a 170+ lines. The same thing in YAML, takes around 20 lines, or less.&lt;/li&gt;
&lt;li&gt;The differences between classic &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;release&lt;/strong&gt; Azure Pipelines and especially their related REST APIs.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;operational effort and cost&lt;/strong&gt; to maintain hundreds of classic Azure Pipelines is huge. Operational automation has worked well, but also taken a lot of time - time we could use to enable our engineers. &lt;/li&gt;
&lt;li&gt;Ensuring &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt; in pipeline configurations and permissions is hard, leading to many unique (snowflakes) pipelines, which again take away from innovation.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;By the end of this year, our classic pipelines will be locked, so teams can still use them, but not modify them or make new ones.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;WHY are we moving to YAML-based Azure Pipelines?&lt;/h1&gt;
&lt;p&gt;The YAML pipeline introduced an exciting new era, launching in early 2019 with TFS 2019. It signaled a CI/CD solution designed from scratch on an INNOVATIVE whiteboard.&lt;/p&gt;
&lt;p&gt;The main benefits of switching to YAML are:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt; - instead of cluttering your &lt;strong&gt;classic&lt;/strong&gt;** release pipelines with everything you can think of, the YAML pipelines focus on your essential steps to build and deploy your solution.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*-as-code&lt;/strong&gt; - allows us to adopt pipeline-as-code (p-a-c) and configuration-as-code (c-a-c).  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enable engineers&lt;/strong&gt; to evaluate and suggest improvements and innovations, based on transparency, and using a familiar tool - "pull requests".  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Re-use by using templates&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Centralized management&lt;/strong&gt; - Environments give us centralized control. It is simpler to manage checks in one place for an environment, like production, than to do it individually for each &lt;strong&gt;classic&lt;/strong&gt; pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;WHY are we promoting our v2 CI/CD Azure Pipeline blueprints?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Self-service automation&lt;/strong&gt; is the solution that lets engineers do things by themselves without needing help from someone else who knows the process or has the permissions. We showed our engineers that they can “click” a button, have a cup of coffee, and self-service does the following in less than 30 seconds:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a new Azure Repo, using a &lt;strong&gt;consistent&lt;/strong&gt; name pattern.&lt;/li&gt;
&lt;li&gt;Put an application-type sample solution in the Azure Repo, that uses guardrails, guidelines, and shared components, like &lt;strong&gt;consistent&lt;/strong&gt; logging package.&lt;/li&gt;
&lt;li&gt;Put an application type v2 CI/CD blueprint, that creates a &lt;strong&gt;consistent&lt;/strong&gt; integration (build) and deployment workflow.&lt;/li&gt;
&lt;li&gt;Run the pipeline, which builds the sample application to validate the environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the engineers come back from their coffee break, they can start working on features, knowing that they have a &lt;strong&gt;consistent&lt;/strong&gt;, &lt;strong&gt;standardized&lt;/strong&gt;, and &lt;strong&gt;working&lt;/strong&gt; environment. &lt;strong&gt;Empowerment!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Self-service automation hides the automation, complexity, process, and does the automation for the engineer. It should be as easy as a vending machine. Pick what you want; press a button; and it's done.  &lt;/p&gt;
&lt;p&gt;Additional benefit? Security, quality, and operational scanning, monitoring, and troubleshooting are much &lt;strong&gt;easier&lt;/strong&gt; and &lt;strong&gt;cost effective&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;application-type v2 CI/CD Blueprints&lt;/strong&gt; are designed to support and enhance automation, which requires processes that are stable and consistent and allows them to be quick and simple. This is why we are prioritizing and developing this innovation. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;I hope that this post clarifies the &lt;strong&gt;WHY&lt;/strong&gt;. If not, let us have a discussion below.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="101"></category></entry><entry><title>Back to Basics: Pull-Request (PR) Validations</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-pr-validations.html" rel="alternate"></link><published>2024-02-12T00:00:00-08:00</published><updated>2024-02-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-12:/back-to-basics-pr-validations.html</id><summary type="html">&lt;p&gt;Why run a validation build in your pull-request?&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; provides powerful &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure Repos&lt;/a&gt;, whicyh in turn support feature-rich pull requests, which allow us to perform supervised changes, reviews, and code merges. Again we covered pull requests in previous blog posts, such as &lt;a href="https://wsbctechnicalblog.github.io/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;, &lt;a href="https://wsbctechnicalblog.github.io/pull-request-empowered-by-engineering-practices.html"&gt;Pull Request empowered by engineering practices&lt;/a&gt;, and &lt;a href="https://wsbctechnicalblog.github.io/pull-requests-friend.html"&gt;Pull Request is your friend not foe!&lt;/a&gt;, which allows us to be laser focused on "why bother with a validation build?"&lt;/p&gt;
&lt;h1&gt;WHY do we enforce branch policies?&lt;/h1&gt;
&lt;p&gt;Azure DevOps makes sure that our engineering process follows the technical governance with consistent policies. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="PR Types" src="/images/back-to-basics-pr-validations-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The illustration depicts three of many possible pull request workflows. In the first one, we make a feature branch, change the code, and commit the changes directly or through a pull request, without any supervision. The second one adds a &lt;strong&gt;human code&lt;/strong&gt; review, which can be used for verification, peer reviews, knowledge sharing, and collaboration. Although this reduces the chance of a failure after the merge, we depend on the review to be careful, not just a “click.” The third flow adds a &lt;strong&gt;verification&lt;/strong&gt; step, where we can include &lt;strong&gt;automated validations&lt;/strong&gt; defined as branch policies, such as minimum number of reviewers, security and other scan results, and linking the code changes to one or more work items. &lt;/p&gt;
&lt;p&gt;Branch policies set at the Azure repos root and tightened at the repo level are applied in the pull-request validations and improve quality and alignment with guardrails, policies, and/or governance.&lt;/p&gt;
&lt;p&gt;For example, we always require these as a minimum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Case Sensitivity to prevent case-sensitivity conflicts.&lt;/li&gt;
&lt;li&gt;Reserved Names to prevent forbidden file and folder names.&lt;/li&gt;
&lt;li&gt;Maximum path length to prevent paths that may exceed Windows or Linux path lengths.&lt;/li&gt;
&lt;li&gt;Minimum number of reviewers. (2)&lt;/li&gt;
&lt;li&gt;Requestor can approve. (No)&lt;/li&gt;
&lt;li&gt;Reset code reviewer votes when there are recent changes. (Yes)&lt;/li&gt;
&lt;li&gt;Check for linked work items. (Yes)&lt;/li&gt;
&lt;li&gt;Check for comment resolution. (Yes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we suggest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build validation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://learn.microsoft.com/en-us/azure/devops/repos/git/about-pull-requests?view=azure-devops#branch-policies-and-pull-requests"&gt;Branch policies and pull requests&lt;/a&gt; for more details on branch policies.&lt;/p&gt;
&lt;h1&gt;WHY do we recommend a validation build?&lt;/h1&gt;
&lt;p&gt;Simple ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Add BUild Validation" src="/images/back-to-basics-pr-validations-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By adding a verification build, as shown, we can ensure that all the criteria have been met, and that the changes are buildable. We have more confidence that the continuous integration build will not break unexpectedly after the merge.&lt;/p&gt;
&lt;h1&gt;WHY v2 CI/CD Blueprints complement PR validations&lt;/h1&gt;
&lt;p&gt;The v2 CI/CD blueprints have many features and innovations, which you should explore. As explained in &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part11.html"&gt;Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request&lt;/a&gt;, the blueprints can detect when they run in a pull request (as a validation build) and only do the CI part and skip the CD part. This lets teams use the &lt;strong&gt;same pipeline&lt;/strong&gt; for both the build validation and the continuous integration and delivery. &lt;strong&gt;Simple!&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thoughts? Questions? Start a discussion below.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Kanban</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-kanban.html" rel="alternate"></link><published>2024-02-09T00:00:00-08:00</published><updated>2024-02-09T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-09:/back-to-basics-kanban.html</id><summary type="html">&lt;p&gt;"Kanban" is Japanese for "visual card" or "signal."&lt;/p&gt;</summary><content type="html">&lt;p&gt;Kanban is a method of visually managing work processes, often used in lean and just-in-time production. It was developed by Taiichi Ohno for Toyota as a way to improve manufacturing efficiency and the word &lt;strong&gt;Kanban&lt;/strong&gt;&lt;em&gt; means &lt;/em&gt;&lt;em&gt;visual card&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;signal&lt;/em&gt;* in Japanese. The system uses visual cues to initiate and manage workflow processes.&lt;/p&gt;
&lt;p&gt;Main components of a Kanban system and a few reference links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kanban Board&lt;/strong&gt; - &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;, &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;, &lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;, &lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips - Stop messing with our backlog!&lt;/a&gt;, &lt;a href="/azure-boards-tips-retain-hierarchy-with-filter.html"&gt;Azure Boards Tips - Retain hierarchy with filter&lt;/a&gt;, &lt;a href="/azure-devops-dependencies.html"&gt;Visualizing work item dependencies in Azure Boards&lt;/a&gt;, and &lt;a href="/agile-planning-choice.html"&gt;Enable Agile, Kanban, Scrum, or SAFe with Azure DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cards&lt;/strong&gt; - &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops&amp;amp;tabs=agile-process"&gt;About work items and work item types&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work in Progress (WIP)&lt;/strong&gt; - &lt;a href="/back-to-basics-wip-limit.html"&gt;Back to Basics: WIP Limit&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limits  Signals (States)&lt;/strong&gt; - &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops&amp;amp;tabs=agile-process"&gt;About workflow states in backlogs and boards&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Kanban Principles and Practices&lt;/h1&gt;
&lt;p&gt;An extract from one of our quick reference posters that covers the basic Kanban Principles and Practices:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Principles and Practices" src="../images/back-to-basics-kanban-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Bad Smoke Signals&lt;/h1&gt;
&lt;p&gt;Here are some signs that you should examine your flow and try to make it more efficient:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bad Flows" src="../images/back-to-basics-kanban-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You want a smooth flow of cards (work) across the entire boards, with no visual bottlenecks (delays), or states (columns) that are idling.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Actionable Cards&lt;/h1&gt;
&lt;p&gt;It annoys me when I have to deal with a card that I cannot act on. Here are cards that should be discarded or should cause the &lt;a href="https://en.wikipedia.org/wiki/Andon_(manufacturing)"&gt;Andon cord&lt;/a&gt; to be pulled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title is cryptic, description and acceptance critera are blank, and card is tagged as an urgent dependency.&lt;/li&gt;
&lt;li&gt;Title is actionable, but description and acceptance criteria are marked as "to be defined" (TBD).&lt;/li&gt;
&lt;li&gt;Title and description are actionable, but acceptance criteria is blank or TBD.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My team does not accept these cards onto our board anymore. We send back any card that is added to our board without our consent, with a polite "non actionable" reply. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-alert.png"&gt;
An actionable &lt;strong&gt;ACCEPTANCE CRITERIA&lt;/strong&gt; is Key! Acceptance criteria serve as essential conditions for the approval of a Kanban card (Azure DevOps Work Item)[https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops&amp;amp;tabs=agile-process], either met or not met - it is a binary 1 or 0! They require &lt;strong&gt;clarity&lt;/strong&gt;, &lt;strong&gt;conciseness&lt;/strong&gt;, &lt;strong&gt;user-focus&lt;/strong&gt;, and &lt;strong&gt;testability&lt;/strong&gt;: Statements are formulated to be verifiable, allowing for the creation of tests that objectively assess whether the criteria are met**. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Examples of an acceptance criteria for a complete rocket: &lt;/p&gt;
&lt;h3&gt;GOOD acceptance criteria&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Propulsion&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Propulsion system specifications are clearly documented.&lt;/li&gt;
&lt;li&gt;Successful static firing tests confirm thrust performance and stability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigation controls accurately adjust the rocket's trajectory in a simulated space environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Launch Sequence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concise checklist guides the rocket from ignition to the designated orbit.&lt;/li&gt;
&lt;li&gt;Emergency procedures are summarized for quick reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Payload&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Payload deployment ensures the safe release of the payload into the specified orbit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mission Success&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Success is defined by the payload achieving and maintaining the intended orbit.&lt;/li&gt;
&lt;li&gt;Safety features prioritize both the rocket launch and the protection of the payload.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;BAD acceptance criteria&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Blank.&lt;/li&gt;
&lt;li&gt;To be defined (TBD).&lt;/li&gt;
&lt;li&gt;Rocket launches successfully.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Minimal cards&lt;/h3&gt;
&lt;p&gt;To avoid garbage entering your system and your Kanban workflow, here is a simple, yet effective card:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bad Flows" src="../images/back-to-basics-kanban-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;You can use &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; to apply Kanban principles, whether you work with Kanban only or combine Kanban (operational support) and Scrum (innovation), like we do. I am a visual thinker, so I find the visual signals from Kanban very helpful. Have fun!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Back to Basics: WIP Limit</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-wip-limit.html" rel="alternate"></link><published>2024-02-05T00:00:00-08:00</published><updated>2024-02-05T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-05:/back-to-basics-wip-limit.html</id><summary type="html">&lt;p&gt;Dealing with a Kanban Board meltdown, by controlling the work in progress.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from where we left off in  &lt;a href="/back-to-basics-batch-size.html"&gt;Back to Basics: Batch Size&lt;/a&gt; and the following warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - I am intentionally skipping a very important and related topic, which will be covered in the follow-up blog post - &lt;strong&gt;Work in-Progress&lt;/strong&gt; (WIP). Without it, leaning towards smaller batch sizes would lead to a nuclear type reaction (a process in which two particles collide, to produce one or more particles), followed by a similar meltdown.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will waste no time on covering the Azure DevOps Board - refer to &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;, &lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;, &lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips - Stop messing with our backlog!&lt;/a&gt;, and &lt;a href="/azure-boards-tips-retain-hierarchy-with-filter.html"&gt;Azure Boards Tips - Retain hierarchy with filter&lt;/a&gt; for a quick introduction.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The rocket factory wakes up&lt;/h1&gt;
&lt;p&gt;We embark on our exploration equipped with two rocket orders and three additional spare engines, anticipating the possibility of engine failure during hot staging. We start by placing the associated cards onto our visual &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure DevOps Board&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with 2 rockets ordered" src="../images/back-to-basics-wip-limit-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our team promptly initiates the assembly process for all engines, including the first and second stages. We depend on vendors to provide critical and secretive parts of the payloads, and to streamline this process, we will temporarily place these cards in the ORIENT column while we clarify the specific requirements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with 2 rockets ordered" src="../images/back-to-basics-wip-limit-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;The rocket factory melts down&lt;/h1&gt;
&lt;p&gt;Let us assume that to assemble a low atmosphere engine we need 1x unit of work, for the vacuum engines we need 2x units of work, for the stages we need 3x units of work, and for the payload, due to its complexity 4-5 units of work.&lt;/p&gt;
&lt;p&gt;A probable sequence of events would produce lots of low atmosphere and vacuum engines, which would produce a bottleneck in the integration stage, and to a lesser degree in the quality control stage. The hot staging teams would be sitting around, playing poker and reading the latest news about agility, which raises their frustration and does not allow the assembly factory to deliver value consistently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with meltdown" src="../images/back-to-basics-wip-limit-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We must control the progression of work to guarantee a seamless and uninterrupted delivery of value across every stage, steering clear of any abrupt surges or bottlenecks at particular points in the process.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Work-In-Progress (WIP) limit to the rescue&lt;/h1&gt;
&lt;p&gt;Welcome WIP limit, aka Work In Progress limit.&lt;/p&gt;
&lt;p&gt;WIP, or Work In Progress, serves as a constraint within the realms of agile and lean methodologies. It signifies the upper limit of concurrently active units of work within a designated stage of the rocket assembly value stream. Enforcing WIP limits allows us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Optimize Workflow&lt;/strong&gt; - ensure that tasks progress through each stage smoothly and efficiently.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prevent Overloading Teams and Processes&lt;/strong&gt; - contribute to sustained team effectiveness and prevent bottlenecks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize Task Completion&lt;/strong&gt; - encourage teams to focus on completing existing tasks before initiating new ones, reducing multitasking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhance Overall Productivity&lt;/strong&gt; - emphasis on completing tasks and controlling flow improves productivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, enforcing WIP limits is a strategic practice aimed at creating a balance between task initiation and completion, fostering efficiency, and contributing to the smooth flow of work through the entire value stream.&lt;/p&gt;
&lt;h1&gt;Rocket Assembly with WIP limits&lt;/h1&gt;
&lt;p&gt;WIP limits are determined based on factors such as team &lt;strong&gt;capacity&lt;/strong&gt;, resource &lt;strong&gt;availability&lt;/strong&gt;, and the overall *&lt;em&gt;goals&lt;/em&gt; of the project. Adjusting WIP limits help us fine-tune our process, change circumstances, and improve our ability to deliver value consistently.&lt;/p&gt;
&lt;p&gt;Let us set the following WIP limits on the assembly stages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assembly Engines = 3&lt;/strong&gt; - limit the number of engines being assembled concurrently to three.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assembly Other = 2&lt;/strong&gt; - limit the number of other concurrent assemblies to two.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quality Control = 3&lt;/strong&gt; - limit the number of quality concurrent quality assurance to three.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration = 5&lt;/strong&gt; - limit the number of concurrent integration to five.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we were to replay the operations in our factory, we could seamlessly integrate and roll out the first and second stages for rocket A for a hot stage test. Subsequently, we would repeat this process for rocket B, preparing it for its hot staging phase. The synchronicity of these efforts would result in both rockets being completed, poised and waiting for their payload. It sets the stage for an eagerly anticipated countdown and a spectacular launch once the final components are in place. In parallel we also complete the spare engines, which allow us to fail-fast in hot staging and replace faulty engines, before the payloads are delivered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with 2 rockets ordered" src="../images/back-to-basics-wip-limit-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Closing note&lt;/h1&gt;
&lt;p&gt;Let us conclude by exploring two Kanban posters from our comprehensive quick reference collection. These visual aids will help illustrate key ingredients for effectively embracing the fundamentals:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Kanban Board" src="../images/back-to-basics-wip-limit-5.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kanban Basics" src="../images/back-to-basics-wip-limit-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Back to Basics: Batch Size</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-batch-size.html" rel="alternate"></link><published>2024-01-31T00:00:00-08:00</published><updated>2024-01-31T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-31:/back-to-basics-batch-size.html</id><summary type="html">&lt;p&gt;Balancing noise and agility with smaller batch sizes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a new series of posts, where we will go back to basics. We will start with the "smaller batch size" concept, which is well defined and documented in various Agile publications, such as the Scaled Agile Framework &lt;a href="https://v5.scaledagileframework.com/visualize-and-limit-wip-reduce-batch-sizes-and-manage-queue-lengths/"&gt;Principle #6 – Visualize and limit WIP, reduce batch sizes, and manage queue lengths&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Adopting smaller batch sizes aligns well with and complements agile principles. Small batches facilitate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rapid experimentation and iteration.&lt;/li&gt;
&lt;li&gt;Quick feedback loops.&lt;/li&gt;
&lt;li&gt;Reduced development times.&lt;/li&gt;
&lt;li&gt;Simplicity and flexibility.&lt;/li&gt;
&lt;li&gt;Optimised capacity management.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us visualize a few example and spot these advantages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-alert.png"&gt;
&lt;strong&gt;CAUTION&lt;/strong&gt; - I am intentionally skipping a very important and related topic, which will be covered in the follow-up blog post - &lt;strong&gt;Work in-Progress&lt;/strong&gt; (WIP). Without it, leaning towards smaller batch sizes would lead to a nuclear type reaction (a process in which two particles collide, to produce one or more particles), followed by a similar meltdown.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Build a rocket&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us construct a straightforward two-stage rocket featuring a total of three engines and a payload, represented by six (6) components. This intentionally simplified rocket design aims to maintain the clarity and simplicity of this blog post.&lt;/p&gt;
&lt;p&gt;We define our batch size as six (6), indicating our intention to devour the watermelon in a single bite or, in this context, to construct the rocket in one seamless process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This implies that all our teams commence work on the rocket simultaneously, disappear during the processing period (cycle time), and re-emerge with the finished product — the six-piece rocket. If another request for a rocket came in during the processing time, it would have to wait a very, very long time (lead time), before anyone takes note. &lt;/p&gt;
&lt;p&gt;See &lt;a href="https://wsbctechnicalblog.github.io/the-problem-with-big-batches.html"&gt;The problem with big batches&lt;/a&gt; for another viewpoint.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;p&gt;While I, like others, instinctively engage in this behavior, I struggle to identify any tangible benefits. I always get burnt!&lt;/p&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prolonged lead time&lt;/strong&gt;: The duration required for the process to construct a rocket, spanning from the initiation of your request to the moment it stands ready on the launch pad.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extended cycle time&lt;/strong&gt;: The duration required to complete one cycle to construct a rocket, from when the team of engineers starts work on the rocket to the moment it stands ready on the launch pad. Excludes placing your order and waiting for the team to be available to consider your order. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gradual and high risk of failures&lt;/strong&gt;: When a rocket is shipped, and either the end-users reject it as not meeting expectations, or, worse, it malfunctions on the launch pad, the cost of failure, learning, and iterating becomes exceptionally high.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delayed feedback&lt;/strong&gt;: With longer feedback loops, issues go unnoticed. See &lt;em&gt;Gradual and high risk of failures&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduced flexibility&lt;/strong&gt;: Longer cycle times hinder ability to pivot quickly. Making an engine change when the rocket is ready to roll-out to the launch pad is expensive and too late.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complex integration&lt;/strong&gt;: Integrating complete or near complete rockets can be challenging and error-prone, especially with &lt;em&gt;Gradual and high risk of failures&lt;/em&gt; at the back of our mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Build a rocket in two stages&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket in two stages" src="/images/back-to-basics-batch-size-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By reducing the batch size to three (3), we gain the flexibility to construct the 1st and 2nd stages independently, potentially even in parallel if our capacity allows. This approach enables the team to avoid blockages, as the team responsible for the 2nd stage can proceed without waiting for the 1st stage to be completed, particularly when integration is separated from development. Rather than reiterating the drawbacks, it is evident that this adjustment enhances the drawbacks mentioned earlier. We are now observing the benefits of smaller batches, such as the ability to fail fast, pivot swiftly, and utilize idle time for innovation and improvement.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Build a rocket in small batches&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket in small batches" src="/images/back-to-basics-batch-size-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By reducing the batch size to one, we see magic starting to happen. Previous cons turn into pros, such as quick feedback loops, adaptability, reduced risk, improved efficiently and dependency management, better resource utilization, continuous experimentation and improvement, and vibrant collaboration. We, for example, realise that engine (1) and (2) are identical and interchangeable, that although engines 1/2 (lower-atmosphere nozzle) and 5 (vacuum nozzle) are different, their parts are identical and interchangeable.&lt;/p&gt;
&lt;p&gt;Dedicate some time to tuning into SpaceX's live streams from Boca Chica, and you will witness an ongoing process of experimentation, relentless improvement, and the application of small batch sizes in the construction of the Starship—the epitome of rockets.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;BUT, there is a catch&lt;/h1&gt;
&lt;p&gt;As highlighted in the cautionary note, management of smaller batch sizes is important to prevent any adverse repercussions. Consider the current scenario where engines are being produced in succession. How do we effectively integrate, test, and glean insights from the rigorous &lt;strong&gt;hot stage&lt;/strong&gt; tests, ensuring each stage's functionality and reliability? The challenge lies in avoiding the potential need to extensively re-engineer a substantial number of completed engines.&lt;/p&gt;
&lt;p&gt;Our goal is to steer clear of transforming into a rigid 100% "sausage factory." Instead, we aspire to embrace an 80:20 mindset, dedicating 80% of our efforts to delivering tangible value and reserving 20% for essential activities like experimentation, continuous learning, grooming, and allowing ourselves a moment to take a deep breath. This balanced approach ensures both productivity and innovation thrive within our rocket assembly value streams.&lt;/p&gt;
&lt;p&gt;Stay tuned for Part 2, where we delve into the significance of &lt;strong&gt;Work In Progress&lt;/strong&gt; (WIP) limits.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I chose rockets because of my deep passion for space programs. I have closely followed both the Space Launch System (SLS) and SpaceX initiatives with keen interest. While both programs deliver exceptional hardware, there is a stark contrast in their approaches. One produces approximately one rocket annually at a significant cost, whereas the other achieved a remarkable feat of launching 98 rockets in 2023 — equivalent to a launch every 3.7 days. Moreover, the latter has demonstrated mastery in the realms of experimentation, rapid prototyping, and the groundbreaking concept of reusable rockets. It is important to recognize the distinct positions each program holds when considering the three simple examples above.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scaledagileframework.com/"&gt;Scaled Agile framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nasa.gov/humans-in-space/space-launch-system/"&gt;Space Launch System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.spacex.com/"&gt;SpaceX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Why Bugs are NOT Technical Debt</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-why-bugs-are-not-technical-debt.html" rel="alternate"></link><published>2024-01-29T00:00:00-08:00</published><updated>2024-01-29T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-29:/engineering-practices-why-bugs-are-not-technical-debt.html</id><summary type="html">&lt;p&gt;why software bugs should not be categorically considered technical debt.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Rethinking the Analogy: Software Bugs and Technical Debt&lt;/h1&gt;
&lt;p&gt;In the realm of software development, the term "technical debt" has gained significant traction as a metaphor to describe the long-term consequences of prioritizing rapid development over code quality.  However, one area where the analogy may fall short is in associating software bugs directly with technical debt. In this blog post, we'll explore why software bugs should not be categorically considered as technical debt and delve into the nuances that differentiate the two.&lt;/p&gt;
&lt;h1&gt;Defining Technical Debt:&lt;/h1&gt;
&lt;p&gt;Technical debt is often defined as the accumulated cost of suboptimal design and implementation choices made during the software development process. These choices, akin to financial debt, may lead to future challenges, increased maintenance costs, and hindered development velocity. Common examples include shortcuts, lack of documentation, and architectural compromises.  When left unaddressed, technical debt accumulates to the point where new feature and functionality become increasingly difficult or impossible to accomplish.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Technical Debt" src="../images/engineering-practices-why-bugs-are-not-technical-debt-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;The Bug Dilemma:&lt;/h1&gt;
&lt;p&gt;While it's undeniable that software bugs can contribute to increased maintenance efforts and compromise user experience, categorizing all bugs as technical debt oversimplifies the complexity of software development. Bugs can arise from various sources, including unforeseen interactions, external dependencies, or changing requirements. Unlike technical debt, which stems from conscious choices, bugs are not always a result of shortcuts or suboptimal decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Technical Debt" src="../images/engineering-practices-why-bugs-are-not-technical-debt-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Nuances in Bug Classification:&lt;/h1&gt;
&lt;p&gt;To understand the distinction between bugs and technical debt, it's essential to classify bugs based on their origins and impact. Some bugs are indeed a consequence of technical debt � the result of hasty decisions or deferred improvements. However, many bugs are simply a natural part of the software development process, emerging from the inherent complexity of creating and maintaining software systems.&lt;/p&gt;
&lt;h1&gt;Evolutionary Nature of Software:&lt;/h1&gt;
&lt;p&gt;Software is not static; it evolves to meet changing requirements, adapt to new technologies, and address emerging challenges. Bugs, too, are part of this evolutionary process. Treating all bugs as technical debt may discourage innovation and hinder the agility required to respond to evolving user needs.&lt;/p&gt;
&lt;h1&gt;Managing Bugs Effectively:&lt;/h1&gt;
&lt;p&gt;Rather than labeling all bugs as technical debt, it is more constructive to adopt a nuanced approach to bug management. Prioritize bug fixes based on their impact on users, system stability, and alignment with current development priorities. Utilize effective testing strategies, continuous integration, and proactive debugging practices to minimize the occurrence of bugs.&lt;/p&gt;
&lt;h1&gt;Conclusion:&lt;/h1&gt;
&lt;p&gt;While technical debt remains a valuable concept for emphasizing the importance of code quality and design decisions, categorizing all software bugs under this umbrella oversimplifies the dynamic nature of software development. Bugs, inherent to the complex and evolving nature of software, should be managed pragmatically, with a focus on their impact and relevance to current development goals. By adopting a nuanced perspective, software teams can strike a balance between addressing bugs and maintaining a sustainable development pace.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="code-quality"></category></entry><entry><title>Why Mutant Testing?</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-why-mutant-testing.html" rel="alternate"></link><published>2024-01-24T00:00:00-08:00</published><updated>2024-01-24T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-24:/engineering-practices-why-mutant-testing.html</id><summary type="html">&lt;p&gt;What is Mutant testing and why is it so valuable?&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Understanding Mutant Testing&lt;/h1&gt;
&lt;p&gt;In the realm of software development, Mutant Testing is a crucial practice that goes beyond traditional Unit Testing.  When I write unit tests, I always have in the back of my mind a nagging question – what have I missed?  It’s like playing chess with yourself, no matter how you spin the board, you always have your own perspective, and it is very difficult to divorce yourself from that original viewpoint.  You will test what you coded for, and what you expect – and its tricky to see otherwise.&lt;/p&gt;
&lt;p&gt;Mutant testing, also known as mutation testing, is a software testing technique designed to evaluate the effectiveness of a test suite by introducing artificial faults or mutations &lt;strong&gt;into the source code itself&lt;/strong&gt; (only temporarily!). The goal is to assess the ability of the existing tests to detect these mutations. If the tests can identify the mutations, it indicates that the test suite is robust; otherwise, it implies potential weaknesses in the testing strategy.&lt;/p&gt;
&lt;p&gt;Having that in the back of our minds, let's delve into why developers should embrace Mutant Testing and why relying solely on Unit Tests might not be sufficient.  Put your goggles on, we are taking a deep dive to explore!&lt;/p&gt;
&lt;h1&gt;So, Why Mutant Testing?&lt;/h1&gt;
&lt;p&gt;Having discovered Mutant testing, I have come to appreciate what it can really do when used correctly.  While this list is not exhausted, here are the top 5 reason why I would adopt Mutant testing into your development practice:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Uncovering Weaknesses in Unit Tests:&lt;/strong&gt; 
•   While Unit Tests are effective in validating specific functionalities, they might not catch all potential issues. Mutant Testing introduces variations or 'mutants' in the code to simulate different scenarios. This helps identify weaknesses in existing Unit Tests, ensuring they are robust and cover a broader range of scenarios.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Enhancing Code Quality:&lt;/strong&gt;
•   Mutant Testing acts as an additional layer of scrutiny for your codebase. By introducing small changes (mutations) and checking if tests detect them, developers can enhance the overall quality of the code. This process helps catch subtle bugs and improves the reliability of the software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Detecting Redundant Code:&lt;/strong&gt;
•   Mutant Testing often reveals redundant or dead code that Unit Tests may overlook. It prompts developers to reconsider the necessity of certain code segments, leading to cleaner and more efficient code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Strengthening Test Suites:&lt;/strong&gt;
•   Mutant Testing is an excellent way to ensure that your test suite is comprehensive. By challenging the existing tests with mutated code, you can identify areas where the test coverage is lacking. This, in turn, helps in building a more robust and reliable test suite.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Building Confidence in Code Changes:&lt;/strong&gt;
•   Developers often make changes to the codebase, and Mutant Testing provides an extra layer of confidence before committing those changes. Knowing that mutants are caught by tests provides assurance that modifications are less likely to introduce unforeseen issues.&lt;/p&gt;
&lt;h1&gt;Why Just Having Unit Tests Isn't Good Enough&lt;/h1&gt;
&lt;p&gt;To further compound the benifits of Mutant testing, lets examine why Unit Tests alone aren't good enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Limited Scenario Coverage:&lt;/strong&gt;
•   Unit Tests primarily focus on individual components in isolation. While they are essential, they might not cover complex interactions between different parts of the code. Mutant Testing broadens the scope by examining the combined effects of mutations across the entire codebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. False Sense of Security:&lt;/strong&gt;
•   Relying solely on Unit Tests can create a false sense of security. Developers may assume that passing unit tests mean the code is flawless. Mutant Testing acts as a reality check, challenging this assumption and ensuring a more comprehensive validation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Evolution of Code Complexity:&lt;/strong&gt;
•   As software evolves, the complexity of the codebase increases. Unit Tests, while critical, might struggle to keep up with this growing complexity. Mutant Testing provides a dynamic approach to continuously evaluate the code against evolving standards.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In conclusion, Mutant Testing complements Unit Testing by offering a more comprehensive assessment of the code's robustness. It is a powerful tool in the developer's arsenal, ensuring that software not only meets the requirements but also withstands the challenges posed by mutations in the codebase.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Why release on demand?</title><link href="https://wsbctechnicalblog.github.io/why-release-on-demand.html" rel="alternate"></link><published>2024-01-19T00:00:00-08:00</published><updated>2024-01-19T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-19:/why-release-on-demand.html</id><summary type="html">&lt;p&gt;Exploring the deployment rings, continuous delivery and deployment, to discuss release on demand.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Before I get into the main subject of this blog post – why our goal is to release on demand – I want to quickly talk about deployment rings, continuous delivery and deployment, and what they mean. These topics are all connected in the DevOps DNA and backed by Azure DevOps, the foundation of our software development lifecycle (SDLC).&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Deployment Rings - managing impact!&lt;/h1&gt;
&lt;p&gt;The concept of ring-based deployment, initially introduced in Jez Humble's "Continuous Delivery" as canary deployments, strategically minimizes the impact on end users by incrementally and systematically rolling out changes in production. Employing deployment rings allows for a thorough assessment of the impact, often referred to as the "blast radius," achieved through meticulous observation, testing, telemetry analysis, and crucially, user feedback. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rings" src="/images/engineering-practices-why-release-on-demand-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This approach, used to deploy Azure DevOps, enables the gradual deployment of binary bits, facilitating the concurrent operation of multiple production releases. For more detail, peruse &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Continuous Delivery and Deployment - deploying to one or more environments!&lt;/h1&gt;
&lt;p&gt;In the distant year of 2016, I sought insights from my ALM Ranger colleague to delineate the distinction between continuous delivery and continuous deployment. &lt;/p&gt;
&lt;p&gt;Here is what &lt;a href="https://www.linkedin.com/in/darquewarrior/"&gt;Donovan Brown&lt;/a&gt; had to say: "&lt;em&gt;Continuous Delivery is the ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one or more environments&lt;/strong&gt; automatically. There is a subtle difference between Continuous &lt;strong&gt;Delivery&lt;/strong&gt; and Continuous &lt;strong&gt;Deployment&lt;/strong&gt;. The latter is to a single environment. A small team might only implement Continuous Deployment because each change goes directly to production. Continuous Delivery is moving code through &lt;strong&gt;several&lt;/strong&gt; environments, ultimately ending up in production, which may include automated UI, load and performance tests and approvals along the way.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;PS: Donovan is also the author of the infamous definition of DevOps I am still using to this day - &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;What is DevOps&lt;/a&gt;. Collectively, we acknowledged the prevailing notion that DevOps transcends being a product; it is not something one can simply purchase or install. Yet, this perception took an interesting turn with the advent of Azure DevOps.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Deployment versus Release - giving the business and users a choice!&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt; is the process of moving a build or application from one environment to another. It involves copying files, configuring settings, and setting up the infrastructure necessary for the application to run. In Azure DevOps, deployment usually refers to the tasks involved in taking an artifact and installing it in different environments such as development, testing, and production.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Release&lt;/strong&gt;, on the other hand, is the process of making a version of your application available to users or customers. It is the end result of the development and testing process and signifies that a particular set of features or changes is ready for production use.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why Release on Demand?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Release on Demand&lt;/strong&gt; is an agile software development method to continuously provide new features, improvements, or fixes and empower business and delighted end-users to decide when the changes are available and visible. It empowers us to adjust to changing requirements and be more responsive.&lt;/p&gt;
&lt;p&gt;For example, Microsoft continuously rolls our &lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; updates. With a flip of a feature flag / toggle they can switch the features on or off. Delighted end-users, such as I, can even decide when to enable and use public preview features, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Flags" src="/images/engineering-practices-why-release-on-demand-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Peruse &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; and &lt;a href="https://scaledagileframework.com/release-on-demand/"&gt;Release on Demand - Scaled Agile Framework&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Another option for releasing changes, besides feature flags or toggles, is the BLUE|GREEN deployment method – or using it along with feature flags. It lets you deploy and test your changes in other envi­ronments, while keeping a current (blue) version active, and having a new (green) version ready. If the green environment passes all the checks and business wants to launch all the changes, you can switch the BLUE and GREEN environments. GREEN becomes BLUE and goes live. BLUE becomes GREEN and is used for testing new versions. Simple!&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/connect/vsts-the-road-to-continuous-delivery-with-visual-studio-team-services"&gt;VSTS - The Road to Continuous Delivery with Visual Studio Team Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, WHY bother? Here are several advantages that come to mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Customer&lt;/strong&gt;-centric delivery!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous&lt;/strong&gt; delivery of features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental&lt;/strong&gt; and &lt;strong&gt;manageable&lt;/strong&gt; release of features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt; for business and IT.&lt;/li&gt;
&lt;li&gt;Encourage collaboration, &lt;strong&gt;feedback&lt;/strong&gt;, and a &lt;strong&gt;fail-fast&lt;/strong&gt; mindset.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2016/august/devops-applying-devops-to-a-software-development-project"&gt;Applying DevOps to a Software Development Project&lt;/a&gt; / August 2016&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/connect/vsts-the-road-to-continuous-delivery-with-visual-studio-team-services"&gt;VSTS - The Road to Continuous Delivery with Visual Studio Team Services&lt;/a&gt; / December 2017&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; / February, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/may/devops-any-language-any-platform-with-azure-devops-projects"&gt;Any Language, Any Platform with Azure DevOps Projects&lt;/a&gt; / May 2018&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="engineering"></category><category term="automation"></category></entry><entry><title>What are all those Warning and Information outputs from a build and why should I care if its not an error?</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-warnings-information-messages.html" rel="alternate"></link><published>2024-01-16T00:00:00-08:00</published><updated>2024-01-16T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-16:/engineering-practices-warnings-information-messages.html</id><summary type="html">&lt;p&gt;Reasons why is it important to pay attention to all the warning and information message generated when compiling your code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my fourth decades of experience as a software engineer, paying close attention to warnings and information messages generated during the compile step has proven to be immensely important. Here are some reasons why I find it crucial:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Code Quality and Best Practices:&lt;/strong&gt; - I've observed that compiler warnings often signal potential issues in the code that might not hinder compilation but can lead to runtime errors or unexpected behavior. Addressing these warnings ensures that I adhere to coding standards and best practices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Performance Optimization:&lt;/strong&gt; - Some compiler messages provide insights into performance-related concerns. By heeding these warnings, I can make optimizations that significantly enhance the overall performance of the software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Security Concerns:&lt;/strong&gt; - My expertise in security and content syndication has emphasized the significance of heeding certain warnings that may indicate potential security vulnerabilities in the code. Ignoring these warnings might expose the software to security risks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Maintainability and Readability:&lt;/strong&gt; - Compiler warnings often point out issues related to code maintainability and readability. Resolving these warnings contributes to a cleaner and more maintainable codebase, crucial for long-term projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Compatibility and Portability:&lt;/strong&gt; - I've found that warnings can also alert me to potential issues related to platform or compiler compatibility. Resolving these warnings ensures that the code can be easily ported across different environments or compilers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Early Detection of Bugs:&lt;/strong&gt; - I've noticed that compiler messages can serve as an early indicator of potential bugs or logical errors. Addressing these warnings in the initial stages of development helps in preventing more complex issues downstream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Integration with CI/CD Pipelines:&lt;/strong&gt; -  In my work involving technologies like C#, Azure, and Azure DevOps, integrating compile step warnings into continuous integration and continuous deployment (CI/CD) pipelines for analysis has become standard practice. This ensures that issues are caught early in the development process, reducing the likelihood of deploying faulty code.&lt;/p&gt;
&lt;p&gt;My personal experience as a software engineer has underscored the critical importance of diligently addressing warnings and information messages generated during the compile step. These practices contribute not only to the immediate success of software projects but also to their long-term viability. &lt;/p&gt;
&lt;p&gt;By prioritizing code quality, performance optimization, security, maintainability, and early bug detection, we can ensure that the software aligns with the highest standards and is well-prepared for future challenges. Moreover, integrating these practices into CI/CD pipelines reflects a commitment to a robust and efficient development workflow. As technology continues to evolve, embracing a proactive approach to compiler warnings remains an integral part of a robust development methodology, ensuring the creation of resilient and reliable software solutions.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>DevOps Vancouver Meetup - Engineering Empowerment Session Preparations</title><link href="https://wsbctechnicalblog.github.io/devOps-vancouver-meetup-engineering-empowerment-session-preparations.html" rel="alternate"></link><published>2023-12-20T00:00:00-08:00</published><updated>2023-12-20T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-12-20:/devOps-vancouver-meetup-engineering-empowerment-session-preparations.html</id><summary type="html">&lt;p&gt;Help us prepare our meetup session to ensure we cover what is interesting for YOU!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Join us at the &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/events/297957063/"&gt;DevOps Vancouver Meetup - January 23, 2024&lt;/a&gt; on a deep dive into our journey to understand our current position and what is brewing for 2024 - a landscape defined by excellence and innovation, inspired by Elon Musk's philosophy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Every person in your company is a vector. Your progress is determined by the sum of all vectors.”&lt;/em&gt; - Elon Musk
&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dojo" src="../images/devOps-vancouver-meetup-engineering-empowerment-session-preparations-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK, here is our session title and outline. What do you think?&lt;/p&gt;
&lt;h1&gt;Engineering Empowerment: Unleashing the Future with AI, Innovative Technologies, and Automation for a Future of Self-Service Innovation&lt;/h1&gt;
&lt;p&gt;Embark on a swift exploration of our dynamic software engineering ecosystem, delving into recent triumphs and future endeavors that aim to empower each WorkSafeBC engineer in delivering perpetual value to our satisfied end-users. In an era where the information landscape evolves rapidly, we prioritize fostering a culture of continuous experimentation and learning. Join us as we discuss the strategic handling of numerous classic build and release pipelines, the seamless integration of self-service automation, the transformative role of OpenAI, and a diverse array of Copilots contributing to our innovative journey. Discover how we navigate this ever-changing landscape to stay ahead and lead the way in engineering excellence.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Duration: 20min (followed by a panel question&amp;amp;answer discussion)&lt;/li&gt;
&lt;li&gt;Presenters: &lt;a href="https://twitter.com/604kev"&gt;Kevin Schwantje&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/martinmlacey"&gt;Martin Lacey&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/wpschaub"&gt;Willy-Peter Schaub&lt;/a&gt;/&lt;a href="https://twitter.com/wpschaub"&gt;X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;In-depth Insights&lt;/h1&gt;
&lt;h4&gt;Core Pillars&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Prioritize automation over manual processes.&lt;/li&gt;
&lt;li&gt;Embrace quality over complex solutions.&lt;/li&gt;
&lt;li&gt;Empower Dev and Ops through innovation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Recent Milestones&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Successful implementation of GitOps and c-a-c Automation.&lt;/li&gt;
&lt;li&gt;Evaluation of GitHub Copilot for Business.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2024's Ambitious Plans&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Proactive incident analysis via advanced monitoring and analytics.&lt;/li&gt;
&lt;li&gt;Open-sourcing and implementing CI/CD/IaC blueprints.&lt;/li&gt;
&lt;li&gt;Continuous automated Testing for efficiency and quality elevation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Security Nexus using v2 Blueprints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Enhancing DevOps Metrics: deployment frequency, lead time for changes.&lt;/li&gt;
&lt;li&gt;Upholding security without compromising speed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Knowledge Enhancement&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Leveraging OpenAI and Stackoverflow for productivity.&lt;/li&gt;
&lt;li&gt;AI-driven knowledge for improved efficiency and faster engineer onboarding.&lt;/li&gt;
&lt;li&gt;SDLC Toolbox Catalog Visualization&lt;/li&gt;
&lt;li&gt;Visual representation of the software development lifecycle toolbox.&lt;/li&gt;
&lt;li&gt;Creation of an engaging and informative catalog.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Reflection&lt;/h1&gt;
&lt;p&gt;We are covering a lot in 20 minutes! Prioritizing the most impactful points and ensuring a cohesive narrative might be the key to delivering a compelling session. Excited for your feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="devops"></category><category term="azure devops"></category><category term="event"></category></entry><entry><title>Unraveling the Merits of Dependency Injection in Modern Software Development</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-dependency-injection.html" rel="alternate"></link><published>2023-12-18T00:00:00-08:00</published><updated>2023-12-18T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-12-18:/engineering-practices-dependency-injection.html</id><summary type="html">&lt;p&gt;Dependency Injection aligns seamlessly with the &lt;strong&gt;SOLID&lt;/strong&gt; principles.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a seasoned software engineer with over four decades of experience, I've witnessed the evolution of software development methodologies and practices. One concept that has proven its worth time and again is Dependency Injection (DI). In this blog post, we'll delve into the merits of Dependency Injection, its seamless integration with Test-Driven Development (TDD), and its pivotal role in adhering to the SOLID principles.&lt;/p&gt;
&lt;h1&gt;Understanding Dependency Injection&lt;/h1&gt;
&lt;p&gt;Dependency Injection is a design pattern that promotes the separation of concerns by decoupling components and managing their dependencies. In essence, it's all about providing dependencies from external sources rather than creating them within the component itself. This approach facilitates more modular and maintainable code, allowing for easier testing, scalability, and extensibility.  Typically, those dependencies are supplied through the class constructor, using Interface definitions.&lt;/p&gt;
&lt;h1&gt;The Harmony with Test-Driven Development (TDD)&lt;/h1&gt;
&lt;p&gt;Dependency Injection and Test-Driven Development form a symbiotic relationship, enhancing the overall quality and maintainability of software. When employing TDD, the ability to isolate and test individual components in isolation is crucial. Dependency Injection makes this process smoother by allowing developers to inject mock dependencies into the components being tested. This ensures that tests focus on specific functionalities without unintentionally triggering dependent components.&lt;/p&gt;
&lt;p&gt;By injecting dependencies, developers can effortlessly swap out real implementations with mock objects, simulating various scenarios and edge cases. This flexibility not only aids in uncovering bugs early in the development process but also streamlines the overall testing workflow.&lt;/p&gt;
&lt;h1&gt;Dependency Injection and SOLID Principles:&lt;/h1&gt;
&lt;p&gt;Dependency Injection aligns seamlessly with the SOLID principles, a set of five design principles that promote clean, scalable, and maintainable object-oriented software design. Let's explore how Dependency Injection contributes to each of these principles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single Responsibility Principle (S)&lt;/strong&gt;: By separating the concerns of creating and managing dependencies, DI ensures that each class or module has a single responsibility. This promotes modular design and enhances code readability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open/Closed Principle (O)&lt;/strong&gt;: Dependency Injection encourages the use of interfaces and abstractions, allowing for easy extension without modifying existing code. This aligns with the Open/Closed Principle, promoting code that is open for extension but closed for modification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Liskov Substitution Principle (L)&lt;/strong&gt;: DI facilitates the use of interfaces, making it easier to adhere to the Liskov Substitution Principle. Substitutability of objects becomes more straightforward when dependencies are injected through interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interface Segregation Principle (I)&lt;/strong&gt;: Dependency Injection encourages the use of small, focused interfaces. This aligns with the Interface Segregation Principle, ensuring that clients only depend on the interfaces they use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dependency Inversion Principle (D)&lt;/strong&gt;: At its core, Dependency Injection embodies the Dependency Inversion Principle. High-level modules should not depend on low-level modules, but rather both should depend on abstractions. Dependency Injection achieves this by inverting the control of creating and managing dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In conclusion, Dependency Injection stands as a cornerstone in modern software development, providing a flexible and scalable approach to managing dependencies. Its synergy with Test-Driven Development and adherence to the SOLID principles make it an invaluable tool for crafting robust, maintainable, and extensible software. As software engineers, embracing Dependency Injection is not just a best practice; it's a strategic move towards building software that stands the test of time.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="code-quality"></category></entry><entry><title>Mastering Software Development: A Deep Dive into Trunk-Based Pull Request Workflow</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-pull-request-v2.html" rel="alternate"></link><published>2023-12-04T00:00:00-08:00</published><updated>2023-12-04T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-12-04:/engineering-practices-pull-request-v2.html</id><summary type="html">&lt;p&gt;How to implement a pull request workflow within the context of a trunk-based development.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the ever-evolving landscape of software development, choosing the right development workflow is crucial for ensuring efficiency, collaboration, and code quality. One such strategy gaining prominence is the Trunk-Based Development (T-B-Dev) strategy, and in this blog post, we will explore how to implement a pull request workflow within the context of T-B-Dev.&lt;/p&gt;
&lt;h1&gt;Understanding Trunk-Based Development&lt;/h1&gt;
&lt;p&gt;Trunk-Based Development is a version control strategy that promotes continuous integration by encouraging developers to commit their changes directly to the main branch (often referred to as the "trunk"). This strategy stands in contrast to feature branching workflows, where developers create long-lived branches for each feature.  &lt;/p&gt;
&lt;p&gt;Long-lived branches are at every increasing risk of “Merge-Hell” – wasted energy resolving merge conflicts with other developers and their commits to the main branch and are not the recommended approach.&lt;/p&gt;
&lt;h1&gt;Key Principles of Trunk-Based Development&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short-Lived Branches&lt;/strong&gt;: In T-B-Dev, developers create short-lived branches that are quickly merged back into the main trunk. This minimizes the risk of integration issues and promotes a continuous flow of code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Integration&lt;/strong&gt;: T-B-Dev relies heavily on continuous integration practices, ensuring that changes are regularly integrated into the main branch. Automated tests play a crucial role in maintaining code quality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature Toggles&lt;/strong&gt;: Feature toggles allow developers to hide incomplete or experimental features behind a toggle, enabling them to merge code into the main branch without affecting the user experience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;: Despite the direct commits to the main branch, code reviews remain an integral part of the T-B-Dev workflow. Developers can still submit pull requests for their changes, allowing for a thorough review process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Small and Atomic Commits&lt;/strong&gt;: Developers should make small, atomic commits to the main branch, focusing on one logical change at a time. This makes it easier to understand and review changes during the pull request process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated Testing&lt;/strong&gt;: Automated tests, including unit tests, integration tests, and any other relevant checks, should be an integral part of the pull request process. This ensures that changes do not introduce regressions and maintain the overall stability of the codebase.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration and Communication&lt;/strong&gt;: Pull requests in T-B-Dev serve as a means of communication among team members. Developers can discuss changes, provide feedback, and address concerns within the context of the pull request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature Flags and Rollouts&lt;/strong&gt;: Utilize feature flags to control the release of new features. This allows for gradual rollouts and easy rollback in case of unexpected issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Pull-Request Workflow Process&lt;/strong&gt; is best illustrated with the following diagram:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Workflow" src="../images/engineering-practices-pull-request-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s review this diagram in detail and examine each step in the process of building your code-feature branch and committing back to the main (trunk).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Branching Best Practices&lt;/strong&gt;: Before creating a short-lived feature branch, ensure your local repository is up to date at branch initiation. This step is crucial in preventing merge complications, emphasizing the significance of minimizing the branch's lifespan. Opt for pulling more frequently than less to sidestep potential issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Development and Testing&lt;/strong&gt;: Develop your code changes comprehensively, incorporating both Unit and Integration tests to ensure robust functionality and reliability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Initiating Collaboration&lt;/strong&gt;: Initiate collaboration by creating a Draft Pull Request (PR). This serves as the starting point for collaboration among team developers. The Draft PR fosters dynamic collaboration without triggering Branch Policies, validations, or notifying PR reviewers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Validation Steps&lt;/strong&gt;: Manually trigger branch policy validations, such as the validation build, as required. Confirm that your code successfully passes validations, iterating on code changes if necessary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PR Publishing and Mandatory Policies&lt;/strong&gt;: When ready to merge code changes into the main branch, publish the PR. PR publication notifies reviewers, and branch policies become mandatory. PR completion can be set to manual or automatic, with the latter triggered upon the verification of all policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commit Impact on PR&lt;/strong&gt;: Any committed code changes within a published PR reset all reviewer approvals, triggering notifications according to our branch policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic Re-validation on Commit&lt;/strong&gt;: With each commit, all policies are automatically re-validated, ensuring continuous compliance throughout the development process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Changes Completion&lt;/strong&gt;: Declare code changes as ready to merge. The PR acts as a gatekeeper, ensuring all policies are met before proceeding.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mandatory Policy Compliance for PR Completion&lt;/strong&gt;: Manual or automatic completion of the PR is contingent upon meeting all branch policies. Once achieved, the code seamlessly merges into the main (trunk). Note that users with elevated permissions can force complete the PR, overriding validation states. Following the merge, the continuous integration (CI) pipeline is triggered from the source branch.  &lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In conclusion, adopting a pull request workflow within the Trunk-Based Development strategy offers a balance between the advantages of continuous integration and the collaborative nature of code reviews. By following the key principles and best practices outlined in this blog post, development teams can seamlessly integrate changes into the main branch while ensuring code quality, collaboration, and overall project success.&lt;/p&gt;
&lt;p&gt;Remember, the essence of Trunk-Based Development lies in its simplicity and focus on delivering value continuously. Embrace this workflow, tailor it to your team's needs, and witness the positive impact it can have on your software development lifecycle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH BUSTER: And no, the pull request is not a gated process! Apart from the invaluable collaboration, you can fully automate the branch policy and build validations, as well as other validations, such as checking the state of a ServiceNow change request. 
&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Is Agile Dead?</title><link href="https://wsbctechnicalblog.github.io/innovation-podcast-is-agile-dead.html" rel="alternate"></link><published>2023-11-22T00:00:00-08:00</published><updated>2023-11-22T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-22:/innovation-podcast-is-agile-dead.html</id><summary type="html">&lt;p&gt;Innovation podcast with Marius De Beer&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this insightful podcast, &lt;a href="https://www.linkedin.com/in/marius-de-beer-a9091b1/"&gt;Marius de Beer&lt;/a&gt; delves into his transformation from a mechanical engineer to his current roles as an Agile Coach and Director of Agile, recounting his journey from South Africa to Canada.&lt;/p&gt;
&lt;p&gt;Marius explores the dynamic evolution of Agile, emphasizing its significance in today's fast-paced world and stressing the imperative for organizations to prioritize resilience. He shares valuable insights into his evolving coaching approach, underlining the crucial importance of implementing desired behavior promptly and leveraging human behavior as a catalyst for positive change.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=yOl487Qt8eM"&gt;&lt;img alt="Podcast" src="../images/innovation-podcast-is-agile-dead-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Click &lt;a href="https://www.youtube.com/watch?v=yOl487Qt8eM"&gt;here&lt;/a&gt; to listen to the conversation.&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="agile"></category></entry><entry><title>GitHub Copilot for Business FAQ</title><link href="https://wsbctechnicalblog.github.io/github-copilot-for-business-faq.html" rel="alternate"></link><published>2023-11-12T00:00:00-08:00</published><updated>2023-11-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-12:/github-copilot-for-business-faq.html</id><summary type="html">&lt;p&gt;Frequently Asked Questions (FAQ) that have been mushrooming during our evaluation phase. Part 2 - FAQ.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to our GitHub Copilot experimentation and usage FAQ Page! This page provide you with comprehensive answers to common questions raised by our engineers about &lt;a href="https://resources.github.com/copilot-for-business"&gt;GitHub Copilot for Business&lt;/a&gt;, an innovative tool that revolutionizes code development through intelligent suggestions and auto-completion. Whether you are a seasoned engineer or just starting out, this FAQ page aims to enhance your experience with GitHub Copilot and address any inquiries you may have. If you do not find the information you are looking for, feel free to reach out through the provided discussion channel, and we will be happy to assist you.&lt;/p&gt;
&lt;h1&gt;Frequently asked questions (FAQ)&lt;/h1&gt;
&lt;p&gt;Checkout our &lt;a href="/github-copilot-for-business-setup.html"&gt;GitHub Copilot for Business Setup&lt;/a&gt; blog post😊 if you have &lt;strong&gt;setup&lt;/strong&gt; questions.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;1. Can I be logged onto GitHub with my &lt;code&gt;corporate&lt;/code&gt; and &lt;code&gt;personal&lt;/code&gt; GitHub account at the same time?&lt;/h4&gt;
&lt;p&gt;Currently, simultaneous support for two accounts is not available. However, you can switch between accounts by logging out of the current account and logging into the other one.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;2. What is the difference between Copilot for &lt;code&gt;Business&lt;/code&gt; and Copilot for &lt;code&gt;Individuals&lt;/code&gt;?&lt;/h4&gt;
&lt;p&gt;See &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/overview-of-github-copilot/about-github-copilot-for-business#understanding-the-differences-between-copilot-for-business-and-copilot-for-individuals"&gt;Understanding the differences between Copilot for Business and Copilot for Individuals&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;3. Why am I seeing this error in my Copilot log?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;[INFO] [auth] [2023-11-02T14:57:44.993Z] Invalid copilot token: missing token: 403&lt;/code&gt;
&lt;code&gt;[ERROR] [default] [2023-11-02T14:57:45.005Z] Extension activation failed: "User not authorized"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your GitHub Copilot for Business license is not currently valid. If you are using an active directory (AD) group for license management, it is possible that you have been removed from the AD group or were never added in the first place.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;4. Can I use two different browsers that are connected to each of my two different GitHub accounts?&lt;/h4&gt;
&lt;p&gt;According to &lt;a href="https://twitter.com/colindembovsky"&gt;Cσʅιɳ DҽɱႦσʋʂƙყ&lt;/a&gt; you can do one better - "&lt;em&gt;In the browser you can now natively switch accounts: &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/switching-between-accounts#about-switching-between-your-accounts"&gt;Switching between accounts&lt;/a&gt;. For logging in to Copilot, you have to switch accounts if you want to bounce between work and personal accounts.&lt;/em&gt;"&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;5. Any useful troubleshooting links?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/visualstudio/ide/work-with-github-accounts?view=vs-2022#troubleshooting-sign-in-issues"&gt;Troubleshooting sign in issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I trust that this FAQ list is enhancing the value of your GitHub Copilot evaluation. If you have additional frequently asked questions and answers to contribute to this post/list, feel free to leave a comment below.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="github"></category></entry><entry><title>GitHub Copilot for Business Setup</title><link href="https://wsbctechnicalblog.github.io/github-copilot-for-business-setup.html" rel="alternate"></link><published>2023-11-01T00:00:00-07:00</published><updated>2023-11-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-01:/github-copilot-for-business-setup.html</id><summary type="html">&lt;p&gt;Getting started with GitHub Copilot - Part 1: Setup.&lt;/p&gt;</summary><content type="html">&lt;p&gt;To kickstart your journey with the GitHub Copilot for Business product, we first need to configure both the service-side and user-side environments. In this guide, we will walk you through the steps we took and highlight any potential obstacles you may encounter along the way.&lt;/p&gt;
&lt;h2&gt;Useful Terminology&lt;/h2&gt;
&lt;p&gt;Terminology which will make things easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entra ID&lt;/strong&gt; - **New name for Azure Active Directory, for example &lt;code&gt;fabrikam.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal GitHub Account&lt;/strong&gt; - Personal GitHub account, for example &lt;a href="https://github.com/wpschaub"&gt;wpschaub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Account&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;Enterprise Managed Users (EMU)&lt;/a&gt; account \&amp;lt;ID&amp;gt;_\&lt;Shortcode/&gt;, for example &lt;code&gt;wschaub_fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Admin&lt;/strong&gt; - EMU Administrator, for example &lt;code&gt;admin_fabikam&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Enterprise&lt;/strong&gt; - EMU Enterprise name, for example &lt;code&gt;fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Enterprise URL&lt;/strong&gt; - EMU Enterprise link, for example &lt;code&gt;https://github.com/enterprises/fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Shortcode&lt;/strong&gt; - EMU alias, for example https://github.com/enterprises/fabrikam.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Organization&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/about-organizations"&gt;Git Hub Organization&lt;/a&gt;, for example &lt;code&gt;fabrikam_innovation&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Team&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/organizations/organizing-members-into-teams/about-teams"&gt;GitHub Team&lt;/a&gt;, for example &lt;code&gt;GitHub Copilot Evaluation&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an insightful illustration sourced from &lt;a href="HTTPS://GITHUB.COM"&gt;GitHub&lt;/a&gt; that provides a user-friendly overview of Enterprise Managed Users (EMU).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="EMU Overview" src="../images/github-copilot-for-business-setup-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Service-side Setup&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are exclusively configuring your (laptop) environment for GitHub Copilot, please bypass this section and proceed directly to the User-side Setup for streamlined instructions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;GitHub Managed Users (EMU)&lt;/a&gt; is comprehensive, though it is detailed to the extent that you might overlook a crucial step (as we did). Here are the key steps:&lt;/p&gt;
&lt;h4&gt;Setup a &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;GitHub Managed Users (EMU)&lt;/a&gt;.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Chat with your Microsoft / GitHub account manager and request EMU.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Setup the IdP Connection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/aad.fabrikamenterprisemanageduseroidc?tab=Overview"&gt;GitHub EMU Application&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 1: Preparations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Involve a person with AAD Admin Access. &lt;/li&gt;
&lt;li&gt;Create a &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic"&gt;Personal Access Token&lt;/a&gt; for the &lt;code&gt;EMU Admin&lt;/code&gt; account.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 2: Connect GitHub to AAD using OIDC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;EMU Name&lt;/code&gt;, &lt;code&gt;EMU Enterprise URL&lt;/code&gt;, and &lt;code&gt;EMU shortcode&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Follow all steps in the &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/configuring-oidc-for-enterprise-managed-users"&gt;GitHub Docs: Configuring OIDC for Enterprise Managed Users&lt;/a&gt; to setup the connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 3: Configure SCIM Provisioning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;EMU Name&lt;/code&gt;, &lt;code&gt;EMU Enterprise URL&lt;/code&gt;, &lt;code&gt;EMU shortcode&lt;/code&gt;, and your tenant URL, for example &lt;code&gt;https://api.github.com/scim/v2/enterprises/fabrikam&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Follow all the steps in &lt;a href="https://learn.microsoft.com/en-us/entra/identity/saas-apps/github-enterprise-managed-user-oidc-provisioning-tutorial"&gt;Azure Tutorial: Configure GitHub Enterprise Managed User (OIDC) for automatic user provisioning&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 4: Once connected, connect subscription&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;GitHub Organization&lt;/code&gt; and &lt;code&gt;GitHub Team&lt;/code&gt; names.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/enterprise-cloud@latest/billing/managing-the-plan-for-your-github-account/connecting-an-azure-subscription#connecting-your-azure-subscription-to-your-enterprise-account"&gt;Connect an Azure Subscription ID&lt;/a&gt; to pay for Copilot.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-copilot-in-your-enterprise"&gt;Enable Copilot at the Enterprise Level&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In your Organization of choice, &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization"&gt;enable Copilot for the user/team of choice&lt;/a&gt;. In our scenario, we handle GitHub team membership through an Azure Directory (AD) group. Being a member of the AD group automatically grants you membership in the GitHub team, providing access to a GitHub Copilot license.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Single-signon is alive and well. At this point you should be able to login with your &lt;code&gt;EMU Admin&lt;/code&gt; and your &lt;code&gt;corporate&lt;/code&gt; cedentials.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;User-side Setup&lt;/h1&gt;
&lt;p&gt;This is likely the section everyone is eager to dive into – welcoming your Artificial Intelligence (AI) Copilot and embarking on a journey of exploration to reap numerous benefits. These include heightened productivity, enhanced quality, accelerated experimentation and learning, and bolstered engineering confidence.&lt;/p&gt;
&lt;h2&gt;Before you begin!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First you need to logout of GitHub in your default web browser. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This is a crucial step - easy to just ignore it at your own peril!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Disconnect from Virtual Private Network (VPN).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Failure to do so may lead you down the same nightmarish path I experienced last weekend.&lt;/p&gt;
&lt;h2&gt;Visual Studio Enterprise / Professional&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A special &lt;strong&gt;thank you&lt;/strong&gt; to my copilot, &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Martin Lacey&lt;/a&gt;], who completed the setup first, giving us the dos and do nots, as well as the screenshots.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Make sure your IDE is the latest version.&lt;/li&gt;
&lt;li&gt;Open Visual Studio Enterprise and go to &lt;code&gt;Profile &amp;gt; Add Account&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This will open your browser. Use your corporate account, for &lt;code&gt;demo_fabrikam&lt;/code&gt;. Your account name will be different, but follow the same format.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;For fellow engineers at WorkSafeBC, use your primary ID, suffixed with _wsbc. For example XXYYYYY_wsbc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once you enter your account name (no password) and press &lt;code&gt;enter&lt;/code&gt;, you will be directed to the following web page after a short moment.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authenticate" src="../images/github-copilot-for-business-setup-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;Authorize GitHub&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authorize" src="../images/github-copilot-for-business-setup-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Close Visual Studio and restart it.&lt;/li&gt;
&lt;li&gt;Verify that you are now connected.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Verify" src="../images/github-copilot-for-business-setup-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Now it is time to start exploring!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual Studio Code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you sign-out from GitHub on your default browser now, as per &lt;strong&gt;before you begin&lt;/strong&gt;, you can save yourself a lot of pain! 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Open Visual Studio Code (VS Code).&lt;/li&gt;
&lt;li&gt;Ensure you are running at least version 1.83, dated September 2023, by checking for updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Check for updates" src="../images/github-copilot-for-business-setup-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;code&gt;View &amp;gt; Command Palette&lt;/code&gt; or press &lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;GitHub Copilot: Install&lt;/code&gt; and select it.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Install Copilot" src="../images/github-copilot-for-business-setup-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;After installation, log in to GitHub using your EMU Account (GitHub Enterprise Managed Users) such as &lt;code&gt;demo_fabrikam&lt;/code&gt;. Alternatively, you can modify your profile to add the GitHub account.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/github-copilot-for-business-setup-7.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;For fellow engineers at WorkSafeBC, use your primary ID, suffixed with _wsbc. For example XXYYYYY_wsbc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Authorize the access.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authorize" src="../images/github-copilot-for-business-setup-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once authorized, you will see the following view within VS Code.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Check authorization" src="../images/github-copilot-for-business-setup-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Trust the local certs on your machine so that the self signed cert is no longer untrusted. Install a plugin named &lt;strong&gt;win-ca&lt;/strong&gt;, go into extension Settings of the extension, and change the &lt;strong&gt;inject-option&lt;/strong&gt; from &lt;strong&gt;Replace&lt;/strong&gt; to &lt;strong&gt;Append&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Visual Studio Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you are ready to explore the walkthroughs and get started!  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Welcome" src="../images/github-copilot-for-business-setup-10.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Have fun chatting with your AI Pair Engineer Copilot and watch this space for follow-up posts by my colleagues evaluating their Copilot. &lt;/p&gt;
&lt;p&gt;Also checkout our &lt;a href="/github-copilot-for-business-faq.html"&gt;GitHub Copilot for Business FAQ&lt;/a&gt; blog post😊.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="github"></category></entry><entry><title>Embedding a Quality-Driven Engineering Mindset in Our DNA</title><link href="https://wsbctechnicalblog.github.io/embedding-a-quality-driven-engineering-mindset-in-our-dna.html" rel="alternate"></link><published>2023-10-02T00:00:00-07:00</published><updated>2023-10-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-10-02:/embedding-a-quality-driven-engineering-mindset-in-our-dna.html</id><summary type="html">&lt;p&gt;An engineering mindset that prioritizes quality is crucial for producing robust and reliable solutions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having a &lt;strong&gt;quality-first&lt;/strong&gt; and &lt;strong&gt;quality-driven engineering&lt;/strong&gt; mindset ensures that &lt;strong&gt;QUALITY&lt;/strong&gt; is not treated as an afterthought, but rather ingrained in the design, development, and operational processes from the outset. It encourages proactive measures such as thorough testing, code reviews, experimentation, and an appetite for guiding guardrails, ultimately leading to a higher standard of work. It promotes a culture of excellence and continuous improvement within the engineering team - and most importantly, delighted &lt;strong&gt;end-users&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Choosing the alternative means embracing a lifestyle of constant &lt;strong&gt;context-switching&lt;/strong&gt;, 2 AM incident calls, and a perpetually &lt;strong&gt;reactive&lt;/strong&gt; approach. This path leads to frustration, burnout, and increased operational costs. Engineers will find themselves caught in the continuous hamster wheel, struggling to balance firefighting with delivering value. The result? Unhappy end-users, potentially tarnishing your reputation in the long run.&lt;/p&gt;
&lt;p&gt;Fortunately we all have a choice.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here are several recommended strategies that you should consider exploring if you choose to adopt a QUALITY mindset.&lt;/p&gt;
&lt;h1&gt;Technical Debt rusts Quality!&lt;/h1&gt;
&lt;p&gt;The accrual of technical debt can significantly degrade the overall quality of a system over time. It is essential to proactively manage and address technical debt to maintain a high level of quality in software development. In other words, pro-actively avoid the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inconsistent or overly complicated code&lt;/strong&gt; - code should be recognisable and readable by all engineers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design shortcuts&lt;/strong&gt; - align with your architecture, operations, and development patterns and guardrails. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skipped or insufficient testing&lt;/strong&gt; - if you are strapped into your seat, atop a Falcon Heavy rocket using your software, you should feel comfortable to click the launch button.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outdated or end-of-life products&lt;/strong&gt; - proactively monitor and deprecate outdated dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incomplete or no documentation&lt;/strong&gt; - code should be self-explanatory, complemented by documentation that makes it easy to get the context,  overview, and flow. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop supporting the notion of "quick experiment", "proof-of-concept", or "throw-away" code. I have watched too many instances of this code ending up in production solutions and becoming the weakest link. Use common guidelines, guardrails, and peer-review workflows (such as pull request with policies) to avoid your solution starting to rust and its quality to deteriorate over time.&lt;/p&gt;
&lt;h1&gt;Think team!&lt;/h1&gt;
&lt;p&gt;We are accountable for QUALITY as a team and as a group of teams - in other words, we "are one" when it comes to quality and taking responsibility for how we design, build, test, and maintain the solutions we build. As &lt;strong&gt;software development engineer&lt;/strong&gt; our specialty is "developing code" and as &lt;strong&gt;quality assurance engineer&lt;/strong&gt; our specialty is "testing code”. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, this does not imply that developers are only tasked with writing code. They also shoulder responsibilities such as creating unit tests, executing test automation, performing code vulnerability scans, and in some cases, conducting manual tests to enhance the overall quality of our work. As engineers, we hold a stewardship role in our domain of expertise, enforcing associated guardrails, and mentoring others within our team, group, organization, or community. But, when it comes to quality, it is a collective team responsibility!&lt;/p&gt;
&lt;p&gt;Gone are the days of simply tossing tasks over the wall to different roles like content editors, developers, testers, admins, and so forth. The only boundary we acknowledge are the faintly dotted lines that delineate teams and groups of teams within our organization. Beyond that, we operate and own QUALITY as one unified entity.&lt;/p&gt;
&lt;h1&gt;Think product team!&lt;/h1&gt;
&lt;p&gt;When you operate with a healthy &lt;a href="https://www.donovanbrown.com/post/what-is-devopss"&gt;DevOps&lt;/a&gt; mindset, you will also be familiar with the "product mindset", which implies that we, as a team, are accountable for our solution from ideation to deprecation. Until we switch off the solution lights, we own the accountability for QUALITY!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Love a comment from my colleague: "&lt;em&gt;Pride, feeling like you've created and contributed to something you are proud of - that is the inner spirit we need to kindle.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Switch to &lt;a href="/shift-from-project-to-product-thinking.html"&gt;Shift from project to product thinking&lt;/a&gt; for more insight into the product mindset.&lt;/p&gt;
&lt;p&gt;Alternatively as per GPT: "&lt;em&gt;Thinking like a product team encourages a mindset that prioritizes the value delivered to end-users. This perspective helps ensure that the software being developed is aligned with the needs and expectations of the users, leading to more successful and impactful products. It also fosters a sense of ownership and &lt;strong&gt;accountability for the quality&lt;/strong&gt; and functionality of the software, which ultimately leads to higher-quality solutions. Thinking like a product team also encourages collaboration, innovation, and a focus on continuous improvement, which are all essential elements for building successful software products.&lt;/em&gt;"&lt;/p&gt;
&lt;h1&gt;Embrace guardrails for a safer journey&lt;/h1&gt;
&lt;p&gt;Guardrails are important to keep us within a safe zone to cross a bridge or in software engineering to create a safety net to promote consistency, standardization, and security. They allow us to thrive, create, and innovate in a structured and secure environment, while mitigating risks and ensuring long-term quality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Outcomes of guardrails, all of which support &lt;strong&gt;quality&lt;/strong&gt; include things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Risk Mitigation&lt;/strong&gt;, such as security vulnerabilities, system failures, and end-of life issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency and Standardization&lt;/strong&gt; making solutions easier to maintain and troubleshoot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compliance&lt;/strong&gt;, such as industry standards and organizational policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt; fostered when everyone has an understanding of what and how we are building our solution.
Scalability: Guardrails facilitate scaling efforts by ensuring that new code and practices align with established standards. This makes it easier to onboard new team members and integrate new features or services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confidence&lt;/strong&gt; created when everyone follows set of guidelines to follow, enciuraging creative problem-solving and innovation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost-Efficiency&lt;/strong&gt; by avoiding previous mistakes, saving time, and money.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Forward-thinking&lt;/strong&gt; promoted by promoting practices that are known, proven, and sustainable. This benefits the maintenance and evolution of solutions over time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid rigid and monolithic architectures&lt;/strong&gt; which impede the system's adaptability and evolution, especially in today's rapidly changing technological landscape. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work smarter and more efficiently&lt;/strong&gt; to optimise and capitalise on down time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more examples, but I need to touch on my 80:20 rule and then stop venting.&lt;/p&gt;
&lt;h1&gt;80:20 planning rule&lt;/h1&gt;
&lt;p&gt;Lastly, it is important to discuss how we plan and allocate our time. If we aim to fill every minute of our schedule, we are setting ourselves up to work beyond our capacity. This leaves us scrambling to address unexpected issues, bugs, and the lingering technical debt that tends to resurface repeatedly. I know it, you know it - it is time to smarter and more efficiently. We must move away from burnout and start embracing a healthier work:life balance.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I encourage my team to allocate 80% of our capacity for delivering business value and addressing bug fixes. &lt;/p&gt;
&lt;p&gt;The remaining 20% is set aside for adapting to architecture changes, handling unexpected events, supporting disruptions, attending meetings, fostering innovation, engaging in continuous learning, and, most importantly, consistently reducing our technical debt. This approach empowers us to maintain the highest standard of quality in our work and a healthy work:life balance.&lt;/p&gt;
&lt;p&gt;If all else fails, learn to say "&lt;strong&gt;NO&lt;/strong&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In my opinion, being an "engineer" entails embodying traits like forward-thinking, accountability, a commitment to quality, and an unwavering passion for technology. These qualities should be embedded in the DNA of my engineering identity.&lt;/p&gt;
&lt;p&gt;How are you fostering an Engineering Mindset for Quality?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="eliminate-waste"></category><category term="quality"></category></entry><entry><title>Let us Elevate Our CI/IaC/CD Azure Pipeline Flow Together!</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-iac-flow-decision.html" rel="alternate"></link><published>2023-09-19T00:00:00-07:00</published><updated>2023-09-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-09-19:/azure-pipeline-iac-flow-decision.html</id><summary type="html">&lt;p&gt;Streamline Your Process: Isolating the Provision and Deployment Steps for Efficiency?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuing from our previous guide on &lt;a href="/azure-pipeline-yaml-refactor-parameter-objects.html"&gt;Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management&lt;/a&gt;, we have now successfully wrapped up our latest Minimally Viable Product (MVP) 2. This milestone encompasses the implementation of infrastructure-as-code provisioning logic, illustrated below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Pipeline Run" src="../images/azure-pipeline-iac-flow-decision-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a BINGO moment!&lt;/p&gt;
&lt;h1&gt;Application-type recipes&lt;/h1&gt;
&lt;p&gt;Before I address my question, let me encapsulate the fundamental concept of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;WorkSafeBC Common Engineering v2 Blueprint&lt;/a&gt;  pipelines:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a team embarks on creating a solution, they simply choose the desired application type from our user-friendly self-service menu. After confirming a few essential details, they can initiate the process with a single click.
Our self-service chef swiftly generates an Azure Repository, adhering to our established naming conventions for consistency.&lt;/li&gt;
&lt;li&gt;A sample of the selected application type is promptly uploaded to the repository, including essential common libraries like logging, ensuring standardized practices.&lt;/li&gt;
&lt;li&gt;An Azure Pipeline is then configured, seamlessly integrated into the repository, and automatically triggered to complete the CI-only phase, ensuring an automated workflow and development environment.&lt;/li&gt;
&lt;li&gt;As the Azure Pipeline is queued, it undergoes dynamic assembly using the application-type v2 blueprint templates, infusing a touch of magic while maintaining steadfast consistency.&lt;/li&gt;
&lt;li&gt;Furthermore, a variable configuration template is introduced, imparting solution-specific variables to be seamlessly integrated as parameters - think of it as an all-YAML braai (barbeque), blending elements seamlessly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This streamlined process exemplifies our commitment to efficiency, standardization, and automation in every facet of our pipeline workflows."&lt;/p&gt;
&lt;h1&gt;So what is our MVP 2 all about?&lt;/h1&gt;
&lt;p&gt;Let us kick things off with MVP1, where our primary objective was to deliver a parameterized YAML-based template that seamlessly integrates into step 4 of the process outlined above. Our main concern was not the specific provisioning method, but rather ensuring that it adheres to YAML-based standards, is well-parameterized, and eliminates any wasteful hard-coding.&lt;/p&gt;
&lt;p&gt;In MVP2, we successfully showcased the injection of this template into our v2 blueprints, with a specific focus on the development environment. Following some hours of dedicated effort in refining and fine-tuning MVP1, we proudly unveiled our inaugural CI+IaC+CD pipeline - the BINGO moment.&lt;/p&gt;
&lt;h1&gt;Back to the question: Segregate or Aggregate IaC from CD?&lt;/h1&gt;
&lt;p&gt;I will present two workflows: a segregated and an aggregated pipeline flow. The steps 1-5 remain consistent:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The pipeline is queued.&lt;/li&gt;
&lt;li&gt;The solution-specific variable configuration template is introduced. We deliberately integrated the IaC and CD configurations into a single, unified template. This consolidation ensures that many components, which are commonly shared and reused by both IaC and CD, are seamlessly pulled from the config repository.&lt;/li&gt;
&lt;li&gt;The infrastructure-as-code (IaC) template tailored to the application type is fetched from the IaC repository and seamlessly integrated into the pipeline.&lt;/li&gt;
&lt;li&gt;The build/CI (continuous integration) and release/CD (continuous delivery) templates specific to the application type are sourced from the templates.v2 repository and seamlessly integrated into the pipeline.&lt;/li&gt;
&lt;li&gt;The CI Flow initiates the application-type setup, compiles the solution, conducts thorough testing, and performs scans for vulnerabilities, ensuring adherence to high-quality coding practices.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GEM 1&lt;/strong&gt; 
The configuration, infrastructure-as-code, and pipeline-as-code repositories are accessible by all engineers - transparency.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GEM 2&lt;/strong&gt;
The repositories and associated policies allows our engineers to recommend configuration changes through a pull request, and our platform and enabling engineers (stewards) to validate the configuration changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Step 6 is the focal point of this post, where I introduce two distinct flow patterns, representing the core topic of discussion.&lt;/p&gt;
&lt;h3&gt;Segregated Flow&lt;/h3&gt;
&lt;p&gt;The infrastructure-as-code (IaC) and continuous delivery (CD) steps operate independently and are overseen by our application-type *control.yml template. Essentially, this template incorporates the IaC blueprint for every environment we intend to provision, ensuring all environments are set up before initiating the CD process&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Flow A" src="../images/azure-pipeline-iac-flow-decision-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IaC and CD are logically and visually isolated from each other.&lt;/li&gt;
&lt;li&gt;IaC and CD Azure Pipelines environments can be defined in separate environments. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The visual representation of the runtime pipeline flow will be twice as long.&lt;/li&gt;
&lt;li&gt;The logic for determining which stages to run and which to ignore will be duplicated in both the &lt;em&gt;control.yml and &lt;/em&gt;CD.yml templates. This introduces potential for duplication and drift&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Aggregated Flow&lt;/h3&gt;
&lt;p&gt;The infrastructure-as-code (IaC) and continuous delivery (CD) steps operate as one and are overseen by our application-type *CD.yml template. Essentially, we provision the environment, then deploy the solution to the environment in the same deployment job context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Flow B" src="../images/azure-pipeline-iac-flow-decision-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The visual representation of the runtime pipeline flow will remain consistent.&lt;/li&gt;
&lt;li&gt;The logic for determining which stages to run and which to ignore will not be redundant.&lt;/li&gt;
&lt;li&gt;Azure Pipeline environments are recycled, minimizing duplication and streamlining administration efforts.&lt;/li&gt;
&lt;li&gt;The application-type *control.yml template maintains its simplicity.&lt;/li&gt;
&lt;li&gt;The application-type *CD.yml only requires one additional statement per environment: include IaC template.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IaC and CD are not logically and visually isolated from each other. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is likely you have gathered that I am inclined towards the aggregated flow. What am I missing?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Which of the two flow patterns do you favor, and what are your reasons?&lt;/strong&gt; Your input and candid feedback are highly valuable in shaping a CI/IaC/CD v2 blueprint grounded in the highest engineering standards.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Software Engineering Standardization</title><link href="https://wsbctechnicalblog.github.io/software-engineering-standardization.html" rel="alternate"></link><published>2023-09-17T00:00:00-07:00</published><updated>2023-09-17T00:00:00-07:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-09-17:/software-engineering-standardization.html</id><summary type="html">&lt;p&gt;Software Engineering Standardization&lt;/p&gt;</summary><content type="html">&lt;p&gt;Consistent and standardized software engineering practices refer to the establishment and adherence to a set of rules, guidelines, and processes within the field of software engineering, with the goal of ensuring reliability, efficiency, and quality in the development and maintenance of systems or products. These practices are particularly important in software development, as they can have a profound impact on the entire software development lifecycle (SDLC) and its various aspects, including automation, DevOps (Donovan Brown | What is DevOps?), responsible AI integration, design patterns, architecture patterns, infrastructure patterns, and concurrency management.&lt;br&gt;
Each of these aspects are broad in nature, and when standardized can harmonized and interoperate seamlessly and effortlessly.  Let's explore each of these concepts in more detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Consistent and standardized engineering practices often involve the automation of repetitive and error-prone tasks in the software development process. This includes automating build processes, testing, deployment, and infrastructure provisioning throughout our environment ecosystem. Automation helps reduce human error, accelerates development cycles, and ensures that development, testing, and production environments are consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;: DevOps is a set of mindset that aims to bridge the gap between the various groups and teams involved in the software development life cycle (SDLC) to promoting collaboration, automation, and continuous integration and delivery (CI/CD). Consistent and standardized engineering practices align with DevOps by establishing clear processes and automation pipelines, ensuring that software changes can be efficiently and reliably deployed into production environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embracing Artificial Intelligence (AI) Responsibly&lt;/strong&gt;: Responsible AI integration involves ethical considerations, fairness, transparency, and accountability in AI-driven systems. Consistent and standardized engineering practices include guidelines for ethically collecting and using data, developing AI models, and implementing AI algorithms in a way that respects privacy and avoids biases, are reliable, safe to use, respect laws and are secure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Patterns&lt;/strong&gt;: Design, Architecture and Infrastructure patterns are proven solutions to common software design problems. Consistent and standardized engineering practices encourage the use of patterns at each layer to create maintainable, scalable, and understandable software and the infrastructure used to create, validate, and deploy it for end-user delight. By following established patterns every empowered DevOps Engineer can build software that is easier to maintain and extend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concurrency Management&lt;/strong&gt;: In software development, concurrency refers to multiple tasks or processes running simultaneously. Consistent and standardized engineering practices include strategies and patterns for managing concurrency effectively, such as using locks, threads, or asynchronous programming. This ensures that applications can handle multiple simultaneous requests or tasks without conflicts or performance bottlenecks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enabling Sustainability and Maintenance&lt;/strong&gt;: Engineering practices that are consistent and standardized also consider the long-term sustainability and maintainability of software applications. This involves using clean code practices, thorough documentation, and version control systems to facilitate ongoing development and maintenance. It ensures that applications can evolve and adapt to changing requirements without becoming overly complex or fragile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Naming Conventions as the Glue&lt;/strong&gt;: Naming conventions are a set of rules and guidelines for naming variables, functions, classes, files, and other elements in a software project, as discussed in one of my previous blogs &lt;a href="https://wsbctechnicalblog.github.io/engineering-practice-naming-conventions.html"&gt;Engineering Practice Naming Conventions&lt;/a&gt;. They act as the glue that connects different parts of the codebase and ensures that developers can easily understand and work with the code. Naming conventions play a vital role in consistent and standardized engineering practices by promoting code readability, reducing ambiguity, enhancing maintainability, and facilitating integration within a software project. They act as the glue that binds different components of the codebase together, making it easier for everyone to work cohesively and maintain high-quality deliverables for the delight of end-users. To quote a colleague, “Consistent naming convention makes it easier for PEOPLE getting up at 2AM to find the root cause of an incident, working backwards down to the codebase.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, consistent and standardized engineering practices are essential in software development to promote efficiency, reliability, and quality across various aspects of the development process. These practices align with automation, DevOps, responsible AI integration, design patterns, concurrency management, and naming conventions to enable the development of software applications that can be sustained and maintained effectively while handling high levels of application concurrency. This approach ultimately leads to better software quality, shorter development cycles, and improved overall system performance.&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="standards"></category><category term="technical-excellence"></category></entry><entry><title>Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-yaml-refactor-parameter-objects.html" rel="alternate"></link><published>2023-08-23T00:00:00-07:00</published><updated>2023-08-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-08-23:/azure-pipeline-yaml-refactor-parameter-objects.html</id><summary type="html">&lt;p&gt;Seizing the chance to enhance and optimize our CI/CD/IaC pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I understand that you may have been delving into our open-source endeavor, which revolves around Azure Pipelines for continuous integration and continuous delivery, employing YAML-based methodologies. If this initiative has not caught your attention yet, I highly recommend acquainting yourself with our  source project, focused on YAML-based continuous integratuion and continuous delivery Azure Pipelines. If not, you better explore our open-source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;WorkSafeBC Common Engineering&lt;/a&gt; project as a starting point.&lt;/p&gt;
&lt;p&gt;For those who are new to this concept, I have compiled a selection of blog links that you might find valuable for a comprehensive understanding:
- &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt;
- &lt;a href="https://wsbctechnicalblog.github.io/azure-devops-pipeline-oss-v2-1-flow.html"&gt;Azure DevOps Pipeline OSS v2.1 Flow&lt;/a&gt;
- &lt;a href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;OK, why are we here?&lt;/h1&gt;
&lt;p&gt;Indeed, we are currently in the process of integrating infrastructure-as-code (IaC) into our v2 blueprints. This advancement entails the inclusion of a substantial number of parameters within our variable template files. As a consequence, a series of sleepless nights has ensued for our team. To provide a visual depiction, please refer to the illustration below, where the newly added components are represented in pink.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC" src="../images/azure-pipeline-yaml-refactor-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we have a quick look at the basic &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/commit/eee9e2e895e8869e1f4fc8e7b55b1973b469351f#diff-34a1ea16e45e933dd3f78d78dd2752204483355a45237fb33d7a31b1bb51e383"&gt;101 sample variable template&lt;/a&gt; you will notice that we have a &lt;strong&gt;FLAT&lt;/strong&gt; configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;variables:&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Blueprint: __101__&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# If you are not going to use all stages&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; as below&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; you can suppress them by simply commenting out&lt;/span&gt;
&lt;span class="c"&gt;# or removing their entire configuration section&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# DEVelopment Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Development&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# System Test Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;SystemTest&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Security Review Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  securityReviewStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Staging Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Staging&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# PRODuction Test Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Production&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result, each time a new parameter is introduced, it necessitates an update to the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/eee9e2e895e8869e1f4fc8e7b55b1973b469351f/blueprints/__101__/azure-pipeline-__101__-control.yml"&gt;control template&lt;/a&gt; to incorporate and transmit the extra parameter. This process has proven to be exasperating, labor-intensive, prone to errors, and ultimately, not a sustainable approach. It is far from straightforward and, therefore, presents a significant challenge and &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Exploring options&lt;/h1&gt;
&lt;h3&gt;YAML update August 13, 2013&lt;/h3&gt;
&lt;p&gt;Over the long weekend, I enjoyed a delightful blend of relaxation and productivity. In between moments of unwinding with videos and tending to our adorable 10-week-old Dachshund puppy, I found myself immersed in the world of re-coding our &lt;code&gt;__101__&lt;/code&gt; blueprint templates. Little did I know that this seemingly innocent endeavor would lead me on a tumultuous journey of debugging challenges.&lt;/p&gt;
&lt;p&gt;Azure DevOps YAML, unfortunately, proved to be an intricate maze to navigate. One perplexing discovery was that it steadfastly refuses to accommodate variables of the object type or arrays of objects. The reasoning behind this limitation remains elusive, but take my word for it – this kind of support is conspicuously absent and an area in the binary space that I will defer for another rainy day.&lt;/p&gt;
&lt;p&gt;This experience has taught me that even in the realm of coding, surprises abound. Despite the setbacks, I'm determined to continue refining our blueprint templates and conquering the intricacies of Azure DevOps YAML. Who knows what other insights and discoveries await as I press on with determination?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 1&lt;/strong&gt; - Defining YAML objects or array of objects as variables in an Azure Pipeline variable template is a no-go! You can do it with parameters, not variables.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;YAML update August 14, 2023&lt;/h3&gt;
&lt;p&gt;Following yet another early morning coding expedition and a debugging session that spanned the lunchtime hours, I made a pivotal decision. I opted to roll back our variable template to its simpler form, opting for straightforward variables. To address the array of objects within objects, I ingeniously integrated them as parameters within the control template. While this solution may not epitomize perfection, it undoubtedly provided a remedy for the crash debacle that had marred the weekend.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 2&lt;/strong&gt; - Simplify in small steps, not in a big bang. Otherwise you may embrace lots of debugging and unwinding of code changes.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moreover, the ripple effect of this adjustment extended its benefits to the Continuous Deployment (CD) stage templates. Looking ahead, this approach promises to streamline the Infrastructure as Code (IaC) stage templates as well. These incremental strides within the realm of YAML Pipelines might seem small in scale, yet they represent a significant leap forward for our blueprint endeavors.&lt;/p&gt;
&lt;p&gt;Initiating the submission of a draft pull request, I now find myself in a state of anticipation, eagerly awaiting the candid feedback of my colleagues. The outcome holds the promise of insights that will undoubtedly enrich the project and refine its trajectory q;-)&lt;/p&gt;
&lt;h3&gt;YAML update August 18, 2023&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Be sure to follow these steps before embarking on collaborative pull requests: stage your latest changes, commit them, and push them to the repository. Neglecting to push your changes can lead to confusion and inefficiencies, especially if the absence of a push results in non-sequential or illogical changes.
&lt;/p&gt;
&lt;p&gt;&lt;img alt="IaC" src="../images/azure-pipeline-yaml-refactor-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have received the 'thumbs up' from all of our stakeholders, except for Daniel, who is currently enjoying a well-deserved vacation. This marks the successful completion of the first phase of my simplification journey. Moving forward, the next steps are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publish this post.&lt;/li&gt;
&lt;li&gt;Initiate a Pull Request (PR) for open-source synchronization - Phase 1.&lt;/li&gt;
&lt;li&gt;Commence the process of updating our existing blueprints to align with the changes.&lt;/li&gt;
&lt;li&gt;Proceed with the submission of a Pull Request (PR) for open-source synchronization - Phase 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is the pull request (PR) that matches the internal PR I submitted for REVIEW: &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/22"&gt;Synchronize 101 simplifications from in-house&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Revision of the proposed solution&lt;/h1&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;config&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Regrettably, the concept of using variables to define objects and arrays of objects had to be abandoned as discussed. Instead, I have reverted back to the previous flat structure. Additionally, I have incorporated a state variable in place of the former name stage. I will delve into this further in our upcoming conversation.&lt;/p&gt;
&lt;p&gt;Here is an extract, with the &lt;strong&gt;&lt;strong&gt;101&lt;/strong&gt;&lt;/strong&gt; sample configuration data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# -----------------------------------------------
# Development Stage
- name:  developmentStageActive
  value: true
- name:  developmentStageEnvName
  value: &amp;#39;&amp;lt;tbd&amp;gt;&amp;#39;
- name:  developmentStageVmImage
  value: &amp;#39;&amp;lt;tbd&amp;gt;&amp;#39;
- name:  developmentStageTestData
  value: &amp;#39;Development Stage Test Data&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;control&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;The latest enhancement involves the creation of an array comprising stage configuration objects and supplementary parameters. Specifically, each stage environment now possesses its own dedicated object. To illustrate, I have provided an excerpt from the development stage below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageActive&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;nameEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;nameVM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageTestData&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="c1"&gt;# TODO pass your configuration variables here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This new approach aims to streamline stage management and configuration. I am eager to explore the finer details in our upcoming discussions.&lt;/p&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;cd&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Gone are the days of relying solely on a growing list of parameters and stage names to orchestrate our deployment pipeline. Instead, we have adopted a more dynamic and adaptable strategy by focusing on the &lt;code&gt;*.config.active&lt;/code&gt; value. This value serves as the driving force behind the inclusion or exclusion of stages from the pipeline. This approach provides a remarkable level of flexibility, enabling us to make adjustments without the fear of brittleness that stage names might introduce.&lt;/p&gt;
&lt;p&gt;Let us explore this transformation through a tangible example. Below, you will find an excerpt showcasing the new approach in action, specifically in the context of the development and system test stages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parameters:
-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt;     &lt;/span&gt;stage
&lt;span class="w"&gt;  &lt;/span&gt;type:&lt;span class="w"&gt;     &lt;/span&gt;object

stages:

#&lt;span class="w"&gt; &lt;/span&gt;-----------------------------------------------------------------
#&lt;span class="w"&gt; &lt;/span&gt;DEVELOPMENT&lt;span class="w"&gt; &lt;/span&gt;STAGE
#&lt;span class="w"&gt; &lt;/span&gt;-----------------------------------------------------------------

-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/blueprints/__101__/azure-pipeline-__101__-cd-stage.yml@CeBlueprints
&lt;span class="w"&gt;    &lt;/span&gt;parameters:
&lt;span class="w"&gt;      &lt;/span&gt;name:&lt;span class="w"&gt;                         &lt;/span&gt;&amp;#39;Development&amp;#39;
&lt;span class="w"&gt;      &lt;/span&gt;displayName:&lt;span class="w"&gt;                  &lt;/span&gt;&amp;#39;Development&lt;span class="w"&gt; &lt;/span&gt;(DV)&amp;#39;
&lt;span class="w"&gt;      &lt;/span&gt;config:&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
&lt;span class="w"&gt;      &lt;/span&gt;dependsOn:
&lt;span class="w"&gt;      &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;ContinuousIntegration

#&lt;span class="w"&gt; &lt;/span&gt;-----------------------------------------------------------------
#&lt;span class="w"&gt; &lt;/span&gt;SYSTEM&lt;span class="w"&gt; &lt;/span&gt;TEST&lt;span class="w"&gt; &lt;/span&gt;STAGE
#&lt;span class="w"&gt; &lt;/span&gt;------------------------------------------------------------------
-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/blueprints/__101__/azure-pipeline-__101__-cd-stage.yml@CeBlueprints
&lt;span class="w"&gt;    &lt;/span&gt;parameters:
&lt;span class="w"&gt;      &lt;/span&gt;name:&lt;span class="w"&gt;                         &lt;/span&gt;&amp;#39;SystemTest&amp;#39;
&lt;span class="w"&gt;      &lt;/span&gt;displayName:&lt;span class="w"&gt;                  &lt;/span&gt;&amp;#39;System&lt;span class="w"&gt; &lt;/span&gt;Test&lt;span class="w"&gt; &lt;/span&gt;(SY)&amp;#39;
&lt;span class="w"&gt;      &lt;/span&gt;config:&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
&lt;span class="w"&gt;      &lt;/span&gt;dependsOn:
&lt;span class="w"&gt;      &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;ContinuousIntegration
&lt;span class="w"&gt;      &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;        &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;Development
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet underscores how the cd template's revamped structure empowers us to effortlessly manage stages, pass configuration data, and adapt to evolving deployment needs.&lt;/p&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;cd-stage&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Lastly, the culmination of our efforts leads to the seamless flow of configuration and dependency objects into the &lt;code&gt;*cd-stage**.yml&lt;/code&gt; deployment stage template, an evolution that not only facilitates innovation but also encourages extension. This pivotal enhancement brings forth a user experience that is notably simplified and intuitive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------------------&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setSemVersion.semVersion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameVM&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameEnv&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;runOnce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In comparison to managing an expanding list of parameters, working with a comprehensive object empowers us to navigate complexities effortlessly. This shift provides a fertile ground for creativity and expansion, enabling us to embrace new possibilities and adapt to evolving deployment landscapes with remarkable ease.&lt;/p&gt;
&lt;h1&gt;What is the impact on our open-source project?&lt;/h1&gt;
&lt;p&gt;In line with our commitment to progress and collaboration, we are excited to announce that the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2
&lt;/a&gt; open-source project is about to undergo a significant update. This update will reflect the advancements we have made and the enhancements we are introducing to our in-house blueprints.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - this is potentially a breaking change if you are relying on the default blueprints in the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering"&gt;
WorkSafeBC Common Engineering&lt;/a&gt; project. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;As we embrace this enhanced approach, we look forward to a future where deployment processes are not only efficient but also versatile, setting the stage for continuous innovation with our continuous integration, delivery, and provisioning pipelines.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry></feed>