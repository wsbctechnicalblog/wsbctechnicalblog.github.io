<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2021-04-13T13:13:00-07:00</updated><entry><title>Quick peek into regular expressions</title><link href="https://wsbctechnicalblog.github.io/peek-into-regular-expressions.html" rel="alternate"></link><published>2021-04-13T13:13:00-07:00</published><updated>2021-04-13T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-13:/peek-into-regular-expressions.html</id><summary type="html">&lt;p&gt;Regular expressions are fundamental to programming&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I reviewed a pull request with a few commits focused on regular expression code changes, I decided to re-create a quick reference cheat sheet. Regular expression (regex), a variant of conventional set theory, has a few oddities with infrequent use. Hopefully this cheat sheet will turn regular expressions into a less daunting ally in your world programming and configuration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regular Expressions&lt;/p&gt;
&lt;p&gt;&lt;img alt="Regular Expressions" src="/images/peek-into-regular-expressions-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Common Expressions&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Special Characters&lt;/td&gt;
&lt;td&gt;.&lt;br/&gt;\.&lt;br/&gt;\n&lt;br/&gt;\f&lt;br/&gt;\t&lt;br/&gt;\xhhhh&lt;/td&gt;
&lt;td&gt;any character&lt;br/&gt;dot&lt;br/&gt;newline character&lt;br/&gt;form feed character&lt;br/&gt;tab character&lt;br/&gt;Unicode character as hexadecimal number, i.e. \xFFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quantifiers&lt;/td&gt;
&lt;td&gt;+&lt;br/&gt;?&lt;br/&gt;*&lt;br/&gt;{x,y}&lt;/td&gt;
&lt;td&gt;1 or more&lt;br/&gt;0 or one&lt;br/&gt;0 or more&lt;br/&gt;at least ‘x’ but no more that ‘y’ occurrences&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Character Sets&lt;/td&gt;
&lt;td&gt;\s&lt;br/&gt;\S&lt;br/&gt;\d&lt;br/&gt;\D&lt;br/&gt;\w&lt;br/&gt;\W&lt;br/&gt; [a-x] &lt;br/&gt;[^a-x]&lt;/td&gt;
&lt;td&gt;whitespace character&lt;br/&gt;non-whitespace character&lt;br/&gt;digit character (0-9) &lt;br/&gt;non-digit character&lt;br/&gt;any letter (a-zA-Z) or digit (0-9) or underscore (_) character &lt;br/&gt;non-word character&lt;br/&gt;characters in the range of a to x, excluding yz&lt;br/&gt;characters except in the range of a to x, i.e. y and z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anchoring&lt;/td&gt;
&lt;td&gt;^&lt;br/&gt;$&lt;br/&gt;\b&lt;br/&gt;\B&lt;/td&gt;
&lt;td&gt;if first char, indicates that match starts at start of  string&lt;br/&gt;match must continue to end of string&lt;br/&gt;word boundary&lt;br/&gt;non-word boundary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1&gt;Example&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Regular Expression Example&lt;/p&gt;
&lt;p&gt;&lt;img alt="Regular Expression Example" src="/images/peek-into-regular-expressions-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;#&lt;/th&gt;
&lt;th align="center"&gt;EXPRESSION&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;^&lt;/td&gt;
&lt;td&gt;The first character ^ indicates that the next match (19|20) starts at beginning of string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;(19|20)&lt;/td&gt;
&lt;td&gt;We either need a 19 or a 20 at the beginning of the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;\d\d&lt;/td&gt;
&lt;td&gt;Next we have two digit character (0-9).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;[- /.]&lt;/td&gt;
&lt;td&gt;Next we have a range of valid characters, in this case minus, slash, space and dot.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5.1&lt;/td&gt;
&lt;td align="center"&gt;(0[1-9]&lt;/td&gt;
&lt;td&gt;Either we have a 0, followed by a digit in the range of 1-9, i.e. 01 to 09.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5.2&lt;/td&gt;
&lt;td align="center"&gt;|1[012])&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OR&lt;/strong&gt; we have a 1, followed by a zero, one or two, i.e. 10, 11 or 12.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6.1&lt;/td&gt;
&lt;td align="center"&gt;(0[1-9]&lt;/td&gt;
&lt;td&gt;Either we have a 0, followed by a digit in the range of 1-9, i.e. 01 to 09.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6.2&lt;/td&gt;
&lt;td align="center"&gt;|[12][0-9)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OR&lt;/strong&gt; we have a 1 or a 2, followed by a digit in the range of 0-9, i.e. 10 to 29.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6.3&lt;/td&gt;
&lt;td align="center"&gt;|3[01])&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OR&lt;/strong&gt;** we have a three, followed by a zero or a one, i.e. 30 - 31.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;$&lt;/td&gt;
&lt;td&gt;The last character $ indicates that the next match must continue to end of string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you need more examples, go to &lt;a href="http://www.regular-expressions.info/"&gt;regularexpressions.info&lt;/a&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="Cheat Sheets"></category></entry><entry><title>Quick Reference Sheet for YAML and Generic Blueprint-based Pipelines</title><link href="https://wsbctechnicalblog.github.io/moving-hundreds-of-pipeline-snowflakes-qr-1.html" rel="alternate"></link><published>2021-04-13T00:00:00-07:00</published><updated>2021-04-13T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-13:/moving-hundreds-of-pipeline-snowflakes-qr-1.html</id><summary type="html">&lt;p&gt;Summarising the main points of YAML syntax, within the context of our generic blueprint-based pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quick Reference Posters help us foster collaboration, visualise and get across key points for specific topics. They also serve as handy cheat sheets!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;YAML Generic Blueprint-based Pipeline Quick Reference&lt;/p&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The quick reference poster introduces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic concepts for &lt;strong&gt;Parameters&lt;/strong&gt;, &lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;Triggers&lt;/strong&gt;, &lt;strong&gt;Resources&lt;/strong&gt;, and &lt;strong&gt;Templates&lt;/strong&gt;, as used in our generic blueprint-based pipelines. See &lt;a href="https://aka.ms/yaml"&gt;YAML Schema&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;In the centre of the poster, our single-job, multiple-steps &lt;strong&gt;generic blueprint&lt;/strong&gt;. See &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;On the right-hand side, our &lt;strong&gt;bootstrap template&lt;/strong&gt;. See &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/multi-stage-blueprint-based-1st-gen-pipelines-poster.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enjoy and remember that we crave candid feedback to sprinkle value over these artifacts!&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="Cheat Sheets"></category></entry><entry><title>Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part7.html" rel="alternate"></link><published>2021-04-12T00:00:00-07:00</published><updated>2021-04-12T00:00:00-07:00</updated><author><name>Said Akram</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-12:/yaml-pipelines-part7.html</id><summary type="html">&lt;p&gt;Do you want to own two or seventy five dozen lines of pipeline code per application? The choice is yours!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of pipeline wizardry. In &lt;a href="/yaml-pipelines-part6.html"&gt;part 6&lt;/a&gt; we covered the simplicity of the generic blueprint-based YAML pipeline and mentioned that there is more magic. Welcome to our application-type blueprints!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why we teleported our generic blueprints one level higher&lt;/h1&gt;
&lt;p&gt;In &lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt; we explore infrastructure-as-code and the concept of pipeline-as-code and mention that each engineer building a continuous integration pipeline write an average of 900+ lines of json or YAML configuration ... per pipeline. Using generic blueprints, we managed to reduce this repetitive and thus wasted effort of engineering to 100+ lines of configuration code. A massive improvement, not only in terms of engineering effort, but also re-use and consistency of an ever-growing infrastructure of pipelines that needs to be nurtured and innovated continuously.&lt;/p&gt;
&lt;p&gt;Our pipeline working group, made up of passionate engineers from architecture, security, development, infrastructure, release management, and site reliability engineering, agreed that we need to do better. As we have a handful of application architecture and technology-stacks, we also agreed that consistency, automation, and continuous innovation should form the foundation to self-service automation. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When we want to power up an electronic device, we plug it into the power grid and flip the on switch. None of us are interested in generating the power ourselves, or the local substation with an autonomy mindset.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That said, we are surprised at the outcome of a poll on Twitter and a LinkedIn, where we asked engineers if they want full or partial ownership of their pipelines, or self-service. Less than 50% are interested in self-service automation!?!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Combined results from Twitter and LinkedIn quick polls as at 2021.03.30 23:13&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline ownership" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some conspiracies we noticed in the polls and discussions with engineering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;You are influencing engineering on how they should work by centralizing pipeline templates!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No&lt;/strong&gt;, we are allowing engineering to collaborate, innovate, and influence each other.&lt;/li&gt;
&lt;li&gt;In fact, we are enabling the organization to package your hard earned experience and guardrails in re-usable templates.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You cannot possibly create a template for every scenario!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fully agree&lt;/strong&gt;, especially as we are continuously innovating.&lt;/li&gt;
&lt;li&gt;But, we can create templates and blueprints for common scenarios and re-use templates to quick-start the outliers. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;You should not abstract and hide the pipelines from engineering!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fully agree&lt;/strong&gt;. As covered in &lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt;, everyone can view the templates and blueprints and anyone can submit changes to existing templates or recommend new ones. The only thing we mandate is the use of pull requests to guard the template and blueprint repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will explore the real clincher, self-service automation, in a future planned post "&lt;em&gt;Self-service automation - A dream turns into reality&lt;/em&gt;". In the meantime, rest assured that engineers are free to use their creativity to craft their precious snowflakes till the cows come home. We are here to enable and guide through continuous innovation, manifestos, and guardrails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Back on track" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us get back on track. Why are we taking our generic blueprints, covered in &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt; and &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/a&gt;, to another level? To reduce the engineering effort to ~28 lines of pipeline configuration. That is a saving of 97% of repetitive and often mind-numbing configuration engineering.&lt;/p&gt;
&lt;p&gt;Have we caught your attention? If yes, read on.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Unveiling our Application-Type Blueprints&lt;/h1&gt;
&lt;p&gt;With application-type, in short app-type, blueprints we are taking the continuous integration (CI) pipelines light-years further in terms of our goals for simplicity, security, enablement, and consistency. Each app-type blueprint, consists of a &lt;strong&gt;starter&lt;/strong&gt; template, an &lt;strong&gt;app-type&lt;/strong&gt; template, and a reference &lt;strong&gt;sample&lt;/strong&gt; implementation, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blueprint Architecture&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blueprint Architecture" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;starter&lt;/strong&gt; template allows you to configure your continuous integration pipeline. This is the only moving part that is copied and becomes part of your application code base, protected by your branch policies and your team-level pull request workflow.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;app-type&lt;/strong&gt; template abstracts the entire continuous integration (CI) process, our generic blueprints and integration with our bootstrap template, promoting consistency, delegates responsibility for the implementation to our common engineering system team, and encourages you to be razor-focused on your application. Anyone can view the blueprints (transparency) and everyone can submit a pipeline working group pull request to continuously innovate the blueprints (we are one).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;example&lt;/strong&gt; implementation of a starter and app-type template, sample application, and pipeline is self-explanatory. Handy awareness and validation aid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example of our Azure Function starter template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Trigger&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt;

&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AppTemplates&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;CeS/AzureDevOps.Automation.Pipeline.AppTemplates&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Semantic&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;Azure&lt;/span&gt; &lt;span class="n"&gt;DevOps&lt;/span&gt; &lt;span class="n"&gt;Naming&lt;/span&gt; &lt;span class="n"&gt;Conventions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SourceBranchName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;VARIABLES&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PORTFOLIO NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;CeS&lt;/span&gt;
  &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PRODUCT NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Samples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;AzureFunction&lt;/span&gt;

&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="sr"&gt;/AzureFunction/&lt;/span&gt;&lt;span class="n"&gt;AzureFunctionTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;AppTemplates&lt;/span&gt;
  &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH .NET CORE VERSION&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;applicationGuid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH A NEW GUID WITHOUT BRACKETS&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;257929&lt;/span&gt;&lt;span class="n"&gt;e89c69471083efb51899b42bdb&lt;/span&gt;
    &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In case you have not counted yourself: A mere twenty-two (22) lines of configuration code, with only four (4) TODO that require minimal effort!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;It took me a few minutes to setup our entire continuous deployment (CD) proof-of-concept (PoC) environment, after which I was able to focus on the CD experiments. I am Said's App-type blueprints #1 fan!&lt;/em&gt;" - &lt;a href="https://www.linkedin.com/in/wpschaub/"&gt;Willy Schaub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another nugget you may have missed in the platter of configuration code, is the &lt;strong&gt;extends&lt;/strong&gt; template. It enables &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/security/templates?view=azure-devops"&gt;Security through templates&lt;/a&gt; and allows us to set a required template check gate for resources and environments. More on that when we share our CD PoC results.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Don't repeat yourself&lt;/h1&gt;
&lt;p&gt;As software engineers, we try to avoid code duplication. Each time we spot a code used in two or more methods, we fix it by moving the code into its own method and calling that method from all of the places where it was originally used.&lt;/p&gt;
&lt;p&gt;The same DRY principle can be applied to Continuous Integration (CI) build pipelines. As covered in &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;, we use pipeline blueprints to define reusable content.&lt;/p&gt;
&lt;p&gt;Even if we have thousands of build pipelines, we only have a few application architectures. Our app-type templates can serve a big part of the applications we have. For the rest of the applications, we can create custom YAML based pipelines.&lt;/p&gt;
&lt;h1&gt;Pipeline As a Service&lt;/h1&gt;
&lt;p&gt;As a software developer, do I want to own (i.e. create and maintain) the pipelines to build and deploy my application? My answer is &lt;strong&gt;NO&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I will be glad to let another team take that responsibility while I focus on creating value for the business by delivering quality software.&lt;/p&gt;
&lt;p&gt;As long as I have access to the build pipeline templates and able to suggest changes, I will not lose my ability to do my work and troubleshoot issues if any.&lt;/p&gt;
&lt;h1&gt;How to implement your pipeline using the App-Type Blueprints&lt;/h1&gt;
&lt;p&gt;This is where both the effort of creating new continuous integration (CI) build pipelines and writing this post becomes &lt;strong&gt;simple&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="How-to" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-4.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy the content of the &lt;strong&gt;starter&lt;/strong&gt; template from the CeS/AzureDevOps.Automation.Pipeline.Templates repository (aka the sample above).&lt;/li&gt;
&lt;li&gt;Rename the app-type template from azure-pipelines-&lt;TYPE&gt;.yml as needed (an optional step).&lt;/li&gt;
&lt;li&gt;Look for TODO and update / fine-tune as needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other than running your pipeline, you are &lt;strong&gt;DONE&lt;/strong&gt;! &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What if an App-Type Blueprint is not available?&lt;/h1&gt;
&lt;p&gt;If our pipeline working group achieves a 75% coverage of all our current pipeline scenarios, such as Azure Artifact packages, .NET Core, or Angular applications, we will start celebrating. &lt;/p&gt;
&lt;p&gt;In the meantime, and to cover the remaining 25% there will always be an application type for which there is no blueprint, or a snowflake that requires something special.&lt;/p&gt;
&lt;p&gt;&lt;img alt="404" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Our engineers have a simple flowchart if they cannot find a suitable blueprint in our template repository:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a custom &lt;strong&gt;starter&lt;/strong&gt; and &lt;strong&gt;app-type&lt;/strong&gt; blueprint from scratch or tweaking an existing blueprint. Latter is recommended.&lt;/li&gt;
&lt;li&gt;Submit a &lt;strong&gt;Pull Request&lt;/strong&gt; with your &lt;strong&gt;starter&lt;/strong&gt; template to our CeS Templates repo.&lt;/li&gt;
&lt;li&gt;Submit a &lt;strong&gt;Pull Request&lt;/strong&gt; with your &lt;strong&gt;app-type&lt;/strong&gt; template to our CeS AppTemplates repo. &lt;/li&gt;
&lt;li&gt;Collaborate with the pipeline working group to release your changes with the common engineering system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;SIMPLE&lt;/strong&gt;, yet powerful wizardry!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We will report back on our proof-of-concept and associated experiments to extend the app-type continuous integration (CI) build pipeline blueprints to include continuous deployment (CD).&lt;/p&gt;
&lt;p&gt;See you soon in Part 8: Pipelines - From CI to CD and beyond in one pipeline.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | Part 7 |  &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Synchronized 'if' statements considered harmful</title><link href="https://wsbctechnicalblog.github.io/synchronized-if-statements-considered-harmful.html" rel="alternate"></link><published>2021-04-08T00:00:00-07:00</published><updated>2021-04-08T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-08:/synchronized-if-statements-considered-harmful.html</id><summary type="html">&lt;p&gt;Duplicated imperative conditional logic leads to proliferation of bugs&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"&gt;Edsger Dijkstra's&lt;/a&gt; famous letter &lt;a href="https://dl.acm.org/doi/10.1145/362929.362947"&gt;"Go To Statement Considered Harmful"&lt;/a&gt; was published 53 years ago in the March 1968 &lt;em&gt;Communications of the Association for Computing Machinery (ACM)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Today, no one uses &lt;strong&gt;go to&lt;/strong&gt; statements anymore. The practice was proven harmful, and the pernicious &lt;strong&gt;go&lt;/strong&gt; to statement was replaced by more appropriate statements as part of the structured programming vocabulary.&lt;/p&gt;
&lt;p&gt;Upon closer inspection, though, it turns out that &lt;strong&gt;go to&lt;/strong&gt; statement by itself is not that harmful, after all. It simply implements a jump from one statement in the code to another statement in the code. But, so do structured programming language constructs that replaced the &lt;strong&gt;go&lt;/strong&gt; to statement. Statements such as &lt;strong&gt;return&lt;/strong&gt;, &lt;strong&gt;break&lt;/strong&gt;, &lt;strong&gt;continue&lt;/strong&gt;. Those statements also implement a jump from one statement in the code to another statement in the code.&lt;/p&gt;
&lt;p&gt;Knowing that, why did Dijkstra think &lt;strong&gt;go to&lt;/strong&gt; was so harmful, while &lt;strong&gt;return&lt;/strong&gt;/&lt;strong&gt;break&lt;/strong&gt;/&lt;strong&gt;continue&lt;/strong&gt; etc. aren’t harmful?&lt;/p&gt;
&lt;h2&gt;Cognitive dissonance&lt;/h2&gt;
&lt;p&gt;What Dijkstra had noticed back in 1968 is the discrepancy between how we think and how computers work. We seem to focus most of our thinking toward orienting ourselves in space. We like to read and draw maps, and indicate things that are near or far, over here or over there, etc.&lt;/p&gt;
&lt;p&gt;On the other hand, we don’t seem that well versed in thinking along temporal dimension. Time indicates change, and we mostly dislike change, as it threatens to unsettle us from our familiar comfort zones. We prefer spatial coordinates as they indicate something solid, firm, unchangeable, non-threatening.&lt;/p&gt;
&lt;p&gt;Computers work in the exact opposite fashion. When a computer program runs, it unfolds in time. First this statement gets executed, then that statement, and so on. But these execution steps do not necessarily follow in linear fashion.&lt;/p&gt;
&lt;p&gt;Still, when we read a source code that comprises a computer program, we reason in spatial terms. We start from the top of the page (or top of the screen) and then we parse the code-as-text one line at the time, going sequentially. Until we reach the end of the source code file.&lt;/p&gt;
&lt;p&gt;Trouble is, that’s not how the program behaves. When a program runs, it makes all kinds of hyper-space leaps and bounds. It does not follow any neatly laid out spatial map.&lt;/p&gt;
&lt;p&gt;Imagine a dancing competition where contestants would take snapshots of them dancing and would then send those snapshots to the jury. The jury would review the submitted snapshots and would then announce the winner of the dancing competition.&lt;/p&gt;
&lt;p&gt;Or, imagine a cooking competition where contestants would take snapshots of them making food and would then send those snapshots to the jury. The jury would review the submitted snapshots and would then announce the best chef.&lt;/p&gt;
&lt;p&gt;When we are reviewing a snapshot of the source code, we are equally reducing a very dynamic situation (i.e. a running program) to the set of static freeze-frame snapshots. It gives us a very unrealistic picture of how the program behaves and what is it capable of (this is especially obvious when we examine static snapshots of the code that is doing asynchronous processing).&lt;/p&gt;
&lt;h2&gt;Go to is only harmful when combined with if statements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Go to&lt;/strong&gt; statement by itself is no different than other control flow statements. It interrupts the linear flow (i.e. after executing current statement, it steps into the statement on the next line below). But so do other flow control statements that were introduced as part of structured programming with the intent to eliminate &lt;strong&gt;go to&lt;/strong&gt; statements.&lt;/p&gt;
&lt;p&gt;So, why is it then that Dijkstra considered &lt;strong&gt;go to&lt;/strong&gt; harmful? The reason is that only when &lt;strong&gt;go to&lt;/strong&gt; gets combined with &lt;strong&gt;if&lt;/strong&gt; statements that we create a fertile breeding ground for bugs. For example, if we say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;if(orderTotal &amp;gt; 500.00 go to line 10)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;that type of control flow has the potential to result in buggy code.&lt;/p&gt;
&lt;p&gt;Without the conditional statement (the &lt;strong&gt;if&lt;/strong&gt;) having a simple statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;go to line 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is not problematic. Why? Because it is not conditionally controlling the flow of execution. It is simply directing the flow without checking for any specific values.&lt;/p&gt;
&lt;p&gt;Knowing this, one wonders why is it that Dijkstra did not declare &lt;strong&gt;if&lt;/strong&gt; statements harmful? The reason is probably that back in 1968, Dijkstra was able to clearly define structured programming discipline, but he did not have the tools at his disposal that would enable him to define the discipline needed for removing the &lt;strong&gt;if&lt;/strong&gt; statements. Back then, the concept of object programming was still nascent.&lt;/p&gt;
&lt;p&gt;Today, we have well entrenched knowledge of object-oriented programming, and have great methodologies for replacing imperative &lt;strong&gt;if&lt;/strong&gt; statements with more sophisticated code constructs.&lt;/p&gt;
&lt;h2&gt;Business policy rules must be declared in very visible places&lt;/h2&gt;
&lt;p&gt;The most volatile (and most critical) parts of the app code are the parts that automate business policy rules. Those policy rules are governed by conditional logic (i.e. &lt;em&gt;if in this moment the state of the app is such-and-such, then the following expected transformation of values must occur&lt;/em&gt;). Because business policy rules are in constant flux, teams are incessantly making changes to the already changed code.&lt;/p&gt;
&lt;p&gt;It is those changes that offer the most fruitful opportunity for authoring bugs. What is the reason for this frequent bug authoring?&lt;/p&gt;
&lt;p&gt;Most of the time the unwanted effects of the change to the code happen if the conditional logic is duplicated. The same logic gets implemented in more than one module/method. This duplication creates opportunities for missing or misplacing the necessary changes.&lt;/p&gt;
&lt;p&gt;If we have implemented imperative conditional logic by using &lt;strong&gt;if-else&lt;/strong&gt; statements in some module or method, chances are that there will be some other module or method where the exact same conditional logic will be needed. As the program runs, at various times it will need to make a processing decision based on that specific conditional logic.&lt;/p&gt;
&lt;p&gt;The trouble begins when those varying modules and methods need to be maintained. The business policy rule has changed, and now our code must mirror that change. Being able to make the necessary change in all the affected methods and/or modules is often riskier than it may seem.&lt;/p&gt;
&lt;p&gt;We often call these duplicate instances of conditional logic &lt;strong&gt;synchronized ifs&lt;/strong&gt;. If one &lt;strong&gt;if&lt;/strong&gt; statement needs to change, all other synchronized &lt;strong&gt;if&lt;/strong&gt; statements must change at the same time. Which could quite often be a challenge.&lt;/p&gt;
&lt;p&gt;We must therefore abandon synchronized &lt;strong&gt;ifs&lt;/strong&gt; and abstract conditional logic away into a single source of truth. The trick is choosing proper abstraction to accomplish that task. Which is the topic for another blog post.&lt;/p&gt;</content><category term="Posts"></category><category term="Extreme Programming"></category></entry><entry><title>Extreme Programming 25 Years Later</title><link href="https://wsbctechnicalblog.github.io/xp-25-years-later.html" rel="alternate"></link><published>2021-03-31T00:00:00-07:00</published><updated>2021-03-31T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-31:/xp-25-years-later.html</id><summary type="html">&lt;p&gt;Extreme programming keeps going strong 25 years after its launch&lt;/p&gt;</summary><content type="html">&lt;p&gt;Extreme Programming (XP) was a revolutionary movement launched by &lt;a href="https://en.wikipedia.org/wiki/Kent_Beck"&gt;Kent Beck&lt;/a&gt; in 1996. According to Beck, XP was a political statement. Back in the mid-1990s, software quality was being outsourced to the QA departments. Programmers were doing their part by writing software to the best of their ability but would then delegate the quality of their products to testers.&lt;/p&gt;
&lt;p&gt;Beck disagreed with that approach and felt that quality is everyone’s responsibility. He launched Extreme Programming as a political statement which expresses full and unreserved commitment to unwavering high quality and professionalism in software engineering.&lt;/p&gt;
&lt;h2&gt;How did XP improve software engineering discipline?&lt;/h2&gt;
&lt;p&gt;Today, 25 years after Beck launched his political statement, we are seeing incredibly impressive improvements in our profession. The initial launch made strong waves which are being felt to this day. Let’s look at some of the obvious improvements that XP brought to the table.&lt;/p&gt;
&lt;h3&gt;Continuous deployment (CD)&lt;/h3&gt;
&lt;p&gt;Back in the 1990s, deployment was sporadic (non-continuous). Teams working under the waterfall development paradigm were being driven by the Big Plan Upfront. That upfront plan was fleshed out to such levels of detail that it would predict the exact deployment date. That date was typically scheduled far into the future (oftentimes 6, 8, 12 or even 24 months in the future).&lt;/p&gt;
&lt;p&gt;Beck had raised many eyebrows at Chrysler in 1996 when he was put in charge of their software engineering and declared that teams will be deploying every three weeks. Such aggressive schedule was unheard of (the most daring teams were deploying every three to six months at best). But he pushed through and stuck to his guns and demonstrated that it was possible to do regular deployments on a three weeks cadence. How did he manage to do that? He instigated the discipline of Extreme Programming.&lt;/p&gt;
&lt;p&gt;25 years ago, deploying software every three weeks did seem extreme indeed, so the name Extreme Programming stuck (today, Beck somewhat regrets choosing that name, but that’s a discussion for another micro learning episode).&lt;/p&gt;
&lt;p&gt;Today, we see many teams deploying much more frequently than every three weeks. Many manage to do it every week, or even every day. Some even do it more than once per day. In the most extreme cases of Extreme Programming, we see teams deploying code &lt;a href="https://www.zdnet.com/article/how-amazon-handles-a-new-software-deployment-every-second/"&gt;every second!&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Testing in production&lt;/h3&gt;
&lt;p&gt;Continuous deployment presents an opportunity to test changes in production. If we’re deploying to production many times per day, we get a chance to truly run our software through its paces right there, in the real world.&lt;/p&gt;
&lt;p&gt;When Beck was formulating his Extreme Programming approach, he said he was guided by one simple principle:&lt;/p&gt;
&lt;p&gt;“I want the code to run all the time!”&lt;/p&gt;
&lt;p&gt;What better way to fulfill that guiding principle than to run and test the code in a live environment?&lt;/p&gt;
&lt;p&gt;Yes, but what about potential defects? Wouldn’t deploying changes to production so that we could test them potentially harm us? The answer lies in mastering feature flags (we already discussed this topic in another micro learning episode).&lt;/p&gt;
&lt;h3&gt;No bugs&lt;/h3&gt;
&lt;p&gt;Rather than chasing bugs, our time is better spent not writing them in the first place. TDD and shift left are methodologies that underpin XP and are our best weapon against bugs. All bugs are authored and minimizing/eliminating sloppy authorship inevitably results in minimizing/preventing bugs.&lt;/p&gt;
&lt;p&gt;Consequently, we cannot consider any story actually completed until the code that implements the story is in production, tested, and proven to be bug free.&lt;/p&gt;
&lt;h3&gt;No backlog&lt;/h3&gt;
&lt;p&gt;XP teams adopt a default answer to any feature request. That default answer is “No”. The rationale is that if ideas for features (i.e. hypotheses) are indeed important, they will come up again. Only in such cases is the request for feature (hypothesis) going to be taken up for work.&lt;/p&gt;
&lt;p&gt;This approach eliminates bloat. The rationale is that maintaining a long backlog is a waste. Identify the most important thing right now and then work on it. If while working on it something more important emerges, stop working on the current thing and attend to the more important one. Keep going in the same fashion. Iterate.&lt;/p&gt;
&lt;h3&gt;No estimates&lt;/h3&gt;
&lt;p&gt;Estimating a required effort by counting story points amounts to measuring the output instead of measuring the outcome. Wrong metric.&lt;/p&gt;
&lt;p&gt;Some teams switch from counting story points to counting number of stories delivered. Which is also a meaningless metric.&lt;/p&gt;
&lt;p&gt;If teams are already doing the best they can, and are working on the most important thing at the time, and are deploying as soon as possible, what’s the point in estimating? Time spent estimating is a waste, and that time could be better spent attending to most important things (i.e. working software that meets customers’ needs).&lt;/p&gt;
&lt;h3&gt;Data driven&lt;/h3&gt;
&lt;p&gt;System cannot evolve in the absence of business hypotheses. What are the sources of those hypotheses? Backlogs, predictions, Big Plan Upfront? A better, more reliable option is to use data. Collecting data by interviewing customers and end-users, exploring logs and devising razor-sharp telemetry is a better way to evolve the business.&lt;/p&gt;
&lt;h3&gt;Improvement boards&lt;/h3&gt;
&lt;p&gt;Improvement boards are based on the improvement kata (pioneered in Toyota). Improvement kata is based on the discoveries that occur along the way. This approach requires that participants do not hold on to the sense of certainty that is based on any prescribed perspective. Rather, the emphasis is on innovation and experimentation. The experiments are published on the Improvement board, which then serves as a reminder, an inspiration, an invitation to collaboration, lessons learned, etc.&lt;/p&gt;
&lt;h3&gt;Mob programming&lt;/h3&gt;
&lt;p&gt;The original collaboration model that XP introduced (pair programming) has been expanded and improved by introducing mob programming. Mob programming is not possible without practicing TDD.&lt;/p&gt;
&lt;h3&gt;Throwing code away&lt;/h3&gt;
&lt;p&gt;Functionality is an asset; code is a liability. In XP, functionality gets encoded in test scripts. As such, those test scripts are a definitive asset. In TDD, test scripts drive the implementation of the code.&lt;/p&gt;
&lt;p&gt;Testability is the highest value, while code is disposable. Some teams are discovering that it helps if we stop viewing implementation code as an asset, and if we often dispose of it and write it again guided by the tests.&lt;/p&gt;
&lt;h3&gt;Limit work-in-progress&lt;/h3&gt;
&lt;p&gt;When teams adopt a ‘no bugs’ mindset, they work following Edward Deming’s formula: “Quality comes not from inspection, but from improvement of the production process.” The only way to improve the production process is to limit work in progress. Limiting work in progress means eliminating interruptions.&lt;/p&gt;
&lt;p&gt;When teams have full control of their work environment (i.e. teams own their work), there is no need to multitask.&lt;/p&gt;
&lt;h3&gt;Hackathons&lt;/h3&gt;
&lt;p&gt;Incremental improvements are not giving organizations much needed competitive edge. To survive and thrive, organizations need to continuously engage in experimenting with completely new ideas. Innovations are mandatory, and our InnoFest is an excellent illustration of the viability and the importance of that approach.&lt;/p&gt;
&lt;h3&gt;DevOps&lt;/h3&gt;
&lt;p&gt;As developers start doing daily deployments, they get heavily involved with operations. By doing that, DevOps quickly turn into product support team. There is then only one small step from working as a product support team to becoming THE product team.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Extreme Programming has proven not only that it has amazing staying power (25 years and going strong) but also that it can evolve in unexpected and surprisingly powerful ways. All the major improvements that happened in XP during the past 25 years serve one single purpose: running the code all the time.&lt;/p&gt;
&lt;p&gt;The future of XP looks bright. By speeding up the delivery while minimizing/eliminating defects, it is poised to continue enabling business automation and offering unprecedented competitive advantage through increased flexibility.&lt;/p&gt;</content><category term="Posts"></category><category term="Extreme Programming"></category><category term="XP"></category><category term="Agile"></category><category term="DevOps"></category></entry><entry><title>Code-as-text</title><link href="https://wsbctechnicalblog.github.io/code-as-text.html" rel="alternate"></link><published>2021-03-26T00:00:00-07:00</published><updated>2021-03-26T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-26:/code-as-text.html</id><summary type="html">&lt;p&gt;Programming computers by feeding them plain text is very slow and needs to be sped up.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Indeed, the ratio of time spent reading vs. writing is well over 10:1… Because this ratio is so high, we want the reading of code to be easy, even if it makes the writing harder.&lt;/em&gt; — &lt;strong&gt;Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The only way we know how to program computers is by feeding them text. In the olden days, we used to program computers differently (e.g. by directly rewiring the computing machinery or by crafting punched cards – figures 1 and 2).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programming by rewiring" src="/images/early-programming.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 1.&lt;/strong&gt; &lt;em&gt;Programming computers by manually rewiring them.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Punched card" src="/images/punched-card.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 2.&lt;/strong&gt; &lt;em&gt;Programming computers by producing punched cards.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To bring the challenge of computer programming closer to the human level of comprehension, we have collectively decided, some 70 years ago, to introduce a level of indirection and let programmers encode their intentions using pure text. Text is more intuitively accessible to humans than complicated mechanical contraptions or obtuse punched cards, so the new technology stuck.&lt;/p&gt;
&lt;p&gt;Today, everyone programs computers by using nothing else but plain text.&lt;/p&gt;
&lt;h2&gt;What’s the problem?&lt;/h2&gt;
&lt;p&gt;Computer programs, written as plain text (i.e. source code) differ significantly from natural human languages. In what ways?&lt;/p&gt;
&lt;p&gt;Firstly, computer source code is lexically different from natural languages. Computer programming languages are composed of severely limited vocabulary (some words used as programming language keywords, or reserved words), while other words remain free-form in order to act as unique identifiers that help name program constructs (variables, methods, modules, etc.)&lt;/p&gt;
&lt;p&gt;Secondly, computer source code is syntactically laid out and organized differently than natural languages. Formally defined structures play much more important role in computer programming languages than they play in natural languages. Furthermore, almost all programming languages feature multiple forms of indented layouts (horizontal and vertical). Such layout is seldom, if ever, encountered in written natural languages.&lt;/p&gt;
&lt;p&gt;Thirdly, and most importantly, there is the difference in semantics: text written in a natural language is typically understood in two simultaneous (concurrent) phases. Those phases denote:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Text (how it is written down)&lt;/li&gt;
&lt;li&gt;Domain (what does the text mean)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These two phases of simultaneous comprehension are insufficient when reading a computer program (code-as-text). To understand the computer source code, we need a third dimension: execution.&lt;/p&gt;
&lt;p&gt;To discover the operational semantics of the program’s source code, we are required to trace the source code execution.&lt;/p&gt;
&lt;p&gt;Easier said than done. Oftentimes, opening a file containing code-as-text does not give as an easy access to grasping what is that program supposed to be doing. Unlike with natural language written down as text, where we can safely start from the top of the page/screen and follow the story as it unfolds, row by row, paragraph by paragraph, computer source code does not necessarily proceed in that fashion.&lt;/p&gt;
&lt;p&gt;The problem therefore lies in the fact that code-as-text cannot provide us with clear understanding of how the program will behave. We can only know for sure how the program works and what does the program execute if we execute it.&lt;/p&gt;
&lt;h2&gt;Why is that a problem?&lt;/h2&gt;
&lt;p&gt;Seeing how code-as-text is an intermediary layer between human programmer and the machine that runs the program, we observe that there is an unavoidable lag between the moment when we make a change (a diff) to the source code and the moment when we learn about the impact of the change we’ve made. This lag is the crux of the problem.&lt;/p&gt;
&lt;p&gt;In many environments, it takes a considerable amount of time between us making a diff and seeing the effects of that diff. This inevitable slowdown is negatively affecting the quality of our work.&lt;/p&gt;
&lt;p&gt;In contrast, almost any other crafting activity is free of this annoying lag. If we’re building a cabinet, for example, the material and the tools we’re using will inform us, instantaneously, about the effects of the change we’re making. We get feedback in real time, and that feedback is ensuring that we proceed without making serious mistakes.&lt;/p&gt;
&lt;p&gt;None such real time feedback is available in the activity of software engineering. When writing software, we work with code-as-text, which is incapable of giving us real time feedback. Once we introduce some change into the source code, we have to do a lot of acrobatics before we can see the result of that change. This is considerably slowing us down and therefore poses a serious problem when it comes to ensuring quality of our delivery.&lt;/p&gt;
&lt;h2&gt;Is there a solution?&lt;/h2&gt;
&lt;p&gt;Currently the only mainstream solution that exists for addressing the above problem is Test Driven Development (TDD). As we have seen in our TDD Dojo, when doing TDD we focus on executing our program as frequently as possible. The only way to gain insight and understanding about the effect of the changes we make to the source code is to execute the program. And because TDD is based on writing micro tests, the time lag between the moment when we make the change and the moment we execute the program and witness the effects of that change is as short as it can get.&lt;/p&gt;</content><category term="Posts"></category><category term="Agile"></category><category term="DevOps"></category><category term="Programming"></category></entry><entry><title>Incremental and Iterative Development – what’s the diff?</title><link href="https://wsbctechnicalblog.github.io/incremental-and-iterative-development.html" rel="alternate"></link><published>2021-03-19T00:00:00-07:00</published><updated>2021-03-19T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-19:/incremental-and-iterative-development.html</id><summary type="html">&lt;p&gt;Visual example illustrating the fundamental differences between incremental and iterative development process.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I oftentimes hear people discuss development methodologies and mention incremental and iterative approaches. When I ask for further clarification, it surprises me how frequently people conflate the two methodologies. I hear “well, they’re just two words denoting the same thing”.&lt;/p&gt;
&lt;p&gt;Which is far from being true. Let’s now examine what makes one development process iterative and another development process incremental, and let’s then look into what makes them so fundamentally different.&lt;/p&gt;
&lt;h2&gt;Iterative development&lt;/h2&gt;
&lt;p&gt;According to the dictionary, to iterate implies “to perform or utter repeatedly”. Repetition is the essence of iteration. In software engineering, we often call iteration by another name – rework.&lt;/p&gt;
&lt;p&gt;This distinction sometimes gets misinterpreted, so I’d like to illustrate what is meant by the expression ‘iterative development’, and I’d like to use a series of visual examples.&lt;/p&gt;
&lt;p&gt;Let’s start with the first iteration (or a first pass). The initial draft may look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 1" src="/images/monalisa/monalisa1.png"&gt;&lt;/p&gt;
&lt;p&gt;Since the above draft is very vague and unclear, we need to revisit our first draft and do a bit of rework, in the hopes of adding some clarity:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 2" src="/images/monalisa/monalisa2.png"&gt;&lt;/p&gt;
&lt;p&gt;The picture now is a little bit clearer, but still it is obvious it needs more work (rework). So we iterate, and the third iteration looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 3" src="/images/monalisa/monalisa3.png"&gt;&lt;/p&gt;
&lt;p&gt;A bit better, yeah? Still, quite fuzzy. Let’s do the fourth iteration:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 4" src="/images/monalisa/monalisa4.png"&gt;&lt;/p&gt;
&lt;p&gt;Ah okay, maybe now with the fourth iteration some eagle-eyed people can already recognize what are we making? Still, needs more rework. On to the fifth iteration:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 5" src="/images/monalisa/monalisa5.png"&gt;&lt;/p&gt;
&lt;p&gt;Oh, that kind of looks familiar. Just to be sure, let’s do more rework; iteration 6:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 6" src="/images/monalisa/monalisa6.png"&gt;&lt;/p&gt;
&lt;p&gt;It’s a portrait of a woman, and maybe even a very famous portrait. Let’s add more details; iteration 7:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 7" src="/images/monalisa/monalisa7.png"&gt;&lt;/p&gt;
&lt;p&gt;Aha, looks like Leonardo da Vinci’s famous Mona Lisa! Definitely. But it looks quite crude – we need to do some more rework. Iteration 8:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 8" src="/images/monalisa/monalisa8.png"&gt;&lt;/p&gt;
&lt;p&gt;Now there’s no doubt – it is Mona Lisa! If we squint we can definitely be sure. But it lacks a lot of detail still. Iteration 9:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 9" src="/images/monalisa/monalisa9.png"&gt;&lt;/p&gt;
&lt;p&gt;The details are starting to emerge. Still looks amateurish. More rework; iteration 10:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 10" src="/images/monalisa/monalisa10.png"&gt;&lt;/p&gt;
&lt;p&gt;The expression on Mona Lisa’s face is now visible. Let’s keep going; iteration 11:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 11" src="/images/monalisa/monalisa11.png"&gt;&lt;/p&gt;
&lt;p&gt;Almost there! Still somewhat pixelated, we will circle back one more time to increase the resolution. Iteration 12:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 12" src="/images/monalisa/monalisa12.png"&gt;&lt;/p&gt;
&lt;p&gt;Voila! That’s it. Gradual refinement delivers the masterpiece!&lt;/p&gt;
&lt;h2&gt;Incremental development&lt;/h2&gt;
&lt;p&gt;According to the dictionary, to increment means “an increase or addition, especially one of a series on a fixed scale”.&lt;/p&gt;
&lt;p&gt;Let’s illustrate incremental development using Da Vinci’s Mona Lisa.&lt;/p&gt;
&lt;p&gt;First increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 1" src="/images/monalisa/monalisaincrement1.png"&gt;&lt;/p&gt;
&lt;p&gt;Second increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 2" src="/images/monalisa/monalisaincrement2.png"&gt;&lt;/p&gt;
&lt;p&gt;Third increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 3" src="/images/monalisa/monalisaincrement3.png"&gt;&lt;/p&gt;
&lt;p&gt;Fourth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 4" src="/images/monalisa/monalisaincrement4.png"&gt;&lt;/p&gt;
&lt;p&gt;Fifth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 5" src="/images/monalisa/monalisaincrement5.png"&gt;&lt;/p&gt;
&lt;p&gt;Sixth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 6" src="/images/monalisa/monalisaincrement6.png"&gt;&lt;/p&gt;
&lt;p&gt;And so on…&lt;/p&gt;
&lt;h2&gt;What are the differences between iterative and incremental development?&lt;/h2&gt;
&lt;p&gt;I hope that the visual illustrations above are helpful in driving the salient points home. Let’s enumerate the differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unlike iterative development, which starts with the whole picture (the whole system), incremental development starts from one fixed part of the system&lt;/li&gt;
&lt;li&gt;Unlike iterative development, which outlines the whole system in very crude strokes, incremental development works on an isolated fixed part of the system until is fully done (following the Definition of Done, or DoD)&lt;/li&gt;
&lt;li&gt;Unlike iterative development, which is based on relentless rework, incremental development forbids rework, and only moves on to work on the next part of the system once the previous part is fully fleshed out and frozen for any further changes&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="Agile"></category><category term="DevOps"></category></entry><entry><title>Pipeline-as-code wrapped with Pull Requests</title><link href="https://wsbctechnicalblog.github.io/pipelines-as-code-pr.html" rel="alternate"></link><published>2021-03-13T00:00:00-08:00</published><updated>2021-03-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-13:/pipelines-as-code-pr.html</id><summary type="html">&lt;p&gt;This post attempts to give our critics some answers and scratch the surface of the possibilities and values of our new blueprint-based pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the past three program increments, which amounts to a staggering 30 iterations, or 300 days, we have been working on our quest to convert our legacy classic pipelines to YAML-based pipelines, as outlined in our &lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options&lt;/a&gt; series. More importantly, we have been working in parallel to elaborate on the value to our stakeholders. &lt;/p&gt;
&lt;p&gt;A tough challenge, because there is no visual value in continuous integration and deployment pipelines to business, our delighted end-users, or our engineers who want full control of our common engineering system. &lt;/p&gt;
&lt;p&gt;A recent awareness and prioritisation push by our &lt;a href="https://www.scaledagileframework.com/release-train-engineer-and-solution-train-engineer/"&gt;Release Train Engineers&lt;/a&gt; have raised a few interesting questions. This post attempts to give our critics some answers and scratch the surface of the possibilities and values of our new blueprint-based pipelines.&lt;/p&gt;
&lt;h1&gt;Pipelines as code ... what?&lt;/h1&gt;
&lt;p&gt;Let us start with &lt;strong&gt;infrastructure as code&lt;/strong&gt; (IaC), which manages and provisions computer data centers through machine- and human-readable configuration files. Instead of humanoids manually clicking and tweaking knobs and dials in a graphical user interface, machines read and process the code. There is no apocalyptic vision of &lt;a href="https://en.wikipedia.org/wiki/Skynet_(Terminator)"&gt;Skynet&lt;/a&gt;, only the option of &lt;strong&gt;automation&lt;/strong&gt; and &lt;strong&gt;consistent&lt;/strong&gt; deployment of our infrastructure.&lt;/p&gt;
&lt;p&gt;If you view continuous integration and deployment pipelines as infrastructure, we could stop here. However, &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; introduced the term "&lt;strong&gt;pipelines as code&lt;/strong&gt;", which is more fitting.&lt;/p&gt;
&lt;p&gt;It is a technique that treats the configuration of our continuous integration and deployment pipelines as code, placed under version control, packaged in reusable components, and automated deployment and testing ... like IaC.&lt;/p&gt;
&lt;p&gt;The YAML-based pipelines in Azure Pipelines, opened the &lt;strong&gt;golden fleece&lt;/strong&gt;, not pandoras box, for our pipelines as code adventure. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #1 - Transparency&lt;/h1&gt;
&lt;p&gt;Software engineering is complex and involves stakeholders from all walks of life. &lt;strong&gt;Transparency&lt;/strong&gt; is considered one of the core ingredients to Agile and Lean development, as well as a healthy DevOps mindset.&lt;/p&gt;
&lt;p&gt;Transparency avoids assumptions, secrets, and conspiracies - instead, it fosters trust.&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://azure.microsoft.com/en-us/services/devops/pipelines/"&gt;Azure Pipelines&lt;/a&gt; all pipeline artifacts are placed in source control repositories that can be viewed by all our engineers - there are no secrets! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers to explore what is abstracted under the covers, continuously learn, give candid feedback, and &lt;strong&gt;trust&lt;/strong&gt; our common engineering system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #2 - Everyone can contribute&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-us/services/devops/repos/"&gt;Azure Repos&lt;/a&gt;, which we used to store our pipeline code, allow us to set a wide range of branch policies to protect our master (trunk) branch that always reflects a production-ready state. One of the policies enforces the use of &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests?view=azure-devops"&gt;Pull Requests&lt;/a&gt;, which allows our common engineering team to review and give actionable and constructive feedback to all proposed pipeline code changes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More importantly, we enable our engineers to &lt;strong&gt;contribute&lt;/strong&gt; to our common engineering system by submitting pipeline changes and innovations through the pull request workflow. All without the need for elevated privileges or specialized roles, such as Super Users, which complicate the administration of our classic pipeline infrastructure and security.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #3 - Automation&lt;/h1&gt;
&lt;p&gt;When you do something twice, trice, or more times, you should invest in &lt;strong&gt;automation&lt;/strong&gt;. Machines are much better with repetitive operations than we are and empower us to focus on other, more valuable, services.&lt;/p&gt;
&lt;p&gt;The explosive growth of software and our goals for &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;simplicity&lt;/strong&gt;, and &lt;strong&gt;enablement&lt;/strong&gt; have given rise to continuous delivery pipelines that build and deploy solutions in a standard way.&lt;/p&gt;
&lt;p&gt;Our common engineering system is using YAML templates to abstract away implementation details and support our engineering practices. They inject underlying tasks to run security scans, validate our building code, and keep an eye on any binary construct moving beyond our &lt;strong&gt;guardrails&lt;/strong&gt; (more appealing term for governance).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers by injecting re-usable templates when they queue their Azure Pipelines and sprinkling the concept of &lt;strong&gt;shift-left&lt;/strong&gt; automatically and consistently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a (intentional) side-effect the pipelines as code also enables our long-term vision for self-service automation. Like a self-service kiosk, we will be able to direct our engineers to a self-service portal that displays a menu of services and facilitates actions to deploy the services in an automated, consistent, and rapid manner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We will enable our engineers to deploy pipelines and associated infrastructure on their &lt;strong&gt;own terms&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #4 - Focus engineering on business code&lt;/h1&gt;
&lt;p&gt;Lastly, the most controversial and debated benefit. As software engineers we have an inquisitive mind and an urge to tinker with everything under the bonnet. It feeds purpose, mastery, and autonomy as discussed by &lt;a href="https://www.youtube.com/watch?v=u6XAPnuFjJc"&gt;Daniel Pink&lt;/a&gt;, &lt;strong&gt;but&lt;/strong&gt; it also distracts our razor focus to continuously deliver value to our delighted end-users.&lt;/p&gt;
&lt;p&gt;I am also a software engineer at heart and have often found myself spinning off into underlying and unrelated code bases. It is like doing a search on the internet, looking for a specific piece of information, and eventually stepping back from dozens of browser tabs ... "what was I looking for?!?" Interesting, educational, but minimal value to getting the job done and an unfortunate waste of productive time.&lt;/p&gt;
&lt;p&gt;Instead, let me try using &lt;a href="https://www.informationisbeautiful.net/visualizations/million-lines-of-code/"&gt;this clean visualization&lt;/a&gt; by &lt;a href="https://informationisbeautiful.net/"&gt;Information Is Beautiful&lt;/a&gt;, and the latest number of our production pipelines to make my point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from our weekly Azure Pipelines report: 927 production CI/Build pipelines&lt;/p&gt;
&lt;p&gt;&lt;img alt="WASTE" src="/images/pipelines-as-code-wrapped-with-prs-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To define a pipeline to build, test, and scan an Azure Function requires roughly 300 lines of pipeline code. The 927 production pipelines are a mix of simpler, but also more complex pipelines, adding up to an astounding 927 * 300 = &lt;strong&gt;278,100&lt;/strong&gt; lines of pipeline code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If engineers embrace our first-generation generic blueprints, as discussed in &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt; and &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt;, the lines of pipeline code are reduced to 122 for an Azure Function pipeline. 927 * 122 = &lt;strong&gt;113,094&lt;/strong&gt; lines of pipeline code. A lot less, but still a lot of code.&lt;/li&gt;
&lt;li&gt;If engineers embrace our second-generation app-type blueprints, which &lt;a href="https://github.com/orgs/CommunityBCIT/people/said-akram-wcbbc"&gt;Said&lt;/a&gt;] will discuss in the upcoming &lt;strong&gt;Part 7&lt;/strong&gt; shortly, the lines of code are reduced to a mere 28 lines of code. 927 * 28 = 25,956 lines of pipeline code.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from Infographic: How Many Lines Of Code Is Your Favorite App?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Information is Beautiful" src="/images/pipelines-as-code-wrapped-with-prs-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The difference is an astounding 927 * 272 = 252,144 lines of pipeline code, which could be invested in delivering user-value or solutions such as Photoshop v1.0. We have barely scratched the surface of our continuous deployment (CD) pipelines, which is a topic for another day and a few posts; one of my goals is to increase the 28 lines of pipeline code owner by the engineering team by no more than a handful to add CD to our app-type blueprint-based pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers to be razor-focused on their solution and avoid investing their precious time in &lt;strong&gt;wasteful&lt;/strong&gt; pipeline code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Wrap-up&lt;/h1&gt;
&lt;p&gt;You can continue to build your own pipelines, tinker with knobs, dials, configurations, and products, and remember to innovate all pipelines continuously - do-it-yourself (DIY). &lt;/p&gt;
&lt;p&gt;Alternatively, you can focus on your business code and let the pipeline engineers focus on your pipelines - pipelines-as-a-service. The choice is &lt;strong&gt;yours&lt;/strong&gt;. &lt;/p&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category><category term="IaC"></category></entry><entry><title>Find the capabilities and IP addresses of an Azure DevOps agent</title><link href="https://wsbctechnicalblog.github.io/azure-devops-agent-capabilities.html" rel="alternate"></link><published>2021-03-12T00:00:00-08:00</published><updated>2021-03-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-12:/azure-devops-agent-capabilities.html</id><summary type="html">&lt;p&gt;How to find more information on hosted Azure DevOps agents, such as capabilities and IP addresses.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Why should we care about an Azure DevOps Agent?&lt;/h1&gt;
&lt;p&gt;To use our &lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;Azure Pipelines&lt;/a&gt;, we need the agents. Every time one of our pipelines is triggered, it comes to life on one or more jobs, which are hosted and run an agent.&lt;/p&gt;
&lt;p&gt;Azure DevOps offers two types of agents. &lt;strong&gt;Microsoft-hosted&lt;/strong&gt; agents are a software as a service (SaaS) offering, where maintenance and upgrades are taken care of for you. Our recommended type of agents!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Self-hosted agents&lt;/strong&gt; give you more control of access and installed software needed for special builds and deployments. For example, we have a self-hosted pool to service our good old &lt;strong&gt;Cobol&lt;/strong&gt; builds.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;How to determine the capabilities of an Azure DevOps Agent&lt;/h1&gt;
&lt;p&gt;We often get the question: "What software is installed on the agent?" In other words, how do we determine the capabilities of each Azure DevOPs agent.&lt;/p&gt;
&lt;p&gt;For self-hosted agents you can go to your Azure DevOps &lt;strong&gt;organizational&lt;/strong&gt; setting, Agent pools, select &lt;strong&gt;pool&lt;/strong&gt;, select &lt;strong&gt;Agents&lt;/strong&gt;, select an &lt;strong&gt;agent&lt;/strong&gt;, and finally, select &lt;strong&gt;Capabilities&lt;/strong&gt;. You will be presented with the agent's system capabilities, variables, paths, and installed software, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capabilities of a &lt;strong&gt;self-hosted&lt;/strong&gt; agent&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Details" src="/images/azuredevops-agent-info-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you select a Microsoft-hosted agent and pool, the presented capabilities are less exciting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capabilities of a &lt;strong&gt;Microsoft-hosted&lt;/strong&gt; agent&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent LAck of Details" src="/images/azuredevops-agent-info-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to visit the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted Agents&lt;/a&gt; documentation and scroll down to the &lt;strong&gt;Software&lt;/strong&gt; section. Peruse a list of hosted agents, classic pipeline editor specifications, YAML image labels, and links to software available on each type of agent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure DevOps Agent Documentation&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Documentation" src="/images/azuredevops-agent-info-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Select your agent, click on the included software hyperlink, and voila, you have a detailed report of the agent's capabilities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure DevOps Agent Capabilities Documentation&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Capabilties Documentation" src="/images/azuredevops-agent-info-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;How to determine the IP addresses of an Azure DevOps Agent&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted Agents&lt;/a&gt; documentation also gives you information on how to identify possible IP ranges for Microsoft-hosted agents. This information is pivotal if you need to allow the agents to make their way from the public internet, through your firewall, to collaborate with one of your services.&lt;/p&gt;
&lt;p&gt;Unfortunately, you will also find some small print ... well, it is the same sized font and the note is placed on a prominent Indigo background. It is easy to miss the highlighted part, as shown below, that mentions that the IP addresses for the macOS agents are not included.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;macOS Addresses are a mystery&lt;/p&gt;
&lt;p&gt;&lt;img alt="macOS Address Mystery" src="/images/azuredevops-agent-info-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First thought is to queue a investigative pipeline on one of the macOS agents and run the &lt;strong&gt;ipconfig getifaddr en0&lt;/strong&gt; command. That only returns the private IP address of the agent, which is interesting, but not very useful to the firewall engineers.&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;task:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
  &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;ipecho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;errorActionPreference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It reveals the public IP address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  2090  100  2090    0     0  32656      0 --:--:-- --:--:-- --:--:-- 32153
100  2090  100  2090    0     0  32656      0 --:--:-- --:--:-- --:--:-- 32153

... SNIPPED FOR BLOG POST ...

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-align: center; flex: 1; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your IP is 13.105.49.13&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

...SNIPPED FOR BLOG POST...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lastly, who owns the IP address we just found?&lt;/p&gt;
&lt;p&gt;Visit &lt;a href="https://ipinfo.io/13.105.49.13"&gt;13.105.49.13 IP Address Details - IPinfo.io&lt;/a&gt; for the answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IP address "BINGO!"&lt;/p&gt;
&lt;p&gt;&lt;img alt="IPinfo.io" src="/images/azuredevops-agent-info-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;A big thank you to &lt;a href="https://www.linkedin.com/in/lukas-wilson-8792ba172/"&gt;Lukas Wilson&lt;/a&gt;, one of our resident Azure gurus, who helped with the IP address exploration. &lt;/p&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="AzDO"></category><category term="Azure-Pipelines"></category><category term="Tips"></category></entry><entry><title>Wandering down memory lane - feature flags</title><link href="https://wsbctechnicalblog.github.io/memory-lane-feature-flags.html" rel="alternate"></link><published>2021-03-12T00:00:00-08:00</published><updated>2021-03-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-12:/memory-lane-feature-flags.html</id><summary type="html">&lt;p&gt;Use feature flags to fine-tune each release in production.&lt;/p&gt;</summary><content type="html">&lt;p&gt;More memory lane content pulled from my personal blog, before it is deprecated in favour of this technical blog.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;DevOps vancouver Meetup January 2019&lt;/h1&gt;
&lt;p&gt;We had a really great turnout and a vibrant meetup hosted by &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/members/44231812/"&gt;Andre Kaminski&lt;/a&gt;, featuring three topics in January 2019:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entropy in DevOps Teams: Andrew Rose&lt;/li&gt;
&lt;li&gt;The Virtues of Being T-shaped: Kyle Young&lt;/li&gt;
&lt;li&gt;Progressive Exposure Using Feature Flags: &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Willy Schaub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find a copy of my feature flags presentation &lt;a href="https://1drv.ms/b/s!AoTKFn7kQntwmop6lYMUH2ki07YkpA"&gt;HERE&lt;/a&gt;. Ping me if the link is blocked by your firewall.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Top 6 FAQs from my talk&lt;/h1&gt;
&lt;h2&gt;What's DevOps and what's the link to the session?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps, by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Link to the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/257318843/"&gt;January 2019&lt;/a&gt; session and &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/photos/29645676/"&gt;photos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;When should I use rings versus feature flags?&lt;/h2&gt;
&lt;p&gt;I think of a &lt;strong&gt;package&lt;/strong&gt; when using the ring-based deployment model to deploy a release and a small &lt;strong&gt;screwdriver&lt;/strong&gt; to "tweak" feature flags to fine-tune the release. See &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;How do I manage the technical debt introduced by feature flags?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;KEEP IT SIMPLE!&lt;/strong&gt; Define technical governance to clearly define who owns the feature flags, when and how to remove feature flags and the associated technical debt,  and scenarios that are suitable for feature flags. See &lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;What's the cost of feature flags?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Who owns feature flags?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most feature flags are scoped to a business feature, backed by a business case, and delivering value, which places the ownership of the feature flag switch with the business. Some feature flags are scoped to an operational feature, which places the ownership with operations (Ops).&lt;/p&gt;
&lt;h2&gt;What do we mean with "Do not hide non-production ready code behind feature flags"?&lt;/h2&gt;
&lt;p&gt;Production ready implies hat we have met an agreed quality bar and are confident to release the feature to production. It does not mean feature ready, as we may expose a production ready minimally viable product to perform experiments and A|B testing. Risk of hiding non-production ready code behind feature flags is high - it's easy to flip a switch and expose incomplete,unstable, of security breaches by mistake.&lt;/p&gt;
&lt;h2&gt;Why the product we introduced at the meetup?&lt;/h2&gt;
&lt;p&gt;You need to investigate and create your own opinion, but here are a few highlights from our evaluation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's a Software as a Service (&lt;strong&gt;SaaS&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt; administration&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;experimentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Feature flag &lt;strong&gt;dependency management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Identify &lt;strong&gt;stale flags&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rules&lt;/strong&gt; to manage exposure and blast radius&lt;/li&gt;
&lt;li&gt;... and much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Can you tell me more about circuit breakers?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Netflix/Hystrix/wiki"&gt;Hystrix&lt;/a&gt; evolved out of resilience engineering work that the Netflix API team began in 2011. See &lt;a href="https://aka.ms/bh-ff-sos"&gt;A Rough Path&lt;/a&gt;, by Brian Harry for an example, where circuit breakers could have protected us from an Operational meltdown, caused by simply "flipping a flag".&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Two epiphanies&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-6b.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-7b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Last, but not least, our feature flag manifesto&lt;/h1&gt;
&lt;p&gt;On our common engineering site, we have a collection of verbal declaration of intentions, motives, or views of the issuer, for processes and products.&lt;/p&gt;
&lt;p&gt;Here is a copy of our feature flag manifesto.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The worlds of our &lt;a href="/why-pipelines-part1.html"&gt;pipelines&lt;/a&gt; and feature flags are likely to collide when we innovate our ability to &lt;strong&gt;release on demand&lt;/strong&gt;. See you there!&lt;/p&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Workflow-as-code</title><link href="https://wsbctechnicalblog.github.io/workflow-as-code.html" rel="alternate"></link><published>2021-03-05T00:00:00-08:00</published><updated>2021-03-05T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-05:/workflow-as-code.html</id><summary type="html">&lt;p&gt;Configuring complex workflows that govern Continuous Integration and Continuous Delivery must only be allowed by making changes to the YAML source files; GUI tools must be prohibited&lt;/p&gt;</summary><content type="html">&lt;p&gt;Majority of software applications available on the market today offer self-serve capabilities to end users. Those self-serve capabilities are mostly focused on automating the chores related to various paperwork processes. Browsing product and service catalogs, picking items and ordering them via automated checkout process. In addition to that, there are alternate automated scenarios that enable end users to cancel their actions, repeat them, request refunds, etc.&lt;/p&gt;
&lt;p&gt;A smaller portion of such typical mainstream software applications are focused on automating the workflow. Oftentimes we see that the business operations workflow is not a simple straight line from start to finish. Depending on the business policy rules, workflows may take a number of twists and turns. Automating such complex rules is no small feat, which is why we're not seeing that many self-serve workflow applications on the market today. Unlike with simple automation of the paperwork representing straightforward business transactions, workflows tend to get more convoluted.&lt;/p&gt;
&lt;h2&gt;How are self-serve business applications implemented?&lt;/h2&gt;
&lt;p&gt;Experience has shown that the majority of end users prefer to do self-serve tasks by operating a Graphical User Interface (GUI). Such interface often mimics real life paperwork (i.e. replicating paper forms in electronic format etc.)&lt;/p&gt;
&lt;p&gt;When it comes to offering workflow solutions, it has also been demonstrated that end users prefer to do the self-serve activities via Graphical User Interfaces. The flow of various documents and forms gets represented with artifacts or simulacra resembling real world pipes. Those pipes, when put together in certain configurations, form various pipelines.&lt;/p&gt;
&lt;p&gt;Many users are now getting familiar with the concept of manipulating pipelines in order to perform the self-serve activities of configuring non-trivial workflows.&lt;/p&gt;
&lt;h2&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;So far, the self-serve model we've described looks perfectly reasonable and even quite desirable. So where's the problem?&lt;/p&gt;
&lt;p&gt;While it is perfectly reasonable to hide the formalized complexities of the automation from end users (they are not trained to operate complex systems using rigorous formal reasoning), when it comes to enabling software engineers to operate complex software systems, Graphical User Interface is not a good way to do it.&lt;/p&gt;
&lt;p&gt;And yet, for some reason we see a lot of platforms drag the GUI mindset back into the inner circles of software engineering teams. And the problem then becomes the fact that software engineers get conditioned to use GUI for configuring complex workflows needed for Continuous Integration (CI) and Continuous Delivery (CD).&lt;/p&gt;
&lt;p&gt;Why is that a problem? When using GUI, engineers are directly touching the materialized infrastructure. That is a very bad idea. To illustrate, let's imagine a scenario where a software engineer would log in to the live production system that's running the application binary (compiled) code. Imagine that engineer being privileged to go directly to the live binary code, and using some GUI tool, start making changes to the live code in production!&lt;/p&gt;
&lt;p&gt;That situation will cause panic. Making untested changes to the live code is a surefire recipe for disaster.&lt;/p&gt;
&lt;p&gt;The only legitimate way software engineering teams could make changes to the production code is if they make changes not to the materialized binary code, but only to the code representation -- the actual source code.&lt;/p&gt;
&lt;p&gt;Source code by itself cannot perform any operations. It must be compiled and the compiled code must be then built first. Those operations must happen within regulated Continuous Integration and Continuous Delivery workflows. Those workflows consist of a number of strict business policy rules that govern the quality of the proposed code change. If the quality is substandard (i.e. the code does not pass all the tests that are baked into the workflow), the proposed change gets rejected.&lt;/p&gt;
&lt;h2&gt;Replace GUI with code&lt;/h2&gt;
&lt;p&gt;Workflow, that is represented by the GUI, must be removed and in its place we must put the source code. Typically, when it comes to configuring the integration and delivery workflows, we opt for YAML code.&lt;/p&gt;
&lt;p&gt;The challenge now is to retrain software engineers from knowing how to use GUIs to configure the workflow rules to mastering YAML needed to accomplish the same self-serve automation.&lt;/p&gt;
&lt;p&gt;No one should be allowed to touch the materialized computing artifact (such as the implemented workflow engine) with their 'bare hands' (by 'bare hands' we mean direct access to the implemented machinery via a GUI tool).&lt;/p&gt;
&lt;p&gt;It is therefore urgent to rush and get rid of all GUI tools that enable software engineers to perform self-serve workflow configuration activities. Instead, we must switch wholesale to learning how to use YAML properly.&lt;/p&gt;
&lt;h2&gt;What are the advantages of workflow-as-code?&lt;/h2&gt;
&lt;p&gt;Just by the virtue of disabling engineers from touching the workflow machinery directly, we ensure that any changes to the workflow get implemented through official channels. When a team decides to make changes to the workflow, they cannot do it directly. They must first create a workflow feature branch, make proposed changes in isolation, test them, then open a Pull Request (PR), proposing these changes get merged to the main trunk. The PR gets reviewed by the stakeholders on the CI/CD workflow, and if approved, the changes will get merged and then materialized as an implemented workflow.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="Agile"></category><category term="DevOps"></category><category term="infrastructure as code"></category><category term="workflow as code"></category><category term="Continuous Integration (CI)"></category><category term="Continuous Delivery (CD)"></category></entry><entry><title>Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part6.html" rel="alternate"></link><published>2021-03-02T00:00:00-08:00</published><updated>2021-03-02T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-02:/yaml-pipelines-part6.html</id><summary type="html">&lt;p&gt;Neither the bootstrap nor generic templates are rocket science, and the YAML-based pipelines are as complex as &lt;strong&gt;you&lt;/strong&gt; make them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part 1&lt;/a&gt;. After introducing the blueprint templates on &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;, it is time to emphasise that these new YAML-based pipelines are not complex if applied correctly.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why this post?&lt;/h1&gt;
&lt;p&gt;We have received feedback from the engineering teams and our inspect and adapt workshops, that YAML pipelines are complex and require a steep learning curve. &lt;/p&gt;
&lt;p&gt;Perhaps I am biased, but I disagree. My four cents (points):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YAML pipelines are more intuitive to engineers familiar with code.&lt;/li&gt;
&lt;li&gt;Apart from the visual value, the Classic pipeline editor adds no value to the editing experience. Adding a step in a YAML pipeline is as simple  (similar) as adding a step in a classic pipeline.&lt;/li&gt;
&lt;li&gt;If all else fails, create your Azure Pipeline in your editor of choice and export to YAML. That is how we started many moons ago and a great way to get familiar with the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema"&gt;YAML schema&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When you start using pre-packaged templates, covered in &lt;a href="/yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt;, &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt; and revisited herein, the adoption of YAML pipelines becomes a no-brainer. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;Simplicity is the ultimate sophistication&lt;/em&gt;" - Leonardo da Vinci&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Generic pipeline value streams&lt;/h1&gt;
&lt;p&gt;Let us take a few steps back and take a quick look at an Azure Pipeline from a high altitude. Each pipeline is made of one or more stages, each of which is a collection of related jobs, each of which is a collection of steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure Pipeline from space&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us skip stages, zoom in, and start at the point of jobs, as shown above.&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;&lt;em&gt;&lt;em&gt;A job is a collection of steps run by an agent or on a server. Jobs can run conditionally and might depend on earlier jobs.&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;" - &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema#job"&gt;yaml-schema&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you add SonarQube to your pipeline, you know (or will find out) that the SonarQube &lt;strong&gt;Prepare&lt;/strong&gt;, &lt;strong&gt;Analyse&lt;/strong&gt;, and &lt;strong&gt;Publish&lt;/strong&gt; steps must run in the same job context as the &lt;strong&gt;build&lt;/strong&gt;. This is not a new constraint and applies to the &lt;strong&gt;Classic&lt;/strong&gt;, &lt;strong&gt;YAML out-of-the-box&lt;/strong&gt;, and our &lt;strong&gt;Blueprint-based&lt;/strong&gt; Azure Pipelines.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;simplest&lt;/strong&gt; pipeline you can configure is a single-job pipeline, which runs your &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; steps, the &lt;strong&gt;DevSecOps&lt;/strong&gt; steps (SonarQube, WhiteSource), and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps within one and the same job 1 context, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Single Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you split your pipeline into two jobs you have two separate job contexts. Similar to the single-job you could run both the &lt;strong&gt;DevSecOps&lt;/strong&gt; and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps within the same job 1 context. Alternatively, you could run the &lt;strong&gt;DevSecOps&lt;/strong&gt; in the job 1 context and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps in the job 2 context, as shown below. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dual Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dual Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-2.png"&gt;
With multiple jobs you can embrace parallelism, introduce job dependencies and flows, isolate steps in separate job contexts, and run steps on different agent specifications (Linux, Windows, macOS) - all in one pipeline.&lt;/p&gt;
&lt;p&gt;Multi Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Multi Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember, "&lt;em&gt;with power, comes great responsibility&lt;/em&gt;". As we embrace complexity, we throw simplicity out of the window. In fact, as with the pile of LEGO blocks analogy we used in &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;, you can create really powerful, but also complex and hard to evolve and maintain pipelines. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WHAT and HOW you build is up to you...&lt;/p&gt;
&lt;p&gt;&lt;img alt="LEGO" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-7.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Bootstrap template demystified&lt;/h1&gt;
&lt;p&gt;We covered the basics and the power of YAML templates in previous parts of this pipeline series.&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;Bootstrap&lt;/strong&gt; template is a standard YAML template with conditional statements. Visualise the internals as a &lt;strong&gt;switch&lt;/strong&gt; statement, which injects templates containing steps, based on the &lt;strong&gt;bootstrapMode&lt;/strong&gt; parameter passed.&lt;/p&gt;
&lt;p&gt;The following table summarises the currently available bootstrap &lt;strong&gt;modes&lt;/strong&gt;, the &lt;strong&gt;templates&lt;/strong&gt;, and associated &lt;strong&gt;steps&lt;/strong&gt; it injects into your pipeline at queue time.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BOOTSTRAPMODE&lt;/th&gt;
&lt;th&gt;INJECT TEMPLATE&lt;/th&gt;
&lt;th&gt;RUN STEPS&lt;/th&gt;
&lt;th&gt;TEMPLATE OWNED BY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;init&lt;/td&gt;
&lt;td&gt;DevSecOpsInit.yml&lt;/td&gt;
&lt;td&gt;SonarQube Prepare&lt;/td&gt;
&lt;td&gt;DevSecOps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devsecopsonly&lt;/td&gt;
&lt;td&gt;DevSecOps.yml&lt;/td&gt;
&lt;td&gt;SonarQube Analyse, SonarQube Publish, and WhiteSource&lt;/td&gt;
&lt;td&gt;DevSecOps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buildingcodeonly&lt;/td&gt;
&lt;td&gt;BuildingCode.yml&lt;/td&gt;
&lt;td&gt;BuildingCode Scripts, such as Stryker&lt;/td&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;DevSecOps.yml &lt;strong&gt;+&lt;/strong&gt; BuildingCode.yml&lt;/td&gt;
&lt;td&gt;SonarQube Analyse, SonarQube Publish, WhiteSource, and BuildCode&lt;/td&gt;
&lt;td&gt;DevSecOps and Engineering Practices&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a visualisation of the above table for the visual minds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bootstrap Template and Bootstrap Modes&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bootstrap" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-6.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; &lt;br/&gt;
Our Bootstrap.yml templates is a standard YAML-template, as are the templates it injects at queue time. There is no hidden cloak and dagger technology or additional complexity! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- template: Templates/Bootstrap.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    bootstrapMode:    &amp;#39;init&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    applicationType:  &amp;#39;TODO REPLACE WITH SUPPORTED TYPE&amp;#39; # dotnet, angular&lt;/span&gt;
&lt;span class="err"&gt;    applicationGuid:  $(productGuid)&lt;/span&gt;
&lt;span class="err"&gt;    portfolioName:    $(portfolioName)&lt;/span&gt;
&lt;span class="err"&gt;    productName:      $(productName)&lt;/span&gt;
&lt;span class="err"&gt;    sourcesDirectory: $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You now have the &lt;strong&gt;option&lt;/strong&gt; of including the Bootstrap.yml template instead of explicitly including SonarQube, WhiteSource, and Building Code steps. Note I say &lt;strong&gt;option&lt;/strong&gt;, not that you must do it one way or the other. &lt;/p&gt;
&lt;p&gt;Similar to Software-as-a-Service (SaaS) solutions you can delegate these steps and accountability to the Bootstrap.yml template, which is continuously enhanced, maintained and supported by our pipeline working group. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Generic Blueprint templates demystified&lt;/h1&gt;
&lt;p&gt;Our &lt;strong&gt;Azure-Pipeline-Steps.yml&lt;/strong&gt; is a generic blueprint that implements the single job pipeline we discussed and includes two calls to the &lt;strong&gt;bootstrap.yml&lt;/strong&gt; template to &lt;strong&gt;init&lt;/strong&gt;ialise the DevSecOps steps and to &lt;strong&gt;run&lt;/strong&gt; the DevSecOps and Building code steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Single Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All you need to do, is find the &lt;strong&gt;TODO&lt;/strong&gt; placeholders to update relevant parameters and insert your build and test steps. You can explore the &lt;strong&gt;Azure-Pipeline-Steps.yml&lt;/strong&gt; blueprint in &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;Azure-Pipeline-Jobs.yml&lt;/strong&gt; is a generic blueprint that implements the multi job pipeline we discussed and includes three calls to the &lt;strong&gt;bootstrap.yml&lt;/strong&gt; template to &lt;strong&gt;init&lt;/strong&gt;ialise the DevSecOps steps and run the &lt;strong&gt;devseconlyinit&lt;/strong&gt; within the same job context. Lastly, it runs the &lt;strong&gt;buildingcodeonly&lt;/strong&gt; steps in a different job context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dual Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dual Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As with the Azure-Pipeline-Steps.yml blueprint, you then search for the &lt;strong&gt;TODO&lt;/strong&gt; placeholders and update relevant parameters and insert your build and test steps. It is that simple!&lt;/p&gt;
&lt;p&gt;The genetic blueprints work well for new pipelines. If you already have a YAML-based pipeline, you can include the bootstrap.yml template into your existing pipeline. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Blueprint-related questions&lt;/h1&gt;
&lt;p&gt;Here are a few of the top questions we have received from engineering to date.&lt;/p&gt;
&lt;h2&gt;Q1: Who owns our pipeline blueprints?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Our common engineering system pipeline working group, a cluster of engineers representing architecture, development, operations, and security have joint forces to pursue our quest for &lt;strong&gt;automation&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;simplicity&lt;/strong&gt;, and &lt;strong&gt;alignment&lt;/strong&gt; with our guardrails (a friendlier term for governance). While we are all accountable for the blueprints and templates discussed herein, DevSecOps owns the DevSecOps*.yml templates and Engineering Practices the BuildingCode templates and associated scripts.&lt;/p&gt;
&lt;h2&gt;Q2: How can engineers make changes to the blueprints?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-9.png"&gt;&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests"&gt;pull request&lt;/a&gt; workflow, engineers can discuss blueprint and template changes and agree to merge them once all stakeholders approve. We strive for complete transparency, allowing everyone to view the blueprints and associated templates, and contribute towards the continuous innovation of our YAML templates.&lt;/p&gt;
&lt;h2&gt;Q3: Why are we so fixated on the consistency and simplicity goals?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-10.png"&gt;&lt;/p&gt;
&lt;p&gt;Infrastructure as code (IaC) is typically associated with the process of managing and provisioning computer data centers through machine-readable configuration files. The aim is to deprecate physical hardware configuration and interactive configuration tools. &lt;/p&gt;
&lt;p&gt;Within the context of our common engineering system, we are striving to use infrastructure as code to provision our continuous delivery pipelines and associated services as well. While the classic Azure Pipelines are powerful and well established, they are configured using a graphical configuration tool and tend to become hard to maintain and enhance over time.&lt;/p&gt;
&lt;p&gt;The switch to YAML-based Azure Pipelines is enabling us to version control and store the pipelines as machine- and human-readable configuration code. We refer to this as &lt;strong&gt;pipeline as code (PaC)&lt;/strong&gt;. If and only if we manage to create a consistent infrastructure of pipelines, using templates and blueprints, we not only enable our engineering teams, but take the first steps towards self service automation.&lt;/p&gt;
&lt;p&gt;But, that is a vast topic for another day. Back to our YAML pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we all agree that neither the bootstrap nor generic templates are rocket science, and that YAML-based pipelines are as complex as &lt;strong&gt;you&lt;/strong&gt; make them, we can move ahead with the adoption of our new pipelines. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[X] Consistent pipelines&lt;/li&gt;
&lt;li&gt;[X] Enable engineers&lt;/li&gt;
&lt;li&gt;[X] Simple pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But wait, there is more ... in the next part 7, my colleague &lt;a href="https://github.com/orgs/CommunityBCIT/people/said-akram-wcbbc"&gt;Said&lt;/a&gt; will introduce the next generation of blueprints which are even simpler, supporting our goals for consistency and enablement. &lt;/p&gt;
&lt;p&gt;See you in part 7 (coming soon).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | Part 6 | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>WorkSafeBC DevOps Celebrate 100th Sprint</title><link href="https://wsbctechnicalblog.github.io/wsbc-devops-celebrate-hundredth-sprint.html" rel="alternate"></link><published>2021-02-19T00:00:00-08:00</published><updated>2021-02-19T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-02-19:/wsbc-devops-celebrate-hundredth-sprint.html</id><summary type="html">&lt;p&gt;WorkSafeBC DevOps 100th sprint celebration coincided with the 20th anniversary of the Agile Manifesto&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Navigating the Future&lt;/h2&gt;
&lt;p&gt;A happy coincidence of celebrating WorkSafeBC DevOps 100th sprint at the same time when we are celebrating 20th anniversary of the Agile Movement, provided an opportunity to host &lt;a href="https://wingman-sw.com/about"&gt;James Grenning&lt;/a&gt;, the original signatory of the Agile Manifesto.&lt;/p&gt;
&lt;p&gt;A regular &lt;strong&gt;Navigating the Future&lt;/strong&gt; session, which DevOps is holding every PI, served as a good platform to usher the celebrations.&lt;/p&gt;
&lt;p&gt;The celebration started with WorkSafeBC &lt;strong&gt;IT Director&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/andrekaminski/"&gt;Andre Kaminski&lt;/a&gt; describing his journey to Agile and DevOps. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Andre Kaminski" src="/images/Andre_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Andre explained how in the early days his relentless focus on value delivery to the customer led him to search for ways that are not heavily based on the process and on producing copious documentation. As soon as Agile arrived on the scene, Andre was an early adopter; he was also a pioneer with adopting early stages of DevOps. Andre concluded his presentation by saying that after successfully embracing Agile and DevOps, he never looked back.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Indispensable Value of Technical Excellence&lt;/h2&gt;
&lt;p&gt;Our guest of honour, James Grenning, generously spent one hour sharing his journey from the early days of switches and toggles programming, all the way to the present day of Agile DevOps and Continuous Delivery. James had repeatedly potentiated that it is important to strive to avoid getting stuck in the 'Do' loop, where we have mastered some skills and reached the plateau. It's the 'Expert Beginner' stage that is the bottleneck slowing us down and preventing us from reaching our full potential.&lt;/p&gt;
&lt;p&gt;&lt;img alt="James Grenning" src="/images/James_Grenning.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;The only way to prevent the 'Expert Beginner' impasse is to focus on &lt;em&gt;technical excellence&lt;/em&gt;. And the most effective way to pursue technical excellence is adopting &lt;strong&gt;Extreme Programming (XP)&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Service Virtualization&lt;/strong&gt; and &lt;strong&gt;SOLID principles&lt;/strong&gt; and &lt;strong&gt;design patterns&lt;/strong&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Finally, &lt;a href="https://www.linkedin.com/in/todd-yule-4679646/"&gt;Todd Yule&lt;/a&gt; (our &lt;strong&gt;Head of Innovation and Chief Digital Officer&lt;/strong&gt;) tied everything together by highlighting the salient points of our DevOps progress, which he had originally instigated and is now leading. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Todd Yule" src="/images/Todd_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Todd repeated James' advice to use &lt;strong&gt;Scrum&lt;/strong&gt; as a practice that points out deficiencies which need to be solved by using &lt;strong&gt;XP&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Agile Mindset&lt;/strong&gt; and &lt;strong&gt;Continuous Delivery&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="Agile"></category><category term="DevOps"></category></entry><entry><title>Part 5: Pipelines - Blueprints to fuel consistency and enablement</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html" rel="alternate"></link><published>2021-01-28T00:00:00-08:00</published><updated>2021-01-28T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-28:/yaml-pipelines-part5.html</id><summary type="html">&lt;p&gt;Think of &lt;strong&gt;blueprints&lt;/strong&gt; and associated &lt;strong&gt;templates&lt;/strong&gt; as re-usable LEGO blocks, ranging from a bag of "do it yourself" blocks, to complex and detailed kits, such as the Imperial Star Destroyer.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part 1&lt;/a&gt;. After covering some of the gems and magic in &lt;a href="/yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt; we will peek at our pipeline blueprints.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What do we mean with pipeline blueprints?&lt;/h1&gt;
&lt;p&gt;If you ask 13 software engineers to cook a continuous delivery pipeline, you are likely to get more than 13 variations. Although this enables innovation, it distracts the engineers from their core responsibility to continuously delivering functional code and value. More concerning the variations of artworks (pipelines) hamper reuse and bloat support and maintenance costs.&lt;/p&gt;
&lt;p&gt;Like the building-blueprint counterpart, our &lt;strong&gt;generic&lt;/strong&gt; and &lt;strong&gt;application-type&lt;/strong&gt; pipeline blueprints define templates that allow rapid and consistent creation of unlimited number of continuous delivery pipeline copies. Let us have a look at a few of our blueprints.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Generic blueprints&lt;/h1&gt;
&lt;p&gt;We have defined two generic blueprints. One defines a one stage, multiple jobs pipeline, allowing parallel runs on separate agents, each with multiple steps. The simpler and more recommended blueprint defines a one stage, one job, with multiple steps pipeline. It keeps things simple, running everything on one agent. &lt;/p&gt;
&lt;p&gt;Both blueprints call our &lt;strong&gt;bootstrap&lt;/strong&gt; template, which injects other templates introducing DevSecOps scans such as SonarQube and WhiteSource, as well as custom built &lt;strong&gt;building code&lt;/strong&gt; scripts and products, based on queue-time parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Steps.yml flow
&lt;img alt="Azure-Pipeline-Steps.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the blueprint defines a pipeline that runs within the same &lt;strong&gt;job&lt;/strong&gt; context, in a single &lt;strong&gt;stage&lt;/strong&gt;. It injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with an &lt;strong&gt;init&lt;/strong&gt; parameter, to inject initialisation templates, with tasks such as &lt;strong&gt;SonarQube Prepare&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: SonarQube Prepare for .NET applications&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# SONARQUBE - dotnet&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SonarQubePrepare&lt;/span&gt;&lt;span class="mi"&gt;@4&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SonarQube&lt;/span&gt; &lt;span class="n"&gt;Prepare&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;SonarQube&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeService&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;scannerMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MSBuild&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;projectKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeProjectKey&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;projectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeProjectName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the end of the continuous integration (CI) part of the pipeline, the blueprints injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with a &lt;strong&gt;run&lt;/strong&gt; parameter, to inject tasks such as &lt;strong&gt;SonarQube Analyze&lt;/strong&gt;, &lt;strong&gt;SonarQube Publish&lt;/strong&gt;, &lt;strong&gt;WhiteSource&lt;/strong&gt;, and &lt;strong&gt;Building Code&lt;/strong&gt; validations. Single jobs are the most efficient as dependencies, such as source code, extensions, and the bootstrap toolbox only need to be loaded once.&lt;/p&gt;
&lt;p&gt;Here is the latest version of this blueprint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Steps.yml source code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="nl"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;

&lt;span class="cp"&gt;# Semantic version as per Azure DevOps Naming Conventions.&lt;/span&gt;
&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranchName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Configure the default agent pool and image to use for your pipeline&lt;/span&gt;
&lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                 &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt; &lt;span class="n"&gt;Pipelines&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# Variables&lt;/span&gt;
&lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;BuildConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;Release&lt;/span&gt;
  &lt;span class="nl"&gt;BuildPlatform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt; &lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;templateVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;1.0.9&lt;/span&gt;
  &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PORTFOLIO&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PRODUCT&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;NEW&lt;/span&gt; &lt;span class="n"&gt;GUID&lt;/span&gt; &lt;span class="n"&gt;WITHOUT&lt;/span&gt; &lt;span class="n"&gt;BRACKETS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# Repository resources&lt;/span&gt;
&lt;span class="nl"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="cp"&gt;# =======================================================================&lt;/span&gt;
  &lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CDTemplates&lt;/span&gt;
    &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Common&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Engineering&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="cp"&gt;# =======================================================================&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# START OF BUILD and TEST STAGE&lt;/span&gt;
&lt;span class="cp"&gt;# - GitVersion task looks at your Git history and works out the semantic &lt;/span&gt;
&lt;span class="cp"&gt;#   version of the commit being built.&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nl"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Continuous&lt;/span&gt; &lt;span class="n"&gt;Integration&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
    &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
      &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;
      &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
      &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# PREREQUISITES&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps that have to run before the build here, for example NPM, NuGet&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert your scripts, steps, and tasks here and remove this comment&lt;/span&gt;

&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP VALIDATION, STAGE: CI_BOOTSTRAP_INIT&lt;/span&gt;
&lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDTemplates&lt;/span&gt;
      &lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nl"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;SUPPORTED&lt;/span&gt; &lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angular&lt;/span&gt;
        &lt;span class="nl"&gt;applicationGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# CONTINUOUS INTEGRATION BUILD&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps/tasks to build your solution here. &lt;/span&gt;
&lt;span class="cp"&gt;# - Move initialisations (NPM, NuGet,...) to PREREQUISITES section&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#  TODO Insert your scripts, steps, and tasks here and remove these comments&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# CONTINUOUS INTEGRATION TEST&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps/tasks to test your solution here&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert your scripts, steps, and tasks here and remove this comment&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# PUBLISH&lt;/span&gt;
&lt;span class="cp"&gt;# - Publish the build and test artifacts&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert build and test artifact publication tasks&lt;/span&gt;

&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP VALIDATION, STAGE: CI_BOOTSTRAP&lt;/span&gt;
&lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDTemplates&lt;/span&gt;
      &lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nl"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;SUPPORTED&lt;/span&gt; &lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angular&lt;/span&gt;
        &lt;span class="nl"&gt;applicationGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Engineers can &lt;strong&gt;copy-paste&lt;/strong&gt; this blueprint into their application repository, look for &lt;strong&gt;TODO&lt;/strong&gt;s, update and fine-tune the pipeline as needed. Sections which should not be deleted or changed are enclosed in skull &amp;amp; cross-bones markers. &lt;strong&gt;Simple!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The other &lt;strong&gt;generic&lt;/strong&gt; template, Azure-Pipeline-Jobs.yml, enables engineers to craft multi-job pipelines, enabling features such as parallelism. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Jobs.yml flow
&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the blueprint defines two jobs, one including the &lt;strong&gt;initialisation&lt;/strong&gt; and &lt;strong&gt;build&lt;/strong&gt; sections, and the other the &lt;strong&gt;test&lt;/strong&gt; section. Some tasks, such as the &lt;strong&gt;SonarQube&lt;/strong&gt; tasks have to run within the same job context, which is why the blueprint injects the bootstrap template three times. As before, the first injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with an &lt;strong&gt;init&lt;/strong&gt; parameter, to inject initialisation templates, with tasks such as &lt;strong&gt;SonarQube Prepare&lt;/strong&gt;. The second injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with a &lt;strong&gt;devsecopsonly&lt;/strong&gt; parameter, which magically injects all of the DevSecOps scans, such as &lt;strong&gt;SonarQube Analyse&lt;/strong&gt;, &lt;strong&gt;SonarQube Publish&lt;/strong&gt;, and &lt;strong&gt;WhiteSource&lt;/strong&gt;. The remaining templates, such as the &lt;strong&gt;Building Code&lt;/strong&gt; are only injected at the end when the third call is made to the &lt;strong&gt;bootstrap&lt;/strong&gt; template with the &lt;strong&gt;buildingcodeonly&lt;/strong&gt; parameter.&lt;/p&gt;
&lt;p&gt;To summarise, we are trying to simplify our pipeline environment and empower both development and operations with these blueprints. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, we can do better!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;App-type Blueprints&lt;/h1&gt;
&lt;p&gt;With application-type, in short app-type, blueprints we are taking the continuous integration (CI) pipelines light-years further in terms of our goals for &lt;strong&gt;simplicity&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;enablement&lt;/strong&gt;, and &lt;strong&gt;consistency&lt;/strong&gt;. Each app-type blueprint, based on our pipeline champion Said Akram's (@said-akram-wcbbc) ingenious proof-of-concept, consists of a &lt;strong&gt;starter&lt;/strong&gt; template, an &lt;strong&gt;app-type&lt;/strong&gt; template, and a reference &lt;strong&gt;sample&lt;/strong&gt; implementation, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;App-type blueprint parts&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;starter&lt;/strong&gt; template allows our engineers to configure their continuous integration pipeline, after they &lt;strong&gt;copy-paste&lt;/strong&gt; it into their application repository. This is the only moving part that is copied and becomes part of the application code base.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE - Azure Function &lt;strong&gt;starter&lt;/strong&gt; template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Trigger&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt;

&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CDAppTemplates&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;Common-Engineering-System/AzureDevOps.Automation.Pipeline.AppTemplates&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Semantic&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;Common&lt;/span&gt; &lt;span class="n"&gt;Engineering&lt;/span&gt; &lt;span class="n"&gt;Naming&lt;/span&gt; &lt;span class="n"&gt;Conventions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SourceBranchName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;VARIABLES&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PORTFOLIO NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;StarWars&lt;/span&gt;
  &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PRODUCT NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Imperial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Star&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Destroyer&lt;/span&gt;

&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="sr"&gt;/AzureFunction/&lt;/span&gt;&lt;span class="n"&gt;azureFunctionTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDAppTemplates&lt;/span&gt;
  &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Whether&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;AssemblyInfo&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
    &lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH .NET CORE VERSION&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;applicationGuid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH A NEW GUID WITHOUT BRACKETS&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;257929&lt;/span&gt;&lt;span class="n"&gt;e89c69471083efb51899b42bdb&lt;/span&gt;
    &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;restoreBuildProjects&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;**/*.csproj&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;vstsFeed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;               &lt;span class="s1"&gt;&amp;#39;11111111-2222-3333-4444-555555555555&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;_NuGet&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;
    &lt;span class="n"&gt;buildConfiguration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;Release&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;starter&lt;/strong&gt; template &lt;strong&gt;extends&lt;/strong&gt; the pipeline with the &lt;strong&gt;app-type&lt;/strong&gt; template, in our example the azureFunctionTemplate.yml. With this &lt;strong&gt;magic&lt;/strong&gt; we introduce the template &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/security/templates?view=azure-devops#use-extends-templates"&gt;&lt;strong&gt;extend&lt;/strong&gt;&lt;/a&gt; feature, which sprinkles a dash of &lt;strong&gt;security&lt;/strong&gt; on our pipelines, as we can now check that a pipeline is extended from a trusted template in &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;environment&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml"&gt;service connection&lt;/a&gt; approvals and checks. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Required template checks&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;app-type&lt;/strong&gt; template is visible, but not modifiable for the owner of the pipeline. We abstract the entire continuous integration (CI) process from the engineers, which promotes &lt;strong&gt;consistency&lt;/strong&gt;, delegates &lt;strong&gt;responsibility&lt;/strong&gt; for the implementation to our common engineering system team, and &lt;strong&gt;encourages&lt;/strong&gt; engineers to be razor-focused on their application. The complexity of injecting our &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates, task sequence, stage and job context, and pipeline plumbing we discussed in previous parts, is abstracted (hidden). &lt;/p&gt;
&lt;p&gt;Let us briefly review this with a visual.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Steps.yml Custom Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;strong&gt;custom&lt;/strong&gt; blueprints the starter template presents a much larger exposure area, where we can observe template drift, vulnerability injections, and complexity that the engineering teams should not have to worry about. As discussed, the latest &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates are pulled from the &lt;code&gt;*.Templates&lt;/code&gt; repository and injected into the pipeline instance at queue time.&lt;/p&gt;
&lt;p&gt;Time to reiterate ... we can do better!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AzureFunctionTemplate.yml Starter Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;strong&gt;app-type&lt;/strong&gt; blueprints, the starter template has a much smaller exposure area. The latest &lt;strong&gt;app-type&lt;/strong&gt; template is pulled from the &lt;code&gt;*.AppTemplates&lt;/code&gt; repository, which in turn injects the latest &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates from the &lt;code&gt;*.Templates&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;You should appreciate the magic of the YAML pipelines by now!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Enabling continuous innovation and rapid change&lt;/h1&gt;
&lt;p&gt;We always start our YAML awareness and training workshops with the following scenario and question: "&lt;em&gt;Assume we have 1000 classic pipelines and 1000 YAML pipelines, and we need to make a change to one of the pipeline tasks that takes approximately 1 minute. How long will it take us to change all of the classic pipelines and all of the YAM pipelines?&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;We then give everyone 5 minutes to discuss and place their bets. Discussions vary, but usually include reference to mind-numbing classic pipeline editor, &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops"&gt;Task groups&lt;/a&gt;, code search and replace, followed by vibrant debates and eventually stunned silence ... the proverbial "room full of crickets."&lt;/p&gt;
&lt;p&gt;It is a trick question, because it depends on how the pipelines are designed, which can vary from minutes to days of effort. &lt;/p&gt;
&lt;p&gt;What should be evident, however, is that any change will be &lt;strong&gt;faster&lt;/strong&gt;, &lt;strong&gt;simpler&lt;/strong&gt;, and &lt;strong&gt;safer&lt;/strong&gt; to make if the &lt;strong&gt;consistency&lt;/strong&gt; of our pipelines is high, and the &lt;strong&gt;exposure area&lt;/strong&gt; is small. &lt;/p&gt;
&lt;p&gt;We recently received a request from DevSecOps to change all our pipelines to always run the DevSecOps scans, instead of just as part of pull request validation builds. It literally took us minute to create a feature branch, tweak the bootstrap template, and validate the change with a collaborative pull request. Once merged into the *.Templates repository, all new pipeline instances showcased the new default behaviour. DevSecOps were happy and the engineering teams unaware of any change.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Enabling automation&lt;/h1&gt;
&lt;p&gt;Lastly, we realised that our self-service automation goal is also no longer a distant dream. The app-type templates enable us to ask the engineering teams a few questions, then run automation that creates a new application repository and pipeline in seconds - and consistently! That, however, is a story for another day in Part 7: Self-service automation - A dream turns into reality q;)&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We have now covered the continuous integration (CI), also referred to as build, pipeline though the lens of YAML. You can think of the &lt;strong&gt;blueprints&lt;/strong&gt; and associated &lt;strong&gt;templates&lt;/strong&gt; as re-usable LEGO blocks, ranging from a bag of "do it yourself" blocks, to complex and detailed kits, such as the Imperial Star Destroyer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LEGO Imperial Star Destroyer kit&lt;/p&gt;
&lt;p&gt;&lt;img alt="LEGO Image" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we will explore continuous deployment (CD). See you in part 6 (coming soon).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 4: Pipelines - Magic of queue time assembly</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part4.html" rel="alternate"></link><published>2021-01-13T00:00:00-08:00</published><updated>2021-01-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-13:/yaml-pipelines-part4.html</id><summary type="html">&lt;p&gt;We can use the power of the new multi-stage YAML pipelines to make even our most critical security engineers smile from ear to ear.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part1&lt;/a&gt;. It is time to move from theory to practice and explore some of the magic that is pushing us from the classic to the new YAML-based Azure Pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Re-usable Templates&lt;/h1&gt;
&lt;p&gt;In &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt; we covered YAML pipelines and why they are so exciting. Ardent classic pipeline supporters will argue that &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops"&gt;Task Groups&lt;/a&gt; offer the same feature as YAML templates - I would argue similar, but not the same. Why? Both allow us to abstract pipeline logic into re-usable containers, which can be included in pipeline definitions.&lt;/p&gt;
&lt;p&gt;Where the YAML-template take us a huge stride further is magic #2 we are covering later in this post and the fact that template are version controlled and exposed to change, review, and collaboration through &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests?view=azure-devops"&gt;Pull Requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, when we plan to make fundamental and potentially pipeline breaking changes to our pipelines, we can build and test the change continuously, while collaborating with the rest of the pipeline working group in an all-embracing pull request. Only once all guardrails are met and everyone is satisfied that we have a quality change, will the pull request be approved, and the changes merged into our master branch to be consumed.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #1 - Parameter driven pipeline&lt;/h1&gt;
&lt;p&gt;Let us start looking at some of the magic, starting with a small, yet powerful feature of parameters.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-3.png"&gt;&lt;/p&gt;
&lt;p&gt;You can define parameters in your main template, as shown in the above illustration on the left. As discussed in &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; we define parameters as key/value paid and optionally add a list of values, as well as a default.&lt;/p&gt;
&lt;p&gt;The magic appears when you run the pipeline. As shown on the right in the above illustration, the parameter(s) are included as run-time and editable pipelines values. So cool!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #2 - Queue Time Pipeline Assembly&lt;/h1&gt;
&lt;p&gt;With classic pipelines what you design and what you see in the pipeline editor, is what you will queue and what the agent pools get to process. And yes, we can add conditional steps by using custom conditions, such as &lt;code&gt;ne(variables['Agent.JobStatus'], 'SuceededWithIssues)&lt;/code&gt;, but whether the conditions are met, the tasks will be included in the queued pipeline.&lt;/p&gt;
&lt;p&gt;With the multi-stage pipelines this is where magic #2 enters the building, because conditional expressions are validated at queue time to &lt;strong&gt;inject&lt;/strong&gt; or &lt;strong&gt;ignore&lt;/strong&gt; parts of the templates. The following image shows the &lt;strong&gt;same&lt;/strong&gt; pipeline queued - on the left (1) it runs with 14 steps and on the right (2) with 24 steps. The same pipeline ... what is going on?!?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Same pipeline, same definition, different context!
&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Upon closer inspection we notice a (3) &lt;strong&gt;Bootstrap Validation Suppression Alert&lt;/strong&gt; in the first (1) pipeline run, which is our current behaviour for builds run outside a pull request. On the right we see the same pipeline run (2) within the context of a pull request validation build, which &lt;strong&gt;injects&lt;/strong&gt; (4) SonarQube, (5) WhiteSource, and (6) our Building Code. It is important to emphasise that the pipeline on the left does not include the additional steps, optimising the runtime processing and keeping the logs focused and simple.&lt;/p&gt;
&lt;p&gt;The magic is based on conditional expressions, as the following extract I pulled from our bootstrap template. It instructs the Azure Pipeline queuing feature to only inject the template if ( we are in the "run" mode, and ( the source branch is "merge" or forceCheck is true ) ). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;run&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SampleFolder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SampleTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the conditional expression is not met, the template is &lt;strong&gt;not&lt;/strong&gt; injected, and the template contents omitted from the queued pipeline. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #3 - Cannot override guardrails&lt;/h1&gt;
&lt;p&gt;Remember &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/deploy-multiple-branches?view=azure-devops#:~:text=Azure%20Pipelines%20%7C%20Azure%20DevOps%20Server%202019%20Artifact,stage%20only%20when%20those%20filter%20conditions%20are%20met."&gt;artifact filters&lt;/a&gt;? A great way to protect deployment stages in classic pipelines from artifacts built from untrusted branches - "&lt;em&gt;Applying the artifact filter to a specific branch results in the artifact deploying to a specific stage only when those filter conditions are met.&lt;/em&gt;" - docs.microsoft.com&lt;/p&gt;
&lt;p&gt;Unfortunately, as our security engineers remind us on a regular basis, these can be overridden by users with the right permission. Something that promises to be and should be immutable, can mutate as needed - not cool!&lt;/p&gt;
&lt;p&gt;Looking forward, however, we can use the power of the new multi-stage YAML pipelines to make even our most critical security engineers smile from ear to ear ... and that is no easy feat!&lt;/p&gt;
&lt;p&gt;Watch this quick video for a demo of the power, sorry magic, of the new pipelines.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/DWuDqCM1t6A"&gt;&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-2.png"&gt;&lt;/a&gt; [1:52]&lt;/p&gt;
&lt;p&gt;Here is an extract from our demo pipeline. Note that unlike in prior examples, we have no conditional expression to determine whether to inject the template or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# DEV Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStage.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Development&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Development&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Development Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# SY Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStage.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_System_Test&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD System Test&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;windows-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP System Test Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# ST Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStageR.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Stage&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Stage&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Stage Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# PROD Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStageR.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Production&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Production&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;macOS-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Production Environment&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;The last deployment uses the macOS pool, which created a few migraines for us that are worth pointing out. If you peruse &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml#networking"&gt;Microsoft-hosted agents&lt;/a&gt; you will note two potential issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&lt;em&gt;Agents that run macOS images are provisioned on Mac pros. These agents always run in US and Europe irrespective of the location of your Azure DevOps organization. If data sovereignty is important to you and if your organization is not in one of these geographies, then you should not use macOS images&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;em&gt;Our Mac IP ranges are not included in the Azure IPs above, though we are investigating options to publish these in the future.&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not a DevSecOps friendly agent pool - we have an open support ticket. If you want to know more or have more information, ping me!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case we are using conditional expressions in the DeploymentStage&lt;strong&gt;R&lt;/strong&gt;.yml template, which protects the higher environments ending with &lt;strong&gt;Stage&lt;/strong&gt; and &lt;strong&gt;Production&lt;/strong&gt; from all branches other than the &lt;strong&gt;release&lt;/strong&gt; branch. In the following conditional expression example we only allow deployments to the higher environments from the release branch. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Stage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are using release/* as your release branch, for example release/1.0.13, you need to change the last part of the conditional statement to something like &lt;code&gt;startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Combined with &lt;strong&gt;Approvals and checks&lt;/strong&gt; of &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml"&gt;Service connections&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;Environments&lt;/a&gt; the demonstrated magic allows us to align our pipelines with all our goals, such as alignment, consistency, enablement, and &lt;strong&gt;security&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Simplicity is a goal that will drive our future pipeline endeavors and define our success, because with all the power and flexibility of YAML, it is all too easy to create another ocean of complex and potentially unmaintainable pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we appreciate the power and some of the magic, we can shift gears to our blueprints. See you in &lt;a href="yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | Part 4 | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part3.html" rel="alternate"></link><published>2021-01-04T00:00:00-08:00</published><updated>2021-01-04T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-04:/yaml-pipelines-part3.html</id><summary type="html">&lt;p&gt;With the support from all &lt;strong&gt;people&lt;/strong&gt;, YAML templates support our five (5) core goals and pillars of our common engineering system.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to the world of pipelines. In &lt;a href="/why-pipelines-part1.html"&gt;part1&lt;/a&gt; we discussed "why" pipelines are valuable and introduced the new Azure DevOps YAML-based pipelines in &lt;a href="/yaml-pipelines-part2.html"&gt;part2&lt;/a&gt;. In this post we explore templates as invaluable building blocks and telemetry to gather essential insights.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a YAML template?&lt;/h1&gt;
&lt;p&gt;Templates allow us to define reusable content, logic, and parameters, keeping our main pipeline definitions razor focused on the application and sharing common logic. Another advantage of templates, which we will exploit in part 7 of this adventure, is the ability to script and assemble pipelines at “queue” time.&lt;/p&gt;
&lt;p&gt;Essentially, we can define reusable code in separate templates. We can include templates within templates and define four types of templates:
- &lt;strong&gt;Stage&lt;/strong&gt; to define a set of stages of related jobs
- &lt;strong&gt;Job&lt;/strong&gt; to define a collection of steps run by an agent
- &lt;strong&gt;Step&lt;/strong&gt; to define a linear sequence of operations for a job
- &lt;strong&gt;Variable&lt;/strong&gt; as an alternative to hard coded values or variable groups&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Azure Pipelines currently support a maximum of 50 unique template files in a pipeline.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an example template, that defines the reusable code to download a universal artifact containing configuration files, download and run the &lt;a href="https://www.whitesourcesoftware.com/"&gt;WhiteSource&lt;/a&gt; unified code scanning agent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;urlUnifiedAgent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Download&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="n"&gt;universal&lt;/span&gt; &lt;span class="n"&gt;artifact&lt;/span&gt;
  &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;downloadDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;feedsToUse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;vstsFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;automation&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;
    &lt;span class="nl"&gt;vstsFeedPackage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;             &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;toolbox&lt;/span&gt;
    &lt;span class="nl"&gt;vstsPackageVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LJO&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlUnifiedAgent&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Download&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;WhiteSource&lt;/span&gt; &lt;span class="n"&gt;Unified&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apiKey&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;WorkSafeBC&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;WhiteSource&lt;/span&gt; &lt;span class="n"&gt;Unified&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Including the reusable code in your pipeline is simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;  - template: Templates/DevSecOps/Whitesource.yml@AzDOTemplates&lt;/span&gt;
&lt;span class="err"&gt;    parameters:&lt;/span&gt;
&lt;span class="err"&gt;      portfolioName: &amp;#39;DEMO.Samples&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;      productName:   &amp;#39;WhiteSource&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Why are we excited about YAML templates?&lt;/h1&gt;
&lt;p&gt;As discussed at the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093/"&gt;DevOps Vancouver Meetup: April 2020&lt;/a&gt;, anyone going through a digital transformation will acknowledge that we need to focus on products, process, and people. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.&lt;/em&gt;” – Donovan Brown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our mandate is to &lt;strong&gt;empower&lt;/strong&gt; people, standardize on the best products, and continuously improve processes to raise quality and security bars, efficiency, and reliability. We considered three options to drive a culture change with our continuous delivery pipeline infrastructure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rules Apply" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-1.png"&gt; We can enforce strict governance, standards, and rules, quickly stifling innovation and personal satisfaction.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rebellion" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-2.png"&gt; We can continue to promote complete autonomy, leading to a product and process rebellion and creating a pile of technology mess that is hard and expensive to maintain.&lt;/p&gt;
&lt;p&gt;&lt;img alt="YingYang" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-3.png"&gt; We can listen to what motivates and enables our Agile teams and work together to embrace organizational governance.&lt;/p&gt;
&lt;p&gt;We opted for the latter to enable and inspire engineering teams to learn, grow, and innovate by sharing and encouraging proven patterns and practices through guardrails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS Balance" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-4.png"&gt;&lt;/p&gt;
&lt;p&gt;But, let us get back to the core question - "&lt;em&gt;Why are we excited about YAML templates?&lt;/em&gt;". &lt;/p&gt;
&lt;p&gt;With the support from all &lt;strong&gt;people&lt;/strong&gt;, which implies down (organizational leadership) and bottom up (engineering), YAML templates support our five (5) core goals and pillars of our common engineering system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Continuously &lt;strong&gt;innovate&lt;/strong&gt; and enable users, with alignment to architecture, security and development &lt;strong&gt;guardrails&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt; to provide speed, consistency, and repeatable processes.
 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enable&lt;/strong&gt; and &lt;strong&gt;empower&lt;/strong&gt; users to create business value from ideation to production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Align with &lt;strong&gt;security&lt;/strong&gt; guardrails to minimize vulnerabilities and enforce a secure collaboration and engineering system.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;strong&gt;simple&lt;/strong&gt; to create a system that can be supported, maintained, and improved with ease. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reusable templates&lt;/h1&gt;
&lt;p&gt;As shown in the illustration below, from my rough notes, we defined two base blueprints. One that defines one stage, &lt;strong&gt;multiple jobs&lt;/strong&gt; allowing parallel runs on separate agents, each with multiple steps.&lt;/p&gt;
&lt;p&gt;The simpler and more recommended blueprint defines one stage, one job, with &lt;strong&gt;multiple steps&lt;/strong&gt;.** It keeps things simple, running everything on one agent within the same context.&lt;/p&gt;
&lt;p&gt;We are working on application-type specific quick-start blueprints, for example Angular, .NET Core, iOS application, and Azure Function application to make it even easier to get started and to encourage consistency.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blueprints and Templates Sketch" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-5.png"&gt;&lt;/p&gt;
&lt;p&gt;All our blueprints inject and rely on several templates, which are maintained in a secure repository - anyone can view, and anyone can suggest a change through a pull request.&lt;/p&gt;
&lt;p&gt;Like the WhiteSource sample mentioned before, we have two &lt;strong&gt;DevSecOps.yml&lt;/strong&gt; and &lt;strong&gt;DevSecOpsInit.yml&lt;/strong&gt; templates which define the use of Dev&lt;strong&gt;Sec&lt;/strong&gt;Ops tasks, such as SonarQube and WhiteSource tasks.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;BuildingCode.yml&lt;/strong&gt; template defines the use of building code validations, such as duplicate code, end of life validations, and detection of surviving &lt;a href="https://stryker-mutator.io/"&gt;Stryker&lt;/a&gt; mutants.&lt;/p&gt;
&lt;p&gt;Lastly, the &lt;strong&gt;bootstrap&lt;/strong&gt; template is the HEART of our new pipelines, using parameters and expressions to call the right validations for the known application types, which in turn injects the relevant templates and tasks when a pipeline is queued.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    - template: Templates/Bootstrap.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;      parameters:&lt;/span&gt;
&lt;span class="err"&gt;        bootstrapMode:    &amp;#39;init&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;        applicationType:  &amp;#39;dotnet&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;        applicationGuid:  $(productGuid)&lt;/span&gt;
&lt;span class="err"&gt;        portfolioName:    $(portfolioName)&lt;/span&gt;
&lt;span class="err"&gt;        productName:      $(productName)&lt;/span&gt;
&lt;span class="err"&gt;        sourcesDirectory: $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Remember to keep it simple&lt;/h1&gt;
&lt;p&gt;The power of YAML enables us to create invaluable pipeline definitions and abstract re-usable code in templates, as discussed. &lt;strong&gt;BUT&lt;/strong&gt; we always urge our pipeline working group and our pipeline users to keep things &lt;strong&gt;SIMPLE&lt;/strong&gt;, to ensure that we can innovate, scale, maintain the new world of continuous delivery pipelines, and empower both development and operations.&lt;/p&gt;
&lt;p&gt;We hide the complexity in our bootstrap.yml template, which can be embraced in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with one of our blueprints and insert … COPY PASTE … the application specific YAML code.&lt;/li&gt;
&lt;li&gt;Insert the blueprint template calls into existing YAML pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Blueprints and Context" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-6.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GOTCHA&lt;/strong&gt; -There is a need to run specific tasks within the same context. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is one of the reasons we call the blueprints differently in single-job and multi-job sample blueprints, as shown above. We need to ensure that SonarQube tasks, for example, run within the same job context as the build, and the building code after the test. When we run within the same context, we can also be more efficient by loading dependencies, such as source code, extensions, and configuration once.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Telemetry gives us insight&lt;/h1&gt;
&lt;p&gt;To monitor, troubleshoot, and understand the flow of value in our continuous delivery pipelines we explored a few ways to extend the Azure Pipeline analytics with metrics from our pipeline blueprints and templates. The telemetry will enable us to measure &lt;strong&gt;lead time&lt;/strong&gt;, &lt;strong&gt;cycle time&lt;/strong&gt;, and &lt;strong&gt;efficiency&lt;/strong&gt;, uncover waste, and continuously improve as discussed in &lt;a href="https://www.tactec.ca/value-stream-mapping-vsm/"&gt;value stream mapping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We opted for Azure &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview"&gt;Application Insights&lt;/a&gt;, calling a reusable PowerShell Core script in our templates to send the pipeline events, actions, and other data for future analysis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;SonarQube&lt;/span&gt; &lt;span class="n"&gt;Duplicate&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Validation&lt;/span&gt; &lt;span class="n"&gt;Telemetry&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Toolbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;logBootstrapEventToAI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;OperationId&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;$(Build.BuildNumber).$(Build.BuildId)&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Duplicate&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DuplicateCode&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(SQDCVars.codeMetricesTaskVar)&amp;quot;&lt;/span&gt;
      &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - The extract above shows how we use conditional &lt;code&gt;${{ if ... }}&lt;/code&gt; to introduce previews into our operational pipelines. If &lt;code&gt;parameters.previews&lt;/code&gt; is set to true, indicating that we are embracing preview logic, the telemetry script is included in our pipeline and called at run-time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we understand templates, we will look at the magic that has our Sec, in DevSecOps, smiling from ear to ear. See you in &lt;a href="yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | Part 3 | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 2: Pipelines - Introduction, variables and why spaces matter</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part2.html" rel="alternate"></link><published>2020-12-21T00:00:00-08:00</published><updated>2020-12-21T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-12-21:/yaml-pipelines-part2.html</id><summary type="html">&lt;p&gt;The new Azure DevOps YAML pipelines have been the focus of innovation, enabling engineering to treat pipelines as code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue our continuous delivery pipeline journey by switching gears from the unified pipelines to the new YAML-syntax pipelines. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why the YAML course change?&lt;/h1&gt;
&lt;p&gt;Do not get me wrong, the Unified pipelines introduced in &lt;a href="/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options&lt;/a&gt; are phenomenal and will continue to serve us for quite some time. However, we realised that the unified pipelines are based on the json-based user interface pipelines. Microsoft refers to these pipelines as &lt;strong&gt;classic interface&lt;/strong&gt; and there have been no improvements for many sprints in the Azure DevOps &lt;a href="https://docs.microsoft.com/en-us/azure/devops/release-notes/features-timeline"&gt;timeline&lt;/a&gt;. This is a &lt;strong&gt;RISK&lt;/strong&gt; as the technology is becoming stale.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Classic Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-1.png"&gt;&lt;/p&gt;
&lt;p&gt;In turn, the new Azure DevOps YAML-syntax pipelines have been the focus of innovation, enabling engineering to treat pipelines as code, use templates to promote consistency, efficiency, innovation, and quality, and last, but not least, combine continuous integration and deployment into one pipeline.&lt;/p&gt;
&lt;p&gt;&lt;img alt="YAML Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-2.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;YAML Overview&lt;/h1&gt;
&lt;p&gt;YAML is a mature human-readable data-serialization language, originally proposed by Clark Evans in 2001. It is often referred to as “yet another markup language” and “YAML ain’t markup language.&lt;/p&gt;
&lt;p&gt;When we look at the &lt;a href="https://aka.ms/yaml"&gt;Azure DevOps YAML&lt;/a&gt; pipelines, the pipeline configuration language has been kept structurally YAML. That is exciting!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BOOKMARK the gem &lt;a href="https://aka.ms/yaml"&gt;https://aka.ms/yaml&lt;/a&gt; URL!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;YAML Basics&lt;/h1&gt;
&lt;p&gt;Let us ask Azure Pipelines for a new YAML-syntax pipeline to explore. By default, Azure DevOps generates the following starter pipeline for us:&lt;/p&gt;
&lt;h2&gt;Our first pipeline&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Starter&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Start&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;minimal&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;

&lt;span class="k"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Run a one-line script&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Run a multi-line script&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is evident that:
- It is triggered on changes on the &lt;strong&gt;master&lt;/strong&gt; branch.
- It is queued on the latest &lt;strong&gt;ubuntu&lt;/strong&gt; agent pool - other options include macOS and Windows.
- It runs two steps, hosted in one stage, containing one job.&lt;/p&gt;
&lt;p&gt;Simple!&lt;/p&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;Next, we will explore two key YAML topics: &lt;strong&gt;Variables&lt;/strong&gt; and &lt;strong&gt;Parameters&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every variable is really a key:value pair.&lt;/li&gt;
&lt;li&gt;Simple variable syntax example
    &lt;code&gt;yml
    variables:
      name: WSBC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Explicit key:value syntax example
    ```yml
    variables:&lt;ul&gt;
&lt;li&gt;name:  myvariable
  value: WSBC 
```&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The key is the name of the variable, and it has a &lt;strong&gt;string&lt;/strong&gt; value. &lt;/li&gt;
&lt;li&gt;The variable is processed at &lt;strong&gt;run&lt;/strong&gt; time.&lt;/li&gt;
&lt;li&gt;To dereference a variable, simply wrap the key in &lt;code&gt;$()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There are several types of variables, whereby pipelines do not distinguish between these types. &lt;/li&gt;
&lt;li&gt;Inline variables&lt;/li&gt;
&lt;li&gt;Variable groups&lt;/li&gt;
&lt;li&gt;Template variables&lt;/li&gt;
&lt;li&gt;Pipeline variables&lt;/li&gt;
&lt;li&gt;Predefined Azure DevOps agent and build &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml"&gt;variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Explicit syntax is required when you mix variable types. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yml
 variables:
 - name:     myvariable
   value:    WSBC
 - group:    myVariableGroup
 - template: myVariableTemplate.yml&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parameters can be used in templates and pipelines. They allow us to deal with complex objects and combine parameters and expressions to create complex scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yml
  parameters:
  - name: parameterSample
    type: string
    default: sunshine
    values:
    - sunshine
    - moonlight
    - aurora&lt;/code&gt;
- Unlike variables, parameters are defined as key value pairs where the value can be of &lt;strong&gt;any type&lt;/strong&gt;.
- To dereference a parameter, simply wrap the key in &lt;code&gt;${{}}&lt;/code&gt;.
- The variable is processed at &lt;strong&gt;queue&lt;/strong&gt; time.&lt;/p&gt;
&lt;p&gt;Powerful magic!&lt;/p&gt;
&lt;h2&gt;Our second YAML pipeline&lt;/h2&gt;
&lt;p&gt;Now that we understand variables and parameters, let us create our second YAML pipeline and first template. No need to panic, you have not missed anything - we will explore templates in more detail in Part 3 of this series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bingo!&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;keyFinal&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you notice that we assigned the value to the keyFinal variable, but are using keyRef throughout the sample? By using the queue-time ${{}} resolution, we are changing the first script to the following during queue time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bingo!&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;keyFinal&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;keyFinal&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;keyFinal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Our first template&lt;/h2&gt;
&lt;p&gt;Like parameters the template is injected and processed at &lt;strong&gt;queue&lt;/strong&gt; time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defaultKey&amp;#39;&lt;/span&gt;  

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;

  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;KeyRef&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I recommend that you create the sample pipeline and run it. Does it display what you expected? If yes, you can skip the YAML Gotchas, otherwise read on.&lt;/p&gt;
&lt;h2&gt;Generated echo output&lt;/h2&gt;
&lt;p&gt;Take note of the fourth, fifth, and sixth echo in the template. You may expect that the output will be the same ... but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fourth &lt;code&gt;echo $(keyRef)&lt;/code&gt; displays &lt;code&gt;keyFinal&lt;/code&gt; as expected.&lt;/li&gt;
&lt;li&gt;Fifth  &lt;code&gt;echo $( keyRef )&lt;/code&gt; displays &lt;code&gt;command not found&lt;/code&gt; ... too many spaces. &lt;/li&gt;
&lt;li&gt;Sixth  &lt;code&gt;echo $( KeyRef )&lt;/code&gt; displays &lt;code&gt;command not found&lt;/code&gt; ... YAML is case-sensitive and too many spaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;... command not found&lt;/span&gt;
&lt;span class="err"&gt;here we go&lt;/span&gt;
&lt;span class="err"&gt;keyFinal&lt;/span&gt;
&lt;span class="err"&gt;... command not found&lt;/span&gt;
&lt;span class="err"&gt;keyFinal&lt;/span&gt;
&lt;span class="c"&gt;keyRef: command not found&lt;/span&gt;
&lt;span class="c"&gt;KeyRef: command not found&lt;/span&gt;
&lt;span class="err"&gt;keyFinal command not found&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;YAML Gotchas, such as spaces&lt;/h1&gt;
&lt;p&gt;For example, alignment of your definition is critical. Just like in the Cobol and Fortran days, a space too many or too few will throw errors, that are often difficult to decipher. As shown in the simple example, these two statements look the same, however, the second has too many spaces and fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, the following example looks innocent at a quick glance, but the first and third script will fail as it is indented few and one too many spaces respectively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yaml is a very positional and pedantic language!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Use the &lt;strong&gt;validate&lt;/strong&gt; feature in the Azure Pipeline editor to help you unearth some of the gremlins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="YAML Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-4.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Common language&lt;/h1&gt;
&lt;p&gt;With the various names popping up - classic, unified, YAML, and multi-stage - it is important to define and use a common language when talking about pipelines. Within the context of Azure DevOps pipelines, we suggest and use the following in these technical blogs:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TERMINOLOGY&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Classic Unified Pipeline&lt;/td&gt;
&lt;td&gt;Unified pipeline design practice, defined by WSBC, based on the user interface (Classic) Azure Pipeline to promote a consistent CICD pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-stage YAML-syntax Pipeline&lt;/td&gt;
&lt;td&gt;Unified YAML experience to create an Azure Pipeline to do CI, CD, or CI and CD, and store the pipeline configuration as part of the source code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-stage Blueprint-based Pipeline&lt;/td&gt;
&lt;td&gt;Unified pipeline design practice, defined by WSBC, based on the multi-stage YAML-syntax pipeline to promote a consistent, secure, and extensible CI/CD pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Exploration (CE)&lt;/td&gt;
&lt;td&gt;Continuous analysis of an idea or hypothesis, customer feedback, or market research through rapid prototyping. OODA – Observe, Orient, Decide, Act.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Integration (CI)&lt;/td&gt;
&lt;td&gt;Continuously collaboration, validation, and merging of code changes. Also known as a continuous and automated “Build”.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Deployment (CD)&lt;/td&gt;
&lt;td&gt;Ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one&lt;/strong&gt; environment automatically – for example, deploy straight to production.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Delivery (CD)&lt;/td&gt;
&lt;td&gt;Ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;more&lt;/strong&gt; environments automatically – for example, deploy to multiple rings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release on Demand (RoD)&lt;/td&gt;
&lt;td&gt;Ability to make changes available to customers all at once, or selectively in response to feedback or business needs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;If erroneous spaces do not rattle you, we are ready to jump into &lt;a href="yaml-pipelines-part3.html"&gt;part 3&lt;/a&gt; to explore the power of templates and how we are cooking up a storm of re-usable magic.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | Part 2 | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 1: Pipelines - Why bother and what are our nightmares and options?</title><link href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html" rel="alternate"></link><published>2020-12-19T00:00:00-08:00</published><updated>2020-12-19T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-12-19:/why-pipelines-part1.html</id><summary type="html">&lt;p&gt;Pipelines enable engineering to continuously deliver value, map and improve their processes and workflows, promoting consistency and reliability across the organisation.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this series we are going to invite you on our journey of grappling with hundreds of inconsistent and often conflicting continuous delivery pipelines, to evolving to unified pipelines, template-driven pipelines, and eventually self-service automation. We will break down our journey into these multiple parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: Pipelines - Why bother and what are our nightmares and options? (this)&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part2.html"&gt;Part 2: Pipelines - Introduction, variables and why spaces matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part4.html"&gt;Part 4: Pipelines - Magic of queue time assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part7.html"&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coming soon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part TBD: Pipelines - From CI to CD and beyond in one pipeline&lt;/li&gt;
&lt;li&gt;Part TBD: Self-service automation - A dream turns into reality&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Why Pipelines?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Continuous Delivery Pipeline Value Stream Mapping The Continuous Delivery Pipeline (CDP) represents the workflows, activities, and automation needed to shepherd a new piece of functionality from ideation to an on-demand release of value to the end user."&lt;/em&gt; - © Scaled Agile, Inc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As eluded to by the quote from Scaled Agile, we are not talking about pipelines to carry oil, but pipelines that help us automate continuous integration and delivery tasks. Examples include the automation of guardrail automations, such as SonarQube, WhiteSource, and Building Code scans and validations.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Pipelines enable engineering to continuously deliver value, map and improve their processes and workflows, promoting consistency and reliability across the organisation.&lt;/p&gt;
&lt;h1&gt;Snowflakes&lt;/h1&gt;
&lt;p&gt;A healthy DevOps mindset promotes the line of autonomy. Above the line the organization defines its vision and governance to ensure alignment with regulatory, legal, and other requirements. Below the line the engineering teams own their process, with full autonomy to plan WHO, WHEN, and HOW they will accomplish their work.&lt;/p&gt;
&lt;p&gt;If, however, there is a lack of blueprints, design practices, and governance, each team will design and develop their pipelines slightly differently. &lt;/p&gt;
&lt;p&gt;The outcome are unique &lt;strong&gt;snowflakes&lt;/strong&gt; that promote rapid evolution (positive) and a diversity of pipelines that can become hard to maintain, support, and innovate (negative).&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With hundreds of continuous delivery pipelines the &lt;strong&gt;Sec&lt;/strong&gt; and &lt;strong&gt;Ops&lt;/strong&gt; in DevSecOps began to buckle detecting and fixing vulnerabilities and other guardrail leaks.&lt;/p&gt;
&lt;h1&gt;Emergence of Unified Pipelines&lt;/h1&gt;
&lt;p&gt;In 2018 we decided to grab the pipelines by their valves to tackle the spread of unique pipeline patterns by defining an &lt;strong&gt;Unified&lt;/strong&gt; &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops#:~:text=%20Does%20Azure%20Pipelines%20work%20with%20my%20language,code%20to%20multiple%20targets.%20Targets%20include...%20More%20"&gt;Azure Pipeline&lt;/a&gt; design pattern. The pattern promoted the following principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate everything automatable&lt;/li&gt;
&lt;li&gt;Build once&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We encourage engineering teams to create a &lt;strong&gt;release&lt;/strong&gt; build artifact, with debug symbols published to our symbol server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Continuous integration and delivery&lt;/li&gt;
&lt;li&gt;Continuous streamlining and improvement&lt;/li&gt;
&lt;li&gt;Maintain one build definition&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of a developer and release pipeline, create &lt;strong&gt;one&lt;/strong&gt; unified pipeline that locks down the higher environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Maintain one release pipeline definition&lt;/li&gt;
&lt;li&gt;Scan for vulnerabilities early, often, and fail fast&lt;/li&gt;
&lt;li&gt;Streamlined approvals&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;By optimising our approvals, we cut down on the complexity and delay, we inherited from previous years, decades, ... &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Test early, often, and fail fast&lt;/li&gt;
&lt;li&gt;Traceability and observability of releases&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nobody wants a &lt;em&gt;"where did this build come from"&lt;/em&gt; treasure hunt when joining a 2AM incident call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What followed was a mind-numbing and expensive era of aligning all snowflakes to the unified design pattern, using the Azure Pipelines GUI editor to manipulate the pipeline json-based configuration. Even though we are using re-usable &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops#:~:text=In%20Azure%20Pipelines%2C%20you%20can%20version%20your%20own,is%20appended%20to%20the%20task%20group%20version%20number."&gt;Task Groups&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&amp;amp;tabs=yaml"&gt;Variable Groups&lt;/a&gt; we had to invest thousands of error-prone clicks - there has to be a better way!?!&lt;/p&gt;
&lt;p&gt;We managed to persue our goals of &lt;strong&gt;aligning&lt;/strong&gt; with architecture and security guardrails; &lt;strong&gt;consistency&lt;/strong&gt; through design practices, automation, and collaboration; &lt;strong&gt;simplicity&lt;/strong&gt; to create maintainable pipelines; and &lt;strong&gt;enabling&lt;/strong&gt; and &lt;strong&gt;empowering&lt;/strong&gt; our common engineering system.&lt;/p&gt;
&lt;h1&gt;Hackathon triggers a course change&lt;/h1&gt;
&lt;p&gt;A radical hackathon idea in 2019 investigated latest technology trends that promised pipeline-as-code, templates, and other facinating features that promise to enable our ultimate goal of self-service automation. Our hackathon idea was not amongst the winners, but is one of the few ideas that continued to simmer and change the world of our continuous delivery pipelines.&lt;/p&gt;
&lt;p&gt;It triggered a pipeline working group, awareness workshops, and even four laptop stickers to highlight unified pipeline, multi-stage, CI+CD, and self-service automation champions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Welcome YAML based pipelines, which we will introduce in &lt;a href="yaml-pipelines-part2.html"&gt;part 2&lt;/a&gt; of this series.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | Part 1, TOC | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Shift LEFT and RIGHT to take yourself off the humbling 2AM calls</title><link href="https://wsbctechnicalblog.github.io/shift-left-2am-call.html" rel="alternate"></link><published>2020-10-24T13:13:00-07:00</published><updated>2020-10-24T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-24:/shift-left-2am-call.html</id><summary type="html">&lt;p&gt;We need to avoid the infamous 2AM call!&lt;/p&gt;</summary><content type="html">&lt;p&gt;During the &lt;strong&gt;Getting started with a DevOps mindset session&lt;/strong&gt; at the CSI Lab in January 2019, we discussed a number of epiphanies. Three referenced the 2AM call, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Epiphanies" src="/images/two-am-call-1.png"&gt;&lt;/p&gt;
&lt;h1&gt;What is the 2AM call?&lt;/h1&gt;
&lt;p&gt;When a user reports an issue, telemetry insights identifies an anomaly, or a circuit breaker detects a potential overload, an incident is generated. On detection of the incident a call is initiated to engineers on call, also referred to as designated response individuals, who jump on the call to identify the root cause, capture vital evidence, work on a mitigation hot fix, document the incident transparently, and work with the feature teams (pods, tribes,...) to ensure that the incident never re-occurs. The reason it is called the &lt;strong&gt;2AM call&lt;/strong&gt; is that it usually happens when we are entering the REM sleep at 2AM.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 2 - The 2AM Call is a great motivation for quality&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is obvious that no one wants to wake up at 2AM. Experiencing the 2AM call once or twice, is typically enough motivation for any of us to look for ways to improve our solution and avoid getting the dreaded call.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 3 - Teams that take ownership of features from ideation to deprecation are typically involved in the least 2AM calls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Why does SHIFT LEFT + SHIFT RIGHT reduce the 2AM calls?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Epiphanies" src="/images/two-am-call-2.png"&gt;&lt;/p&gt;
&lt;h2&gt;SHIFT LEFT&lt;/h2&gt;
&lt;p&gt;The core idea is to perform tasks such as testing, security scanning, user experience reviews, and code reviews as early as possible in the continuous integration and deployment life cycle as possible. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Quick Poll" src="/images/two-am-call-3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snapshot of our quick poll - What is important to automate for a healthy DevOps environment?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Automation is key to the &lt;strong&gt;SHIFT LEFT&lt;/strong&gt; practice allowing us to integrate the tasks seamlessly in the engineering system.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quick Poll" src="/images/two-am-call-4.png"&gt;&lt;/p&gt;
&lt;p&gt;The above snippet is from a pull request validation build that shows that 71,283 unit tests were validated in less than 7 minutes. It can be done!&lt;/p&gt;
&lt;p&gt;Similarly, continuous integration builds can perform credential, security, and other scans, allowing us to validate the quality of a feature early and continuously, identify issues early, and either fix or fail fast before we commit ourselves to a deployment.&lt;/p&gt;
&lt;h2&gt;SHIFT RIGHT&lt;/h2&gt;
&lt;p&gt;Contrary to practices such as testing and security scanning, which we want to perform as early and often as possible, we want to defer the configuration deployments as long as possible - &lt;strong&gt;SHIFT&lt;/strong&gt; configuration &lt;strong&gt;RIGHT&lt;/strong&gt;. Explore how to generate &lt;strong&gt;ONE&lt;/strong&gt; build, deploy to &lt;strong&gt;MANY&lt;/strong&gt; environments, simplify build artifact traceability and remote debug, as needed ... it is possible!&lt;/p&gt;
&lt;h2&gt;BUT, WHY DOES IT REDUCE THE 2AM CALL?&lt;/h2&gt;
&lt;p&gt;PEOPLE are the hardest part of any transformation! Innovating continuously to improve the &lt;strong&gt;PROCESS&lt;/strong&gt; and &lt;strong&gt;PRODUCTS&lt;/strong&gt; (tools) is the easy part. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 3 - We need to ensure that engineers see the value for SHIFT LEFT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you SHIFT LEFT with testing and security, the engineers, the &lt;strong&gt;PEOPLE&lt;/strong&gt;, will initially push back as the pull request validation builds take longer and associated logs and alert noise increase dramatically.  However, running 70,000 unit tests with every build, as shown above, eventually raises the quality of the solution. It is like a train that takes a while to pick up speed. Once in motion, the momentum will dramatically improve key performance indicators (KPI), such as &lt;strong&gt;lead time for change&lt;/strong&gt;, &lt;strong&gt;mean time to recover&lt;/strong&gt;, and especially &lt;strong&gt;change failure rate&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - KPIs are often not meaningful to all stakeholders. For example, mentioning a 2,604 times &lt;strong&gt;faster mean time to recover&lt;/strong&gt; metric is probably viewed with more skepticism than excitement by many business stakeholders.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Endangered" src="/images/two-am-call-5.png"&gt;&lt;/p&gt;
&lt;p&gt;A reduction in incidents and 2AM calls, however, is an easy one to unpack and understand - especially for on-call engineers now snoozing next to silent pagers and mobile phones.&lt;/p&gt;</content><category term="Posts"></category><category term="DevOps"></category><category term="DevOps-Mindset"></category></entry><entry><title>Don’t let your code talk to strangers</title><link href="https://wsbctechnicalblog.github.io/dont-let-your-code-talk-to-strangers.html" rel="alternate"></link><published>2020-10-24T10:20:00-07:00</published><updated>2020-10-24T10:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-24:/dont-let-your-code-talk-to-strangers.html</id><summary type="html">&lt;p&gt;Closer look into the principle of least knowledge&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have discussed the crucial effect that cost of change has on the quality of the delivered business value. If the delivered value is expensive to change, it loses its attractiveness. In such cases, it quickly morphs from an asset into liability. We certainly don’t want to find ourselves in such disadvantageous position.&lt;/p&gt;
&lt;p&gt;Generally speaking, the most frequent cause of unchangeable code is tight coupling. During the early stages of development, coupling comes naturally, almost spontaneously. And at that stage, it appears quite harmless. We continue adding capabilities to our solution, and things appear to be going swimmingly.&lt;/p&gt;
&lt;p&gt;But there often comes a moment when we realize that we need to rearrange our code due to the newly arrived requirements or findings. It is at that point that tight coupling rears its ugly head and makes us realize that we have all but painted ourselves into a proverbial corner.&lt;/p&gt;
&lt;p&gt;Tight coupling has many underlying causes and anti-patterns. Today, we are going to take a closer look into one such anti-pattern – code talking to strangers.&lt;/p&gt;
&lt;h2&gt;Principle of least knowledge&lt;/h2&gt;
&lt;p&gt;Tight coupling happens when our code knows way more than is needed in order to do the job. At a first glance, knowing more than is needed doesn’t sound undesirable. What could be wrong with possessing excessive knowledge?&lt;/p&gt;
&lt;p&gt;Let’s try to illustrate what could get wrong by indulging in excessive knowledge by following a trivial example. Suppose we have a line of code that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objectA.GetObjectB().GetObjectC().DoSomeSpecificThing();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the line above, we see &lt;code&gt;objectA&lt;/code&gt; (i.e. an instance of &lt;code&gt;classA&lt;/code&gt;) getting &lt;code&gt;objectB&lt;/code&gt; (an instance of &lt;code&gt;classB&lt;/code&gt;). That’s perfectly fine, but the issue now arises due to the fact that &lt;code&gt;objectA&lt;/code&gt; is using &lt;code&gt;objectB&lt;/code&gt; not because &lt;code&gt;objectB&lt;/code&gt; can provide some useful capability/service to &lt;code&gt;objectA&lt;/code&gt; (which would be the normal case). &lt;code&gt;objectA&lt;/code&gt; is getting &lt;code&gt;objectB&lt;/code&gt; merely in order to expressly get to &lt;code&gt;objectC&lt;/code&gt;. Once &lt;code&gt;objectA&lt;/code&gt; gets a handle on &lt;code&gt;objectC&lt;/code&gt;, it can ask &lt;code&gt;objectC&lt;/code&gt; to do some specific thing.&lt;/p&gt;
&lt;p&gt;Why is that problematic? Granted, it is obvious that to &lt;code&gt;objectA&lt;/code&gt; a once or twice removed &lt;code&gt;objectC&lt;/code&gt; is a stranger. We do we say that &lt;code&gt;objectC&lt;/code&gt; is a stranger to &lt;code&gt;objectA&lt;/code&gt;? If &lt;code&gt;objectC&lt;/code&gt; was a friend to &lt;code&gt;objectA&lt;/code&gt;, there clearly would be no need for &lt;code&gt;objectA&lt;/code&gt; to get to talk to &lt;code&gt;objectC&lt;/code&gt; by first talking to &lt;code&gt;objectB&lt;/code&gt;. But in this case, objectA can only engage in a ‘friend of a friend’ type of interaction. And that’s when the problem with tight coupling begins!&lt;/p&gt;
&lt;p&gt;We see therefore that tight coupling materializes when we endow our code with unnecessary knowledge. In our code, objectA has the absolutely necessary knowledge of how to talk to its friend, &lt;code&gt;objectB&lt;/code&gt;. But instead of leaving it like that, we succumbed to the temptation to teach our code that there exists another object, &lt;code&gt;objectC&lt;/code&gt;, and although that object is not immediately available to our &lt;code&gt;objectA&lt;/code&gt;, it is available via our network of friends. So now our objectA gets saddled with excessive knowledge of having to know how to get to &lt;code&gt;objectC&lt;/code&gt; and how to ask it to perform some specific action.&lt;/p&gt;
&lt;p&gt;This is too much knowledge, and such excessive knowledge is making things tightly coupled, bloated and brittle.&lt;/p&gt;
&lt;h2&gt;Where is brittleness coming from?&lt;/h2&gt;
&lt;p&gt;In the above example, we perceive tight coupling in the form of an underlying assumption: every &lt;code&gt;objectB&lt;/code&gt; has access to &lt;code&gt;objectC&lt;/code&gt;. That is a dangerous assumption, as we may discover later on, after we’ve created a lot of code that relies on the above chaining of method calls that in some instances &lt;code&gt;objectB&lt;/code&gt; may not have access to &lt;code&gt;objectC&lt;/code&gt;. Maybe someone had refactored the code and had completely removed the association between &lt;code&gt;objectB&lt;/code&gt; and &lt;code&gt;objectC&lt;/code&gt;. Having to go and find all instances of the legacy code and adjust them to the new situation is a potential breeding ground for bugs. Often times there are slight variation in how are instantiated objects called (no one is guaranteeing that every developer will consistently name instance of &lt;code&gt;classA&lt;/code&gt; &lt;code&gt;objectA&lt;/code&gt; etc.) No regex on earth could be crafted that will guarantee to fish all these minor variations out. So we’d be left to manually pour over reams of code, trying to find all instances of such chained calls and then fix them manually.&lt;/p&gt;
&lt;p&gt;That’s brittleness to the umpteenth degree. And a vast breeding ground for all kinds of bugs.&lt;/p&gt;
&lt;h2&gt;Only talk to your immediate friends&lt;/h2&gt;
&lt;p&gt;To avoid the terrible anti-pattern of promiscuously talking to strangers, our code should embrace a very important constraint – talk only to your immediate friends.&lt;/p&gt;
&lt;p&gt;In the above case, &lt;code&gt;objectA&lt;/code&gt; should only confine itself to talking to objectB. If there is some useful capability/functionality that some stranger (e.g. &lt;code&gt;objectC&lt;/code&gt;) possesses that &lt;code&gt;objectA&lt;/code&gt; desperately needs, let &lt;code&gt;objectB&lt;/code&gt; be the broker between &lt;code&gt;objectA&lt;/code&gt; and &lt;code&gt;objectC&lt;/code&gt;. That way, our code becomes simple, future proof, unperturbable (and also easy testable).&lt;/p&gt;
&lt;p&gt;Let’s indulge in another quick example. Suppose we have an instance of a class &lt;code&gt;Driver&lt;/code&gt;, and that driver is steering an instance of a class &lt;code&gt;Vehicle&lt;/code&gt;). The way we implement steering is to allow the driver to talk to strangers; for example, if the driver wants to steer left, the code looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;driver.GetVehicle().GetSteeringMechanism().SteerLeft();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;driver&lt;/code&gt; is talking to its immediate friend (&lt;code&gt;vehicle&lt;/code&gt;) in order to gain access to a stranger (an instance of the class &lt;code&gt;SteeringMechanism&lt;/code&gt;), so that the driver can directly manipulate the steering mechanism by sending it the command to steer left.&lt;/p&gt;
&lt;p&gt;This is the illustration of tight coupling in action. Suppose later on the instance of class SteeringMechanism (which was an instance of an automobile steering mechanism) gets replaced by an instance of a sail boat. On a sail boat, the steer left command has the opposite effect from the same command sent to a steering wheel in the car. Which means, we have inadvertently created a bug.&lt;/p&gt;
&lt;p&gt;So it is important to avoid tight coupling. Always limit the amount of knowledge your objects have. That way, your code will be clean, testable, deterministic and bug free.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="TDD"></category><category term="CI"></category></entry><entry><title>Collective code ownership</title><link href="https://wsbctechnicalblog.github.io/collective-code-ownership.html" rel="alternate"></link><published>2020-10-22T16:24:00-07:00</published><updated>2020-10-22T16:24:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-22:/collective-code-ownership.html</id><summary type="html">&lt;p&gt;Teams share collective responsibility and therefore collectively own the code&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;"In XP we don't do what we believe, we do what our measurements tell us.”&lt;/em&gt; Ron Jeffries&lt;/p&gt;
&lt;p&gt;Value stream delivery is largely based on automating business processes. In order to continuously deliver value, businesses invest in functionality. DevOps engineers are largely responsible for implementing desired functionality.
So we see that functionality is an asset. Businesses are willing to invest heavily in optimizing that asset. And the way the asset (i.e. functionality) is delivered is via shipping code.&lt;/p&gt;
&lt;p&gt;Now for the twist of lime: while functionality is obviously an asset, shipping code isn’t. Not only is shipping code not an asset, it is actually a liability. Once shipped, code needs constant babysitting. If code is not engineered properly, babysitting the shipped code may result in spiraling costs. No business will ever feel comfortable with such liability.&lt;/p&gt;
&lt;p&gt;In Extreme Programming (XP) we have a slightly different mantra (that basically talks about the same equation): Code is nothing, stories are everything.&lt;/p&gt;
&lt;h2&gt;Who does the code belong to?&lt;/h2&gt;
&lt;p&gt;In DevOps, code belongs to the product (i.e. a bundle of functionalities). Code never belongs to an individual engineer. Code may shortly belong to a project, but a product typically outlives any project, so it’s more accurate to say that code belongs to the product.
Collective ownership is often a counter-intuitive concept in software engineering, as it annuls the authorship. In traditional software development shops, workload is divvied up among engineers, and each engineer writes their own code in complete isolation. And because they write their own code, they are responsible for it, they own it, they run with it, they live and die by it.&lt;/p&gt;
&lt;p&gt;In software development shops that have evolved from the traditional shops, workload is not compartmentalized into mini silos. No silos, no turfs, no fiefdoms. In such shops, workload is centered on user stories. And each user story belongs to the entire team. That way, we avoid painting ourselves in a corner by isolating engineers from each other and then having to herd cats (with all the frightening overhead of coordinating, overseeing, synchronizing, judging and implementing correctional actions).&lt;/p&gt;
&lt;p&gt;And since each user story belongs to the team (i.e. there is no individual, named author of a user story), the code implementing that user story also belongs to the team. That way, there are no individual authors of any line of code, of any code statement.&lt;/p&gt;
&lt;h2&gt;How does that work in daily practice?&lt;/h2&gt;
&lt;p&gt;Collective code ownership may play out in variety of scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Engineers work in isolation&lt;/li&gt;
&lt;li&gt;Engineers engage in pair programming (each pair works in isolation)&lt;/li&gt;
&lt;li&gt;Engineers engage in mob programing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case where engineers work in isolation (i.e. each engineers goes away and spends some time coding in complete isolation from the team), collective ownership manifests in the full freedom to access, open and modify any block of code in the product repo. There are no silos, no barriers – we are talking full blown open source paradigm.&lt;/p&gt;
&lt;p&gt;In case of pair programming, similar concept applies: the repo is fully open for examination, modification and merging the changes. Same as an individual engineer doesn’t own any part of the code pulled from the repo, a pair of engineers also do not own any part of the code.
In case of mob programming, collaboration between engineers happens in real time. Coding happens in brief spurts (governed by the ‘musical chairs’ rotation where the person making the changes by typing and the person navigating the changes typically spend no more than 5 minutes per mini session). As the driver (i.e. person entering the changes) and the navigator (person, or persons instructing the driver) keep rotating, at the end of the coding session pretty much every team member has touched the code. Collectively, the team has made the most optimal decisions regarding which changes to the code to commit, push and merge to the trunk. Authorship becomes moot in such practice.&lt;/p&gt;
&lt;h2&gt;What are the prerequisites of collective code ownership?&lt;/h2&gt;
&lt;p&gt;It may not be advisable to jump in head first into collective code ownership before establishing rules of the game. In a nutshell, here are the minimum requirements for teams to successfully engage in collective code ownership:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The team has collectively created and agreed upon the coding standards&lt;/li&gt;
&lt;li&gt;The team is fully committed to using code management tool (git!)&lt;/li&gt;
&lt;li&gt;The team is doing full-on TDD, ideally also doing stringent mutation testing&lt;/li&gt;
&lt;li&gt;The team is using powerful IDE (Visual Studio or VS Code)&lt;/li&gt;
&lt;li&gt;The team is actively pursuing continuous integration (CI)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the above, it is important for all engineers on the team to agree to participate/contribute to the work needed to implement aspects of the functionality that may not be everyone’s area of interest. For example, a back-end engineer may not be interested in some front-end technologies, but is agreeable to participate and pick up some skills by working with domain experts on the team. Cross-training/cross-pollination goes a long way toward creating a highly performing team.&lt;/p&gt;
&lt;p&gt;Collective code ownership works best for small size teams, famously described as “two pizzas teams”. Any team that cannot be fed with two pizzas brings along added complexity; the overhead needed for maintaining team cohesion may exceed the benefits of cultivating collective code ownership.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;DevOps software engineering discipline is founded on the team concept. A team is not a group. A team is based on the concept of collective responsibility. And since each team works with user stories and turns those stories into shipping code, team collectively owns user stories as well as the code that implements them.
In a healthy team, when something goes wrong it is never “I thought SHE was going to take care of that!” Rather, it is “What do we have to do to fix that/take care of that?”&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="DevOps"></category><category term="code"></category></entry><entry><title>The clash of Azure DevOps Kanban fields and Shared Area Paths</title><link href="https://wsbctechnicalblog.github.io/shared-area-paths.html" rel="alternate"></link><published>2020-10-22T13:13:00-07:00</published><updated>2020-10-22T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-22:/shared-area-paths.html</id><summary type="html">&lt;p&gt;Shared area paths can introduce inconsistency and confusion.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Azure Boards Kanban fields are powerful and valuable. Used in the land of shared Area Paths they can, however, introduce inconsistency and confusion that are hard to isolate and explain.&lt;/p&gt;
&lt;h1&gt;Let us explore a simple example&lt;/h1&gt;
&lt;p&gt;We define a few area paths for a hypothetical project, named &lt;strong&gt;Boards Chaos&lt;/strong&gt;. The Board Chaos area and its sub-paths are allocated to the default Boards Chaos team. Area A1, with sub-paths, and area A2, with sub-paths, are assigned to team A and B respectively. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Board Chaos" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-1.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; that the Boards Chaos team shares area A1 and its sub-paths with team A, and area A2 and its sub-paths with team B. Assigning area Board Chaos and sub-paths to the default team is a subtle configuration, but allows us to demonstrate the challenge of shared area paths.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Team A&lt;/strong&gt; creates three stories and pulls A.1 and A.2 into the &lt;strong&gt;Active&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team A Board" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Team B&lt;/strong&gt; creates three stories, and pulls B.1, B.2, and B.3 into the &lt;strong&gt;Active&lt;/strong&gt;, &lt;strong&gt;Resolved&lt;/strong&gt;, and &lt;strong&gt;Closed columns&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team B Board" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-3.png"&gt;&lt;/p&gt;
&lt;p&gt;When we switch to team &lt;strong&gt;Board Chaos&lt;/strong&gt;, we notice that the team has customized their board, renaming the Active column to In-flight, and adding the Area 51 and Answer 42 columns. All of these three columns map to the Active work item state.&lt;/p&gt;
&lt;p&gt;So far so good - if you ignore the &lt;strong&gt;Board C...&lt;/strong&gt; &lt;strong&gt;Active&lt;/strong&gt; field on the card.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team Chaos Board" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Board Chaos team drags cards A.1 from In-flight to &lt;strong&gt;Area 51&lt;/strong&gt;, and A.2 to &lt;strong&gt;Answer 42&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Area 51" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-5.png"&gt;&lt;/p&gt;
&lt;p&gt;The team's board looks as expected, again as long as you ignore the field &lt;strong&gt;Board C...&lt;/strong&gt; &lt;strong&gt;Active&lt;/strong&gt; field on the cards.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Board Chaos" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-6.png"&gt;&lt;/p&gt;
&lt;h1&gt;Oh, Oh, we have a problem&lt;/h1&gt;
&lt;p&gt;When the team looks at their product backlog, the anomaly becomes evident. Why are the Board Column values for B.1, A.1, and A.2 Active and not &lt;strong&gt;In-flight&lt;/strong&gt;, &lt;strong&gt;Area 51&lt;/strong&gt;, or &lt;strong&gt;Answer 42&lt;/strong&gt;?!? &lt;/p&gt;
&lt;p&gt;&lt;img alt="Incorrect Board Column Values" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-7.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a view of Team A and the default team next to each other. Now look at the &lt;strong&gt;Board C&lt;/strong&gt; ... field on the cards, all of which point to Team A's &lt;strong&gt;Active&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team A and Chaos side by side" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-8.png"&gt;&lt;/p&gt;
&lt;p&gt;What is going on?!?&lt;/p&gt;
&lt;h1&gt;Works as designed&lt;/h1&gt;
&lt;p&gt;By design, the team with the longest area path wins the clash and dictates the values for the Kanban Board Column, Done, and Lane fields. In our setup, teams A and B have the longer area paths and win. &lt;strong&gt;Board Chaos/A1&lt;/strong&gt; from team A, for example, is longer than Board Chaos/ from the default team.&lt;/p&gt;
&lt;p&gt;If we have a scenario of shared area paths of equal depth, we will have non-deterministic results. Not in scope for this simple walk-through.&lt;/p&gt;
&lt;p&gt;As a result the cards show the Kanban field value Active for Team A on Board Chaos' board, not values &lt;strong&gt;In-flight&lt;/strong&gt;, &lt;strong&gt;Area 51&lt;/strong&gt;, &lt;strong&gt;Answer 42&lt;/strong&gt; as expected. &lt;/p&gt;
&lt;p&gt;So, how can we avoid this unexpected feature?&lt;/p&gt;
&lt;h1&gt;Tips to avoid the "oh, oh" moments&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Oh Oh Moment" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-9.png"&gt;&lt;/p&gt;
&lt;h2&gt;Avoid shared areas&lt;/h2&gt;
&lt;p&gt;Stay away away from overlapping area path ownership. As this behavior is "as expected" and "works as designed", we do not expect future features to work seamlessly. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See https://msdn.microsoft.com/Library/vs/alm/Work/scale/scaled-agile-framework on guidance to setup enterprise projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Share read-only areas&lt;/h2&gt;
&lt;p&gt;Keep teams in their own contained, for example (1) Team A in Area A1 and (2) Team B in Area A2. If you need a shared area path, for example, (3) to raise awareness of and triage bugs use it as a read-only area and (4) reassign bugs to their respective area paths.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Shared Area Paths" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-10.png"&gt;&lt;/p&gt;
&lt;h2&gt;Focus on your context&lt;/h2&gt;
&lt;p&gt;Focus on the work item types that are relevant to you and your team. If you are doing portfolio planning you should restrict your views of shared areas to &lt;strong&gt;Initiatives&lt;/strong&gt;, &lt;strong&gt;Epics&lt;/strong&gt;, and &lt;strong&gt;Features&lt;/strong&gt;. If you are part of the development, you should focus on Stories or Backlog Items.&lt;/p&gt;
&lt;p&gt;In other words &lt;strong&gt;keep it simple&lt;/strong&gt;*!&lt;/p&gt;</content><category term="Posts"></category><category term="AzDO"></category><category term="Azure-Boards"></category></entry><entry><title>Searching for common nodes across area paths</title><link href="https://wsbctechnicalblog.github.io/area-paths-and-nodes.html" rel="alternate"></link><published>2020-10-21T13:13:00-07:00</published><updated>2020-10-21T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-21:/area-paths-and-nodes.html</id><summary type="html">&lt;p&gt;How can we find area path with specific text in their name?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us assume that you have a common node, for example architecture runway, in a number of Azure DevOps area paths. &lt;/p&gt;
&lt;p&gt;A common question in such a setup is "what are all the architecture runway work items?". &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple&lt;/strong&gt;, create a query that searches for all the known area paths:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Area Paths" src="/images/searching-for-common-nodes-across-area-paths-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple?&lt;/strong&gt; It is not a query that can scale or that anyone wants to maintain, because the only options we have for Area Paths is the equals (=) or under 
operator. Imagine you walk up to a project containing hundreds of area paths and you need to build such a query from scratch ... run!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop!&lt;/strong&gt; There is another way, using the Node Name:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Node Names" src="/images/searching-for-common-nodes-across-area-paths-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Go &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/query-by-area-iteration-path?view=azure-devops#node-name-and-keyword-based-queries"&gt;here&lt;/a&gt; for more related gems and information!&lt;/p&gt;</content><category term="Posts"></category><category term="AzDO"></category><category term="Azure-Boards"></category><category term="Tips"></category></entry><entry><title>Use Active Directory Groups in your unified classic CI CD pipelines</title><link href="https://wsbctechnicalblog.github.io/ad-groups-for-ci-cd-pipelines.html" rel="alternate"></link><published>2020-10-20T13:13:00-07:00</published><updated>2020-10-20T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-20:/ad-groups-for-ci-cd-pipelines.html</id><summary type="html">&lt;p&gt;Instead of managing permissions for users in Azure DevOps, we use Azure Active Directory groups to fine tune permissions&lt;/p&gt;</summary><content type="html">&lt;p&gt;The CI/CD pipeline is a DevOps practice for delivering code changes more frequently, consistently, and reliably. It enables Agile teams to increase deployment frequency, decrease lead time for change, change failure rate, and mean time to recovery key performance indicators, thereby improving quality and delivering value faster.&lt;/p&gt;
&lt;h1&gt;Let us use Active Directory (AD) security groups&lt;/h1&gt;
&lt;p&gt;After our dream for One CI/CD pipeline to rule them all we decided to go one-step further and simplify the classic release pipeline security using Active Directory (AD) groups. Instead of assigning and managing permissions for users in Azure DevOps, we use Azure Active Directory groups to fine tune permissions. For example, we have project specific super users AD groups that grant elevated permissions to edit release pipelines and the development and system test stages.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Classic Pipeline" src="/images/use-ad-groups-with-CI-CD-pipelines-1.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Empower the Agile Development Team to own development and system test stages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bookmark the Azure DevOps DRIFT project, which will enable you to monitor and remediate configuration drift, for example to automatically remove explicit user accounts added to an AD driven security model.&lt;/p&gt;
&lt;h1&gt;Why AD groups?&lt;/h1&gt;
&lt;p&gt;The value of using AD groups depends on your environment. In our case the benefits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AD groups and memberships are centrally &lt;strong&gt;managed&lt;/strong&gt; and &lt;strong&gt;audited&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;AD group membership is track than individual user accounts spread across multiple Azure DevOps services and projects.&lt;/li&gt;
&lt;li&gt;Azure DevOps users are empowered to request group membership using an existing process, rather than relying on the Azure DevOps project collection and project administrators.&lt;/li&gt;
&lt;li&gt;Simplifies automation of pipeline generation and configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Simplicity" src="/images/use-ad-groups-with-CI-CD-pipelines-2.png"&gt;&lt;/p&gt;
&lt;h1&gt;Let us use email-enabled Active Directory (AD) security groups&lt;/h1&gt;
&lt;p&gt;However, wait, we can go a step further and use mail-enabled AD security groups for pre- and post-stage pipeline approvals.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Post deployment conditionse" src="/images/use-ad-groups-with-CI-CD-pipelines-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Use email-enables security groups for stage approvals
We replace the individual users highlighted in yellow with Release Approval AD groups.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CI CD pipelines" src="/images/use-ad-groups-with-CI-CD-pipelines-4.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simplify stage approvals with email-enabled AD security groups&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why are there no stage approval notifications?
We realized that some of our email-enabled AD security groups received no notifications and spend time with Microsoft support to identify the root cause(s).&lt;/p&gt;
&lt;p&gt;You have to ensure that the AD security groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are &lt;strong&gt;mail-enabled&lt;/strong&gt; and authorized to receive external emails.&lt;/li&gt;
&lt;li&gt;Have &lt;strong&gt;View Releases&lt;/strong&gt; permissions on release and definitions.&lt;/li&gt;
&lt;li&gt;Have a subscription that is enabled for the group(s).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second bullet is the one that caught us off guard. If the permission is missing the Azure DevOps Pipeline event/notification service filters out the account's notifications. When notifications are filtered, no email is sent for impacted group(s) - silence prevails.&lt;/p&gt;
&lt;p&gt;Make sure that your email-enabled AD security groups are members of your project &lt;strong&gt;Contributors or Readers&lt;/strong&gt;, which by default, have the View Releases permission.&lt;/p&gt;
&lt;h1&gt;What Is Next?&lt;/h1&gt;
&lt;p&gt;This is likely one of the last posts on classic CI/CD pipelines. Watch the space for unified multi-stage YAML-based pipeline learnings.&lt;/p&gt;</content><category term="Posts"></category><category term="Azure AD"></category><category term="Azure-Pipelines"></category></entry><entry><title>Use the move to team project feature with caution!</title><link href="https://wsbctechnicalblog.github.io/the-move-to-team-project-feature.html" rel="alternate"></link><published>2020-10-20T13:13:00-07:00</published><updated>2020-10-20T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-20:/the-move-to-team-project-feature.html</id><summary type="html">&lt;p&gt;The "Move to Team Project" feature can reset your work item state and dates&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two valuable features in the Azure Boards service, one to change the work item type and the other to move work items between projects. However ... there is always a but ... the second comes with a few gotchas that turned a simple migration into a mind-numbing slog.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Move to Team project featute" src="/images/move-to-team-project-warning-1.png"&gt;&lt;/p&gt;
&lt;p&gt;The "&lt;strong&gt;Move to team project&lt;/strong&gt;" allows you to select one, more, or all of the work items on a backlog or from a work item query language (WIQL) result set and move them to another Azure DevOps project, within the same Azure DevOps organization.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quick and simple!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However ... here we go again ... when you look at the migrated data you will notice two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The work item state is reset to New&lt;/li&gt;
&lt;li&gt;The Change Date is set to the migration date and time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why? Do not know, but would love to understand the reasoning behind the state and date changes. If you have not planned your migration you will not have to single step through hundreds to thousands of work items to determine the correct state and dates - mind numbing!&lt;/p&gt;
&lt;h1&gt;Pre-migration planning&lt;/h1&gt;
&lt;p&gt;After staring at the updated work item data in disbelief a few times, we have created a simple pre-migration checklist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Export all work items to an Excel workbook to have a reference snapshot.&lt;/li&gt;
&lt;li&gt;Tag the work items with the state, iteration, board column, and board lane.&lt;/li&gt;
&lt;li&gt;Verify that target has all of the work item types for the set of items you need to migrate&lt;/li&gt;
&lt;li&gt;Grab a can of your favourite brew ... you will need it!&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Post-migration grooming&lt;/h1&gt;
&lt;p&gt;After using the "Move to team project" feature to migrate all of the work items, we process the post-migration checklist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the correct state of the work items, based on the state tag. Once done, remove tag.&lt;/li&gt;
&lt;li&gt;Set the correct Iteration Path, based on the state tag. Once done, remove tag.&lt;/li&gt;
&lt;li&gt;Move cards to the correct column and swim lane, based on the column and lane tags. Once done, remove tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If needed, set the correct Activated and Closed dates, which are now set to the date and time when you corrected the work item state :(
PowerShell Script to the Rescue&lt;/p&gt;
&lt;h1&gt;Samples&lt;/h1&gt;
&lt;p&gt;Here are two sample scripts we added to our ever-growing library of automation and maintenance scripts to update the read-only Closed Date field. We want to change the dates back to the post migration dates, which we can extract from the Excel workbook we created in pre-migration step 1, so that the data on boards and the backlog looks valid.&lt;/p&gt;
&lt;h2&gt;Set Changed Date Script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[CmdletBinding()]&lt;/span&gt;
&lt;span class="na"&gt;param(&lt;/span&gt;
  &lt;span class="na"&gt;[string]   $orgName&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;ORG&amp;gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;  [string]   $patToken      = &amp;quot;&amp;lt;PAT&amp;gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;  [string]   $workItemID    = &amp;quot;&amp;lt;invalid&amp;gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;  [string]   $dateTime      = &amp;quot;&amp;lt;invalid&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Authentication header&lt;/span&gt;
&lt;span class="na"&gt;$basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;(&amp;quot;{0}:{1}&amp;quot; -f &amp;quot;&amp;quot;,$patToken)&lt;/span&gt;
&lt;span class="na"&gt;$basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[System.Text.Encoding]::UTF8.GetBytes($basicAuth)&lt;/span&gt;
&lt;span class="na"&gt;$basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[System.Convert]::ToBase64String($basicAuth)&lt;/span&gt;
&lt;span class="na"&gt;$headers&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@{Authorization=(&amp;quot;Basic {0}&amp;quot; -f $basicAuth)}&lt;/span&gt;

&lt;span class="c1"&gt;# Setup Request&lt;/span&gt;
&lt;span class="na"&gt;$request&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://dev.azure.com/&amp;quot; + $orgName + &amp;quot;/&amp;quot; + &amp;quot;_apis/wit/workitems/&amp;quot; + $workItemID + &amp;quot;?bypassRules=true&amp;amp;api-version=6.0&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Setup Body&lt;/span&gt;
&lt;span class="na"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="na"&gt;&amp;#39;[&lt;/span&gt;
&lt;span class="na"&gt;{&amp;quot;op&amp;quot;:&amp;quot;add&amp;quot;,&amp;quot;path&amp;quot;:&amp;quot;/fields/Microsoft.VSTS.Common.ClosedDate&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;&amp;#39; + $dateTime + &amp;#39;&amp;quot;},&lt;/span&gt;
&lt;span class="na"&gt;{&amp;quot;op&amp;quot;:&amp;quot;add&amp;quot;,&amp;quot;path&amp;quot;:&amp;quot;/fields/System.History&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Post-migration Closed Date correction to reflect original, not migration, date.&amp;quot;}&lt;/span&gt;
&lt;span class="na"&gt;]&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Call Request&lt;/span&gt;
&lt;span class="na"&gt;try&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Write-Host &amp;quot;Updating work item: $workItemID&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Invoke-RestMethod -Uri $request -headers $headers -Method PATCH -Body $json -ContentType &amp;#39;application/json-patch+json&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;catch &lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Write-Host &amp;quot;Error setting date - &amp;quot; $PSItem.Exception.Message&lt;/span&gt;
    &lt;span class="na"&gt;Write-Host  $_.Exception|format-list -force&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Calling Script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# Batch 1&lt;/span&gt;
&lt;span class="err"&gt;..\Scripts\Update_Work_Item_ClosedDate.ps1 -orgName &amp;quot;&amp;lt;ORG&amp;gt;&amp;quot; -patToken &amp;quot;&amp;lt;PAT&amp;gt;&amp;quot; -workItemID &amp;quot;&amp;lt;WI #&amp;gt;&amp;quot; -dateTime &amp;quot;&amp;lt;DATE FROM EXCEL WORKBOOK&amp;gt;T13:00:00.00-08:00&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;..\Scripts\Update_Work_Item_ClosedDate.ps1 -orgName &amp;quot;&amp;lt;ORG&amp;gt;&amp;quot; -patToken &amp;quot;&amp;lt;PAT&amp;gt;&amp;quot; -workItemID &amp;quot;&amp;lt;WI #&amp;gt;&amp;quot; -dateTime &amp;quot;&amp;lt;DATE FROM EXCEL WORKBOOK&amp;gt;T13:00:00.00-08:00&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Migrating data is not an easy task, especially if you also need to migrate Test Plans, Suites, and Cases ... that is another turbulent topic for another day. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Migration Tools for Azure DevOps" src="/images/move-to-team-project-warning-2.png"&gt;&lt;/p&gt;
&lt;p&gt;We are busy investigating the open source Migration Tools for Azure DevOps, by Martin Hinshelwood, which will hopefully allow us to further automate and reduce the number of state changes during work item migrations. I will be back with an update!&lt;/p&gt;</content><category term="Posts"></category><category term="AzDO"></category><category term="Azure-Boards"></category></entry><entry><title>Pull Request is your friend not foe!</title><link href="https://wsbctechnicalblog.github.io/pull-requests-friend.html" rel="alternate"></link><published>2020-10-19T13:13:00-07:00</published><updated>2020-10-19T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-19:/pull-requests-friend.html</id><summary type="html">&lt;p&gt;There is a debate around the value of pull requests (PR), fueled by unfortunate misunderstandings.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;"The primary reason we use PRs is to encourage quality in the commits that are made to our code repositories"&lt;/em&gt; - &lt;a href="https://gist.github.com/mikepea/863f63d6e37281e329f8"&gt;GitHub Pull request Etiguette&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Start simple&lt;/h1&gt;
&lt;p&gt;Let us start with a simple branching strategy, with one "always" deployable target branch (master/main/trunk), and a short-lived feature branch, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Feature Branch" src="/images/Pull-Request-is-your-friend-not-foe-1.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a short-lived feature branch.&lt;/li&gt;
&lt;li&gt;Work on new work or a bug fix.&lt;/li&gt;
&lt;li&gt;Merge (commit) changes to the target branch.&lt;/li&gt;
&lt;li&gt;Continuous Integration (CI) build is triggered.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Caution" src="/images/Pull-Request-is-your-friend-not-foe-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Simple, but potentially dangerous. As the CI build is triggered after changes have been committed to the target branch, we could have a broken build and an undeployable branch. To make matters worse, anyone creating a new feature branch from an undeployable branch has just inherited a lot of unproductive pain!&lt;/p&gt;
&lt;h1&gt;Embrace the four-eyes principle&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Four-Eyes Principle" src="/images/Pull-Request-is-your-friend-not-foe-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The four-eyes principle requires that at least four eyes, in other words, validate any change by at least two people. With &lt;a href="https://docs.microsoft.com/en-us/azure/devops/user-guide/what-is-azure-devops?view=azure-devops"&gt;Azure DevOps&lt;/a&gt; we can define &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies-overview?view=azure-devops"&gt;Branch Policies&lt;/a&gt; to protect target branches, such as requiring:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimum number of reviewers (required and optional)&lt;/li&gt;
&lt;li&gt;Linked work items (adds the context and traceability)&lt;/li&gt;
&lt;li&gt;Resolved comments (all discussions and recommendations actioned)&lt;/li&gt;
&lt;li&gt;Limited merge types&lt;/li&gt;
&lt;li&gt;Successful build (which includes security scans, tests, etc.)&lt;/li&gt;
&lt;li&gt;Thumbs up from other services&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We can require some or all of the above policies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Welcome Pull Request&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Pull Request is a change validation workflow, not a feature of the version control service.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Welcome" src="/images/Pull-Request-is-your-friend-not-foe-4.png"&gt;&lt;/p&gt;
&lt;p&gt;When we define one or more branch policies, we enforce them on &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests?view=azure-devops"&gt;Pull Requests&lt;/a&gt;, making it impossible for anyone to commit changes to our target branch without passing pre-defined validations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By excluding minimum number of reviewers and setting our pull request to auto-complete, we could commit our changes without any human intervention if and only if we pass all other validations. However, that is a topic for another day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us walk through the same branching strategy, as above, and observe how the Pull Request enables (optional) collaboration and required validations.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pull Request Workflow" src="/images/Pull-Request-is-your-friend-not-foe-5.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a short-lived feature branch.&lt;/li&gt;
&lt;li&gt;Work on new work or a bug fix.&lt;/li&gt;
&lt;li&gt;Create a &lt;strong&gt;DRAFT&lt;/strong&gt; pull request, which enables collaboration, work item linking, and manual build validation policies.&lt;/li&gt;
&lt;li&gt;When we are ready to have our pull request reviewed and completed, we can &lt;strong&gt;PUBLISH&lt;/strong&gt; our draft pull request.&lt;/li&gt;
&lt;li&gt;Pre-defined optional and required reviewers are assigned and notified, policies are evaluated, and voting is enabled. The validation builds are triggered and perform a pre-merge validation - if the build(s) fail, the Pull Request cannot be completed.&lt;/li&gt;
&lt;li&gt;When all policies are met, the Pull Request can be completed.&lt;/li&gt;
&lt;li&gt;Associated changes are merged to the target branch.&lt;/li&gt;
&lt;li&gt;Which, as before, triggers the continuous integration (CI) build.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We do not have to create a DRAFT Pull Request. Instead, we can combine steps 3 and 4 above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recommendation 1 - Create one build definition and re-use it for both the validation and the CI build. Consistent and simple!&lt;/p&gt;
&lt;p&gt;Recommendation 2 - Run security scans, such as SonarQube and WhiteSource, Tests, and other quality validations in either the validation or CI build. We chose to run all validations when the common build is triggered as a validation build, as we need the results to review the changes effectively. See YAML sample below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The advantages of Pull Requests are evident:
- Collaboration is enabled fostering sharing of experience, learning, and recording of discussions.
- Guardrail are validated and enforced
- Automation of validations, which could (or not) include humanoid involvement&lt;/p&gt;
&lt;h1&gt;YAML Sample&lt;/h1&gt;
&lt;p&gt;Last, but not least, here is the above-mentioned extract from one of our YAML pipelines. The conditional code ensures that custom validations are injected into our build only if it was triggered as a validation build in a Pull Request.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VALIDATIONS&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;    
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DSO&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;InjectValidations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="AzDO"></category><category term="Azure-Repos"></category><category term="Git"></category></entry><entry><title>Benefits of boundaries</title><link href="https://wsbctechnicalblog.github.io/benefits-of-boundaries.html" rel="alternate"></link><published>2020-10-19T10:20:00-07:00</published><updated>2020-10-19T10:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-19:/benefits-of-boundaries.html</id><summary type="html">&lt;p&gt;Simple isn't easy, but it is the only way to build anti-fragile systems&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Things break on a small scale all the time, in order to avoid large-scale generalized catastrophes.”&lt;/em&gt; — Nassim Nicholas Taleb&lt;/p&gt;
&lt;p&gt;Right on the heels of our PI Planning session, I’d like to continue the discussion on the merits of imposing and maintaining boundaries. To recapitulate what we talked about thus far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Systems are under constant stress (regulatory changes, market shifts, pandemics, customer expectations drift, and also plain old digital rot)&lt;/li&gt;
&lt;li&gt;Monoliths are brittle, and are first to crumble under the stresses and shocks of relentless change&lt;/li&gt;
&lt;li&gt;System resilience is 100% dependent on the system architecture&lt;/li&gt;
&lt;li&gt;System architecture can enable a system to survive stress&lt;/li&gt;
&lt;li&gt;Three main types of system architecture:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robust architecture&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile architecture&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anti-fragile architecture&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Anti-fragile architecture is the most advanced/biggest bang for the buck&lt;/li&gt;
&lt;li&gt;It hinges on boundaries&lt;/li&gt;
&lt;li&gt;It is anti-fragile because it enables the system to function by safely engaging in trial-and-error&lt;/li&gt;
&lt;li&gt;It focuses on small problems&lt;/li&gt;
&lt;li&gt;It allows only small errors to occur&lt;/li&gt;
&lt;li&gt;It puts pressure on the system without jeopardizing it&lt;/li&gt;
&lt;li&gt;When the pressure gets fixed and removed, the system grows stronger than before (e.g. Netflix Chaos Monkey anti-fragile architecture)&lt;/li&gt;
&lt;li&gt;It enables the business to embrace change&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why bother introducing boundaries?&lt;/h2&gt;
&lt;p&gt;There is plenty of field evidence illustrating the fact that any large, complex system that works according to expectations was once a small, simple system that gradually evolved into a larger one. Conversely, there is no evidence that a system that started as large and complex ever reached the point of being fully functional.&lt;/p&gt;
&lt;p&gt;As a small, simple system evolves and grows, it can only do so by containment. The most fundamental principle of software design is to separate things that change from things that stay the same. This isolation (containment) is not a one-time event. Keeping things contained/isolated is an ongoing design activity which must occur every step of the way.&lt;/p&gt;
&lt;p&gt;And the only way to keep things contained is to introduce and maintain boundaries.&lt;/p&gt;
&lt;h2&gt;Would any boundaries do?&lt;/h2&gt;
&lt;p&gt;The short (and not so sweet) answer is: no. The hardest (and most powerful) trick is knowing where and how to erect boundaries. That knowledge is what separates experienced experts from dilettante software designers.&lt;/p&gt;
&lt;p&gt;Let's have a quick look into a system that was architected using the wrong boundaries pattern:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Incorrect boundaries pattern" src="/images/boundaries1.png"&gt; &lt;/p&gt;
&lt;p&gt;What is wrong with the above picture? Infrastructure layers should never be used to create boundaries for top level modules.&lt;/p&gt;
&lt;p&gt;Let’s now look into a system that was architected using proper boundaries pattern:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Proper boundaries pattern" src="/images/boundaries2.png"&gt; &lt;/p&gt;
&lt;h2&gt;Boundary fitness&lt;/h2&gt;
&lt;p&gt;As difficult as it often may be to create proper boundaries (it takes a lot of experience before one is capable of designing the system correctly), it is much, much harder to keep the boundaries intact.&lt;/p&gt;
&lt;p&gt;As the system evolves, there is a strong tendency to break the boundaries. It is very tempting, as we are developing new features (or extending existing features) to take shortcuts and try to access modules that belong to isolated layers. Any time we do that, we are diluting the separation of concerns.&lt;/p&gt;
&lt;p&gt;Boundary fitness is therefore expressed as a metric of how much of the important architectural characteristics remain preserved as the system evolves. Protecting the purity of the boundaries is of paramount importance. Whenever we encounter a system that is flakey and riddled with defects, upon closer examination we see that many, sometimes all architectural boundaries have been violated.&lt;/p&gt;
&lt;p&gt;For example, a typical anti-pattern often goes like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Boundaries anti-pattern" src="/images/boundaries2.png"&gt; &lt;/p&gt;
&lt;p&gt;We must never make cross-boundary calls. But that is easier said than done, because in the heat of the battle, we reach for an easy solution and see that crossing over to another domain is a quick win. We do it, and thus incur technical debt. And more likely than not, that debt never gets paid off.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It is important to avoid the Big Plan Upfront approach to building software systems. It is much more advisable to start small, and maintain small isolated parts of a larger system. Correctly choosing the boundaries ensures we start on the right footing. The biggest challenge, however, is maintaining the pristine domains within the system. It takes strong discipline to resist the urge to cross the boundaries in order to accomplish quick and dirty wins.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="TDD"></category><category term="CI"></category></entry><entry><title>Why extract methods when modifying legacy code?</title><link href="https://wsbctechnicalblog.github.io/why-extract-methods.html" rel="alternate"></link><published>2020-10-16T10:20:00-07:00</published><updated>2020-10-16T10:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-16:/why-extract-methods.html</id><summary type="html">&lt;p&gt;Legacy code is hard to test, so extract methods by writing micro tests&lt;/p&gt;</summary><content type="html">&lt;p&gt;Allow me a bit of introspection. I’ve been in Software Engineering field for 30 years. During those 30 years I modified a lot of legacy software. Here is how I would typically do it:&lt;/p&gt;
&lt;p&gt;Over the years I have formed certain habits when working with legacy code. Because on most projects I get paid to deliver working software that is easy to maintain, I cannot afford the luxury of taking my sweet time trying to fully understand the legacy code I am about to modify. So I tend to skim. Skimming the code helps me quickly identify relevant portions in the repo. It is a race with time, and I don’t have cycles at my disposal to dwell on less relevant minutia. I’m always going for the most relevant area in the code. Once I find it, I slow down and start analyzing it.&lt;/p&gt;
&lt;p&gt;I rely heavily on IDEs (power tools). Doesn’t matter which power tool, these days they’re all pretty much capable of doing the same thing. What’s important to me is the ability to quickly find where functions are called and where variables are used.&lt;/p&gt;
&lt;p&gt;Sooner or later, after I’m done skimming the code and analyzing the code segment I’m intending to change, I identify a place where I want to insert some code. Now that I understand the meaning of the classes, components, objects involved in performing the function, I first write a test.&lt;/p&gt;
&lt;p&gt;Following that, I write code to make the test pass. I type the name of the object I intend to use, and then press the period (dot, or “.”) key. Immediately, IDE responds with giving me a full list of methods defined for that object. All those methods are callable from the location where my cursor is.&lt;/p&gt;
&lt;p&gt;I then pick the method that makes sense to me. I fill in the blanks (i.e. supply values for the expected arguments/parameters), save the change, and run the test. If the test passes, I’m done with that micro change.&lt;/p&gt;
&lt;p&gt;The above activity typically gets repeated many times per hour. Throughout the workday, it is not unusual to see the above activity repeated dozens, even hundreds of times.&lt;/p&gt;
&lt;p&gt;I believe the above description of the way I modify software is not unique to the way I formed my work habits. I believe it describes a typical flow that many (I’d even say most) software engineers adhere to.&lt;/p&gt;
&lt;h2&gt;A few observations&lt;/h2&gt;
&lt;p&gt;The first thing that is apparent after observing the above described way of modifying legacy software is the absence of any work on documentation. Experience has shown that software developers very rarely spend time reaching out for documentation. Time spent preparing the documentation and generating it to produce HTML-style online documents is time wasted.&lt;/p&gt;
&lt;p&gt;Instead, most developers rely solely upon power tools (IDEs). And rightly so (IDEs never lie, as they always offer the real-time picture of the system we are modifying; documentation is more often than not stale).&lt;/p&gt;
&lt;p&gt;Another thing worth noticing is that developers don’t read the source code the way it was written. When writing code from scratch (first pass), many developers tend to write in long functions. Source code tends to bunch up. Bunching code up makes it easier to read and reason about on the first pass, and also makes it easier to debug. But after the first pass is finished, people rarely, if ever, consume the code the way it was written. If we catch ourselves reading a whole function from beginning to end, it is most likely due to the fact that we have exhausted all other options and have no choice but to slow down and read the code in a pedestrian way. However, in my experience, that slow and orderly reading of the code seldom happens.&lt;/p&gt;
&lt;h2&gt;Problems caused by the bunched up code&lt;/h2&gt;
&lt;p&gt;If we were to leave the code as it was written during the first pass (i.e. long functions, a lot of bunched up code to enable easy initial understanding and debugging), it would render IDEs powerless. If we cram all capabilities an object can offer in a single giant function, later on when trying to utilize that object, IDEs will be of no help. IDEs will only show the existence of one method (which will probably contain a large list of parameters providing values that enforce the branching logic inside that method). So we won’t know how to really use that object unless we open its source code and read its processing logic very carefully. And even then, our heads will probably hurt.&lt;/p&gt;
&lt;p&gt;Another problem with hastily cobbled up, ‘bunched up’ code is that its processing logic is not testable. While we can still write an end-to-end test for that code (input values and the expected output values), we have no way of knowing if the bunched up code is doing any other potentially risky processing. Also, we have no way of testing for edge cases, unusual scenarios, difficult-to-reproduce scenarios etc. That renders our code untestable. Which is a very bad thing to live with.&lt;/p&gt;
&lt;h2&gt;Break up bunched up code by extracting methods&lt;/h2&gt;
&lt;p&gt;Long functions/methods are always a sign of muddled thinking. When a block of code contains numerous statements, it usually means that it is doing way too much processing. Cramming a lot of processing in one place typically means we haven’t carefully thought things through.&lt;/p&gt;
&lt;p&gt;One need not look further than into how companies are typically organized. Instead of having hundreds of employees working in a single department, companies tend to break up into numerous smaller departments. That way, it is much clearer where responsibilities lie.&lt;/p&gt;
&lt;p&gt;Software code is no different. An application exists in order to automate a lot of intricate processing. Processing gets broken into a number of smaller steps, so each step must be mapped onto a separate, isolated block of code. We create such separate, isolated and autonomous block of code by extracting methods. We take a long, bulky block of code and break it up by extracting responsibilities into separate blocks of code.&lt;/p&gt;
&lt;h2&gt;Extracted methods enable better naming&lt;/h2&gt;
&lt;p&gt;Software code is written by developers, but in actuality it is much more often consumed (i.e. read) by developers than it is written.&lt;/p&gt;
&lt;p&gt;When consuming software code, it helps if the code is expressive. Expressiveness boils down to proper structure and proper naming. Consider the following statement:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if((x &amp;amp;&amp;amp; !y) &amp;amp;&amp;amp; !b) || (b &amp;amp;&amp;amp; y) &amp;amp;&amp;amp; !(z &amp;gt;= 65))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It would be literally impossible to understand the meaning and the intention of the above statement without actually running the code and stepping through it with a debugger. Such activity is what we call GAK (Geek at Keyboard). It is 100% unproductive, and is quite wasteful.&lt;/p&gt;
&lt;p&gt;Here is where extract method and naming come to the rescue. Take the complex statement contained within the if statement, extract it into its own method, and give that method a meaningful name. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public bool IsEligible(bool b, bool x, bool y, int z) {&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;return ((x &amp;amp;&amp;amp; !y) &amp;amp;&amp;amp; !b) || (b &amp;amp;&amp;amp; y) &amp;amp;&amp;amp; !(z &amp;gt;= 65);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now replace the ugly if statement with a more readable statement:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if(IsEligible(b, x, y, z))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Of course, we should also replace dumb one character variable names with more meaningful names to improve readability.&lt;/p&gt;
&lt;h2&gt;Reuse in legacy code&lt;/h2&gt;
&lt;p&gt;Experience shows that any functionality that is not extracted and properly named and moved to the most reasonable class will never be reused. Extract method fosters frequent reuse, which goes a long way toward improving code quality.&lt;/p&gt;
&lt;h2&gt;Testing the legacy code&lt;/h2&gt;
&lt;p&gt;Writing tests for the existing code is hard and feels less rewarding than doing TDD. Even after we identify that there should be several tests that ensure production code works as expected, when we realize that production code has to be changed to enable testing, we often decide to skip writing tests. Our goals to deliver testable code slowly but surely keep diminishing.&lt;/p&gt;
&lt;p&gt;Writing tests for the legacy code is tedious because it often requires to spend a lot of time and code to set up the preconditions. That’s the opposite of how we write tests when doing TDD, where time spent on writing preconditions is minimal.&lt;/p&gt;
&lt;p&gt;Best way to make legacy code testable is to practice the extract method approach. Locating a block of code nested in loops and conditionals and extracting it will enable us to write small precise tests. Such tests on extracted functions improve not only the testability of the code, but also the understandability. If legacy code now becomes more understandable thanks to extracting methods and writing legible tests, chances of introducing any defects are drastically reduced.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Most of the discussion pertaining to extracting methods would not be necessary when we’re doing TDD. Writing one test first and then making the test pass, then scanning that code for more insights into how the code should be structured and improved, making improvements, and finally making changes part of the code base will guarantee that there will be no need to worry about extracting methods. Since legacy code usually means code that was not crafted following TDD methodology, we are forced to adopt a different approach. In my experience, extract methods gives us the biggest bang for the buck when it comes to modifying legacy code while avoiding risks of breaking the functionality.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="Code-quality"></category><category term="legacy-code"></category><category term="extract-method"></category><category term="TDD"></category></entry><entry><title>Benefits of frequent deployments</title><link href="https://wsbctechnicalblog.github.io/benefits-of-frequent-deployments.html" rel="alternate"></link><published>2020-10-15T10:20:00-07:00</published><updated>2020-10-15T10:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-15:/benefits-of-frequent-deployments.html</id><summary type="html">&lt;p&gt;The longer the wait to deploy, the bigger the risk of things going south&lt;/p&gt;</summary><content type="html">&lt;p&gt;I come from the old school software engineering (started my first programming job back in 1990). Thirty years ago, we were building software the same way we always build high rise buildings. We first obtain the fully fleshed budget and the permission to build. We then wait on the blueprints (requirements) to be signed, sealed and delivered, and then start our ‘brick laying’ work. When we finish building, we ask building inspectors to perform due diligence and confirm if the building is suitable to be put on the market.&lt;/p&gt;
&lt;p&gt;Only after all the above activities get successfully completed do we open up our brand new building. We now let people move in.&lt;/p&gt;
&lt;p&gt;In the world of software engineering, the equivalent of moving in would be the event of deploying our app to production. Naturally, the grand opening can happen only once, after which we move into the ‘keeping the lights on’ phase (i.e. maintenance).&lt;/p&gt;
&lt;p&gt;We call this development model “waterfall” (or, “Big Plan Upfront”).&lt;/p&gt;
&lt;h2&gt;Current situation&lt;/h2&gt;
&lt;p&gt;I’ve tried to plot the workflow that may come close to how we are dealing with the deployment workflow today. We start by pulling a story from our backlog. We estimate the story, schedule it for development, and then develop (implement) it. Once we’re ‘code complete’ we commit the code and push it. We then open a PR and if there are issues/problems, the PR gets rejected and the task of fixing the issue goes back to development.&lt;/p&gt;
&lt;p&gt;Eventually, when the PR gets approved and the branch merged, if there are no issues the merged code (release candidate) goes into UAT. If there are no problems in UAT, release candidate gets deployed to production.&lt;/p&gt;
&lt;p&gt;The real headaches occur when we encounter problems in UAT or in production. These problems must be handled manually (with tedious manual verifications), and the fix to the problem is always very disruptive. To apply the fix, we must stop the server(s) in order to deploy the code. That event destroys all users’ sessions; all user data gets irrevocably lost at that moment. After fixing and re-deploying, we force users to sign in again and start all over, and in general the team goes through a very stressful, even traumatic episode.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Old school deploymeny workflow" src="/images/old-school-deployment.png"&gt;&lt;/p&gt;
&lt;h2&gt;Why high levels of stress?&lt;/h2&gt;
&lt;p&gt;Regardless of the circumstances, it always feels terrible to kick users out of the app while they are in the middle of doing important processing. For that reason, we always prefer to schedule deployments for afterhours. However, that’s often times out of the question because the bug is causing terrible damage to production data and needs to be fixed right away.&lt;/p&gt;
&lt;p&gt;Even if we can afford to wait for the afterhours deployment, it is still stressful because we need to schedule for overtime operations staff to work long hours.&lt;/p&gt;
&lt;h2&gt;What is causing this stressful situation?&lt;/h2&gt;
&lt;p&gt;The reason we find ourselves in an unenviable position of having to fix the defects by harming the end user experience lies in the waterfall model. Unlike the engineering workflow that manages the building of physical objects (such as a high rise building), software is not well suited for the waterfall approach. When building physical objects, it is intuitively obvious that there must be an orderly sequence of events (i.e. impossible to work on building a roof of the house if the foundation and the walls are not finished). When developing software, those concerns are not a constraint.&lt;/p&gt;
&lt;p&gt;Still, the classical engineering mentality tends to get carried over to software engineering. Same as we cannot deliver a partially completed foundation and then deliver partially completed walls etc., the mindset that gets carried over to software engineering insists that all the constituent parts of the solution must be fully fleshed out. That means that rework is not allowed – rework is extremely risky.&lt;/p&gt;
&lt;p&gt;In the world of software development, it is actually advisable to focus on partial delivery. Partial delivery implies rework (if something is partial, that means we need to work some more on it).&lt;/p&gt;
&lt;p&gt;The waterfall workflow denies rework, and is therefore very disturbed if, after delivering a fully fleshed product, something turns out to be defective. This is due to the fact that in the world of waterfall workflow, failure is not an option. Everything must be delivered fully completed on the first try, because there won’t be any second chance (i.e. second chance was not factored in the budget). Therefore, when something malfunctions, all hell breaks loose. It wasn’t part of the original plan!&lt;/p&gt;
&lt;h2&gt;How to remove stress from deployment?&lt;/h2&gt;
&lt;p&gt;In order to minimize and even remove the stress, we must modify the deployment workflow. We must move away from the waterfall model, and into a full blown rework model (where second chances are baked in from the get go).&lt;/p&gt;
&lt;p&gt;Let’s examine an aspirational deployment workflow (something I sketched while wearing my optimistic hat):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Deployment workflow" src="/images/deployment-workflow.png"&gt;&lt;/p&gt;
&lt;p&gt;The process starts from the hypothesis (supplied by the business in the form of a user story). We pull one high priority story from the backlog and slice it vertically. We then work on implementing the vertical slice by doing full blown CI/TDD. If we encounter any problems we go back to the user story and refine it. We do all that work by making sure we perform very frequent commits.&lt;/p&gt;
&lt;p&gt;When done, we push the changed code to the remote repo and open a PR. If there is a problem with our PR (problem detected by automated tests and linters), it’s back to the drawing board. Eventually our PR gets approved and merged. The merge event signals to the team that absolutely all quality checks have been cleared; our code is good to go.&lt;/p&gt;
&lt;p&gt;Next step is to automatically deploy the code to production. Gasp! No, it’s not a typo – we should be free, at any time, to deploy fully tested code to production. However, just because the code is deployed doesn’t automatically mean it is available to end users. We always hide the changes from the users behind feature flags.&lt;/p&gt;
&lt;p&gt;Now that our newly minted code is in production, we engage in monitoring its behaviour. We do it by optimizing system observability (collecting and logging telemetry). The production logs should give us sufficient transparency to know whether the code is a solid release candidate or not.&lt;/p&gt;
&lt;p&gt;If we discover the problem in production (luckily, no skin off anyone’s nose thanks to feature flags), we open a ticket/spec to go back to development. Write more tests, write more imposters, fix the problem and push the fix through the automated gatekeepers.&lt;/p&gt;
&lt;p&gt;Eventually, once the problem is resolved, we release to production. And if despite all precautions we still encounter issues in production, we quickly repeat the automated workflow.&lt;/p&gt;
&lt;p&gt;And because all the fixes to the production bugs are going in via feature flags, there is no need to stop and restart the servers. Also, no user session data gets lost; users merely get rerouted to the new code by flipping the feature flags.&lt;/p&gt;
&lt;h2&gt;Why are frequent deployments so beneficial?&lt;/h2&gt;
&lt;p&gt;Finally, let’s discuss the merits of frequent deployments. Once we remove the stress factor from the deployment process, we should freely engage in deploying as often as possible.&lt;/p&gt;
&lt;p&gt;Why would we want to do that? Frequent deployments teach us invaluable lessons about our market, about our system, about our features. We cannot know whether our changes make sense or not unless we put them out in the field. No focus group can give us accurate prediction on how will a change to the system behave once it goes live.&lt;/p&gt;
&lt;p&gt;As the saying goes, the proof is in the pudding.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="TDD"></category><category term="CI"></category></entry><entry><title>Hypothesis-Driven Development</title><link href="https://wsbctechnicalblog.github.io/hypothesis-driven-development.html" rel="alternate"></link><published>2020-10-13T12:20:00-07:00</published><updated>2020-10-13T12:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-13:/hypothesis-driven-development.html</id><summary type="html">&lt;p&gt;Developing a feature without formulating a hypothesis is like shooting in the dark&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;“The only way it’s all going to go according to plan is if you don’t learn anything.”&lt;/em&gt; -Kent Beck&lt;/p&gt;
&lt;p&gt;Experimentation is the foundation of the scientific method, which is a systematic means of exploring the world around us. But experimentation is not only reserved for the field of scientific research. It has its central place in the world of business too.&lt;/p&gt;
&lt;p&gt;Most of us are by now familiar with the business methodology called Minimum Viable Product (&lt;strong&gt;MVP&lt;/strong&gt;). This Minimum Viable Product is basically just an experiment. By building and launching MVPs, business operations are engaging in a systematic means of exploring the markets.&lt;/p&gt;
&lt;p&gt;If we look at market leaders today, we learn that they’re not doing projects anymore. The only thing they’re doing is experiments. &lt;strong&gt;Customer discover&lt;/strong&gt;y&lt;strong&gt; and &lt;/strong&gt;Lean strategies&lt;strong&gt; are used to test assumptions about the markets. Such approach is equivalent to Test-Driven Development (&lt;/strong&gt;TDD**), which is the process we are intimately familiar with. In TDD, we write the hypothesis first (the test). We then use that test to guide our implementation. Ultimately, product or service development is no different than TDD – we first write a hypothesis, that hypothesis guides our implementation which serves as measurable validation of the hypothesis.&lt;/p&gt;
&lt;h2&gt;Information discovery&lt;/h2&gt;
&lt;p&gt;Back in the pre-agile days, requirements gathering was an important activity that used to always kick-off the project. A bunch of SMEs used to get assigned on the project, and were tasked with gathering the requirements. After a prolonged period of upfront information discovery, the gathered requirements got reviewed and, if agreed upon, signed off and frozen. No more changes allowed!&lt;/p&gt;
&lt;p&gt;Back then it seemed a perfectly reasonable thing to do. The fly in the ointment always kicked in once the build phase commenced. Sooner or later, as the project progresses, new information comes into the light of day. Suddenly, what we initially held as incontrovertible truth, gets challenged by the newly acquired information and evidence.&lt;/p&gt;
&lt;p&gt;But the clincher was in the gated phases. Remember, once requirements get signed off, they get frozen. No more changes, no scope creep allowed. Which means, newly obtained market insights get willfully ignored.&lt;/p&gt;
&lt;p&gt;Well, that’s kind of a foolish neglect. More often than not, the newly emerging evidence could be of critical importance to the health of the business operation. Can we afford to ignore it? You be we cannot! We have no recourse other than to embrace the change.&lt;/p&gt;
&lt;p&gt;It is after a number of prominent fiascos in the industry that many software development projects switched to the agile approach. With agile, information discovery is partial. With agile we never claim that we have gathered the requirements, and are now ready to implement them. We keep discovering information and implementing it at the same time (we embrace the change). We do it in tiny steps, keeping our efforts interruptible and steerable at all times.&lt;/p&gt;
&lt;p&gt;How to leverage the scientific method&lt;/p&gt;
&lt;p&gt;Scientific method is empirical and consists of performing the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 1: make and record careful observations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2: perform orientation with regards to observed evidence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3: formulate a hypothesis, including measurable indicators for hypothesis evaluation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 4: design an experiment that will enable us to test the hypothesis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 5: conduct the experiment (i.e. release the partial implementation)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 6: collect the telemetry that results from running the experiment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 7: evaluate the results of the experiment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 8: accept or reject the hypothesis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 9: go to Step 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to formulate a hypothesis&lt;/h2&gt;
&lt;p&gt;When switching from projects to experiments, traditional user story framework (As a/I want to/So that) is proving insufficient. The traditional user story format does not expose the signals needed in order to evaluate the outcomes. Instead, old school user story format is focused on outputs.&lt;/p&gt;
&lt;p&gt;The problem with doing an experiment without first formulating a hypothesis is that there is a danger of introducing a bias when interpreting the results of an experiment. Defining the measurable signals that will enable us to corroborate our hypothesis must be done before we conduct the experiment. That way, we can remain completely impartial when interpreting the results of the experiment. We cannot be swayed by wishful thinking.&lt;/p&gt;
&lt;p&gt;The best way to proceed with formulating a hypothesis is to use the following format:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We believe&lt;/strong&gt; [this capability]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Will result in&lt;/strong&gt; [this outcome]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We will have the confidence to proceed when&lt;/strong&gt; [we see a measurable signal]&lt;/p&gt;
&lt;h2&gt;Working software is not a measure of progress&lt;/h2&gt;
&lt;p&gt;Output-based metrics and concepts (Definition of Done, acceptance criteria, burndown charts, and velocity) are good for detecting working software, but fall miserably when it comes to detecting if working software adds value.&lt;/p&gt;
&lt;p&gt;“Done” only matters if it adds value. Working software that doesn’t add value cannot be declared “done”.&lt;/p&gt;
&lt;h2&gt;The forgotten column&lt;/h2&gt;
&lt;p&gt;Technology-centric projects break activities down into four columns:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Backlog of ideas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analysis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In progress&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shipped&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above structure is based on the strong belief that all software that works is valuable. That focus must now shift toward continuously delivering real value, something that serves customers. Agilists value outcomes (value to the customers) over features.&lt;/p&gt;
&lt;p&gt;The new breakdown for hypothesis-driven development looks something like this:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;
    &lt;td&gt;&lt;strong&gt;Ideas backlog&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;In progress&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Shipped&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Achieved desired outcome&lt;/strong&gt;&lt;/td&gt;
  &lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 11&lt;/td&gt;&lt;td&gt;Hypothesis 20&lt;/td&gt;&lt;td&gt;Hypothesis 26&lt;/td&gt;&lt;td&gt;Hypothesis 1&lt;/td&gt;&lt;td&gt;Hypothesis 1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 12&lt;/td&gt;&lt;td&gt;Hypothesis 21&lt;/td&gt;&lt;td&gt;Hypothesis 5&lt;/td&gt;&lt;td&gt;Hypothesis 5&lt;/td&gt;&lt;td&gt;Hypothesis 5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 13&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Hypothesis 10&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 14&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 15&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 16&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 17&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 18&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td&gt;Hypothesis 19&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;All eyes must remain peeled on the &lt;strong&gt;Achieved desired outcome&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="TDD"></category><category term="CI"></category></entry><entry><title>The cost of avoiding change</title><link href="https://wsbctechnicalblog.github.io/the-cost-of-avoiding-change.html" rel="alternate"></link><published>2020-10-03T10:20:00-07:00</published><updated>2020-10-03T10:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-03:/the-cost-of-avoiding-change.html</id><summary type="html">&lt;p&gt;Change is stressful and risky, but avoing it is even riskier&lt;/p&gt;</summary><content type="html">&lt;p&gt;Software engineers are notorious for being averse to change. We prefer the steady state, stability. The reason we prefer steady state lies in the fact that systems we are building tend to be complex. Complexity breeds brittleness, and so we are keen on doing everything possible to avoid building brittle systems. Who could blame us?&lt;/p&gt;
&lt;h2&gt;City on the Hill&lt;/h2&gt;
&lt;p&gt;When engineering a system, we tend to think about it in terms of an endpoint (let’s call that endpoint City on the Hill). This idealized city needs to be defined rigorously. After all, that’s what engineering is all about – rigor.&lt;/p&gt;
&lt;p&gt;After we’ve defined it, we optimize the process of building it offline. Once it’s built, we confirm that it’s done (using our Definition of Done yardstick). We then push it online, move into it, and never change it again (if we need to make any changes, we’d be admitting that we haven’t defined it rigorously to begin with).&lt;/p&gt;
&lt;h2&gt;Efficiency&lt;/h2&gt;
&lt;p&gt;The central idea of efficiency is that changing something is a waste. Why did we build the thing in the first place if we are to turn around and change it? Wouldn’t doing that mean that we didn’t actually know how to build our City on the Hill? Why not build our system correctly to begin with? Anything else would be grossly inefficient.&lt;/p&gt;
&lt;h2&gt;Change is bad&lt;/h2&gt;
&lt;p&gt;According to the above reasoning, change is bad. It is wasteful and inefficient. Pushed to its limit, this ‘change is bad’ sentiment blossoms into full-blown ‘change is to be feared’ mindset.&lt;/p&gt;
&lt;p&gt;Our City on the Hill ideal implies finality. Upon reaching our final destination, the reason to ever consider change is only if we realize that we have hit the wrong target. And that means utmost defeat (the ultimate inefficiency and waste).&lt;/p&gt;
&lt;h2&gt;All complexity at the beginning and all reward at the end&lt;/h2&gt;
&lt;p&gt;The City on the Hill approach to software engineering makes our profession extremely hard. We frontload all the complexity at the very beginning of the project. We ‘kitchen sink’ the project: since we only get one shot to make it right, we’d better create a laundry list of all the features we will ever need.&lt;/p&gt;
&lt;p&gt;Working on the detailed laundry list of all the features is a complex process. And it does not deliver any rewards. It may take days, weeks, even months to get to the end of job. And once we get there, we reap no rewards. All we have to show for is a pile of documents and diagrams – zero shippable software. The work on building shippable software has yet to commence. And it is only at the very end, once we ship the finished City on the Hill product, that we get any rewards for this gargantuan effort.&lt;/p&gt;
&lt;h2&gt;Gold-plating the parts&lt;/h2&gt;
&lt;p&gt;The pressure of having only one shot at building our City on the Hill forces us to gold-plate all parts we’re building. We feel compelled to make each part better than it has to be in order to do its job. We are at that point playing the prediction game – maybe in the future this function will have to be integrated with another system, and because we won’t be making any changes to it later on, let’s make sure now it is sufficiently generalized. Or, add those bells and whistles that only one in thousand users ever notices, let alone makes any use of it.&lt;/p&gt;
&lt;h2&gt;Fear of imperfections&lt;/h2&gt;
&lt;p&gt;The ‘kitchen sink’ laundry list of features, where each part must be gold-plated, results in code that is far more complex than it needs to be. That naturally leads to lack of understanding. Lack of understanding leads to lack of confidence. That lack of confidence makes development slower because of the looming finality – do it once and make sure you do it right!&lt;/p&gt;
&lt;p&gt;Such attitude results in the fear of imperfection. The fear of being wrong tends to lead to paralysis. Suddenly, the stakes of any decision made by the engineers seem incredibly high. Trying things and experimenting is viewed as wasting precious time and resources.&lt;/p&gt;
&lt;h2&gt;Death march&lt;/h2&gt;
&lt;p&gt;The finality of the City on the Hill approach leads to very late validation. By the time we catch any issues with our gold-plated parts and how they struggle to integrate, the goodwill has already been largely spent. All the hard work invested in taming considerable complexities rarely pays off if we adopt the ‘failure is not an option’ mentality.&lt;/p&gt;
&lt;p&gt;We cannot confirm whether the code we’re building actually implements our City until all pieces are in. Five-to-midnight is the worst time to discover we have problems. That is the point of maximum stress, as we are on the collision course to our deadline.&lt;/p&gt;
&lt;h2&gt;Break the workload into parallel chunks?&lt;/h2&gt;
&lt;p&gt;To avoid the looming death march described above, we often see workload being divided into independent chunks to be worked on in parallel. Sounds reasonable on the surface, until we take a closer look and factor-in the cost of control needed to coordinate and synchronize independent strains of work. Managing that kind of parallelism is a tall order. Out of sheer necessity, management introduces ‘wait states’ and ‘sync points’. The independent development suddenly ceases to be independent, as it must become strictly lockstep. Copious documents, emails, tickets and handoffs start proliferating, slowing everything down to a crawl.&lt;/p&gt;
&lt;h2&gt;Rework Avoidance&lt;/h2&gt;
&lt;p&gt;Avoiding change leads to avoiding rework. Any attempt at making something must be done in such a way that there would never be any need for rework. Make it right from the get go, on the first attempt.&lt;/p&gt;
&lt;p&gt;The cost of avoiding rework is best expressed in the cost of late failures. Those dreadful five-to-midnight failures are extremely costly; not only that, but they leave very little room for rework. By the time we realize that things are not gelling as expected, it is often too late for attempting any rework.&lt;/p&gt;
&lt;h2&gt;Switch to partial delivery&lt;/h2&gt;
&lt;p&gt;In order to evade the exorbitant cost of rework avoidance, we must pivot and embrace change via partial delivery. Embracing change necessitates innovation, experimenting, trying things out. The only way to do that effectively is to cultivate the ‘fail early’ mindset. Failure is desirable because it prompts us to fix it while it is still easy to do so.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Avoiding change, while very tempting and perfectly natural, usually ends up being very costly. Fear of failure is preventing innovation and experimentation by stifling change. The only way to avoid paying such exorbitant price is to embrace the change, embrace failure, but do it in an incremental fashion. Small steps, each one focused on partial delivery. That way, success is assured.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="TDD"></category><category term="CI"></category></entry><entry><title>How does it feel to write software when doing TDD?</title><link href="https://wsbctechnicalblog.github.io/how-does-it-feel-to-tdd.html" rel="alternate"></link><published>2020-09-17T22:21:00-07:00</published><updated>2020-09-17T22:21:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-09-17:/how-does-it-feel-to-tdd.html</id><summary type="html">&lt;p&gt;Any discipline requires serious investment in time&lt;/p&gt;</summary><content type="html">&lt;p&gt;TDD is a very strict discipline. As with any other discipline, in the beginning it always feels extremely restricting and counter-productive. And as with any other discipline, if you persevere and stick to it, the initial awkwardness and confusion fades away and the benefits of the discipline start bearing fruit.&lt;/p&gt;
&lt;p&gt;It’s the same as with training for a marathon, for example. At first, you cannot run longer distances without hurting and losing your breath. But little by little, if you keep doing your modest exercises every day, you discover that you can run longer and longer distances without losing your breath and without hurting. Before you know it, you find yourself in a situation where you can run tens of kilometres without feeling any discomfort.&lt;/p&gt;
&lt;p&gt;TDD is no different. It feels weird at first. Since software development is all about speed (deliver value as soon as possible), doing TDD feels absolutely idiotic in the beginning. Most of us who were trying to learn how to do TDD initially felt that time spent doing TDD would be much, much better spent writing code. It just did not make any sense to waste precious time on writing tests first.&lt;/p&gt;
&lt;p&gt;It is in a way similar to how surgeons in the past felt about washing their hands. They were often in a critical situation where patients were in a life threatening state on the operating table, and instead of jumping in and operating on them, they were required to stop and first wash their hands. Their unanimous reaction to that discipline was “Hold on. You can’t be serious?”&lt;/p&gt;
&lt;p&gt;Later on, when science discovered microorganisms, everything became much clearer, and the need to wash hands before doing the surgery became obvious.&lt;/p&gt;
&lt;p&gt;TDD is still tricky, because we haven’t discovered those ‘microorganisms’ in software which will mandate that we do TDD before writing code.&lt;/p&gt;
&lt;p&gt;Another real life example I could offer from personal experience is learning to play the guitar. When I was young I wanted to learn how to play the guitar as fast as those guitar superheros. Naturally, all I was doing while practising guitar is play as fast as I can. With terrible results. My playing sounded stifled, erratic, uneven and forced. Instead of being able to play fast, I played as if I was hyperventilating.&lt;/p&gt;
&lt;p&gt;Then I discovered the merit of another discipline — practising really, really slow. It defies logic, and is on the surface counter-intuitive, but it is absolutely true that if your goal is to play guitar very fast, the quickest way to get there is by practising really slow. And by really slow I mean painstakingly slow. Like, idiotically slow. But if you stick to it, it is guaranteed to get you to the point where you are able to play the guitar at blinding speeds.&lt;/p&gt;
&lt;p&gt;Same applies to software engineering/development. If you want to deliver software at blinding speeds, the most efficient way to do it is by slowing down and embracing TDD. There isn’t any other discipline in software development that delivers results quicker than TDD. And I’ve tried everything in my 30+ years career as software engineer. Nothing beats TDD.&lt;/p&gt;
&lt;p&gt;Of course, if people, upon reading this, give TDD a shot and spend a few hours doing it, they will no doubt find out that spectacular results are not forthcoming. Similarly, if a budding guitar player spends a few hours practising real slow, he or she will get disappointed — those few hours of practice didn’t bear any desired fruits.&lt;/p&gt;
&lt;p&gt;No worthy result comes overnight. You get out of it what you put into it. You need some serious woodshedding spent on TDD before you start seeing the results. But the effort and the wait are well worth it. Only those who are prepared to invest months and months of focused, dedicated woodshedding in TDD will arrive at the stage when they start reaping the huge benefits of TDD.&lt;/p&gt;
&lt;p&gt;Once you get there, you realize you are at a much higher level of mastery than your colleagues who remain clueless about the benefits of TDD. Ordinary, base software developers who only waste time on writing the shipping code actually spend inordinate amount of time on activities that have nothing to do with writing the lines of shipping code. They do a lot of manual testing, spending hours on varying the configuration and the environmental variables in order to convince themselves that the code they wrote actually works. If we were to average the hours they spend on manually wrangling configuration/test data vs time they spend actually writing code, we will see that the time spent writing code is usually less than 10%. Not very productive, no matter how we look at it.&lt;/p&gt;
&lt;p&gt;None of those copious non-productive hours get spent by engineers who have mastered TDD. And that is the reason TDD feels so great — it gives you wings and superpowers that by far exceed anything your talented and amazing non-TDD peers could ever do.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="TDD"></category></entry><entry><title>Feature-flag Driven Development (FFDD)</title><link href="https://wsbctechnicalblog.github.io/feature-flag-driven-development.html" rel="alternate"></link><published>2020-09-04T11:10:00-07:00</published><updated>2020-09-04T11:10:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-09-04:/feature-flag-driven-development.html</id><summary type="html">&lt;p&gt;Replace physical modularity with logical modularity&lt;/p&gt;</summary><content type="html">&lt;p&gt;Experts say that repo branching workflow is poor man’s modularization (by experts I mostly refer to Martin Fowler and his team of deep thinkers). What do we mean by branching being poor man’s modularization?&lt;/p&gt;
&lt;h2&gt;Well modularized repo&lt;/h2&gt;
&lt;p&gt;Let’s examine how change management propagates in a repo that has been properly modularized from the get go:&lt;/p&gt;
&lt;p&gt;A new feature needs to be added to the product, which necessitates change to the codebase. Because the code is fully modularized, it is closed to any changes related to the new feature, but is at the same time open for any changes that would extend its feature set (the Open/Closed Principle, part of the SOLID package).&lt;/p&gt;
&lt;p&gt;The new feature will thus be coded by adding brand new modules. Barely any line of existing code will have to be modified, since the new feature would be a plugin.&lt;/p&gt;
&lt;h2&gt;Poorly modularized repo&lt;/h2&gt;
&lt;p&gt;A code that is poorly modularized will have to be modified (sometimes heavily) in order to introduce a new feature into the product.&lt;/p&gt;
&lt;p&gt;Any time two or more people are working on the same block of code, they introduce a moving target. Changes made to the same codebase may result in a conflict. That conflict potentially arises at the time when we are trying to retrofit new code into the existing codebase. Those are the dreaded merge conflicts.&lt;/p&gt;
&lt;h2&gt;Why do we branch in the first place?&lt;/h2&gt;
&lt;p&gt;The main reason we copy the existing code base and turn it into a feature branch is to protect the healthy master branch from getting corrupted. Teamwork often necessitates that two or more feature branches get created during sprint, and that means that there is an ongoing work that is happening in parallel. When the time comes to bring the new changes to the healthy branch, some of those new changes may mutually collide.&lt;/p&gt;
&lt;p&gt;So the caution we exercise by branching is introducing unwanted risks of creating merge conflicts.&lt;/p&gt;
&lt;h2&gt;How to avoid merge conflicts?&lt;/h2&gt;
&lt;p&gt;During the workflow described above, it is not really possible to avoid potential merge conflicts. But we can certainly minimize potential conflicts.&lt;/p&gt;
&lt;p&gt;It all boils down to timing. When we take a copy of the healthy branch and go away and begin making changes to the code, the clock starts ticking. The longer we wait to bring our changes to the healthy branch, the greater that chances that someone else had already made changes to it that may collide with our changes.&lt;/p&gt;
&lt;p&gt;That is one of the main reasons why best practices advocate short-lived branches. The shorter the lifespan of a branch, the smaller the risk of having merge conflicts. And lesser merge conflicts mean quicker value delivery and lesser churn.&lt;/p&gt;
&lt;p&gt;And of course, merge conflicts are of much lower possibility in well modularized codebases, as we have already discussed above.&lt;/p&gt;
&lt;h2&gt;Feature flags&lt;/h2&gt;
&lt;p&gt;Much as Martin Fowler et al claim that branching is poor man’s modularization, it is also possible to say that branching is poor man’s feature flags. So what are feature flags?&lt;/p&gt;
&lt;p&gt;Feature flags could be viewed as logical branching. While physical branches, as they are practiced in modern engineering mostly using git, require making a physical copy of the repo and giving it a unique name, feature flags could be used without necessarily having to make a physical copy. When using Feature-Flag Driven Development (FFDD), we simply leave the existing code intact and write new modules that get conditionally called. The conditional logic is binary, and is governed by the feature flag (which could be either in on or in off state). If the flag is in the on state, the new code will get executed. Otherwise, execution continues as usual (old code runs).&lt;/p&gt;
&lt;p&gt;FFDD enables us to add potentially risky changes to the healthy codebase, without going through the song and dance of trying to merge the changes and risking merge conflicts. This technique then enables us to quickly ship new features in stealth mode. Our regular customer population will not get affected, since they will still be using the old, tested codebase. But our QA can then safely assess and evaluate the risks and potential merits of the new code. That activity would be the equivalent of the Pull Request in the branch-driven development discipline. If the PR of the code under the feature flag passes the muster, the old code gets decommissioned and the new code becomes the healthy version of the codebase.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="Feature-flag"></category></entry></feed>