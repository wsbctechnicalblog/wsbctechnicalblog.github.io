<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2024-03-06T00:00:00-08:00</updated><entry><title>Back to Basics: Kanban</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-dealing-with-technical-debt.html" rel="alternate"></link><published>2024-03-06T00:00:00-08:00</published><updated>2024-03-06T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-06:/back-to-basics-dealing-with-technical-debt.html</id><summary type="html">&lt;p&gt;Breaking Free: A Guide to Tackling Technical Debt Head-On&lt;/p&gt;</summary><content type="html">&lt;p&gt;Upon initial review of our &lt;a href="https://learn.microsoft.com/en-us/azure/devops/user-guide/what-is-azure-devops?view=azure-devops"&gt;Azure DevOps&lt;/a&gt; technical debt backlog, it became evident that we face a pivotal challenge in our pursuit of QUALITY and INNOVATION. Dealing with the seemingly impossible can be daunting for any DevOps product team. Similar to financial debt, addressing technical debt demands a well-defined strategy and commitment to implementation, leaving no space for compromise or excuses.&lt;/p&gt;
&lt;p&gt;To commence your technical debt remediation journey, consider the following steps:&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embrace the Reality and acknowledge the Problem&lt;/strong&gt; - Collaborate with your product owner, stakeholders, and team to establish a clear strategy for tackling technical debt head-on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Draw the Line and distinguish Bugs from Technical Debt&lt;/strong&gt; - Explore why bugs should not be mistaken for technical debt in the discussion on &lt;a href="/engineering-practices-why-bugs-are-not-technical-debt.html"&gt;Why Bugs are NOT Technical Debt&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Categorize Technical Debt&lt;/strong&gt; - Organize your technical debt into categories like Architectural, Automation, Billing, Code, Design, End-of-Life (EoL), External Component, Infrastructure, Operational, Product, Security, and Test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Prioritize Technical Debt&lt;/strong&gt; - Focus on addressing the most critical and valuable issues first to prevent compounding interest, leveraging an experienced panel or working group to collaboratively prioritize tasks. Should you tackle end-of-life software or known vulnerabilities first, considering their potential impact on tomorrow's headlines or the return on investment?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Track Technical Debt&lt;/strong&gt; - Routinely review and archive technical debt that has lingered for over a year or two, keeping it accessible for reference but out of public view. If your product and users have tolerated it for this long, its impact is likely minimal. We have adopted a similar strategy for shelving "would-be-cool" features from cluttering our product backlog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Invest in Automated Solutions&lt;/strong&gt; - Empower your engineers with automation tools to detect, comprehend, and mitigate technical debt efficiently. Consider initiatives like our AI Software Sentinel experiments, paving the way for proactive identification and resolution of potential issues through artificial intelligence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sentinel Mascot" src="/images/back-to-basics-dealing-with-technical-debt-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;How are you dealing effectively with your technical debt?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="engineering"></category></entry><entry><title>Cheat sheet to migrate generic v1 templates to v2</title><link href="https://wsbctechnicalblog.github.io/cheat-sheet-to-migrate-generic-v1-templates-to-v2.html" rel="alternate"></link><published>2024-03-01T00:00:00-08:00</published><updated>2024-03-01T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-01:/cheat-sheet-to-migrate-generic-v1-templates-to-v2.html</id><summary type="html">&lt;p&gt;Questioning the recommended approach to upgrades and the use of generic templates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We shared our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprints&lt;/a&gt; for &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"&gt;Azure Pipelines&lt;/a&gt; as open source, which include our generic templates that we created as a temporary solution to replace the classic Azure Build Pipelines for continuous integration (CI). They are helpful to begin with YAML-based build pipelines and link them with classic Azure Release Pipelines, but not our preferred approach. We will explain more about that later.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;v1 versus v2 generic template&lt;/h1&gt;
&lt;p&gt;First, let us answer our engineer's question of how to migrate from our v1 generic templates to the v2 versions. The image below compares v1 with v2, as at 2024-02-22. The only differences (all highlighted in yellow) are minor cleanups and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repository reference name (&lt;strong&gt;@CeBlueprints&lt;/strong&gt;) and repository name (&lt;strong&gt;*.v2&lt;/strong&gt;) reference the repository with the v2 templates and blueprints, aka &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The v2 template uses the &lt;strong&gt;checkout: self&lt;/strong&gt;, before calling the git-tools-git-version.yml template. Checkout &lt;a href="https://wsbctechnicalblog.github.io/share-your-toolbox-with-pipelines.html"&gt;Two ways to share your toolbox with your pipelines&lt;/a&gt; and &lt;a href="https://wsbctechnicalblog.github.io/checkout-at-the-right-time.html"&gt;Checkout your git repos at the right time!&lt;/a&gt; for an explanation of why we moved to using &lt;strong&gt;checkout&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="v1 --&amp;gt; v2" src="../images/cheat-sheet-to-migrate-generic-v1-templates-to-v2-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Make the right choice!&lt;/h1&gt;
&lt;p&gt;Before you proceed with the migration, you need to determine &lt;strong&gt;WHY&lt;/strong&gt; you should be using the generic template. Here is a simple checklist to help you with the decision:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Is there a v2 CI/CD blueprint for your application type?&lt;/strong&gt; If yes, use the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprint&lt;/a&gt;. We are phasing out the &lt;strong&gt;classic&lt;/strong&gt; Azure Pipelines and so should you.&lt;/li&gt;
&lt;li&gt;Else, &lt;strong&gt;Do you have to use a Classic Azure Release Pipeline?&lt;/strong&gt; If yes, use the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-single-job/azure-pipeline-generic-single-job-start.yml"&gt;single-job v2 generic template&lt;/a&gt; for your CI/Build pipeline.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do you need the multi-job v2 generic template?&lt;/strong&gt; &lt;strong&gt;NO&lt;/strong&gt;, we strongly recommend keeping it simple and only using the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-single-job/azure-pipeline-generic-single-job-start.yml"&gt;single-job v2 generic template&lt;/a&gt;. You should only use the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-multiple-jobs/azure-pipeline-generic-multiple-jobs-start.yml"&gt;multi-job template&lt;/a&gt; in rare situations and try to avoid it as it makes things more complicated and can put pressure on your Azure DevOps agents. See &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt; for an explanation of the two types of generic templates.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;OK back to: How to migrate from v1 to v2 generic build-only template?&lt;/h1&gt;
&lt;h3&gt;Migrate v1 --&amp;gt; v2, option 1 – move your pipeline to v2 (recommended)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a new pipeline, using the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/generic-single-job/azure-pipeline-generic-single-job-start.yml"&gt;single-job v2 generic template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Look for &lt;strong&gt;TODO&lt;/strong&gt; placeholders and migrate (copy-paste) the code from your v1 to your new v2-based Azure Pipeline.&lt;/li&gt;
&lt;li&gt;Reconnect your classic Azure Release Pipeline to the new v2-based Azure Pipeline.&lt;/li&gt;
&lt;li&gt;Validate the new pipeline.&lt;/li&gt;
&lt;li&gt;Deprecate (delete) your old v1-based pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simple!&lt;/p&gt;
&lt;h3&gt;Migrate v1 --&amp;gt; v2, option 2 – upgrade your v1 pipeline&lt;/h3&gt;
&lt;p&gt;Using the comparison between v1 and v2 as per image above, update your v1 pipeline and upgrade it to the v2 pipeline format, following these basic steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update template repo name from CeSTemplates to &lt;strong&gt;CeBlueprints&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Update template repo name, by appending &lt;strong&gt;.v2&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Remove variables section and add checkout logic under at the beginning of the stage definition.&lt;/li&gt;
&lt;li&gt;Rename /Templates/ to &lt;strong&gt;templates/&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use either &lt;strong&gt;dotnet&lt;/strong&gt; or &lt;strong&gt;other&lt;/strong&gt; for applicationType.&lt;/li&gt;
&lt;li&gt;Validate the updated pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope our internal "how to" discussions are interesting and add value to the open source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprints&lt;/a&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Back to Basics - Engineering</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-engineering.html" rel="alternate"></link><published>2024-02-26T00:00:00-08:00</published><updated>2024-02-26T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-26:/back-to-basics-engineering.html</id><summary type="html">&lt;p&gt;The notion of developers relying on testers to validate changes can be so startling that it feels like my head might explode.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am from an era characterized by distinct roles of programmers, testers, and systems analysts, each with their specialized tasks and a rigid handoff of responsibilities for testing. However, over past decades I have transitioned into a modern &lt;strong&gt;DevOps&lt;/strong&gt; landscape where &lt;strong&gt;engineers&lt;/strong&gt; function as integral members of cross-functional teams. In this DevOps environment, every team member holds themselves accountable for the entire product lifecycle, from conceptualization to retirement, fostering a collective commitment to product excellence, quality assurance, and delighted end-users.&lt;/p&gt;
&lt;p&gt;To thrive in our software development ecosystem, it is imperative for all team members to grasp these fundamental principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Embracing cross-functional product teams&lt;/strong&gt;, where diverse expertise converges to achieve common goals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cultivating a T-shaped engineering mindset&lt;/strong&gt;, blending deep expertise in one area with a broad understanding across disciplines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understanding the key traits that define an effective engineer&lt;/strong&gt;, encompassing technical prowess, adaptability, collaborative spirit, and a relentless pursuit of excellence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me delve into these three pillars.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Cross-functional product team&lt;/h1&gt;
&lt;p&gt;A cross-functional product team is a group of people who have various abilities and experiences and work together as a unit to accomplish a common objective related to the development, evaluation, deployment, upkeep, and enhancement of a product from beginning to end. Each team member contributes their distinct viewpoint, knowledge, and skills to form a product team that can adapt to changing needs and take responsibility for quality and service excellence.&lt;/p&gt;
&lt;p&gt;Terminology that has no place in a effective cross-functional product team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Them and us.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Organizational and/or responsibility silos.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Specific role functions, such as developers and testers.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to call a cross-functional product team a smooth-working team of engineers.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;T-Shaped Engineers&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="t-shaped" src="/images/back-to-basics-engineering-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A T-shaped engineer is a term that refers to a professional who has both specialization in one area and a wide range of skills and knowledge across various areas. &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;vertical&lt;/strong&gt; part of the "T" represents the specialization – the depth of knowledge and skill in a particular technical area, such as software development. &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;horizontal&lt;/strong&gt; part of the "T" shows the engineer's ability to cooperate and work across different technical areas, such as project management, communication, teamwork, problem-solving skills, and &lt;strong&gt;quality assurance&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="quality" src="/images/back-to-basics-engineering-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I argue, for example, that &lt;strong&gt;quality&lt;/strong&gt; is the responsibility of every member of the team. This includes development, maintaining, running, and analyzing quality assurance – such as unit, integration, system, and regression tests.&lt;/p&gt;
&lt;p&gt;As shown above, I expect everyone on the product team to be experienced in, to own, and to collaborate around &lt;strong&gt;QUALITY&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Some terms that are not helpful in a productive cross-functional product team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Not my job.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Not my responsibility.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You do the coding, I do the testing – or vice versa.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Effective Engineers&lt;/h1&gt;
&lt;p&gt;Finally, I want to discuss what traits are essential for being an engineer. As you can see below, I look for thirteen (13) traits in engineers who join our team(s).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="DNA" src="/images/back-to-basics-engineering-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sorted alphabetically ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CHANGE&lt;/strong&gt; - thirst for change, evolution, and continuous learning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COLLABORATE&lt;/strong&gt; - collaboration and presentation skills and a constant desire to improve them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CURIOSITY&lt;/strong&gt; - peek under the hood, open the black-box, and show an unstoppable curiosity of finding out the WHAT, WHO, and WHY.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DETAIL&lt;/strong&gt; - notice the details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FAIL&lt;/strong&gt; - do not be afraid to try new things and fail. "If things are not failing, you are not innovating enough." - Elon Musk.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPROVE&lt;/strong&gt; - make things better, more efficient and effective.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INNOVATE&lt;/strong&gt; - think creatively, experiment continuously, learn, pivot, and apply new ideas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOGIC&lt;/strong&gt; - having a logical mind and analytical skills.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OPTIMISM&lt;/strong&gt; - stay optimistic when dealing with challenges and uncertainties that are part of an engineer's world.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PASSION&lt;/strong&gt; - show a deep passion and strong commitment to specialized and generalized knowledge and role areas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOLVE PROBLEMS&lt;/strong&gt; - problem-solving skill and eagerness to constantly overcome and solve problems we face daily.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TEAM&lt;/strong&gt; - help the team succeed. "We are in this together."&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TRUST&lt;/strong&gt; - trust is crucial for creating strong bonds between colleagues, teams, and organizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expressions that send shivers down my spine when uttered by someone claiming to be an engineer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;I have no time to explore and learn.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Why would I want to learn something new?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It is 5 o'clock and time to call it a day. We will troubleshoot tomorrow.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No need to change, this has worked for us for many years.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have been a software engineer for four decades and &lt;strong&gt;LOVE&lt;/strong&gt; my work - which is why I have probably never felt like working in my life q;-)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Am I off course? What are your thoughts on this topic?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special thanks to Office 365 Copilot for helping me copy-edit this post&lt;/em&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Why are we moving to v2 CI/CD Blueprints for Azure Pipelines?</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-why-are-we-moving-to-v2-blueprints.html" rel="alternate"></link><published>2024-02-16T00:00:00-08:00</published><updated>2024-02-16T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-16:/back-to-basics-why-are-we-moving-to-v2-blueprints.html</id><summary type="html">&lt;p&gt;Understanding why we are disabling classic Azure Pipelines and embracing YAML-based Azure Pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We covered our move from classic to YAML-based Azure Pipelines in a detailed series, which begins at &lt;a href="/yaml-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; and  triggered in our open-source initiative as covered in posts such as &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part11.html"&gt;Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request&lt;/a&gt;, &lt;a href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt; and &lt;a href="https://wsbctechnicalblog.github.io/azure-devops-pipeline-oss-v2-1-flow.html"&gt;Azure DevOps Pipeline OSS v2.1 Flow&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In this post, I will only answer the question of &lt;strong&gt;WHY&lt;/strong&gt; and let you peruse our other posts for the implementation details.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY are we moving away from and disabling classic Azure Pipelines?&lt;/h1&gt;
&lt;p&gt;The following image shows that &lt;strong&gt;Classic&lt;/strong&gt; pipelines are the new name for the pipelines that started with MSBuild in Team Foundation Server (TFS) 2005, developed to XAML-based pipelines in TFS 2010, and finally to visual JSON-based pipelines in TFS 2015. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Classic" src="/images/back-to-basics-why-are-we-moving-to-v2-blueprints-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In 2013 Microsoft added the InRelease product, from InCycle Software, to include deployment in the build tools. The visual editor to create and configure the Classic Azure Pipelines was a useful feature for engineers who had problems with the changes of MSBuild, XAML, and JSON formats.&lt;/p&gt;
&lt;p&gt;We are leaving the Classic pipelines behind for these reasons:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The term "&lt;strong&gt;classic&lt;/strong&gt;" does not convey innovation or long-term support confidence.&lt;/li&gt;
&lt;li&gt;Although the &lt;strong&gt;visual editor&lt;/strong&gt; is quite user friendly, the json it creates behind the scenes is complicated. A basic hello world classic build pipeline creates a JSON file of a 170+ lines. The same thing in YAML, takes around 20 lines, or less.&lt;/li&gt;
&lt;li&gt;The differences between classic &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;release&lt;/strong&gt; Azure Pipelines and especially their related REST APIs.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;operational effort and cost&lt;/strong&gt; to maintain hundreds of classic Azure Pipelines is huge. Operational automation has worked well, but also taken a lot of time - time we could use to enable our engineers. &lt;/li&gt;
&lt;li&gt;Ensuring &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt; in pipeline configurations and permissions is hard, leading to many unique (snowflakes) pipelines, which again take away from innovation.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;By the end of this year, our classic pipelines will be locked, so teams can still use them, but not modify them or make new ones.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;WHY are we moving to YAML-based Azure Pipelines?&lt;/h1&gt;
&lt;p&gt;The YAML pipeline introduced an exciting new era, launching in early 2019 with TFS 2019. It signaled a CI/CD solution designed from scratch on an INNOVATIVE whiteboard.&lt;/p&gt;
&lt;p&gt;The main benefits of switching to YAML are:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt; - instead of cluttering your &lt;strong&gt;classic&lt;/strong&gt;** release pipelines with everything you can think of, the YAML pipelines focus on your essential steps to build and deploy your solution.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*-as-code&lt;/strong&gt; - allows us to adopt pipeline-as-code (p-a-c) and configuration-as-code (c-a-c).  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enable engineers&lt;/strong&gt; to evaluate and suggest improvements and innovations, based on transparency, and using a familiar tool - "pull requests".  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Re-use by using templates&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Centralized management&lt;/strong&gt; - Environments give us centralized control. It is simpler to manage checks in one place for an environment, like production, than to do it individually for each &lt;strong&gt;classic&lt;/strong&gt; pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;WHY are we promoting our v2 CI/CD Azure Pipeline blueprints?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Self-service automation&lt;/strong&gt; is the solution that lets engineers do things by themselves without needing help from someone else who knows the process or has the permissions. We showed our engineers that they can “click” a button, have a cup of coffee, and self-service does the following in less than 30 seconds:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a new Azure Repo, using a &lt;strong&gt;consistent&lt;/strong&gt; name pattern.&lt;/li&gt;
&lt;li&gt;Put an application-type sample solution in the Azure Repo, that uses guardrails, guidelines, and shared components, like &lt;strong&gt;consistent&lt;/strong&gt; logging package.&lt;/li&gt;
&lt;li&gt;Put an application type v2 CI/CD blueprint, that creates a &lt;strong&gt;consistent&lt;/strong&gt; integration (build) and deployment workflow.&lt;/li&gt;
&lt;li&gt;Run the pipeline, which builds the sample application to validate the environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the engineers come back from their coffee break, they can start working on features, knowing that they have a &lt;strong&gt;consistent&lt;/strong&gt;, &lt;strong&gt;standardized&lt;/strong&gt;, and &lt;strong&gt;working&lt;/strong&gt; environment. &lt;strong&gt;Empowerment!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Self-service automation hides the automation, complexity, process, and does the automation for the engineer. It should be as easy as a vending machine. Pick what you want; press a button; and it's done.  &lt;/p&gt;
&lt;p&gt;Additional benefit? Security, quality, and operational scanning, monitoring, and troubleshooting are much &lt;strong&gt;easier&lt;/strong&gt; and &lt;strong&gt;cost effective&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;application-type v2 CI/CD Blueprints&lt;/strong&gt; are designed to support and enhance automation, which requires processes that are stable and consistent and allows them to be quick and simple. This is why we are prioritizing and developing this innovation. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;I hope that this post clarifies the &lt;strong&gt;WHY&lt;/strong&gt;. If not, let us have a discussion below.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="101"></category></entry><entry><title>Back to Basics: Pull-Request (PR) Validations</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-pr-validations.html" rel="alternate"></link><published>2024-02-12T00:00:00-08:00</published><updated>2024-02-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-12:/back-to-basics-pr-validations.html</id><summary type="html">&lt;p&gt;Why run a validation build in your pull-request?&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; provides powerful &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure Repos&lt;/a&gt;, which in turn support feature-rich pull requests, which allow us to perform supervised changes, reviews, and code merges. Again we covered pull requests in previous blog posts, such as &lt;a href="https://wsbctechnicalblog.github.io/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;, &lt;a href="https://wsbctechnicalblog.github.io/pull-request-empowered-by-engineering-practices.html"&gt;Pull Request empowered by engineering practices&lt;/a&gt;, and &lt;a href="https://wsbctechnicalblog.github.io/pull-requests-friend.htm"&gt;https://wsbctechnicalblog.github.io/pull-requests-friend.html&lt;/a&gt;, which allows us to be laser focused on "why bother with a validation build?"&lt;/p&gt;
&lt;h1&gt;WHY do we enforce branch policies?&lt;/h1&gt;
&lt;p&gt;Azure DevOps makes sure that our engineering process follows the technical governance with consistent policies. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="PR Types" src="/images/back-to-basics-pr-validations-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The illustration depicts three of many possible pull request workflows. In the first one, we make a feature branch, change the code, and commit the changes directly or through a pull request, without any supervision. The second one adds a &lt;strong&gt;human code&lt;/strong&gt; review, which can be used for verification, peer reviews, knowledge sharing, and collaboration. Although this reduces the chance of a failure after the merge, we depend on the review to be careful, not just a “click.” The third flow adds a &lt;strong&gt;verification&lt;/strong&gt; step, where we can include &lt;strong&gt;automated validations&lt;/strong&gt; defined as branch policies, such as minimum number of reviewers, security and other scan results, and linking the code changes to one or more work items. &lt;/p&gt;
&lt;p&gt;Branch policies set at the Azure repos root and tightened at the repo level are applied in the pull-request validations and improve quality and alignment with guardrails, policies, and/or governance.&lt;/p&gt;
&lt;p&gt;For example, we always require these as a minimum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Case Sensitivity to prevent case-sensitivity conflicts.&lt;/li&gt;
&lt;li&gt;Reserved Names to prevent forbidden file and folder names.&lt;/li&gt;
&lt;li&gt;Maximum path length to prevent paths that may exceed Windows or Linux path lengths.&lt;/li&gt;
&lt;li&gt;Minimum number of reviewers. (2)&lt;/li&gt;
&lt;li&gt;Requestor can approve. (No)&lt;/li&gt;
&lt;li&gt;Reset code reviewer votes when there are recent changes. (Yes)&lt;/li&gt;
&lt;li&gt;Check for linked work items. (Yes)&lt;/li&gt;
&lt;li&gt;Check for comment resolution. (Yes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we suggest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build validation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://learn.microsoft.com/en-us/azure/devops/repos/git/about-pull-requests?view=azure-devops#branch-policies-and-pull-requests"&gt;Branch policies and pull requests&lt;/a&gt; for more details on branch policies.&lt;/p&gt;
&lt;h1&gt;WHY do we recommend a validation build?&lt;/h1&gt;
&lt;p&gt;Simple ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Add BUild Validation" src="/images/back-to-basics-pr-validations-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By adding a verification build, as shown, we can ensure that all the criteria have been met, and that the changes are buildable. We have more confidence that the continuous integration build will not break unexpectedly after the merge.&lt;/p&gt;
&lt;h1&gt;WHY v2 CI/CD Blueprints complement PR validations&lt;/h1&gt;
&lt;p&gt;The v2 CI/CD blueprints have many features and innovations, which you should explore. As explained in &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part11.html"&gt;Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request&lt;/a&gt;, the blueprints can detect when they run in a pull request (as a validation build) and only do the CI part and skip the CD part. This lets teams use the &lt;strong&gt;same pipeline&lt;/strong&gt; for both the build validation and the continuous integration and delivery. &lt;strong&gt;Simple!&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thoughts? Questions? Start a discussion below.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Kanban</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-kanban.html" rel="alternate"></link><published>2024-02-09T00:00:00-08:00</published><updated>2024-02-09T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-09:/back-to-basics-kanban.html</id><summary type="html">&lt;p&gt;"Kanban" is Japanese for "visual card" or "signal."&lt;/p&gt;</summary><content type="html">&lt;p&gt;Kanban is a method of visually managing work processes, often used in lean and just-in-time production. It was developed by Taiichi Ohno for Toyota as a way to improve manufacturing efficiency and the word &lt;strong&gt;Kanban&lt;/strong&gt;&lt;em&gt; means &lt;/em&gt;&lt;em&gt;visual card&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;signal&lt;/em&gt;* in Japanese. The system uses visual cues to initiate and manage workflow processes.&lt;/p&gt;
&lt;p&gt;Main components of a Kanban system and a few reference links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kanban Board&lt;/strong&gt; - &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;, &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;, &lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;, &lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips - Stop messing with our backlog!&lt;/a&gt;, &lt;a href="/azure-boards-tips-retain-hierarchy-with-filter.html"&gt;Azure Boards Tips - Retain hierarchy with filter&lt;/a&gt;, &lt;a href="/azure-devops-dependencies.html"&gt;Visualizing work item dependencies in Azure Boards&lt;/a&gt;, and &lt;a href="/agile-planning-choice.html"&gt;Enable Agile, Kanban, Scrum, or SAFe with Azure DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cards&lt;/strong&gt; - &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops&amp;amp;tabs=agile-process"&gt;About work items and work item types&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work in Progress (WIP)&lt;/strong&gt; - &lt;a href="/back-to-basics-wip-limit.html"&gt;Back to Basics: WIP Limit&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limits  Signals (States)&lt;/strong&gt; - &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops&amp;amp;tabs=agile-process"&gt;About workflow states in backlogs and boards&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Kanban Principles and Practices&lt;/h1&gt;
&lt;p&gt;An extract from one of our quick reference posters that covers the basic Kanban Principles and Practices:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Principles and Practices" src="../images/back-to-basics-kanban-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Bad Smoke Signals&lt;/h1&gt;
&lt;p&gt;Here are some signs that you should examine your flow and try to make it more efficient:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bad Flows" src="../images/back-to-basics-kanban-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You want a smooth flow of cards (work) across the entire boards, with no visual bottlenecks (delays), or states (columns) that are idling.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Actionable Cards&lt;/h1&gt;
&lt;p&gt;It annoys me when I have to deal with a card that I cannot act on. Here are cards that should be discarded or should cause the &lt;a href="https://en.wikipedia.org/wiki/Andon_(manufacturing)"&gt;Andon cord&lt;/a&gt; to be pulled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title is cryptic, description and acceptance critera are blank, and card is tagged as an urgent dependency.&lt;/li&gt;
&lt;li&gt;Title is actionable, but description and acceptance criteria are marked as "to be defined" (TBD).&lt;/li&gt;
&lt;li&gt;Title and description are actionable, but acceptance criteria is blank or TBD.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My team does not accept these cards onto our board anymore. We send back any card that is added to our board without our consent, with a polite "non actionable" reply. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-alert.png"&gt;
An actionable &lt;strong&gt;ACCEPTANCE CRITERIA&lt;/strong&gt; is Key! Acceptance criteria serve as essential conditions for the approval of a Kanban card (Azure DevOps Work Item)[https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops&amp;amp;tabs=agile-process], either met or not met - it is a binary 1 or 0! They require &lt;strong&gt;clarity&lt;/strong&gt;, &lt;strong&gt;conciseness&lt;/strong&gt;, &lt;strong&gt;user-focus&lt;/strong&gt;, and &lt;strong&gt;testability&lt;/strong&gt;: Statements are formulated to be verifiable, allowing for the creation of tests that objectively assess whether the criteria are met**. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Examples of an acceptance criteria for a complete rocket: &lt;/p&gt;
&lt;h3&gt;GOOD acceptance criteria&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Propulsion&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Propulsion system specifications are clearly documented.&lt;/li&gt;
&lt;li&gt;Successful static firing tests confirm thrust performance and stability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigation controls accurately adjust the rocket's trajectory in a simulated space environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Launch Sequence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concise checklist guides the rocket from ignition to the designated orbit.&lt;/li&gt;
&lt;li&gt;Emergency procedures are summarized for quick reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Payload&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Payload deployment ensures the safe release of the payload into the specified orbit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mission Success&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Success is defined by the payload achieving and maintaining the intended orbit.&lt;/li&gt;
&lt;li&gt;Safety features prioritize both the rocket launch and the protection of the payload.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;BAD acceptance criteria&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Blank.&lt;/li&gt;
&lt;li&gt;To be defined (TBD).&lt;/li&gt;
&lt;li&gt;Rocket launches successfully.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Minimal cards&lt;/h3&gt;
&lt;p&gt;To avoid garbage entering your system and your Kanban workflow, here is a simple, yet effective card:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bad Flows" src="../images/back-to-basics-kanban-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;You can use &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; to apply Kanban principles, whether you work with Kanban only or combine Kanban (operational support) and Scrum (innovation), like we do. I am a visual thinker, so I find the visual signals from Kanban very helpful. Have fun!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Back to Basics: WIP Limit</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-wip-limit.html" rel="alternate"></link><published>2024-02-05T00:00:00-08:00</published><updated>2024-02-05T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-02-05:/back-to-basics-wip-limit.html</id><summary type="html">&lt;p&gt;Dealing with a Kanban Board meltdown, by controlling the work in progress.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from where we left off in  &lt;a href="/back-to-basics-batch-size.html"&gt;Back to Basics: Batch Size&lt;/a&gt; and the following warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - I am intentionally skipping a very important and related topic, which will be covered in the follow-up blog post - &lt;strong&gt;Work in-Progress&lt;/strong&gt; (WIP). Without it, leaning towards smaller batch sizes would lead to a nuclear type reaction (a process in which two particles collide, to produce one or more particles), followed by a similar meltdown.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will waste no time on covering the Azure DevOps Board - refer to &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;, &lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;, &lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips - Stop messing with our backlog!&lt;/a&gt;, and &lt;a href="/azure-boards-tips-retain-hierarchy-with-filter.html"&gt;Azure Boards Tips - Retain hierarchy with filter&lt;/a&gt; for a quick introduction.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The rocket factory wakes up&lt;/h1&gt;
&lt;p&gt;We embark on our exploration equipped with two rocket orders and three additional spare engines, anticipating the possibility of engine failure during hot staging. We start by placing the associated cards onto our visual &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure DevOps Board&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with 2 rockets ordered" src="../images/back-to-basics-wip-limit-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our team promptly initiates the assembly process for all engines, including the first and second stages. We depend on vendors to provide critical and secretive parts of the payloads, and to streamline this process, we will temporarily place these cards in the ORIENT column while we clarify the specific requirements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with 2 rockets ordered" src="../images/back-to-basics-wip-limit-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;The rocket factory melts down&lt;/h1&gt;
&lt;p&gt;Let us assume that to assemble a low atmosphere engine we need 1x unit of work, for the vacuum engines we need 2x units of work, for the stages we need 3x units of work, and for the payload, due to its complexity 4-5 units of work.&lt;/p&gt;
&lt;p&gt;A probable sequence of events would produce lots of low atmosphere and vacuum engines, which would produce a bottleneck in the integration stage, and to a lesser degree in the quality control stage. The hot staging teams would be sitting around, playing poker and reading the latest news about agility, which raises their frustration and does not allow the assembly factory to deliver value consistently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with meltdown" src="../images/back-to-basics-wip-limit-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We must control the progression of work to guarantee a seamless and uninterrupted delivery of value across every stage, steering clear of any abrupt surges or bottlenecks at particular points in the process.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Work-In-Progress (WIP) limit to the rescue&lt;/h1&gt;
&lt;p&gt;Welcome WIP limit, aka Work In Progress limit.&lt;/p&gt;
&lt;p&gt;WIP, or Work In Progress, serves as a constraint within the realms of agile and lean methodologies. It signifies the upper limit of concurrently active units of work within a designated stage of the rocket assembly value stream. Enforcing WIP limits allows us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Optimize Workflow&lt;/strong&gt; - ensure that tasks progress through each stage smoothly and efficiently.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prevent Overloading Teams and Processes&lt;/strong&gt; - contribute to sustained team effectiveness and prevent bottlenecks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize Task Completion&lt;/strong&gt; - encourage teams to focus on completing existing tasks before initiating new ones, reducing multitasking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhance Overall Productivity&lt;/strong&gt; - emphasis on completing tasks and controlling flow improves productivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, enforcing WIP limits is a strategic practice aimed at creating a balance between task initiation and completion, fostering efficiency, and contributing to the smooth flow of work through the entire value stream.&lt;/p&gt;
&lt;h1&gt;Rocket Assembly with WIP limits&lt;/h1&gt;
&lt;p&gt;WIP limits are determined based on factors such as team &lt;strong&gt;capacity&lt;/strong&gt;, resource &lt;strong&gt;availability&lt;/strong&gt;, and the overall *&lt;em&gt;goals&lt;/em&gt; of the project. Adjusting WIP limits help us fine-tune our process, change circumstances, and improve our ability to deliver value consistently.&lt;/p&gt;
&lt;p&gt;Let us set the following WIP limits on the assembly stages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assembly Engines = 3&lt;/strong&gt; - limit the number of engines being assembled concurrently to three.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assembly Other = 2&lt;/strong&gt; - limit the number of other concurrent assemblies to two.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quality Control = 3&lt;/strong&gt; - limit the number of quality concurrent quality assurance to three.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration = 5&lt;/strong&gt; - limit the number of concurrent integration to five.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we were to replay the operations in our factory, we could seamlessly integrate and roll out the first and second stages for rocket A for a hot stage test. Subsequently, we would repeat this process for rocket B, preparing it for its hot staging phase. The synchronicity of these efforts would result in both rockets being completed, poised and waiting for their payload. It sets the stage for an eagerly anticipated countdown and a spectacular launch once the final components are in place. In parallel we also complete the spare engines, which allow us to fail-fast in hot staging and replace faulty engines, before the payloads are delivered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board with 2 rockets ordered" src="../images/back-to-basics-wip-limit-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Closing note&lt;/h1&gt;
&lt;p&gt;Let us conclude by exploring two Kanban posters from our comprehensive quick reference collection. These visual aids will help illustrate key ingredients for effectively embracing the fundamentals:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Kanban Board" src="../images/back-to-basics-wip-limit-5.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kanban Basics" src="../images/back-to-basics-wip-limit-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Back to Basics: Batch Size</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-batch-size.html" rel="alternate"></link><published>2024-01-31T00:00:00-08:00</published><updated>2024-01-31T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-31:/back-to-basics-batch-size.html</id><summary type="html">&lt;p&gt;Balancing noise and agility with smaller batch sizes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a new series of posts, where we will go back to basics. We will start with the "smaller batch size" concept, which is well defined and documented in various Agile publications, such as the Scaled Agile Framework &lt;a href="https://v5.scaledagileframework.com/visualize-and-limit-wip-reduce-batch-sizes-and-manage-queue-lengths/"&gt;Principle #6 – Visualize and limit WIP, reduce batch sizes, and manage queue lengths&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Adopting smaller batch sizes aligns well with and complements agile principles. Small batches facilitate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rapid experimentation and iteration.&lt;/li&gt;
&lt;li&gt;Quick feedback loops.&lt;/li&gt;
&lt;li&gt;Reduced development times.&lt;/li&gt;
&lt;li&gt;Simplicity and flexibility.&lt;/li&gt;
&lt;li&gt;Optimised capacity management.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us visualize a few example and spot these advantages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-alert.png"&gt;
&lt;strong&gt;CAUTION&lt;/strong&gt; - I am intentionally skipping a very important and related topic, which will be covered in the follow-up blog post - &lt;strong&gt;Work in-Progress&lt;/strong&gt; (WIP). Without it, leaning towards smaller batch sizes would lead to a nuclear type reaction (a process in which two particles collide, to produce one or more particles), followed by a similar meltdown.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Build a rocket&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us construct a straightforward two-stage rocket featuring a total of three engines and a payload, represented by six (6) components. This intentionally simplified rocket design aims to maintain the clarity and simplicity of this blog post.&lt;/p&gt;
&lt;p&gt;We define our batch size as six (6), indicating our intention to devour the watermelon in a single bite or, in this context, to construct the rocket in one seamless process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket" src="/images/back-to-basics-batch-size-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This implies that all our teams commence work on the rocket simultaneously, disappear during the processing period (cycle time), and re-emerge with the finished product — the six-piece rocket. If another request for a rocket came in during the processing time, it would have to wait a very, very long time (lead time), before anyone takes note. &lt;/p&gt;
&lt;p&gt;See &lt;a href="https://wsbctechnicalblog.github.io/the-problem-with-big-batches.html"&gt;The problem with big batches&lt;/a&gt; for another viewpoint.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;p&gt;While I, like others, instinctively engage in this behavior, I struggle to identify any tangible benefits. I always get burnt!&lt;/p&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prolonged lead time&lt;/strong&gt;: The duration required for the process to construct a rocket, spanning from the initiation of your request to the moment it stands ready on the launch pad.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extended cycle time&lt;/strong&gt;: The duration required to complete one cycle to construct a rocket, from when the team of engineers starts work on the rocket to the moment it stands ready on the launch pad. Excludes placing your order and waiting for the team to be available to consider your order. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gradual and high risk of failures&lt;/strong&gt;: When a rocket is shipped, and either the end-users reject it as not meeting expectations, or, worse, it malfunctions on the launch pad, the cost of failure, learning, and iterating becomes exceptionally high.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delayed feedback&lt;/strong&gt;: With longer feedback loops, issues go unnoticed. See &lt;em&gt;Gradual and high risk of failures&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduced flexibility&lt;/strong&gt;: Longer cycle times hinder ability to pivot quickly. Making an engine change when the rocket is ready to roll-out to the launch pad is expensive and too late.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complex integration&lt;/strong&gt;: Integrating complete or near complete rockets can be challenging and error-prone, especially with &lt;em&gt;Gradual and high risk of failures&lt;/em&gt; at the back of our mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Build a rocket in two stages&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket in two stages" src="/images/back-to-basics-batch-size-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By reducing the batch size to three (3), we gain the flexibility to construct the 1st and 2nd stages independently, potentially even in parallel if our capacity allows. This approach enables the team to avoid blockages, as the team responsible for the 2nd stage can proceed without waiting for the 1st stage to be completed, particularly when integration is separated from development. Rather than reiterating the drawbacks, it is evident that this adjustment enhances the drawbacks mentioned earlier. We are now observing the benefits of smaller batches, such as the ability to fail fast, pivot swiftly, and utilize idle time for innovation and improvement.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Build a rocket in small batches&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Build a rocket in small batches" src="/images/back-to-basics-batch-size-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By reducing the batch size to one, we see magic starting to happen. Previous cons turn into pros, such as quick feedback loops, adaptability, reduced risk, improved efficiently and dependency management, better resource utilization, continuous experimentation and improvement, and vibrant collaboration. We, for example, realise that engine (1) and (2) are identical and interchangeable, that although engines 1/2 (lower-atmosphere nozzle) and 5 (vacuum nozzle) are different, their parts are identical and interchangeable.&lt;/p&gt;
&lt;p&gt;Dedicate some time to tuning into SpaceX's live streams from Boca Chica, and you will witness an ongoing process of experimentation, relentless improvement, and the application of small batch sizes in the construction of the Starship—the epitome of rockets.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;BUT, there is a catch&lt;/h1&gt;
&lt;p&gt;As highlighted in the cautionary note, management of smaller batch sizes is important to prevent any adverse repercussions. Consider the current scenario where engines are being produced in succession. How do we effectively integrate, test, and glean insights from the rigorous &lt;strong&gt;hot stage&lt;/strong&gt; tests, ensuring each stage's functionality and reliability? The challenge lies in avoiding the potential need to extensively re-engineer a substantial number of completed engines.&lt;/p&gt;
&lt;p&gt;Our goal is to steer clear of transforming into a rigid 100% "sausage factory." Instead, we aspire to embrace an 80:20 mindset, dedicating 80% of our efforts to delivering tangible value and reserving 20% for essential activities like experimentation, continuous learning, grooming, and allowing ourselves a moment to take a deep breath. This balanced approach ensures both productivity and innovation thrive within our rocket assembly value streams.&lt;/p&gt;
&lt;p&gt;Stay tuned for Part 2, where we delve into the significance of &lt;strong&gt;Work In Progress&lt;/strong&gt; (WIP) limits.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I chose rockets because of my deep passion for space programs. I have closely followed both the Space Launch System (SLS) and SpaceX initiatives with keen interest. While both programs deliver exceptional hardware, there is a stark contrast in their approaches. One produces approximately one rocket annually at a significant cost, whereas the other achieved a remarkable feat of launching 98 rockets in 2023 — equivalent to a launch every 3.7 days. Moreover, the latter has demonstrated mastery in the realms of experimentation, rapid prototyping, and the groundbreaking concept of reusable rockets. It is important to recognize the distinct positions each program holds when considering the three simple examples above.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scaledagileframework.com/"&gt;Scaled Agile framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nasa.gov/humans-in-space/space-launch-system/"&gt;Space Launch System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.spacex.com/"&gt;SpaceX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Why Bugs are NOT Technical Debt</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-why-bugs-are-not-technical-debt.html" rel="alternate"></link><published>2024-01-29T00:00:00-08:00</published><updated>2024-01-29T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-29:/engineering-practices-why-bugs-are-not-technical-debt.html</id><summary type="html">&lt;p&gt;why software bugs should not be categorically considered technical debt.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Rethinking the Analogy: Software Bugs and Technical Debt&lt;/h1&gt;
&lt;p&gt;In the realm of software development, the term "technical debt" has gained significant traction as a metaphor to describe the long-term consequences of prioritizing rapid development over code quality.  However, one area where the analogy may fall short is in associating software bugs directly with technical debt. In this blog post, we'll explore why software bugs should not be categorically considered as technical debt and delve into the nuances that differentiate the two.&lt;/p&gt;
&lt;h1&gt;Defining Technical Debt:&lt;/h1&gt;
&lt;p&gt;Technical debt is often defined as the accumulated cost of suboptimal design and implementation choices made during the software development process. These choices, akin to financial debt, may lead to future challenges, increased maintenance costs, and hindered development velocity. Common examples include shortcuts, lack of documentation, and architectural compromises.  When left unaddressed, technical debt accumulates to the point where new feature and functionality become increasingly difficult or impossible to accomplish.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Technical Debt" src="../images/engineering-practices-why-bugs-are-not-technical-debt-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;The Bug Dilemma:&lt;/h1&gt;
&lt;p&gt;While it's undeniable that software bugs can contribute to increased maintenance efforts and compromise user experience, categorizing all bugs as technical debt oversimplifies the complexity of software development. Bugs can arise from various sources, including unforeseen interactions, external dependencies, or changing requirements. Unlike technical debt, which stems from conscious choices, bugs are not always a result of shortcuts or suboptimal decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Technical Debt" src="../images/engineering-practices-why-bugs-are-not-technical-debt-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Nuances in Bug Classification:&lt;/h1&gt;
&lt;p&gt;To understand the distinction between bugs and technical debt, it's essential to classify bugs based on their origins and impact. Some bugs are indeed a consequence of technical debt � the result of hasty decisions or deferred improvements. However, many bugs are simply a natural part of the software development process, emerging from the inherent complexity of creating and maintaining software systems.&lt;/p&gt;
&lt;h1&gt;Evolutionary Nature of Software:&lt;/h1&gt;
&lt;p&gt;Software is not static; it evolves to meet changing requirements, adapt to new technologies, and address emerging challenges. Bugs, too, are part of this evolutionary process. Treating all bugs as technical debt may discourage innovation and hinder the agility required to respond to evolving user needs.&lt;/p&gt;
&lt;h1&gt;Managing Bugs Effectively:&lt;/h1&gt;
&lt;p&gt;Rather than labeling all bugs as technical debt, it is more constructive to adopt a nuanced approach to bug management. Prioritize bug fixes based on their impact on users, system stability, and alignment with current development priorities. Utilize effective testing strategies, continuous integration, and proactive debugging practices to minimize the occurrence of bugs.&lt;/p&gt;
&lt;h1&gt;Conclusion:&lt;/h1&gt;
&lt;p&gt;While technical debt remains a valuable concept for emphasizing the importance of code quality and design decisions, categorizing all software bugs under this umbrella oversimplifies the dynamic nature of software development. Bugs, inherent to the complex and evolving nature of software, should be managed pragmatically, with a focus on their impact and relevance to current development goals. By adopting a nuanced perspective, software teams can strike a balance between addressing bugs and maintaining a sustainable development pace.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="code-quality"></category></entry><entry><title>Why Mutant Testing?</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-why-mutant-testing.html" rel="alternate"></link><published>2024-01-24T00:00:00-08:00</published><updated>2024-01-24T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-24:/engineering-practices-why-mutant-testing.html</id><summary type="html">&lt;p&gt;What is Mutant testing and why is it so valuable?&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Understanding Mutant Testing&lt;/h1&gt;
&lt;p&gt;In the realm of software development, Mutant Testing is a crucial practice that goes beyond traditional Unit Testing.  When I write unit tests, I always have in the back of my mind a nagging question – what have I missed?  It’s like playing chess with yourself, no matter how you spin the board, you always have your own perspective, and it is very difficult to divorce yourself from that original viewpoint.  You will test what you coded for, and what you expect – and its tricky to see otherwise.&lt;/p&gt;
&lt;p&gt;Mutant testing, also known as mutation testing, is a software testing technique designed to evaluate the effectiveness of a test suite by introducing artificial faults or mutations &lt;strong&gt;into the source code itself&lt;/strong&gt; (only temporarily!). The goal is to assess the ability of the existing tests to detect these mutations. If the tests can identify the mutations, it indicates that the test suite is robust; otherwise, it implies potential weaknesses in the testing strategy.&lt;/p&gt;
&lt;p&gt;Having that in the back of our minds, let's delve into why developers should embrace Mutant Testing and why relying solely on Unit Tests might not be sufficient.  Put your goggles on, we are taking a deep dive to explore!&lt;/p&gt;
&lt;h1&gt;So, Why Mutant Testing?&lt;/h1&gt;
&lt;p&gt;Having discovered Mutant testing, I have come to appreciate what it can really do when used correctly.  While this list is not exhausted, here are the top 5 reason why I would adopt Mutant testing into your development practice:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Uncovering Weaknesses in Unit Tests:&lt;/strong&gt; 
•   While Unit Tests are effective in validating specific functionalities, they might not catch all potential issues. Mutant Testing introduces variations or 'mutants' in the code to simulate different scenarios. This helps identify weaknesses in existing Unit Tests, ensuring they are robust and cover a broader range of scenarios.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Enhancing Code Quality:&lt;/strong&gt;
•   Mutant Testing acts as an additional layer of scrutiny for your codebase. By introducing small changes (mutations) and checking if tests detect them, developers can enhance the overall quality of the code. This process helps catch subtle bugs and improves the reliability of the software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Detecting Redundant Code:&lt;/strong&gt;
•   Mutant Testing often reveals redundant or dead code that Unit Tests may overlook. It prompts developers to reconsider the necessity of certain code segments, leading to cleaner and more efficient code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Strengthening Test Suites:&lt;/strong&gt;
•   Mutant Testing is an excellent way to ensure that your test suite is comprehensive. By challenging the existing tests with mutated code, you can identify areas where the test coverage is lacking. This, in turn, helps in building a more robust and reliable test suite.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Building Confidence in Code Changes:&lt;/strong&gt;
•   Developers often make changes to the codebase, and Mutant Testing provides an extra layer of confidence before committing those changes. Knowing that mutants are caught by tests provides assurance that modifications are less likely to introduce unforeseen issues.&lt;/p&gt;
&lt;h1&gt;Why Just Having Unit Tests Isn't Good Enough&lt;/h1&gt;
&lt;p&gt;To further compound the benifits of Mutant testing, lets examine why Unit Tests alone aren't good enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Limited Scenario Coverage:&lt;/strong&gt;
•   Unit Tests primarily focus on individual components in isolation. While they are essential, they might not cover complex interactions between different parts of the code. Mutant Testing broadens the scope by examining the combined effects of mutations across the entire codebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. False Sense of Security:&lt;/strong&gt;
•   Relying solely on Unit Tests can create a false sense of security. Developers may assume that passing unit tests mean the code is flawless. Mutant Testing acts as a reality check, challenging this assumption and ensuring a more comprehensive validation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Evolution of Code Complexity:&lt;/strong&gt;
•   As software evolves, the complexity of the codebase increases. Unit Tests, while critical, might struggle to keep up with this growing complexity. Mutant Testing provides a dynamic approach to continuously evaluate the code against evolving standards.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In conclusion, Mutant Testing complements Unit Testing by offering a more comprehensive assessment of the code's robustness. It is a powerful tool in the developer's arsenal, ensuring that software not only meets the requirements but also withstands the challenges posed by mutations in the codebase.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Why release on demand?</title><link href="https://wsbctechnicalblog.github.io/why-release-on-demand.html" rel="alternate"></link><published>2024-01-19T00:00:00-08:00</published><updated>2024-01-19T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-19:/why-release-on-demand.html</id><summary type="html">&lt;p&gt;Exploring the deployment rings, continuous delivery and deployment, to discuss release on demand.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Before I get into the main subject of this blog post – why our goal is to release on demand – I want to quickly talk about deployment rings, continuous delivery and deployment, and what they mean. These topics are all connected in the DevOps DNA and backed by Azure DevOps, the foundation of our software development lifecycle (SDLC).&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Deployment Rings - managing impact!&lt;/h1&gt;
&lt;p&gt;The concept of ring-based deployment, initially introduced in Jez Humble's "Continuous Delivery" as canary deployments, strategically minimizes the impact on end users by incrementally and systematically rolling out changes in production. Employing deployment rings allows for a thorough assessment of the impact, often referred to as the "blast radius," achieved through meticulous observation, testing, telemetry analysis, and crucially, user feedback. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rings" src="/images/engineering-practices-why-release-on-demand-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This approach, used to deploy Azure DevOps, enables the gradual deployment of binary bits, facilitating the concurrent operation of multiple production releases. For more detail, peruse &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Continuous Delivery and Deployment - deploying to one or more environments!&lt;/h1&gt;
&lt;p&gt;In the distant year of 2016, I sought insights from my ALM Ranger colleague to delineate the distinction between continuous delivery and continuous deployment. &lt;/p&gt;
&lt;p&gt;Here is what &lt;a href="https://www.linkedin.com/in/darquewarrior/"&gt;Donovan Brown&lt;/a&gt; had to say: "&lt;em&gt;Continuous Delivery is the ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one or more environments&lt;/strong&gt; automatically. There is a subtle difference between Continuous &lt;strong&gt;Delivery&lt;/strong&gt; and Continuous &lt;strong&gt;Deployment&lt;/strong&gt;. The latter is to a single environment. A small team might only implement Continuous Deployment because each change goes directly to production. Continuous Delivery is moving code through &lt;strong&gt;several&lt;/strong&gt; environments, ultimately ending up in production, which may include automated UI, load and performance tests and approvals along the way.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;PS: Donovan is also the author of the infamous definition of DevOps I am still using to this day - &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;What is DevOps&lt;/a&gt;. Collectively, we acknowledged the prevailing notion that DevOps transcends being a product; it is not something one can simply purchase or install. Yet, this perception took an interesting turn with the advent of Azure DevOps.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Deployment versus Release - giving the business and users a choice!&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt; is the process of moving a build or application from one environment to another. It involves copying files, configuring settings, and setting up the infrastructure necessary for the application to run. In Azure DevOps, deployment usually refers to the tasks involved in taking an artifact and installing it in different environments such as development, testing, and production.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Release&lt;/strong&gt;, on the other hand, is the process of making a version of your application available to users or customers. It is the end result of the development and testing process and signifies that a particular set of features or changes is ready for production use.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why Release on Demand?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Release on Demand&lt;/strong&gt; is an agile software development method to continuously provide new features, improvements, or fixes and empower business and delighted end-users to decide when the changes are available and visible. It empowers us to adjust to changing requirements and be more responsive.&lt;/p&gt;
&lt;p&gt;For example, Microsoft continuously rolls our &lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; updates. With a flip of a feature flag / toggle they can switch the features on or off. Delighted end-users, such as I, can even decide when to enable and use public preview features, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Flags" src="/images/engineering-practices-why-release-on-demand-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Peruse &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; and &lt;a href="https://scaledagileframework.com/release-on-demand/"&gt;Release on Demand - Scaled Agile Framework&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Another option for releasing changes, besides feature flags or toggles, is the BLUE|GREEN deployment method – or using it along with feature flags. It lets you deploy and test your changes in other envi­ronments, while keeping a current (blue) version active, and having a new (green) version ready. If the green environment passes all the checks and business wants to launch all the changes, you can switch the BLUE and GREEN environments. GREEN becomes BLUE and goes live. BLUE becomes GREEN and is used for testing new versions. Simple!&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/connect/vsts-the-road-to-continuous-delivery-with-visual-studio-team-services"&gt;VSTS - The Road to Continuous Delivery with Visual Studio Team Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, WHY bother? Here are several advantages that come to mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Customer&lt;/strong&gt;-centric delivery!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous&lt;/strong&gt; delivery of features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental&lt;/strong&gt; and &lt;strong&gt;manageable&lt;/strong&gt; release of features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt; for business and IT.&lt;/li&gt;
&lt;li&gt;Encourage collaboration, &lt;strong&gt;feedback&lt;/strong&gt;, and a &lt;strong&gt;fail-fast&lt;/strong&gt; mindset.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2016/august/devops-applying-devops-to-a-software-development-project"&gt;Applying DevOps to a Software Development Project&lt;/a&gt; / August 2016&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/connect/vsts-the-road-to-continuous-delivery-with-visual-studio-team-services"&gt;VSTS - The Road to Continuous Delivery with Visual Studio Team Services&lt;/a&gt; / December 2017&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; / February, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/may/devops-any-language-any-platform-with-azure-devops-projects"&gt;Any Language, Any Platform with Azure DevOps Projects&lt;/a&gt; / May 2018&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="engineering"></category><category term="automation"></category></entry><entry><title>What are all those Warning and Information outputs from a build and why should I care if its not an error?</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-warnings-information-messages.html" rel="alternate"></link><published>2024-01-16T00:00:00-08:00</published><updated>2024-01-16T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-01-16:/engineering-practices-warnings-information-messages.html</id><summary type="html">&lt;p&gt;Reasons why is it important to pay attention to all the warning and information message generated when compiling your code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my fourth decades of experience as a software engineer, paying close attention to warnings and information messages generated during the compile step has proven to be immensely important. Here are some reasons why I find it crucial:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Code Quality and Best Practices:&lt;/strong&gt; - I've observed that compiler warnings often signal potential issues in the code that might not hinder compilation but can lead to runtime errors or unexpected behavior. Addressing these warnings ensures that I adhere to coding standards and best practices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Performance Optimization:&lt;/strong&gt; - Some compiler messages provide insights into performance-related concerns. By heeding these warnings, I can make optimizations that significantly enhance the overall performance of the software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Security Concerns:&lt;/strong&gt; - My expertise in security and content syndication has emphasized the significance of heeding certain warnings that may indicate potential security vulnerabilities in the code. Ignoring these warnings might expose the software to security risks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Maintainability and Readability:&lt;/strong&gt; - Compiler warnings often point out issues related to code maintainability and readability. Resolving these warnings contributes to a cleaner and more maintainable codebase, crucial for long-term projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Compatibility and Portability:&lt;/strong&gt; - I've found that warnings can also alert me to potential issues related to platform or compiler compatibility. Resolving these warnings ensures that the code can be easily ported across different environments or compilers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Early Detection of Bugs:&lt;/strong&gt; - I've noticed that compiler messages can serve as an early indicator of potential bugs or logical errors. Addressing these warnings in the initial stages of development helps in preventing more complex issues downstream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Integration with CI/CD Pipelines:&lt;/strong&gt; -  In my work involving technologies like C#, Azure, and Azure DevOps, integrating compile step warnings into continuous integration and continuous deployment (CI/CD) pipelines for analysis has become standard practice. This ensures that issues are caught early in the development process, reducing the likelihood of deploying faulty code.&lt;/p&gt;
&lt;p&gt;My personal experience as a software engineer has underscored the critical importance of diligently addressing warnings and information messages generated during the compile step. These practices contribute not only to the immediate success of software projects but also to their long-term viability. &lt;/p&gt;
&lt;p&gt;By prioritizing code quality, performance optimization, security, maintainability, and early bug detection, we can ensure that the software aligns with the highest standards and is well-prepared for future challenges. Moreover, integrating these practices into CI/CD pipelines reflects a commitment to a robust and efficient development workflow. As technology continues to evolve, embracing a proactive approach to compiler warnings remains an integral part of a robust development methodology, ensuring the creation of resilient and reliable software solutions.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>DevOps Vancouver Meetup - Engineering Empowerment Session Preparations</title><link href="https://wsbctechnicalblog.github.io/devOps-vancouver-meetup-engineering-empowerment-session-preparations.html" rel="alternate"></link><published>2023-12-20T00:00:00-08:00</published><updated>2023-12-20T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-12-20:/devOps-vancouver-meetup-engineering-empowerment-session-preparations.html</id><summary type="html">&lt;p&gt;Help us prepare our meetup session to ensure we cover what is interesting for YOU!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Join us at the &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/events/297957063/"&gt;DevOps Vancouver Meetup - January 23, 2024&lt;/a&gt; on a deep dive into our journey to understand our current position and what is brewing for 2024 - a landscape defined by excellence and innovation, inspired by Elon Musk's philosophy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Every person in your company is a vector. Your progress is determined by the sum of all vectors.”&lt;/em&gt; - Elon Musk
&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dojo" src="../images/devOps-vancouver-meetup-engineering-empowerment-session-preparations-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK, here is our session title and outline. What do you think?&lt;/p&gt;
&lt;h1&gt;Engineering Empowerment: Unleashing the Future with AI, Innovative Technologies, and Automation for a Future of Self-Service Innovation&lt;/h1&gt;
&lt;p&gt;Embark on a swift exploration of our dynamic software engineering ecosystem, delving into recent triumphs and future endeavors that aim to empower each WorkSafeBC engineer in delivering perpetual value to our satisfied end-users. In an era where the information landscape evolves rapidly, we prioritize fostering a culture of continuous experimentation and learning. Join us as we discuss the strategic handling of numerous classic build and release pipelines, the seamless integration of self-service automation, the transformative role of OpenAI, and a diverse array of Copilots contributing to our innovative journey. Discover how we navigate this ever-changing landscape to stay ahead and lead the way in engineering excellence.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Duration: 20min (followed by a panel question&amp;amp;answer discussion)&lt;/li&gt;
&lt;li&gt;Presenters: &lt;a href="https://twitter.com/604kev"&gt;Kevin Schwantje&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/martinmlacey"&gt;Martin Lacey&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/wpschaub"&gt;Willy-Peter Schaub&lt;/a&gt;/&lt;a href="https://twitter.com/wpschaub"&gt;X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;In-depth Insights&lt;/h1&gt;
&lt;h4&gt;Core Pillars&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Prioritize automation over manual processes.&lt;/li&gt;
&lt;li&gt;Embrace quality over complex solutions.&lt;/li&gt;
&lt;li&gt;Empower Dev and Ops through innovation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Recent Milestones&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Successful implementation of GitOps and c-a-c Automation.&lt;/li&gt;
&lt;li&gt;Evaluation of GitHub Copilot for Business.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2024's Ambitious Plans&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Proactive incident analysis via advanced monitoring and analytics.&lt;/li&gt;
&lt;li&gt;Open-sourcing and implementing CI/CD/IaC blueprints.&lt;/li&gt;
&lt;li&gt;Continuous automated Testing for efficiency and quality elevation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Security Nexus using v2 Blueprints&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Enhancing DevOps Metrics: deployment frequency, lead time for changes.&lt;/li&gt;
&lt;li&gt;Upholding security without compromising speed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Knowledge Enhancement&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Leveraging OpenAI and Stackoverflow for productivity.&lt;/li&gt;
&lt;li&gt;AI-driven knowledge for improved efficiency and faster engineer onboarding.&lt;/li&gt;
&lt;li&gt;SDLC Toolbox Catalog Visualization&lt;/li&gt;
&lt;li&gt;Visual representation of the software development lifecycle toolbox.&lt;/li&gt;
&lt;li&gt;Creation of an engaging and informative catalog.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Reflection&lt;/h1&gt;
&lt;p&gt;We are covering a lot in 20 minutes! Prioritizing the most impactful points and ensuring a cohesive narrative might be the key to delivering a compelling session. Excited for your feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="devops"></category><category term="azure devops"></category><category term="event"></category></entry><entry><title>Unraveling the Merits of Dependency Injection in Modern Software Development</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-dependency-injection.html" rel="alternate"></link><published>2023-12-18T00:00:00-08:00</published><updated>2023-12-18T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-12-18:/engineering-practices-dependency-injection.html</id><summary type="html">&lt;p&gt;Dependency Injection aligns seamlessly with the &lt;strong&gt;SOLID&lt;/strong&gt; principles.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a seasoned software engineer with over four decades of experience, I've witnessed the evolution of software development methodologies and practices. One concept that has proven its worth time and again is Dependency Injection (DI). In this blog post, we'll delve into the merits of Dependency Injection, its seamless integration with Test-Driven Development (TDD), and its pivotal role in adhering to the SOLID principles.&lt;/p&gt;
&lt;h1&gt;Understanding Dependency Injection&lt;/h1&gt;
&lt;p&gt;Dependency Injection is a design pattern that promotes the separation of concerns by decoupling components and managing their dependencies. In essence, it's all about providing dependencies from external sources rather than creating them within the component itself. This approach facilitates more modular and maintainable code, allowing for easier testing, scalability, and extensibility.  Typically, those dependencies are supplied through the class constructor, using Interface definitions.&lt;/p&gt;
&lt;h1&gt;The Harmony with Test-Driven Development (TDD)&lt;/h1&gt;
&lt;p&gt;Dependency Injection and Test-Driven Development form a symbiotic relationship, enhancing the overall quality and maintainability of software. When employing TDD, the ability to isolate and test individual components in isolation is crucial. Dependency Injection makes this process smoother by allowing developers to inject mock dependencies into the components being tested. This ensures that tests focus on specific functionalities without unintentionally triggering dependent components.&lt;/p&gt;
&lt;p&gt;By injecting dependencies, developers can effortlessly swap out real implementations with mock objects, simulating various scenarios and edge cases. This flexibility not only aids in uncovering bugs early in the development process but also streamlines the overall testing workflow.&lt;/p&gt;
&lt;h1&gt;Dependency Injection and SOLID Principles:&lt;/h1&gt;
&lt;p&gt;Dependency Injection aligns seamlessly with the SOLID principles, a set of five design principles that promote clean, scalable, and maintainable object-oriented software design. Let's explore how Dependency Injection contributes to each of these principles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single Responsibility Principle (S)&lt;/strong&gt;: By separating the concerns of creating and managing dependencies, DI ensures that each class or module has a single responsibility. This promotes modular design and enhances code readability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open/Closed Principle (O)&lt;/strong&gt;: Dependency Injection encourages the use of interfaces and abstractions, allowing for easy extension without modifying existing code. This aligns with the Open/Closed Principle, promoting code that is open for extension but closed for modification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Liskov Substitution Principle (L)&lt;/strong&gt;: DI facilitates the use of interfaces, making it easier to adhere to the Liskov Substitution Principle. Substitutability of objects becomes more straightforward when dependencies are injected through interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interface Segregation Principle (I)&lt;/strong&gt;: Dependency Injection encourages the use of small, focused interfaces. This aligns with the Interface Segregation Principle, ensuring that clients only depend on the interfaces they use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dependency Inversion Principle (D)&lt;/strong&gt;: At its core, Dependency Injection embodies the Dependency Inversion Principle. High-level modules should not depend on low-level modules, but rather both should depend on abstractions. Dependency Injection achieves this by inverting the control of creating and managing dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In conclusion, Dependency Injection stands as a cornerstone in modern software development, providing a flexible and scalable approach to managing dependencies. Its synergy with Test-Driven Development and adherence to the SOLID principles make it an invaluable tool for crafting robust, maintainable, and extensible software. As software engineers, embracing Dependency Injection is not just a best practice; it's a strategic move towards building software that stands the test of time.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="code-quality"></category></entry><entry><title>Mastering Software Development: A Deep Dive into Trunk-Based Pull Request Workflow</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-pull-request-v2.html" rel="alternate"></link><published>2023-12-04T00:00:00-08:00</published><updated>2023-12-04T00:00:00-08:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-12-04:/engineering-practices-pull-request-v2.html</id><summary type="html">&lt;p&gt;How to implement a pull request workflow within the context of a trunk-based development.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the ever-evolving landscape of software development, choosing the right development workflow is crucial for ensuring efficiency, collaboration, and code quality. One such strategy gaining prominence is the Trunk-Based Development (T-B-Dev) strategy, and in this blog post, we will explore how to implement a pull request workflow within the context of T-B-Dev.&lt;/p&gt;
&lt;h1&gt;Understanding Trunk-Based Development&lt;/h1&gt;
&lt;p&gt;Trunk-Based Development is a version control strategy that promotes continuous integration by encouraging developers to commit their changes directly to the main branch (often referred to as the "trunk"). This strategy stands in contrast to feature branching workflows, where developers create long-lived branches for each feature.  &lt;/p&gt;
&lt;p&gt;Long-lived branches are at every increasing risk of “Merge-Hell” – wasted energy resolving merge conflicts with other developers and their commits to the main branch and are not the recommended approach.&lt;/p&gt;
&lt;h1&gt;Key Principles of Trunk-Based Development&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short-Lived Branches&lt;/strong&gt;: In T-B-Dev, developers create short-lived branches that are quickly merged back into the main trunk. This minimizes the risk of integration issues and promotes a continuous flow of code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Integration&lt;/strong&gt;: T-B-Dev relies heavily on continuous integration practices, ensuring that changes are regularly integrated into the main branch. Automated tests play a crucial role in maintaining code quality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature Toggles&lt;/strong&gt;: Feature toggles allow developers to hide incomplete or experimental features behind a toggle, enabling them to merge code into the main branch without affecting the user experience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;: Despite the direct commits to the main branch, code reviews remain an integral part of the T-B-Dev workflow. Developers can still submit pull requests for their changes, allowing for a thorough review process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Small and Atomic Commits&lt;/strong&gt;: Developers should make small, atomic commits to the main branch, focusing on one logical change at a time. This makes it easier to understand and review changes during the pull request process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated Testing&lt;/strong&gt;: Automated tests, including unit tests, integration tests, and any other relevant checks, should be an integral part of the pull request process. This ensures that changes do not introduce regressions and maintain the overall stability of the codebase.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration and Communication&lt;/strong&gt;: Pull requests in T-B-Dev serve as a means of communication among team members. Developers can discuss changes, provide feedback, and address concerns within the context of the pull request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature Flags and Rollouts&lt;/strong&gt;: Utilize feature flags to control the release of new features. This allows for gradual rollouts and easy rollback in case of unexpected issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Pull-Request Workflow Process&lt;/strong&gt; is best illustrated with the following diagram:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Workflow" src="../images/engineering-practices-pull-request-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s review this diagram in detail and examine each step in the process of building your code-feature branch and committing back to the main (trunk).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Branching Best Practices&lt;/strong&gt;: Before creating a short-lived feature branch, ensure your local repository is up to date at branch initiation. This step is crucial in preventing merge complications, emphasizing the significance of minimizing the branch's lifespan. Opt for pulling more frequently than less to sidestep potential issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Development and Testing&lt;/strong&gt;: Develop your code changes comprehensively, incorporating both Unit and Integration tests to ensure robust functionality and reliability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Initiating Collaboration&lt;/strong&gt;: Initiate collaboration by creating a Draft Pull Request (PR). This serves as the starting point for collaboration among team developers. The Draft PR fosters dynamic collaboration without triggering Branch Policies, validations, or notifying PR reviewers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Validation Steps&lt;/strong&gt;: Manually trigger branch policy validations, such as the validation build, as required. Confirm that your code successfully passes validations, iterating on code changes if necessary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PR Publishing and Mandatory Policies&lt;/strong&gt;: When ready to merge code changes into the main branch, publish the PR. PR publication notifies reviewers, and branch policies become mandatory. PR completion can be set to manual or automatic, with the latter triggered upon the verification of all policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commit Impact on PR&lt;/strong&gt;: Any committed code changes within a published PR reset all reviewer approvals, triggering notifications according to our branch policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic Re-validation on Commit&lt;/strong&gt;: With each commit, all policies are automatically re-validated, ensuring continuous compliance throughout the development process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Changes Completion&lt;/strong&gt;: Declare code changes as ready to merge. The PR acts as a gatekeeper, ensuring all policies are met before proceeding.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mandatory Policy Compliance for PR Completion&lt;/strong&gt;: Manual or automatic completion of the PR is contingent upon meeting all branch policies. Once achieved, the code seamlessly merges into the main (trunk). Note that users with elevated permissions can force complete the PR, overriding validation states. Following the merge, the continuous integration (CI) pipeline is triggered from the source branch.  &lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In conclusion, adopting a pull request workflow within the Trunk-Based Development strategy offers a balance between the advantages of continuous integration and the collaborative nature of code reviews. By following the key principles and best practices outlined in this blog post, development teams can seamlessly integrate changes into the main branch while ensuring code quality, collaboration, and overall project success.&lt;/p&gt;
&lt;p&gt;Remember, the essence of Trunk-Based Development lies in its simplicity and focus on delivering value continuously. Embrace this workflow, tailor it to your team's needs, and witness the positive impact it can have on your software development lifecycle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH BUSTER: And no, the pull request is not a gated process! Apart from the invaluable collaboration, you can fully automate the branch policy and build validations, as well as other validations, such as checking the state of a ServiceNow change request. 
&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Is Agile Dead?</title><link href="https://wsbctechnicalblog.github.io/innovation-podcast-is-agile-dead.html" rel="alternate"></link><published>2023-11-22T00:00:00-08:00</published><updated>2023-11-22T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-22:/innovation-podcast-is-agile-dead.html</id><summary type="html">&lt;p&gt;Innovation podcast with Marius De Beer&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this insightful podcast, &lt;a href="https://www.linkedin.com/in/marius-de-beer-a9091b1/"&gt;Marius de Beer&lt;/a&gt; delves into his transformation from a mechanical engineer to his current roles as an Agile Coach and Director of Agile, recounting his journey from South Africa to Canada.&lt;/p&gt;
&lt;p&gt;Marius explores the dynamic evolution of Agile, emphasizing its significance in today's fast-paced world and stressing the imperative for organizations to prioritize resilience. He shares valuable insights into his evolving coaching approach, underlining the crucial importance of implementing desired behavior promptly and leveraging human behavior as a catalyst for positive change.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=yOl487Qt8eM"&gt;&lt;img alt="Podcast" src="../images/innovation-podcast-is-agile-dead-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Click &lt;a href="https://www.youtube.com/watch?v=yOl487Qt8eM"&gt;here&lt;/a&gt; to listen to the conversation.&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="agile"></category></entry><entry><title>GitHub Copilot for Business FAQ</title><link href="https://wsbctechnicalblog.github.io/github-copilot-for-business-faq.html" rel="alternate"></link><published>2023-11-12T00:00:00-08:00</published><updated>2023-11-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-12:/github-copilot-for-business-faq.html</id><summary type="html">&lt;p&gt;Frequently Asked Questions (FAQ) that have been mushrooming during our evaluation phase. Part 2 - FAQ.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to our GitHub Copilot experimentation and usage FAQ Page! This page provide you with comprehensive answers to common questions raised by our engineers about &lt;a href="https://resources.github.com/copilot-for-business"&gt;GitHub Copilot for Business&lt;/a&gt;, an innovative tool that revolutionizes code development through intelligent suggestions and auto-completion. Whether you are a seasoned engineer or just starting out, this FAQ page aims to enhance your experience with GitHub Copilot and address any inquiries you may have. If you do not find the information you are looking for, feel free to reach out through the provided discussion channel, and we will be happy to assist you.&lt;/p&gt;
&lt;h1&gt;Frequently asked questions (FAQ)&lt;/h1&gt;
&lt;p&gt;Checkout our &lt;a href="/github-copilot-for-business-setup.html"&gt;GitHub Copilot for Business Setup&lt;/a&gt; blog post😊 if you have &lt;strong&gt;setup&lt;/strong&gt; questions.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;1. Can I be logged onto GitHub with my &lt;code&gt;corporate&lt;/code&gt; and &lt;code&gt;personal&lt;/code&gt; GitHub account at the same time?&lt;/h4&gt;
&lt;p&gt;Currently, simultaneous support for two accounts is not available. However, you can switch between accounts by logging out of the current account and logging into the other one.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;2. What is the difference between Copilot for &lt;code&gt;Business&lt;/code&gt; and Copilot for &lt;code&gt;Individuals&lt;/code&gt;?&lt;/h4&gt;
&lt;p&gt;See &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/overview-of-github-copilot/about-github-copilot-for-business#understanding-the-differences-between-copilot-for-business-and-copilot-for-individuals"&gt;Understanding the differences between Copilot for Business and Copilot for Individuals&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;3. Why am I seeing this error in my Copilot log?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;[INFO] [auth] [2023-11-02T14:57:44.993Z] Invalid copilot token: missing token: 403&lt;/code&gt;
&lt;code&gt;[ERROR] [default] [2023-11-02T14:57:45.005Z] Extension activation failed: "User not authorized"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your GitHub Copilot for Business license is not currently valid. If you are using an active directory (AD) group for license management, it is possible that you have been removed from the AD group or were never added in the first place.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;4. Can I use two different browsers that are connected to each of my two different GitHub accounts?&lt;/h4&gt;
&lt;p&gt;According to &lt;a href="https://twitter.com/colindembovsky"&gt;Cσʅιɳ DҽɱႦσʋʂƙყ&lt;/a&gt; you can do one better - "&lt;em&gt;In the browser you can now natively switch accounts: &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/switching-between-accounts#about-switching-between-your-accounts"&gt;Switching between accounts&lt;/a&gt;. For logging in to Copilot, you have to switch accounts if you want to bounce between work and personal accounts.&lt;/em&gt;"&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;5. Any useful troubleshooting links?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/visualstudio/ide/work-with-github-accounts?view=vs-2022#troubleshooting-sign-in-issues"&gt;Troubleshooting sign in issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I trust that this FAQ list is enhancing the value of your GitHub Copilot evaluation. If you have additional frequently asked questions and answers to contribute to this post/list, feel free to leave a comment below.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="github"></category></entry><entry><title>GitHub Copilot for Business Setup</title><link href="https://wsbctechnicalblog.github.io/github-copilot-for-business-setup.html" rel="alternate"></link><published>2023-11-01T00:00:00-07:00</published><updated>2023-11-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-01:/github-copilot-for-business-setup.html</id><summary type="html">&lt;p&gt;Getting started with GitHub Copilot - Part 1: Setup.&lt;/p&gt;</summary><content type="html">&lt;p&gt;To kickstart your journey with the GitHub Copilot for Business product, we first need to configure both the service-side and user-side environments. In this guide, we will walk you through the steps we took and highlight any potential obstacles you may encounter along the way.&lt;/p&gt;
&lt;h2&gt;Useful Terminology&lt;/h2&gt;
&lt;p&gt;Terminology which will make things easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entra ID&lt;/strong&gt; - **New name for Azure Active Directory, for example &lt;code&gt;fabrikam.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal GitHub Account&lt;/strong&gt; - Personal GitHub account, for example &lt;a href="https://github.com/wpschaub"&gt;wpschaub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Account&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;Enterprise Managed Users (EMU)&lt;/a&gt; account \&amp;lt;ID&gt;_\&lt;Shortcode/&gt;, for example &lt;code&gt;wschaub_fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Admin&lt;/strong&gt; - EMU Administrator, for example &lt;code&gt;admin_fabikam&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Enterprise&lt;/strong&gt; - EMU Enterprise name, for example &lt;code&gt;fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Enterprise URL&lt;/strong&gt; - EMU Enterprise link, for example &lt;code&gt;https://github.com/enterprises/fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Shortcode&lt;/strong&gt; - EMU alias, for example https://github.com/enterprises/fabrikam.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Organization&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/about-organizations"&gt;Git Hub Organization&lt;/a&gt;, for example &lt;code&gt;fabrikam_innovation&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Team&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/organizations/organizing-members-into-teams/about-teams"&gt;GitHub Team&lt;/a&gt;, for example &lt;code&gt;GitHub Copilot Evaluation&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an insightful illustration sourced from &lt;a href="HTTPS://GITHUB.COM"&gt;GitHub&lt;/a&gt; that provides a user-friendly overview of Enterprise Managed Users (EMU).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="EMU Overview" src="../images/github-copilot-for-business-setup-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Service-side Setup&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are exclusively configuring your (laptop) environment for GitHub Copilot, please bypass this section and proceed directly to the User-side Setup for streamlined instructions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;GitHub Managed Users (EMU)&lt;/a&gt; is comprehensive, though it is detailed to the extent that you might overlook a crucial step (as we did). Here are the key steps:&lt;/p&gt;
&lt;h4&gt;Setup a &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;GitHub Managed Users (EMU)&lt;/a&gt;.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Chat with your Microsoft / GitHub account manager and request EMU.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Setup the IdP Connection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/aad.fabrikamenterprisemanageduseroidc?tab=Overview"&gt;GitHub EMU Application&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 1: Preparations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Involve a person with AAD Admin Access. &lt;/li&gt;
&lt;li&gt;Create a &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic"&gt;Personal Access Token&lt;/a&gt; for the &lt;code&gt;EMU Admin&lt;/code&gt; account.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 2: Connect GitHub to AAD using OIDC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;EMU Name&lt;/code&gt;, &lt;code&gt;EMU Enterprise URL&lt;/code&gt;, and &lt;code&gt;EMU shortcode&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Follow all steps in the &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/configuring-oidc-for-enterprise-managed-users"&gt;GitHub Docs: Configuring OIDC for Enterprise Managed Users&lt;/a&gt; to setup the connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 3: Configure SCIM Provisioning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;EMU Name&lt;/code&gt;, &lt;code&gt;EMU Enterprise URL&lt;/code&gt;, &lt;code&gt;EMU shortcode&lt;/code&gt;, and your tenant URL, for example &lt;code&gt;https://api.github.com/scim/v2/enterprises/fabrikam&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Follow all the steps in &lt;a href="https://learn.microsoft.com/en-us/entra/identity/saas-apps/github-enterprise-managed-user-oidc-provisioning-tutorial"&gt;Azure Tutorial: Configure GitHub Enterprise Managed User (OIDC) for automatic user provisioning&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 4: Once connected, connect subscription&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;GitHub Organization&lt;/code&gt; and &lt;code&gt;GitHub Team&lt;/code&gt; names.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/enterprise-cloud@latest/billing/managing-the-plan-for-your-github-account/connecting-an-azure-subscription#connecting-your-azure-subscription-to-your-enterprise-account"&gt;Connect an Azure Subscription ID&lt;/a&gt; to pay for Copilot.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-copilot-in-your-enterprise"&gt;Enable Copilot at the Enterprise Level&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In your Organization of choice, &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization"&gt;enable Copilot for the user/team of choice&lt;/a&gt;. In our scenario, we handle GitHub team membership through an Azure Directory (AD) group. Being a member of the AD group automatically grants you membership in the GitHub team, providing access to a GitHub Copilot license.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Single-signon is alive and well. At this point you should be able to login with your &lt;code&gt;EMU Admin&lt;/code&gt; and your &lt;code&gt;corporate&lt;/code&gt; cedentials.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;User-side Setup&lt;/h1&gt;
&lt;p&gt;This is likely the section everyone is eager to dive into – welcoming your Artificial Intelligence (AI) Copilot and embarking on a journey of exploration to reap numerous benefits. These include heightened productivity, enhanced quality, accelerated experimentation and learning, and bolstered engineering confidence.&lt;/p&gt;
&lt;h2&gt;Before you begin!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First you need to logout of GitHub in your default web browser. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This is a crucial step - easy to just ignore it at your own peril!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Disconnect from Virtual Private Network (VPN).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Failure to do so may lead you down the same nightmarish path I experienced last weekend.&lt;/p&gt;
&lt;h2&gt;Visual Studio Enterprise / Professional&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A special &lt;strong&gt;thank you&lt;/strong&gt; to my copilot, &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Martin Lacey&lt;/a&gt;], who completed the setup first, giving us the dos and do nots, as well as the screenshots.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Make sure your IDE is the latest version.&lt;/li&gt;
&lt;li&gt;Open Visual Studio Enterprise and go to &lt;code&gt;Profile &amp;gt; Add Account&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This will open your browser. Use your corporate account, for &lt;code&gt;demo_fabrikam&lt;/code&gt;. Your account name will be different, but follow the same format.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;For fellow engineers at WorkSafeBC, use your primary ID, suffixed with _wsbc. For example XXYYYYY_wsbc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once you enter your account name (no password) and press &lt;code&gt;enter&lt;/code&gt;, you will be directed to the following web page after a short moment.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authenticate" src="../images/github-copilot-for-business-setup-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;Authorize GitHub&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authorize" src="../images/github-copilot-for-business-setup-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Close Visual Studio and restart it.&lt;/li&gt;
&lt;li&gt;Verify that you are now connected.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Verify" src="../images/github-copilot-for-business-setup-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Now it is time to start exploring!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual Studio Code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you sign-out from GitHub on your default browser now, as per &lt;strong&gt;before you begin&lt;/strong&gt;, you can save yourself a lot of pain! 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Open Visual Studio Code (VS Code).&lt;/li&gt;
&lt;li&gt;Ensure you are running at least version 1.83, dated September 2023, by checking for updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Check for updates" src="../images/github-copilot-for-business-setup-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;code&gt;View &amp;gt; Command Palette&lt;/code&gt; or press &lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;GitHub Copilot: Install&lt;/code&gt; and select it.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Install Copilot" src="../images/github-copilot-for-business-setup-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;After installation, log in to GitHub using your EMU Account (GitHub Enterprise Managed Users) such as &lt;code&gt;demo_fabrikam&lt;/code&gt;. Alternatively, you can modify your profile to add the GitHub account.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/github-copilot-for-business-setup-7.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;For fellow engineers at WorkSafeBC, use your primary ID, suffixed with _wsbc. For example XXYYYYY_wsbc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Authorize the access.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authorize" src="../images/github-copilot-for-business-setup-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once authorized, you will see the following view within VS Code.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Check authorization" src="../images/github-copilot-for-business-setup-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Trust the local certs on your machine so that the self signed cert is no longer untrusted. Install a plugin named &lt;strong&gt;win-ca&lt;/strong&gt;, go into extension Settings of the extension, and change the &lt;strong&gt;inject-option&lt;/strong&gt; from &lt;strong&gt;Replace&lt;/strong&gt; to &lt;strong&gt;Append&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Visual Studio Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you are ready to explore the walkthroughs and get started!  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Welcome" src="../images/github-copilot-for-business-setup-10.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Have fun chatting with your AI Pair Engineer Copilot and watch this space for follow-up posts by my colleagues evaluating their Copilot. &lt;/p&gt;
&lt;p&gt;Also checkout our &lt;a href="/github-copilot-for-business-faq.html"&gt;GitHub Copilot for Business FAQ&lt;/a&gt; blog post😊.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="github"></category></entry><entry><title>Embedding a Quality-Driven Engineering Mindset in Our DNA</title><link href="https://wsbctechnicalblog.github.io/embedding-a-quality-driven-engineering-mindset-in-our-dna.html" rel="alternate"></link><published>2023-10-02T00:00:00-07:00</published><updated>2023-10-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-10-02:/embedding-a-quality-driven-engineering-mindset-in-our-dna.html</id><summary type="html">&lt;p&gt;An engineering mindset that prioritizes quality is crucial for producing robust and reliable solutions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having a &lt;strong&gt;quality-first&lt;/strong&gt; and &lt;strong&gt;quality-driven engineering&lt;/strong&gt; mindset ensures that &lt;strong&gt;QUALITY&lt;/strong&gt; is not treated as an afterthought, but rather ingrained in the design, development, and operational processes from the outset. It encourages proactive measures such as thorough testing, code reviews, experimentation, and an appetite for guiding guardrails, ultimately leading to a higher standard of work. It promotes a culture of excellence and continuous improvement within the engineering team - and most importantly, delighted &lt;strong&gt;end-users&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Choosing the alternative means embracing a lifestyle of constant &lt;strong&gt;context-switching&lt;/strong&gt;, 2 AM incident calls, and a perpetually &lt;strong&gt;reactive&lt;/strong&gt; approach. This path leads to frustration, burnout, and increased operational costs. Engineers will find themselves caught in the continuous hamster wheel, struggling to balance firefighting with delivering value. The result? Unhappy end-users, potentially tarnishing your reputation in the long run.&lt;/p&gt;
&lt;p&gt;Fortunately we all have a choice.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here are several recommended strategies that you should consider exploring if you choose to adopt a QUALITY mindset.&lt;/p&gt;
&lt;h1&gt;Technical Debt rusts Quality!&lt;/h1&gt;
&lt;p&gt;The accrual of technical debt can significantly degrade the overall quality of a system over time. It is essential to proactively manage and address technical debt to maintain a high level of quality in software development. In other words, pro-actively avoid the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inconsistent or overly complicated code&lt;/strong&gt; - code should be recognisable and readable by all engineers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design shortcuts&lt;/strong&gt; - align with your architecture, operations, and development patterns and guardrails. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skipped or insufficient testing&lt;/strong&gt; - if you are strapped into your seat, atop a Falcon Heavy rocket using your software, you should feel comfortable to click the launch button.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outdated or end-of-life products&lt;/strong&gt; - proactively monitor and deprecate outdated dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incomplete or no documentation&lt;/strong&gt; - code should be self-explanatory, complemented by documentation that makes it easy to get the context,  overview, and flow. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop supporting the notion of "quick experiment", "proof-of-concept", or "throw-away" code. I have watched too many instances of this code ending up in production solutions and becoming the weakest link. Use common guidelines, guardrails, and peer-review workflows (such as pull request with policies) to avoid your solution starting to rust and its quality to deteriorate over time.&lt;/p&gt;
&lt;h1&gt;Think team!&lt;/h1&gt;
&lt;p&gt;We are accountable for QUALITY as a team and as a group of teams - in other words, we "are one" when it comes to quality and taking responsibility for how we design, build, test, and maintain the solutions we build. As &lt;strong&gt;software development engineer&lt;/strong&gt; our specialty is "developing code" and as &lt;strong&gt;quality assurance engineer&lt;/strong&gt; our specialty is "testing code”. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, this does not imply that developers are only tasked with writing code. They also shoulder responsibilities such as creating unit tests, executing test automation, performing code vulnerability scans, and in some cases, conducting manual tests to enhance the overall quality of our work. As engineers, we hold a stewardship role in our domain of expertise, enforcing associated guardrails, and mentoring others within our team, group, organization, or community. But, when it comes to quality, it is a collective team responsibility!&lt;/p&gt;
&lt;p&gt;Gone are the days of simply tossing tasks over the wall to different roles like content editors, developers, testers, admins, and so forth. The only boundary we acknowledge are the faintly dotted lines that delineate teams and groups of teams within our organization. Beyond that, we operate and own QUALITY as one unified entity.&lt;/p&gt;
&lt;h1&gt;Think product team!&lt;/h1&gt;
&lt;p&gt;When you operate with a healthy &lt;a href="https://www.donovanbrown.com/post/what-is-devopss"&gt;DevOps&lt;/a&gt; mindset, you will also be familiar with the "product mindset", which implies that we, as a team, are accountable for our solution from ideation to deprecation. Until we switch off the solution lights, we own the accountability for QUALITY!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Love a comment from my colleague: "&lt;em&gt;Pride, feeling like you've created and contributed to something you are proud of - that is the inner spirit we need to kindle.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Switch to &lt;a href="/shift-from-project-to-product-thinking.html"&gt;Shift from project to product thinking&lt;/a&gt; for more insight into the product mindset.&lt;/p&gt;
&lt;p&gt;Alternatively as per GPT: "&lt;em&gt;Thinking like a product team encourages a mindset that prioritizes the value delivered to end-users. This perspective helps ensure that the software being developed is aligned with the needs and expectations of the users, leading to more successful and impactful products. It also fosters a sense of ownership and &lt;strong&gt;accountability for the quality&lt;/strong&gt; and functionality of the software, which ultimately leads to higher-quality solutions. Thinking like a product team also encourages collaboration, innovation, and a focus on continuous improvement, which are all essential elements for building successful software products.&lt;/em&gt;"&lt;/p&gt;
&lt;h1&gt;Embrace guardrails for a safer journey&lt;/h1&gt;
&lt;p&gt;Guardrails are important to keep us within a safe zone to cross a bridge or in software engineering to create a safety net to promote consistency, standardization, and security. They allow us to thrive, create, and innovate in a structured and secure environment, while mitigating risks and ensuring long-term quality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Outcomes of guardrails, all of which support &lt;strong&gt;quality&lt;/strong&gt; include things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Risk Mitigation&lt;/strong&gt;, such as security vulnerabilities, system failures, and end-of life issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency and Standardization&lt;/strong&gt; making solutions easier to maintain and troubleshoot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compliance&lt;/strong&gt;, such as industry standards and organizational policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt; fostered when everyone has an understanding of what and how we are building our solution.
Scalability: Guardrails facilitate scaling efforts by ensuring that new code and practices align with established standards. This makes it easier to onboard new team members and integrate new features or services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confidence&lt;/strong&gt; created when everyone follows set of guidelines to follow, enciuraging creative problem-solving and innovation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost-Efficiency&lt;/strong&gt; by avoiding previous mistakes, saving time, and money.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Forward-thinking&lt;/strong&gt; promoted by promoting practices that are known, proven, and sustainable. This benefits the maintenance and evolution of solutions over time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid rigid and monolithic architectures&lt;/strong&gt; which impede the system's adaptability and evolution, especially in today's rapidly changing technological landscape. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work smarter and more efficiently&lt;/strong&gt; to optimise and capitalise on down time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more examples, but I need to touch on my 80:20 rule and then stop venting.&lt;/p&gt;
&lt;h1&gt;80:20 planning rule&lt;/h1&gt;
&lt;p&gt;Lastly, it is important to discuss how we plan and allocate our time. If we aim to fill every minute of our schedule, we are setting ourselves up to work beyond our capacity. This leaves us scrambling to address unexpected issues, bugs, and the lingering technical debt that tends to resurface repeatedly. I know it, you know it - it is time to smarter and more efficiently. We must move away from burnout and start embracing a healthier work:life balance.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I encourage my team to allocate 80% of our capacity for delivering business value and addressing bug fixes. &lt;/p&gt;
&lt;p&gt;The remaining 20% is set aside for adapting to architecture changes, handling unexpected events, supporting disruptions, attending meetings, fostering innovation, engaging in continuous learning, and, most importantly, consistently reducing our technical debt. This approach empowers us to maintain the highest standard of quality in our work and a healthy work:life balance.&lt;/p&gt;
&lt;p&gt;If all else fails, learn to say "&lt;strong&gt;NO&lt;/strong&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In my opinion, being an "engineer" entails embodying traits like forward-thinking, accountability, a commitment to quality, and an unwavering passion for technology. These qualities should be embedded in the DNA of my engineering identity.&lt;/p&gt;
&lt;p&gt;How are you fostering an Engineering Mindset for Quality?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="eliminate-waste"></category><category term="quality"></category></entry><entry><title>Let us Elevate Our CI/IaC/CD Azure Pipeline Flow Together!</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-iac-flow-decision.html" rel="alternate"></link><published>2023-09-19T00:00:00-07:00</published><updated>2023-09-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-09-19:/azure-pipeline-iac-flow-decision.html</id><summary type="html">&lt;p&gt;Streamline Your Process: Isolating the Provision and Deployment Steps for Efficiency?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuing from our previous guide on &lt;a href="/azure-pipeline-yaml-refactor-parameter-objects.html"&gt;Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management&lt;/a&gt;, we have now successfully wrapped up our latest Minimally Viable Product (MVP) 2. This milestone encompasses the implementation of infrastructure-as-code provisioning logic, illustrated below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Pipeline Run" src="../images/azure-pipeline-iac-flow-decision-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a BINGO moment!&lt;/p&gt;
&lt;h1&gt;Application-type recipes&lt;/h1&gt;
&lt;p&gt;Before I address my question, let me encapsulate the fundamental concept of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;WorkSafeBC Common Engineering v2 Blueprint&lt;/a&gt;  pipelines:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a team embarks on creating a solution, they simply choose the desired application type from our user-friendly self-service menu. After confirming a few essential details, they can initiate the process with a single click.
Our self-service chef swiftly generates an Azure Repository, adhering to our established naming conventions for consistency.&lt;/li&gt;
&lt;li&gt;A sample of the selected application type is promptly uploaded to the repository, including essential common libraries like logging, ensuring standardized practices.&lt;/li&gt;
&lt;li&gt;An Azure Pipeline is then configured, seamlessly integrated into the repository, and automatically triggered to complete the CI-only phase, ensuring an automated workflow and development environment.&lt;/li&gt;
&lt;li&gt;As the Azure Pipeline is queued, it undergoes dynamic assembly using the application-type v2 blueprint templates, infusing a touch of magic while maintaining steadfast consistency.&lt;/li&gt;
&lt;li&gt;Furthermore, a variable configuration template is introduced, imparting solution-specific variables to be seamlessly integrated as parameters - think of it as an all-YAML braai (barbeque), blending elements seamlessly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This streamlined process exemplifies our commitment to efficiency, standardization, and automation in every facet of our pipeline workflows."&lt;/p&gt;
&lt;h1&gt;So what is our MVP 2 all about?&lt;/h1&gt;
&lt;p&gt;Let us kick things off with MVP1, where our primary objective was to deliver a parameterized YAML-based template that seamlessly integrates into step 4 of the process outlined above. Our main concern was not the specific provisioning method, but rather ensuring that it adheres to YAML-based standards, is well-parameterized, and eliminates any wasteful hard-coding.&lt;/p&gt;
&lt;p&gt;In MVP2, we successfully showcased the injection of this template into our v2 blueprints, with a specific focus on the development environment. Following some hours of dedicated effort in refining and fine-tuning MVP1, we proudly unveiled our inaugural CI+IaC+CD pipeline - the BINGO moment.&lt;/p&gt;
&lt;h1&gt;Back to the question: Segregate or Aggregate IaC from CD?&lt;/h1&gt;
&lt;p&gt;I will present two workflows: a segregated and an aggregated pipeline flow. The steps 1-5 remain consistent:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The pipeline is queued.&lt;/li&gt;
&lt;li&gt;The solution-specific variable configuration template is introduced. We deliberately integrated the IaC and CD configurations into a single, unified template. This consolidation ensures that many components, which are commonly shared and reused by both IaC and CD, are seamlessly pulled from the config repository.&lt;/li&gt;
&lt;li&gt;The infrastructure-as-code (IaC) template tailored to the application type is fetched from the IaC repository and seamlessly integrated into the pipeline.&lt;/li&gt;
&lt;li&gt;The build/CI (continuous integration) and release/CD (continuous delivery) templates specific to the application type are sourced from the templates.v2 repository and seamlessly integrated into the pipeline.&lt;/li&gt;
&lt;li&gt;The CI Flow initiates the application-type setup, compiles the solution, conducts thorough testing, and performs scans for vulnerabilities, ensuring adherence to high-quality coding practices.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GEM 1&lt;/strong&gt; 
The configuration, infrastructure-as-code, and pipeline-as-code repositories are accessible by all engineers - transparency.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GEM 2&lt;/strong&gt;
The repositories and associated policies allows our engineers to recommend configuration changes through a pull request, and our platform and enabling engineers (stewards) to validate the configuration changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Step 6 is the focal point of this post, where I introduce two distinct flow patterns, representing the core topic of discussion.&lt;/p&gt;
&lt;h3&gt;Segregated Flow&lt;/h3&gt;
&lt;p&gt;The infrastructure-as-code (IaC) and continuous delivery (CD) steps operate independently and are overseen by our application-type *control.yml template. Essentially, this template incorporates the IaC blueprint for every environment we intend to provision, ensuring all environments are set up before initiating the CD process&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Flow A" src="../images/azure-pipeline-iac-flow-decision-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IaC and CD are logically and visually isolated from each other.&lt;/li&gt;
&lt;li&gt;IaC and CD Azure Pipelines environments can be defined in separate environments. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The visual representation of the runtime pipeline flow will be twice as long.&lt;/li&gt;
&lt;li&gt;The logic for determining which stages to run and which to ignore will be duplicated in both the &lt;em&gt;control.yml and &lt;/em&gt;CD.yml templates. This introduces potential for duplication and drift&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Aggregated Flow&lt;/h3&gt;
&lt;p&gt;The infrastructure-as-code (IaC) and continuous delivery (CD) steps operate as one and are overseen by our application-type *CD.yml template. Essentially, we provision the environment, then deploy the solution to the environment in the same deployment job context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Flow B" src="../images/azure-pipeline-iac-flow-decision-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The visual representation of the runtime pipeline flow will remain consistent.&lt;/li&gt;
&lt;li&gt;The logic for determining which stages to run and which to ignore will not be redundant.&lt;/li&gt;
&lt;li&gt;Azure Pipeline environments are recycled, minimizing duplication and streamlining administration efforts.&lt;/li&gt;
&lt;li&gt;The application-type *control.yml template maintains its simplicity.&lt;/li&gt;
&lt;li&gt;The application-type *CD.yml only requires one additional statement per environment: include IaC template.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IaC and CD are not logically and visually isolated from each other. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is likely you have gathered that I am inclined towards the aggregated flow. What am I missing?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Which of the two flow patterns do you favor, and what are your reasons?&lt;/strong&gt; Your input and candid feedback are highly valuable in shaping a CI/IaC/CD v2 blueprint grounded in the highest engineering standards.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Software Engineering Standardization</title><link href="https://wsbctechnicalblog.github.io/software-engineering-standardization.html" rel="alternate"></link><published>2023-09-17T00:00:00-07:00</published><updated>2023-09-17T00:00:00-07:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-09-17:/software-engineering-standardization.html</id><summary type="html">&lt;p&gt;Software Engineering Standardization&lt;/p&gt;</summary><content type="html">&lt;p&gt;Consistent and standardized software engineering practices refer to the establishment and adherence to a set of rules, guidelines, and processes within the field of software engineering, with the goal of ensuring reliability, efficiency, and quality in the development and maintenance of systems or products. These practices are particularly important in software development, as they can have a profound impact on the entire software development lifecycle (SDLC) and its various aspects, including automation, DevOps (Donovan Brown | What is DevOps?), responsible AI integration, design patterns, architecture patterns, infrastructure patterns, and concurrency management.&lt;br&gt;
Each of these aspects are broad in nature, and when standardized can harmonized and interoperate seamlessly and effortlessly.  Let's explore each of these concepts in more detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Consistent and standardized engineering practices often involve the automation of repetitive and error-prone tasks in the software development process. This includes automating build processes, testing, deployment, and infrastructure provisioning throughout our environment ecosystem. Automation helps reduce human error, accelerates development cycles, and ensures that development, testing, and production environments are consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;: DevOps is a set of mindset that aims to bridge the gap between the various groups and teams involved in the software development life cycle (SDLC) to promoting collaboration, automation, and continuous integration and delivery (CI/CD). Consistent and standardized engineering practices align with DevOps by establishing clear processes and automation pipelines, ensuring that software changes can be efficiently and reliably deployed into production environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embracing Artificial Intelligence (AI) Responsibly&lt;/strong&gt;: Responsible AI integration involves ethical considerations, fairness, transparency, and accountability in AI-driven systems. Consistent and standardized engineering practices include guidelines for ethically collecting and using data, developing AI models, and implementing AI algorithms in a way that respects privacy and avoids biases, are reliable, safe to use, respect laws and are secure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Patterns&lt;/strong&gt;: Design, Architecture and Infrastructure patterns are proven solutions to common software design problems. Consistent and standardized engineering practices encourage the use of patterns at each layer to create maintainable, scalable, and understandable software and the infrastructure used to create, validate, and deploy it for end-user delight. By following established patterns every empowered DevOps Engineer can build software that is easier to maintain and extend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concurrency Management&lt;/strong&gt;: In software development, concurrency refers to multiple tasks or processes running simultaneously. Consistent and standardized engineering practices include strategies and patterns for managing concurrency effectively, such as using locks, threads, or asynchronous programming. This ensures that applications can handle multiple simultaneous requests or tasks without conflicts or performance bottlenecks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enabling Sustainability and Maintenance&lt;/strong&gt;: Engineering practices that are consistent and standardized also consider the long-term sustainability and maintainability of software applications. This involves using clean code practices, thorough documentation, and version control systems to facilitate ongoing development and maintenance. It ensures that applications can evolve and adapt to changing requirements without becoming overly complex or fragile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Naming Conventions as the Glue&lt;/strong&gt;: Naming conventions are a set of rules and guidelines for naming variables, functions, classes, files, and other elements in a software project, as discussed in one of my previous blogs &lt;a href="https://wsbctechnicalblog.github.io/engineering-practice-naming-conventions.html"&gt;Engineering Practice Naming Conventions&lt;/a&gt;. They act as the glue that connects different parts of the codebase and ensures that developers can easily understand and work with the code. Naming conventions play a vital role in consistent and standardized engineering practices by promoting code readability, reducing ambiguity, enhancing maintainability, and facilitating integration within a software project. They act as the glue that binds different components of the codebase together, making it easier for everyone to work cohesively and maintain high-quality deliverables for the delight of end-users. To quote a colleague, “Consistent naming convention makes it easier for PEOPLE getting up at 2AM to find the root cause of an incident, working backwards down to the codebase.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, consistent and standardized engineering practices are essential in software development to promote efficiency, reliability, and quality across various aspects of the development process. These practices align with automation, DevOps, responsible AI integration, design patterns, concurrency management, and naming conventions to enable the development of software applications that can be sustained and maintained effectively while handling high levels of application concurrency. This approach ultimately leads to better software quality, shorter development cycles, and improved overall system performance.&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="standards"></category><category term="technical-excellence"></category></entry><entry><title>Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-yaml-refactor-parameter-objects.html" rel="alternate"></link><published>2023-08-23T00:00:00-07:00</published><updated>2023-08-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-08-23:/azure-pipeline-yaml-refactor-parameter-objects.html</id><summary type="html">&lt;p&gt;Seizing the chance to enhance and optimize our CI/CD/IaC pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I understand that you may have been delving into our open-source endeavor, which revolves around Azure Pipelines for continuous integration and continuous delivery, employing YAML-based methodologies. If this initiative has not caught your attention yet, I highly recommend acquainting yourself with our  source project, focused on YAML-based continuous integratuion and continuous delivery Azure Pipelines. If not, you better explore our open-source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;WorkSafeBC Common Engineering&lt;/a&gt; project as a starting point.&lt;/p&gt;
&lt;p&gt;For those who are new to this concept, I have compiled a selection of blog links that you might find valuable for a comprehensive understanding:
- &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt;
- &lt;a href="https://wsbctechnicalblog.github.io/azure-devops-pipeline-oss-v2-1-flow.html"&gt;Azure DevOps Pipeline OSS v2.1 Flow&lt;/a&gt;
- &lt;a href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;OK, why are we here?&lt;/h1&gt;
&lt;p&gt;Indeed, we are currently in the process of integrating infrastructure-as-code (IaC) into our v2 blueprints. This advancement entails the inclusion of a substantial number of parameters within our variable template files. As a consequence, a series of sleepless nights has ensued for our team. To provide a visual depiction, please refer to the illustration below, where the newly added components are represented in pink.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC" src="../images/azure-pipeline-yaml-refactor-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we have a quick look at the basic &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/commit/eee9e2e895e8869e1f4fc8e7b55b1973b469351f#diff-34a1ea16e45e933dd3f78d78dd2752204483355a45237fb33d7a31b1bb51e383"&gt;101 sample variable template&lt;/a&gt; you will notice that we have a &lt;strong&gt;FLAT&lt;/strong&gt; configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;variables:&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# Blueprint: __101__&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# If you are not going to use all stages&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; as below&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; you can suppress them by simply commenting out&lt;/span&gt;
&lt;span class="c"&gt;# or removing their entire configuration section&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# DEVelopment Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Development&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# System Test Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;SystemTest&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# Security Review Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  securityReviewStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# Staging Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Staging&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# PRODuction Test Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Production&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result, each time a new parameter is introduced, it necessitates an update to the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/eee9e2e895e8869e1f4fc8e7b55b1973b469351f/blueprints/__101__/azure-pipeline-__101__-control.yml"&gt;control template&lt;/a&gt; to incorporate and transmit the extra parameter. This process has proven to be exasperating, labor-intensive, prone to errors, and ultimately, not a sustainable approach. It is far from straightforward and, therefore, presents a significant challenge and &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Exploring options&lt;/h1&gt;
&lt;h3&gt;YAML update August 13, 2013&lt;/h3&gt;
&lt;p&gt;Over the long weekend, I enjoyed a delightful blend of relaxation and productivity. In between moments of unwinding with videos and tending to our adorable 10-week-old Dachshund puppy, I found myself immersed in the world of re-coding our &lt;code&gt;__101__&lt;/code&gt; blueprint templates. Little did I know that this seemingly innocent endeavor would lead me on a tumultuous journey of debugging challenges.&lt;/p&gt;
&lt;p&gt;Azure DevOps YAML, unfortunately, proved to be an intricate maze to navigate. One perplexing discovery was that it steadfastly refuses to accommodate variables of the object type or arrays of objects. The reasoning behind this limitation remains elusive, but take my word for it – this kind of support is conspicuously absent and an area in the binary space that I will defer for another rainy day.&lt;/p&gt;
&lt;p&gt;This experience has taught me that even in the realm of coding, surprises abound. Despite the setbacks, I'm determined to continue refining our blueprint templates and conquering the intricacies of Azure DevOps YAML. Who knows what other insights and discoveries await as I press on with determination?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 1&lt;/strong&gt; - Defining YAML objects or array of objects as variables in an Azure Pipeline variable template is a no-go! You can do it with parameters, not variables.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;YAML update August 14, 2023&lt;/h3&gt;
&lt;p&gt;Following yet another early morning coding expedition and a debugging session that spanned the lunchtime hours, I made a pivotal decision. I opted to roll back our variable template to its simpler form, opting for straightforward variables. To address the array of objects within objects, I ingeniously integrated them as parameters within the control template. While this solution may not epitomize perfection, it undoubtedly provided a remedy for the crash debacle that had marred the weekend.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 2&lt;/strong&gt; - Simplify in small steps, not in a big bang. Otherwise you may embrace lots of debugging and unwinding of code changes.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moreover, the ripple effect of this adjustment extended its benefits to the Continuous Deployment (CD) stage templates. Looking ahead, this approach promises to streamline the Infrastructure as Code (IaC) stage templates as well. These incremental strides within the realm of YAML Pipelines might seem small in scale, yet they represent a significant leap forward for our blueprint endeavors.&lt;/p&gt;
&lt;p&gt;Initiating the submission of a draft pull request, I now find myself in a state of anticipation, eagerly awaiting the candid feedback of my colleagues. The outcome holds the promise of insights that will undoubtedly enrich the project and refine its trajectory q;-)&lt;/p&gt;
&lt;h3&gt;YAML update August 18, 2023&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Be sure to follow these steps before embarking on collaborative pull requests: stage your latest changes, commit them, and push them to the repository. Neglecting to push your changes can lead to confusion and inefficiencies, especially if the absence of a push results in non-sequential or illogical changes.
&lt;/p&gt;
&lt;p&gt;&lt;img alt="IaC" src="../images/azure-pipeline-yaml-refactor-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have received the 'thumbs up' from all of our stakeholders, except for Daniel, who is currently enjoying a well-deserved vacation. This marks the successful completion of the first phase of my simplification journey. Moving forward, the next steps are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publish this post.&lt;/li&gt;
&lt;li&gt;Initiate a Pull Request (PR) for open-source synchronization - Phase 1.&lt;/li&gt;
&lt;li&gt;Commence the process of updating our existing blueprints to align with the changes.&lt;/li&gt;
&lt;li&gt;Proceed with the submission of a Pull Request (PR) for open-source synchronization - Phase 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is the pull request (PR) that matches the internal PR I submitted for REVIEW: &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/22"&gt;Synchronize 101 simplifications from in-house&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Revision of the proposed solution&lt;/h1&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;config&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Regrettably, the concept of using variables to define objects and arrays of objects had to be abandoned as discussed. Instead, I have reverted back to the previous flat structure. Additionally, I have incorporated a state variable in place of the former name stage. I will delve into this further in our upcoming conversation.&lt;/p&gt;
&lt;p&gt;Here is an extract, with the &lt;strong&gt;&lt;strong&gt;101&lt;/strong&gt;&lt;/strong&gt; sample configuration data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# -----------------------------------------------
# Development Stage
- name:  developmentStageActive
  value: true
- name:  developmentStageEnvName
  value: &amp;#39;&amp;lt;tbd&amp;gt;&amp;#39;
- name:  developmentStageVmImage
  value: &amp;#39;&amp;lt;tbd&amp;gt;&amp;#39;
- name:  developmentStageTestData
  value: &amp;#39;Development Stage Test Data&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;control&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;The latest enhancement involves the creation of an array comprising stage configuration objects and supplementary parameters. Specifically, each stage environment now possesses its own dedicated object. To illustrate, I have provided an excerpt from the development stage below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageActive&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;nameEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;nameVM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageTestData&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# TODO pass your configuration variables here&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This new approach aims to streamline stage management and configuration. I am eager to explore the finer details in our upcoming discussions.&lt;/p&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;cd&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Gone are the days of relying solely on a growing list of parameters and stage names to orchestrate our deployment pipeline. Instead, we have adopted a more dynamic and adaptable strategy by focusing on the &lt;code&gt;*.config.active&lt;/code&gt; value. This value serves as the driving force behind the inclusion or exclusion of stages from the pipeline. This approach provides a remarkable level of flexibility, enabling us to make adjustments without the fear of brittleness that stage names might introduce.&lt;/p&gt;
&lt;p&gt;Let us explore this transformation through a tangible example. Below, you will find an excerpt showcasing the new approach in action, specifically in the context of the development and system test stages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parameters:
- name:     stage
  type:     object

stages:

# -----------------------------------------------------------------
# DEVELOPMENT STAGE
# -----------------------------------------------------------------

- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
  - template: /blueprints/__101__/azure-pipeline-__101__-cd-stage.yml@CeBlueprints
    parameters:
      name:                         &amp;#39;Development&amp;#39;
      displayName:                  &amp;#39;Development (DV)&amp;#39;
      config:                       &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
      dependsOn:
      - ContinuousIntegration

# -----------------------------------------------------------------
# SYSTEM TEST STAGE
# ------------------------------------------------------------------
- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
  - template: /blueprints/__101__/azure-pipeline-__101__-cd-stage.yml@CeBlueprints
    parameters:
      name:                         &amp;#39;SystemTest&amp;#39;
      displayName:                  &amp;#39;System Test (SY)&amp;#39;
      config:                       &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
      dependsOn:
      - ContinuousIntegration
      - &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
        - Development
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet underscores how the cd template's revamped structure empowers us to effortlessly manage stages, pass configuration data, and adapt to evolving deployment needs.&lt;/p&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;cd-stage&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Lastly, the culmination of our efforts leads to the seamless flow of configuration and dependency objects into the &lt;code&gt;*cd-stage**.yml&lt;/code&gt; deployment stage template, an evolution that not only facilitates innovation but also encourages extension. This pivotal enhancement brings forth a user experience that is notably simplified and intuitive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setSemVersion.semVersion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameVM&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameEnv&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;runOnce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In comparison to managing an expanding list of parameters, working with a comprehensive object empowers us to navigate complexities effortlessly. This shift provides a fertile ground for creativity and expansion, enabling us to embrace new possibilities and adapt to evolving deployment landscapes with remarkable ease.&lt;/p&gt;
&lt;h1&gt;What is the impact on our open-source project?&lt;/h1&gt;
&lt;p&gt;In line with our commitment to progress and collaboration, we are excited to announce that the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2
&lt;/a&gt; open-source project is about to undergo a significant update. This update will reflect the advancements we have made and the enhancements we are introducing to our in-house blueprints.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - this is potentially a breaking change if you are relying on the default blueprints in the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering"&gt;
WorkSafeBC Common Engineering&lt;/a&gt; project. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;As we embrace this enhanced approach, we look forward to a future where deployment processes are not only efficient but also versatile, setting the stage for continuous innovation with our continuous integration, delivery, and provisioning pipelines.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Why do we care about infrastructure-as-code (IaC)?</title><link href="https://wsbctechnicalblog.github.io/why-we-care-about-iac.html" rel="alternate"></link><published>2023-08-02T00:00:00-07:00</published><updated>2023-08-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-08-02:/why-we-care-about-iac.html</id><summary type="html">&lt;p&gt;Our vision is *aC, but to avoid boiling the ocean, we will focus on an overview on IaC today.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Microsoft Azure has a great definition of &lt;a href="https://learn.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code"&gt;infrastructure as code (IaC)&lt;/a&gt; - "&lt;em&gt;Infrastructure as code (IaC) uses DevOps methodology and versioning with a descriptive model to define and deploy infrastructure, such as networks, virtual machines, load balancers, and connection topologies. Just as the same source code always generates the same binary, an IaC model generates the same environment every time it deploys.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;As highlighted in the above definition, one of the main goals of IaC is to bring the benefits of software development practices, such as version control, code reuse, and automation, to the infrastructure provisioning and management process. It makes it &lt;strong&gt;easier&lt;/strong&gt; to maintain, collaborate, and &lt;strong&gt;scale&lt;/strong&gt; infrastructure resources &lt;strong&gt;efficiently&lt;/strong&gt; and &lt;strong&gt;consistently&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Have you ever found yourself in a situation where you needed to manually provision infrastructure identical to what was set up 6 months ago by an engineer? Perhaps, in an emergency scenario like disaster recovery? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Wishing for IaC" src="../images/why-we-care-about-iac-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have, then you are likely familiar with the frustrating experience of encountering &lt;strong&gt;inconsistent&lt;/strong&gt; results and the significant &lt;strong&gt;time wasted&lt;/strong&gt; on searching for documentation, consulting subject matter experts, and tediously executing repetitive tasks. &lt;/p&gt;
&lt;p&gt;To streamline the process and avoid such challenges, embracing IaC can be a game-changer. Our digital friends can swiftly recreate infrastructure consistently, quickly, and repetitvely, especially during critical situations like disaster recovery or disruptive context switching.&lt;/p&gt;
&lt;p&gt;As I look back, I fondly remember hosting a presentation at the &lt;a href="https:/www.devconf.co.za"&gt;devconf&lt;/a&gt; conference in South Africa back in 2018. The topic of the talk was &lt;a href="https://www.slideshare.net/VSTSCommunityMicroso/moving-75000-microsofties-to-devops-with-visual-studio-team-services"&gt;Moving 75,000 Microsofties to DevOps with Visual Studio Team Services&lt;/a&gt;, and it was an incredible opportunity to share the valuable insights and lessons we had learned.&lt;/p&gt;
&lt;p&gt;During the presentation, there was one particular slide that stood out, capturing the essence of IaC.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Flash of the past" src="../images/why-we-care-about-iac-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast forwarding to 2023, it becomes evident that Infrastructure as Code (IaC) is far from a novel concept!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why is IaC important to us?&lt;/h1&gt;
&lt;p&gt;Why is our Enterprise DevOps (EDO) group exploring Infrastructure as Code (IaC)? The answer is clear - we aim to streamline the provisioning and maintenance of our infrastructure, enhancing factors like consistency, standardization, maintainability, and security. By embracing IaC, we seek to make these processes significantly easier and more efficient for our team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;My personal vision&lt;/strong&gt;: "&lt;em&gt;Streamline our software development lifecycle and make it so simple for engineers to start a new project the right way, that they no longer worry about reinventing the hammer.&lt;/em&gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;How are we planning to integrate IaC into our Pipeline-as-code (PaC)?&lt;/h1&gt;
&lt;p&gt;We are on a journey to innovate our &lt;a href="/yaml-pipelines-part1.html"&gt;Pipeline Journey&lt;/a&gt; by actively exploring fresh ideas. Our primary focus is to consistently enhance our continuous integration (CI) and continuous delivery (CD) pipelines, integrating Infrastructure as Code (IaC) into the CD pipeline, as illustrated below. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="v2.1 CI/CD/IaC" src="../images/why-we-care-about-iac-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This strategic move is set to bring greater efficiency and effectiveness to our processes, ultimately advancing our development and delivery capabilities.&lt;/p&gt;
&lt;p&gt;Watch this space for updates.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thoughts and feedback from your IaC experience?&lt;/p&gt;</content><category term="Posts"></category><category term="azure"></category><category term="azure-devops"></category><category term="pipelines"></category></entry><entry><title>Innovation podcast with WorkSafeBC and Microsoft</title><link href="https://wsbctechnicalblog.github.io/innovation-podcast-wsbc-msft.html" rel="alternate"></link><published>2023-07-31T00:00:00-07:00</published><updated>2023-07-31T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-07-31:/innovation-podcast-wsbc-msft.html</id><summary type="html">&lt;p&gt;An informal conversation around innovation with Bill, Omar, Sebastian, Sarav, and Todd&lt;/p&gt;</summary><content type="html">&lt;p&gt;Introducing the captivating "TechTalks: Exploring the Future" podcast by WorkSafeBC(WSBC) – where innovation meets leadership, technology, and human insight! Join our esteemed panel of seasoned technologists and visionary business leaders as they delve into the fascinating intersection of technology, work, and people: &lt;a href="https://www.linkedin.com/in/bbaldasti/"&gt;Bill Baldasi&lt;/a&gt; - National Leader, Azure Digital and Application Innovation (Microsoft), &lt;a href="https://www.linkedin.com/in/omar-naser-50bb9b266/"&gt;Omar Naser&lt;/a&gt; - Product Lead, Innovation Services (WSBC), Sarav Shan - Product Owner, Innovation Services, &lt;a href="https://www.linkedin.com/in/slecalvez/"&gt;Sebastian Le Calvez&lt;/a&gt; - National Director,  App Innovation, Customer Success Leader (Microsoft), and &lt;a href="https://www.linkedin.com/in/todd-yule-4679646/"&gt;Todd Yule&lt;/a&gt; - Head of Innovation Services and CDO (WSBC).&lt;/p&gt;
&lt;p&gt;As a passionate enthusiast in leadership, business, and technology, you will find this podcast a treasure trove of knowledge and inspiration. &lt;/p&gt;
&lt;p&gt;In this episode, we team up with industry giants Microsoft to embark on an exciting journey through the annals of tech history and explore cutting-edge innovations that shape our future. Brace yourself for a deep dive into captivating topics from the ever-evolving tech world, sprinkled with insightful discussions and thought-provoking insights from the brightest minds in the field.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/e_OwVcZNRcg"&gt;&lt;img alt="Podcast" src="../images/innovation-podcast-wsbc-msft-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Topics&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why all Developers should be using co-pilot&lt;/li&gt;
&lt;li&gt;How to build Artificial Intelligence (AI) co-pilots for your own apps&lt;/li&gt;
&lt;li&gt;Learn about responsible AI&lt;/li&gt;
&lt;li&gt;Recommended Microsoft certifications for AI&lt;/li&gt;
&lt;li&gt;What are the skills required for AI&lt;/li&gt;
&lt;li&gt;Concerns about privacy, security as it relates to AI&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Click &lt;a href="https://youtu.be/e_OwVcZNRcg"&gt;here&lt;/a&gt; to listen to the conversation.&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="ai"></category></entry><entry><title>Water Cooler Talk - Why Azure Devops is not a silver bullet</title><link href="https://wsbctechnicalblog.github.io/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet.html" rel="alternate"></link><published>2023-07-23T00:00:00-07:00</published><updated>2023-07-23T00:00:00-07:00</updated><author><name>&lt;Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-07-23:/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet.html</id><summary type="html">&lt;p&gt;Yes, I LOVE Azure DevOps, but it is not the answer to the universe.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="AzdO the silver bullet" src="../images/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; is a software as a service (SaaS) product that &lt;strong&gt;empowers&lt;/strong&gt; you to plan smarter, collaborate better, and ship faster. Integrated with &lt;a href="https://learn.microsoft.com/en-us/azure/?product=popular"&gt;Azure&lt;/a&gt; services, Azure DevOps is geared for software development.&lt;/p&gt;
&lt;p&gt;The latter, &lt;strong&gt;geared for software developnment&lt;/strong&gt;, is key. Recently when I received a request to create a new Azure DevOps project, with special requests for GANTT extensions and serious push back on the &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/plans/track-dependencies?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/boards/kanban-quickstart?view=azure-devops"&gt;Kanban Boared&lt;/a&gt; features.&lt;/p&gt;
&lt;p&gt;I wanted to know more ... a lot more. It quickly became apparent that the team were only interested in the Azure Boards service, the CMMI process, and were only going to use Azure DevOps to track a waterfall project.&lt;/p&gt;
&lt;p&gt;After considering the &lt;strong&gt;license&lt;/strong&gt; cost, required &lt;strong&gt;training&lt;/strong&gt;, and especially the &lt;strong&gt;support of extensions&lt;/strong&gt; not used by the rest of the organization, I recommended the user to consider &lt;a href="https://www.microsoft.com/en-ca/microsoft-365/project/compare-microsoft-project-management-software"&gt;Microsoft Project&lt;/a&gt; instead.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It is important to use the right tool for the right job!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sledgehammer" src="../images/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="water-cooler"></category><category term="azure-devops"></category></entry><entry><title>Water Cooler Talk - Why is WSBC such a cool place?</title><link href="https://wsbctechnicalblog.github.io/water-cooler-talk-why-is-wsbc-such-a-cool-place.html" rel="alternate"></link><published>2023-07-19T00:00:00-07:00</published><updated>2023-07-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-07-19:/water-cooler-talk-why-is-wsbc-such-a-cool-place.html</id><summary type="html">&lt;p&gt;At a recent water cooler we chatted about why WorkSafeBC is such a cool place to work for.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Water cooler talk occurs when we take a break from work, socialize with each other, and collaborate about things like hobbies, favourite beer brews, and other fun topics not associated with work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Why is WSBC Cool?" src="../images/water-cooler-talk-why-is-wsbc-such-a-cool-place-0.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me it is the &lt;strong&gt;culture&lt;/strong&gt;, the &lt;strong&gt;flexibility&lt;/strong&gt; (working from home), the &lt;strong&gt;opportunity&lt;/strong&gt; to dabble with old, current, and future technologies, the &lt;strong&gt;leadership&lt;/strong&gt; focused on &lt;strong&gt;empowering&lt;/strong&gt; and &lt;strong&gt;trusting&lt;/strong&gt; staff, and the amazing &lt;strong&gt;benefits&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TAKE NOTE&lt;/strong&gt; - My manager just published the following informative article, which touches on a number of important pillars to create an empowered culture: &lt;a href="https://cloud.cioreview.com/cxoinsight/leading-the-change-how-exemplary-behaviours-team-support-and-a-safe-environment-foster-innovation-nid-37684-cid-17.html"&gt;Leading the Change: How Exemplary Behaviours, Team Support, and a Safe Environment Foster Innovation&lt;/a&gt;, which gives a glimpse into how he and other leaders think.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;On the other hand, my team is self-managed and self-organized. If I had to summarize our vision in two words I would pick &lt;strong&gt;empower&lt;/strong&gt; and &lt;strong&gt;collaborate&lt;/strong&gt; - and yes, &lt;strong&gt;empower&lt;/strong&gt; overlaps with the leadership. We even get the opportunity to write a cookbook to explain our history with Azure Pipelines, our future, and share all our gotchas and learnings - tentative title is "Continuous Integration and Delivery Pipelines Cookbook".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Leadership and team focus" src="../images/water-cooler-talk-why-is-wsbc-such-a-cool-place-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;With that we made our way back to work. For more, read my &lt;a href="/can-government-agencies-be-innovative.html"&gt;can government agencies be innovative&lt;/a&gt; post and peruse my story:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Willy's Story" src="../images/water-cooler-talk-why-is-wsbc-such-a-cool-place-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="water-cooler"></category></entry><entry><title>Engineering Practice &amp; Processes</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-practices-processes.html" rel="alternate"></link><published>2023-06-14T00:00:00-07:00</published><updated>2023-06-14T00:00:00-07:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-06-14:/engineering-practice-practices-processes.html</id><summary type="html">&lt;p&gt;Software Engineering Practices &amp;amp; Process&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Software Engineering Landscape&lt;/h1&gt;
&lt;p&gt;When thinking of software engineering, we need to have a clear vision and utility of practices we employ and the processes we follow.  Firstly, software and software engineering does not exist in a vacuum; it exists to provide a service and solution to a customer facing problem – to create a viable product that not only meets the need but embraces the problem space to become a beacon of hope and vision in the domain of the end-user.  What we build has a purpose and a life of service to provide, to enhance and embrace changes that meet an evolving domain.  This is the fundamental viewpoint for a product focused software engineering practice – and the drive to efficiency, quality, and best practices is seen from that lens.&lt;/p&gt;
&lt;h1&gt;The Software Factory&lt;/h1&gt;
&lt;p&gt;When I think about software engineering, I think of a modern digital factory where humans are the creativity engines working along and within a well-defined and open, interconnected set of processes that not only guide the engineers but enhance their effectiveness and creativity while not wavering on quality.  To get this right, we need to have the right kind of infrastructure to support the product engineering mindset.  In fact, the infrastructure is itself software and a set of process and is the internal facing product to be consumed by our other software engineering teams in pursuit of the product deliveries; you can see the fractal nature of this.&lt;/p&gt;
&lt;h1&gt;Inner Workings &amp;amp; Collaboration&lt;/h1&gt;
&lt;p&gt;Our Common Engineering team is responsible for the inner workings of this software engineering factory, as their product to extend and improve – and automate everywhere possible.  There have been great strides in the past 10 years in the thinking and implementation of the managed software environment which has led to automation and streamlining of the process.  Our Ce team has embraced this mindset with continuous improvement and new implementations in automation of our Continuous Integration (CI) build pipelines including Continuous Deployment (CD) and On-Demand Delivery.  From the perspective of the infrastructure as a service, the Ce team continues to apply software engineering practices – adopting Infrastructure-as-Code (IaC) and Configuration-as-Code (CaC) using version control repositories to manage and track changes.  Lessons and best practices also apply here, and bite when they are not fully embraced; naming conventions and standard practices enable automation, and we are seeing the benefits of that software engineering mindset.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Active Collaboration" src="../images/engineering-practice-practices-processes-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Figure – Active Collaboration to create “one” view, “one” team. See https://wsbctechnicalblog.github.io/ceremony-overview.html for details on CoE.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Engineering Mission&lt;/h1&gt;
&lt;p&gt;Engineering a software application starts with a mission – and that mission is articulated by our Solution Architecture team in concert with other business groups (their customers).  This is an exciting point of collaboration between our Ce and Architecture groups as well; we can help them to discover and implement their deliverables in an Agile, evolving product and business landscape; to work together to find the best solutions to keeping the software factory running smoothly.  To communicate and apply lessons we’ve learned in standardization, integration, creating blueprints, and automation collaboratively.&lt;/p&gt;
&lt;h1&gt;Inception&lt;/h1&gt;
&lt;p&gt;The primary deliverable from the SA team is the Architecture Definition Document (ADD); a broadly scoped and multi-layered specification that covers a breadth technical and functional viewpoint.  The SA’s should build from a reference to the Azure Architecture and together with the Center of Enablement (CoE) create a library of organizational architecture patterns to be adopted or extended during ADD creation.   In an evolving (Agile / SAFe) product life cycle, the ADD needs to be iterative in nature as some viewpoints get more clarity and detail with time.  Some viewpoints have significant impact when altered, others can evolve without too much risk; these areas and work-flows need to be defined and documents to add clarity to the process, which can lead to process improvements and automation.  Currently the mechanics for crafting an ADD (word, Visio, draw.io, AzDO wiki), where it is stored, and its structural contents are not easily understood or consistent applied.  The content of the ADD’s should be based upon reusable design patterns that are referenced and possibly extended to avoid duplication of effort lack of consistent implementation across products.&lt;/p&gt;
&lt;h1&gt;Ideation&lt;/h1&gt;
&lt;p&gt;The Design Review Group (DRG) is the multi-disciplinary group including senior members from Common Engineering, Architecture, Security, and Cloud Operation areas whose task is to review and ensure the integrity of each product ADD.  As the ADD needs to evolve with the Agile products it is intended to describe and support, so too does the cadence, process and mechanics of the DRG.  Common Engineering is committed to assisting the Architecture team define the processes needed to support the needs of product design definition and review, creating the needed artifact to support and possibly automate the workflow where possible and practical.  Currently the DRG uses an Azure board to track the process of ADD creation and approval.  &lt;/p&gt;
&lt;h1&gt;Technology Adoption&lt;/h1&gt;
&lt;p&gt;When and how the Technology Adoption Process (TAP) gets triggered is another area that Common Engineering and the Architecture Groups can collaborate.  We have automated the inflow of requests to make the initial request for new technology at WSBC so that it sends a confirmation email to the requesting individual and add an entry into the TAP Azure boards setup to track processing of adoption requests through the TAP process.  Once a product has been approved for adoption, it should become an entry on the Product Catalog; this is another area of automation Ce team can help provide.  The TAP process needs to be supported by Common Engineering to help govern the landscape of technology we can reasonably consume and use consistently across products, product lines, and ARTs.&lt;/p&gt;
&lt;h1&gt;Lifecycle Support&lt;/h1&gt;
&lt;p&gt;The Common Engineering team supports the entire Software Product Engineering lifecycle from ideation to deprecation &amp;amp; decommissioning, working collaboratively with other teams to ensure our processes and practices are visible and well defined.  In doing so, we expose opportunities for improvement, further collaboration and automation.&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Azure Boards Tips - Retain hierarchy with filter</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips-retain-hierarchy-with-filter.html" rel="alternate"></link><published>2023-06-05T00:00:00-07:00</published><updated>2023-06-05T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-06-05:/azure-boards-tips-retain-hierarchy-with-filter.html</id><summary type="html">&lt;p&gt;Why does the hierarchy view [not] vanish when selecting a filter?&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue the journey of feature discovery with the &lt;a href="https://azure.microsoft.com/en-us/products/devops"&gt;AzureDevOps&lt;/a&gt; Board, which we started with &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;, &lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;, and &lt;a href="azure-boards-tips-operations-teams"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Odd behaviour when using the backlog filter&lt;/h1&gt;
&lt;p&gt;We often find ourselves switching the &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure Board&lt;/a&gt; to the backlog view and enable parents, giving us a hierarchical view as shown below. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hierarchy" src="../images/azure-boards-tips-retain-hierarchy-with-filter-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then we use the filter to show a subset of the work items, in this case those with a state of &lt;strong&gt;Active&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Filter removes hierarchy" src="../images/azure-boards-tips-retain-hierarchy-with-filter-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An annoying side effect of using filters, is that the hierarchical view disappears.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Flip a toggle to get the view you want&lt;/h1&gt;
&lt;p&gt;A feature I discovered is the "keep hierarchy with filters" toggle under &lt;strong&gt;View Options&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hierarchy Flag" src="../images/azure-boards-tips-retain-hierarchy-with-filter-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you toggle that to &lt;strong&gt;On&lt;/strong&gt; you get the view I believe should be the default. Best of both worlds ... filter set, and parent and child hierarchy enabled.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Filter not removed" src="../images/azure-boards-tips-retain-hierarchy-with-filter-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Any other tips to share?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Configuration and/or Dependency Management</title><link href="https://wsbctechnicalblog.github.io/configuration-and-or-dependency-management.html" rel="alternate"></link><published>2023-05-26T00:00:00-07:00</published><updated>2023-05-26T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-05-26:/configuration-and-or-dependency-management.html</id><summary type="html">&lt;p&gt;What am I missing? Is this not a common dependency challenge?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I do not have experience in this area and am slowly, but surely, losing my marbles as no-one seems to have an answer.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;System Center Configuration Manager to the rescue ... or not?&lt;/h1&gt;
&lt;p&gt;Yes, we are using Microsoft System Center Configuration Manager, to report on the health of our virtual servers, installed products, and missed patches. In essence, we know exactly WHAT is installed and WHAT is vulnerable - that is a goo thing, no?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Installed applications" src="../images/configuration-and-or-dependency-management-1.png"&gt; &lt;/p&gt;
&lt;p&gt;In the above example, we know we are running application A, B, and C, as well as dependencies .NET 2, 3, and 6. We alerted that .NET 2 and .NET 3 are end-of-life (EOL) and therefore a vulnerability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Team Framework Monitor&lt;/h1&gt;
&lt;p&gt;We have also developed a tool, called Team Framework Monitor (TFM), which we recently open-sourced. See &lt;a href="/bcit-computer-systems-technology-industry-sponsored-student-project.html"&gt;BCIT Computer Systems Technology Industry Sponsored Student Project.html&lt;/a&gt; for details. &lt;/p&gt;
&lt;p&gt;Using the tool, we regularly scan all our &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure DevOps&lt;/a&gt; repositories to produce a report of applications, their dependencies, and whether any of their dependencies are end-of-live (EOL) - another precious gem, no?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Application codebase" src="../images/configuration-and-or-dependency-management-2.png"&gt; &lt;/p&gt;
&lt;p&gt;In the above example, we know we have upgraded application A and B to use .NET 6. We have addressed two vulnerabilities in two of our applications in the codebase. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Dependency Management Dilemma&lt;/h1&gt;
&lt;p&gt;And here is my dilemma. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We diligently address the vulnerabilities on the server by removing .NET 2 and .NET 3.&lt;/li&gt;
&lt;li&gt;We trigger continuous delivery which deploys the latest versions of application A, B, and C.&lt;/li&gt;
&lt;li&gt;We smile, go home, and relax.&lt;/li&gt;
&lt;li&gt;At 2-AM in the morning, our phones ring off the hook - application C is down. Production incident.&lt;/li&gt;
&lt;li&gt;Root cause analysis determines that application C is still dependent on .NET 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sound familiar?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="The challenge" src="../images/configuration-and-or-dependency-management-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Neither System Center Configuration Manager, nor any of the other expensive products we use can &lt;strong&gt;pro-actively&lt;/strong&gt; warn us and avoid the 2AM call by generating a report such as this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="The ask" src="../images/configuration-and-or-dependency-management-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Obviously, we can spend manual effort to create yet another Excel workbook, with Pivot Tables that will help us figure our that we cannot remove .NET 3 yet. But ... there must be a smarter, more automated strategy?!?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;How are YOU solving this challenge? Do you have any case studies of organizations that have mastered this challenge?&lt;/p&gt;
&lt;p&gt;Comment below and let us start an interesting discussion!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category></entry><entry><title>BCIT Computer Systems Technology Industry Sponsored Student Project (ISSP)</title><link href="https://wsbctechnicalblog.github.io/bcit-computer-systems-technology-industry-sponsored-student-project.html" rel="alternate"></link><published>2023-05-25T00:00:00-07:00</published><updated>2023-05-25T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-05-25:/bcit-computer-systems-technology-industry-sponsored-student-project.html</id><summary type="html">&lt;p&gt;Today we have open-sourced our Technology Framework Monitor (TFM).&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I had another moment of pride, as I listened to the presentation delivered by two &lt;a href="https://www.bcit.ca/about/visit/campuses-directions/burnaby/"&gt;British Columbia Institute of Technology&lt;/a&gt; students who have worked with my team for the past 4.5 weeks. I realized that I was watching and listening to the next generation of software engineers, who will continue the adventure that I embarked on in the early 80s.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Presentation" src="../images/bcit-computer-systems-technology-industry-sponsored-student-project-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;The project&lt;/h1&gt;
&lt;p&gt;We (primarily AndreasM, GitHub: AndreasNVI) developed the Technology Framework Monitor (TFM) product to gather information about every project within an &lt;a href="https://azure.microsoft.com/en-us/products/devops"&gt;Azure DevOps&lt;/a&gt; organization. The product scans every &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure Repository&lt;/a&gt;, analyses the projects within each repository, and saves data in a SQL Server database for further analysis and reporting.&lt;/p&gt;
&lt;p&gt;Examples of information collected and analyzed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Details of Azure DevOps Team Projects within the organization.&lt;/li&gt;
&lt;li&gt;Details of Azure Repositories within Azure DevOps Team projects.&lt;/li&gt;
&lt;li&gt;Version of .NET and flag end-of-life versions.&lt;/li&gt;
&lt;li&gt;Version of Angular.&lt;/li&gt;
&lt;li&gt;Version of Azure Function runtime.&lt;/li&gt;
&lt;li&gt;Version of NuGet packages.&lt;/li&gt;
&lt;li&gt;Version of npm packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;The challenge we set for the BCIT students&lt;/h1&gt;
&lt;p&gt;The TFM product needed a lot of love and care to clean-up the codebase so that we can release it as one of our open-source projects. For example, we needed to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove unused code and refactor the codebase to improve the performance and maintainability.&lt;/li&gt;
&lt;li&gt;Handle transient faults to deal with Azure DevOps throttling and circuit breakers.&lt;/li&gt;
&lt;li&gt;Support automation to run the product on a specific day, at a specific time, and do so continuously.&lt;/li&gt;
&lt;li&gt;Document the product usage and optionally produce 101-usage videos.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;What they experimented with and learned during the student project&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Worked with a platter of products, such as Microsoft Azure DevOps, GitHub, Visual Studio, and SQL Server.&lt;/li&gt;
&lt;li&gt;Got an in-sight into why the gathered information is pivotal to a sound engineering process and practices.&lt;/li&gt;
&lt;li&gt;Got an opportunity to collaborate with our common engineering practice lead, developers, and cloud systems engineers.&lt;/li&gt;
&lt;li&gt;had an opportunity to experiment with Git, GitHub, Azure DevOps, Visual Studio, and SQL Server.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Oh, we open-sourced the solution!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You can peruse our open-source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor"&gt;Technology Framework Monitor (TFM) product&lt;/a&gt; on GitHub.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;My final message to the students: "&lt;em&gt;When the "WorkSafeCodeCleanUpCrew," Team #5, faced a reduction in members from 3 to 2 BCIT students shortly after the kick-off, I immediately raised a red flag for our ambitious Technology Framework Monitor (TFM) open-source project. However, I was pleasantly surprised by Daniel and Samuel's response to the challenge. They not only embraced the situation but also rapidly mastered essential tools such as SQL Server, Visual Studio, GitHub, and Azure DevOps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Throughout the project, Daniel and Samuel demonstrated their commitment by conducting thorough research on engineering practices and products. They fearlessly experimented, dedicating their time to refactor both code and documentation. Their utilization of the Trello and Azure DevOps Kanban Board to track their progress was highly effective, ensuring transparency and enabling efficient collaboration.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I cannot stress enough the awe-inspiring passion, perseverance, and dedication that Daniel and Samuel exhibited during this project. Their contributions to our open-source project, TFM, are nothing short of remarkable. I eagerly anticipate witnessing their future endeavors and the continued impact they will make.&lt;/em&gt;” &lt;/p&gt;
&lt;p&gt;Last, but not least, &lt;strong&gt;THANK YOU&lt;/strong&gt; Andreas for being a patient and phenomenal mentor, coach, and fellow software engineer in this adventure. Also, a special &lt;strong&gt;THANK YOU&lt;/strong&gt; to Martin (MerlinDarkstar) for being our Software Practice Lead and keeping us on the rails.&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="oss"></category></entry><entry><title>Why bother with governance?</title><link href="https://wsbctechnicalblog.github.io/why-bother-with-governance.html" rel="alternate"></link><published>2023-04-28T00:00:00-07:00</published><updated>2023-04-28T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-28:/why-bother-with-governance.html</id><summary type="html">&lt;p&gt;Why bother with governance when no-one can find it?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I will not waste your time with the &lt;strong&gt;why&lt;/strong&gt; and &lt;strong&gt;what&lt;/strong&gt; of governance, guardrails, policies, and standards have been covered in &lt;a href="/servant-stewardship-of-guardrails.html"&gt;Servant stewardship of guardrails&lt;/a&gt; and &lt;a href="/governance-manifestos-guardrails.html"&gt;Can we enact governance through engineering-friendly manifestos and guardrails&lt;/a&gt;. Instead, I want us to have a discussion as to why it is so difficult to encourage engineering to remain within guardrails, to collaborate to make improvements, and to steward the guardrails that intend to keep us all from danger.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why care about something I cannot find&lt;/h2&gt;
&lt;p&gt;Picture the typical software engineering team at their planning event. A quick visit by the business owner to describe the current state and vision. Product management presents needed features to deliver value and delight the end-users. Last, but not least, the schedule and priorities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Priority" src="../images/why-bother-with-governance-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After the buzz and dust settles, the software engineering team is left with what they perceive as another priority #1 and the sinking-feeling of more late nights and troubleshooting weekends.&lt;/p&gt;
&lt;p&gt;At the water cooler the team chatter starts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What is the recommended architecture for this solution?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Should we use .NET 6 or 8?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Go with Angular or Blazer?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Can we use self-service automation to get us started quicker within the guardrails?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Are there re-usable packages or bricks we can/must use?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;...&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the typical engineer cannot get these and other questions answered within minutes, they will proceed with what and how they know best ... which may not be aligned with your drive for consistency and standardization, guardrails, and organizational governance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Whether you have some, lots, or too much automation, guidance, and governance is not the question. &lt;strong&gt;Awareness&lt;/strong&gt; and &lt;strong&gt;Discoverability&lt;/strong&gt; thereof is the key!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Step 1 - Create a one-stop-shop, the eye of the spiderweb&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Spiderweb" src="../images/why-bother-with-governance-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Create one-stop-shop&lt;/h3&gt;
&lt;p&gt;The first step is to use products you have to create a one-stop-shop, where you can find pointers to all the information needed by a predefined persona. In our case we used SharePoint 365 (product) to create a one-stop portal that serves our software development engineers (persona).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Eye" src="../images/why-bother-with-governance-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It serves as an index to content related to collaboration centers, contacts, decisions, guardrails, presentations, processes, product catalog, reports, technology road maps, and tons of other materials, in a platter of formats.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Awareness" src="../images/why-bother-with-governance-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Raise awareness and gather candid feedback&lt;/h3&gt;
&lt;p&gt;Next challenge is to ensure everyone either tattoos the one-stop-shop URL on their forearm or remember it whenever they are looking for information. Something we are trying to achieve by continuously mentioning the site and the need for candid feedback - we can only continuously improve the one-stop-shop site if everyone tells us what is lacking and ideas how to improve the site.&lt;/p&gt;
&lt;h3&gt;Conversational discovery&lt;/h3&gt;
&lt;p&gt;Here is a snippet of our one-stop shop so far:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="AI" src="../images/why-bother-with-governance-6.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, even the best one-stop-shop is not a user-friendly or productive solution. What is missing is the opportunity to have a discussion with a person or a conversation with an intelligent bot to discover relevant information for the task or problem at hand, without having to spend hours looking for the right information.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Step 2 - next time&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="AI" src="../images/why-bother-with-governance-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the next post we will chat about Step 2, evaluating Open AI technology at the InnoFest to supplement the one-stop-shop to improve awareness and discoverability through conversation.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="quality"></category><category term="learning"></category></entry><entry><title>Shift from project to product thinking</title><link href="https://wsbctechnicalblog.github.io/shift-from-project-to-product-thinking.html" rel="alternate"></link><published>2023-04-14T00:00:00-07:00</published><updated>2023-04-14T00:00:00-07:00</updated><author><name>Andre Kaminski</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-14:/shift-from-project-to-product-thinking.html</id><summary type="html">&lt;p&gt;The problem is not with projects but with project-focused thinking&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The shift from Project to Product thinking – why is it important&lt;/h2&gt;
&lt;p&gt;You probably have heard of the ‘project to a product mind shift’ that became a new buzzword over the last few years. But do you really need it, and why?&lt;/p&gt;
&lt;p&gt;To address this, let me start with the name ‘DevOps.’ It consists of two words – Development and Operations.&lt;/p&gt;
&lt;p&gt;The first one – Development – is pretty straightforward. This is what we do when working on projects. But the second one is a bit more complicated. The Operations part starts already when the first MVP (Minimum Viable Product) is released, while the team continues working on the following MVP. However, when the project ends (all MVPs were delivered), the operations will continue.&lt;/p&gt;
&lt;p&gt;When I was starting my career (and this was a couple of decades ago), my mentor told me that every 6 to 8 years, software applications should be redeveloped. There was a good reason for that. It took about a year to develop and launch a product. Then the product went into sustainment and operations mode. Usually, this was done by a different team. This, in turn, when a production issue was identified’ led to complaints that the first team delivered a poor-quality application, and this team now needed to ‘save the world’ and fix the issues. At the same time, the sustainment team had to add new features requested mostly by sales and marketing teams. Often these features were done for a small market segment and sometimes didn’t make sense in the larger product picture. But sales deals and money talk. After three years, it was a ‘spaghetti’ code with a set of switches for various customers, and every new version had to be recompiled with a ‘#PRAGMA’ statement (remember that this was many years ago 😊). Around year 4, the team already spent more time fixing issues than adding more business features. Why was that? Because, at the time, we thought about a product as static. This is similar to buying a Toyota Corolla model, and besides normal maintenance, you try to add some additional fancy gauges and modify the engine. The result couldn’t be good, and most of the time, it wasn’t. So, after several years, you had to buy a new car with those fancy features.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Car" src="../images/shift-from-project-to-product-thinking-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;So what’s wrong with projects?&lt;/h2&gt;
&lt;p&gt;Actually, nothing. The problem is not with projects but with project-focused thinking.&lt;/p&gt;
&lt;p&gt;Projects are usually temporary, ranging from a few months to a few years. They have clearly defined start and end. We often assemble an ad-hoc delivery team. Each time this new team needs to go through all phases of team development (forming, storming, norming, and performing in Tuckman’s model). As soon as the project is finished, the team disperses. And so does the accommodated product knowledge.&lt;/p&gt;
&lt;p&gt;The projects are also linear in nature. Even in the agile world, the sequence of events is repetitive.&lt;/p&gt;
&lt;p&gt;They represent user experience when the project is initiated, and that vision becomes static.&lt;/p&gt;
&lt;p&gt;The projects are also part of the bigger product picture but are more isolated. The project team rarely considers how the product will grow in the future.&lt;/p&gt;
&lt;p&gt;The project is finished when the product is created. The projects are managed by how closely they adhere to the plan. Success is measured by triple constraints – time, money and scope, and usually, all three are fixed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;So why product thinking?&lt;/h2&gt;
&lt;p&gt;For one, the &lt;strong&gt;products are continuous&lt;/strong&gt;. The vision will change depending on market conditions and customer needs, and the product’s new features will be delivered by MVPs. This means that products have a way longer time span than the projects. And if built correctly, the application’s life span can be decades rather than years (when using, for example, microservices). This timeline is from the cradle to the grave, from MVP 1 to product decommissioning.&lt;/p&gt;
&lt;p&gt;We also need to consider the entire system, including the non-functional requirements like maintainability or stability, infrastructure, continuous monitoring, and the ability to add new or remove old features. And these are driven by market conditions or unpredictable customer needs.&lt;/p&gt;
&lt;p&gt;System thinking also encourages continuous innovation. In 2004, Greg Linden, a developer at Amazon, suggested to his boss to implement a feature – called “Customers Who Bought This Item Also Bought.”  His boss didn’t think that this was a good idea. Greg, however, took a risk and implemented the functionality anyway. This move led to a significant increase in sales. Amazon doesn’t publish results by how much, but we can guess that it was a major contributor to company revenues that jumped from $5.3 B in 2003 to $6.9 B a year later.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;product teams are long-standing teams&lt;/strong&gt;. They are the same team that started building the application, and they continue to add new functionality while supporting it. Since the team is already well established, they are usually at the ‘performing’ stage of the team lifecycle, making them more efficient at delivering new features. The deep expertise that they developed over time allows them to address problems and issues relatively quickly.&lt;/p&gt;
&lt;p&gt;The success metrics of product teams are – the frequency of business value delivery and its impact on the customers.&lt;/p&gt;
&lt;p&gt;But there are more benefits when shifting to product thinking. It allows the teams to build less and validate more often, correcting the course if needed. They are effective in quick adjustments to align with market trends and ever-changing customer needs. It allows the business and product managers to make measurable investments while working together with the DevOps teams. Focus in such team shifts from the amount of work done to the impact. Lastly, in many organizations, IT is perceived as a cost center. With the shift to product thinking, IT becomes a value center.&lt;/p&gt;
&lt;p&gt;I like this quote from Anthony Crain, CPrime, that summarizes it all:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a company moves from projects to products, they are changing the focus of every person in the organization from a short-term "let's get this project done and move on to the next" perspective to a long-term ownership perspective&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category></entry><entry><title>What keeps us awake at night - Technical Debt</title><link href="https://wsbctechnicalblog.github.io/what-keeps-us-awake-at-night-patching.html" rel="alternate"></link><published>2023-04-12T00:00:00-07:00</published><updated>2023-04-12T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-12:/what-keeps-us-awake-at-night-patching.html</id><summary type="html">&lt;p&gt;Empower engineering without compromising security&lt;/p&gt;</summary><content type="html">&lt;p&gt;The obvious question that comes mind is: "&lt;strong&gt;What is technical debt?&lt;/strong&gt;" I asked &lt;a href="https://chat.openai.com/chat"&gt;ChatGPT&lt;/a&gt; and got the following response: "&lt;em&gt;Technical debt is a term used in software development to describe the additional work required to maintain and update a codebase developed using suboptimal practices. It can occur due to factors such as tight deadlines or the use of quick-and-dirty coding practices that prioritize speed over code quality and maintainability. Technical debt can result in higher long-term costs and slower development, limiting the ability of the software to adapt to changing business needs. Therefore, it is important to manage and minimize technical debt to reduce risks and ensure the sustainability of software development projects.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;In a continued conversation another important nugget emerged from &lt;a href="https://chat.openai.com/chat"&gt;ChatGPT&lt;/a&gt;: "&lt;em&gt;Technical debt is typically considered to be self-imposed.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;Personally, I agree with all of the above, but have a very specific visual that pops up in my mind whenever I am part of a discussion where technical debt raises its ugly head:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Technical Debt" src="../images/what-keeps-us-awake-at-night-patching-0.png"&gt;
Source &lt;a href="https://www.pastemagazine.com/movies/jurassic-park/the-12-best-quotes-from-jurassic-park"&gt;Jurassic Park&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am currently having sleepless nights with technical debt in two areas.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Toxic server debt&lt;/h1&gt;
&lt;p&gt;The first is the iron, the servers, that host the outcome of our software development. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Cloud Accountability" src="../images/what-keeps-us-awake-at-night-patching-1.png"&gt;
Image Source: &lt;a href="https://learn.microsoft.com/en-us/azure/security/fundamentals/shared-responsibility"&gt;Shared responsibility in the cloud&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The image, I loaned from a Microsoft article, clearly shows that we are accountable for our servers and that we take responsibility to keep them up-to-date and secure. As we move to platform-as-a-service (PaaS) or software-as-a-service (SaaS) we delegate the accountability to the hosting vendor.&lt;/p&gt;
&lt;p&gt;This area will be covered in a future post by one of our operations-focused engineers, but it is worth mentioning my personal checklist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;SaaS&lt;/strong&gt; where you can. Someone else is accountable for solution and hosting infrastructure.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;PaaS&lt;/strong&gt; for custom built solutions. Someone else is accountable for hosting infrastructure.&lt;/li&gt;
&lt;li&gt;Perform continuous patching and upgrading of frameworks in &lt;strong&gt;IaaS&lt;/strong&gt; and &lt;strong&gt;on-prem&lt;/strong&gt;. You are responsible!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now for the second area.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Turbulent application WASTE&lt;/h1&gt;
&lt;p&gt;We intentionally and unintentionally gather WASTE, vulnerabilities, and technical debt in with our software development solutions when using 3rd-party frameworks, extensions, or services. We have to adapt to a dynamic and continuously evolving world. &lt;/p&gt;
&lt;p&gt;For example, when using the .NET framework, we need a strategy to understand which versions are supported, which versions we recommend as an organization, and how we upgrade hundred to thousands of solutions.&lt;/p&gt;
&lt;p&gt;The strategy could guide us as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support latest and latest - 1 versions of .NET.&lt;/li&gt;
&lt;li&gt;Upgrade the hosting servers you own, accordingly.&lt;/li&gt;
&lt;li&gt;Upgrade the solutions you own, accordingly.&lt;/li&gt;
&lt;li&gt;Do it as soon as possible. If you make a conscious decision to defer the upgrade, you have just made your pile of technical debt grow.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FOCUS ON TECHNICAL DEBT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too &lt;strong&gt;much&lt;/strong&gt; - unable to deliver continuous new value to your customers.&lt;/li&gt;
&lt;li&gt;Too &lt;strong&gt;little&lt;/strong&gt; - unable to deliver new value to your customers when your solutions drown in WASTE. In addition, you will create STRESS and eventually BURNOUT your engineers during ad-hoc remediation spikes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Option 1 - Reactive housekeeping&lt;/h2&gt;
&lt;p&gt;I do not support the reactive &lt;strong&gt;spikes&lt;/strong&gt; of remediating vulnerabilities and reducing technical debt remediation. It makes no sense!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Reactive" src="../images/what-keeps-us-awake-at-night-patching-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that the deliver of value is drastically reduced over three iterations. NOT a customer friendly experience!&lt;/p&gt;
&lt;h2&gt;Option 2 - Rotate housekeeping accountability&lt;/h2&gt;
&lt;p&gt;If you have Agile Teams within an ART Flow, you could rotate the housekeeping baton and associated accountability between the teams. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="TD Rotation" src="../images/what-keeps-us-awake-at-night-patching-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, each team in the Agile Flow will focus on housekeeping for an iteration, followed by one or more iterations of delivering business features and value. During an innovation and planning iteration, also known as a +1, all teams would park new features and housekeeping, and focus on innovation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;
Sustainment, maintenance, and housekeeping is something that should be part of every engineer's responsibility, similar to built-in quality. Avoid creating sustainment-only teams - most engineers will otherwise avoid it like the plague.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accountability and responsibility of housekeeping is &lt;strong&gt;shared&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Overall, the ART Flow delivers a &lt;strong&gt;continuous flow&lt;/strong&gt; of business and innovation value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus of housekeeping in an iteration is focused only on the Agile team's technical debt.&lt;/li&gt;
&lt;li&gt;Other teams may skip housekeeping for 2 or more consecutive iterations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Option 3 - Continuous housekeeping (my personal recommendation)&lt;/h2&gt;
&lt;p&gt;Alternatively, every Agile team in every Agile Flow can commit to one, two, or more items from their technical debt backlog, or commit to a predefined percentage of capacity dedicated to housekeeping activities, in parallel to delivering new features and value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="TD Slicing" src="../images/what-keeps-us-awake-at-night-patching-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown above, the &lt;strong&gt;tax&lt;/strong&gt; on each team is minimal and there are no costly and disruptive remediation spikes. As shown below there is a continuous flow of innovation and business value - Agile Team and customer FRIENDLY experience!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Value flow" src="../images/what-keeps-us-awake-at-night-patching-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continuous flow of value.&lt;/li&gt;
&lt;li&gt;Continuous reduction of WASTE.&lt;/li&gt;
&lt;li&gt;Ability to plan and budget for the housekeeping.&lt;/li&gt;
&lt;li&gt;Cannot think of a CON q;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Continuous vacuum cleaning!&lt;/h2&gt;
&lt;p&gt;I compare the continuous housekeeping to vacuuming our float home. If everyone in my family owns a chore and I do vacuuming on a regular weekly cadence, I typically spend 45-60 minutes collecting dust. If I ignore my responsibilities, I have to spend hours cleaning, often at the most inopportune time.&lt;/p&gt;
&lt;p&gt;I favour the former, because I can plan it and it only briefly distracts me from more interesting tasks, such as watching the Formula One grand-prix, or writing these posts.&lt;/p&gt;
&lt;p&gt;How are you dealing with technical debt? What are your learnings? Your pain points?&lt;/p&gt;</content><category term="Posts"></category><category term="azure"></category><category term="azure-devops"></category><category term="eliminate-waste"></category></entry><entry><title>Azure Boards Tips - Stop messing with our backlog!</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips-stop-messing-with-our-backlog.html" rel="alternate"></link><published>2023-04-02T00:00:00-07:00</published><updated>2023-04-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-02:/azure-boards-tips-stop-messing-with-our-backlog.html</id><summary type="html">&lt;p&gt;A few useful "did you know" tips when using Azure Boards.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We explored the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; in &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt; and &lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;. However, I failed to emphasize one important rule when you are working with my team, as well as the teams stewarded by my colleague, Agent #9 from our &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; adventure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Feel free to visit and peruse &lt;code&gt;our&lt;/code&gt; backlog, however, &lt;strong&gt;do not&lt;/strong&gt; make any changes on &lt;code&gt;our&lt;/code&gt; backlog!**&lt;/p&gt;
&lt;p&gt;&lt;img alt="look" src="../images/azure-boards-tips-stop-messing-with-our-backlog-0.png"&gt; 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;The board is a visualization&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="visual" src="../images/azure-boards-tips-stop-messing-with-our-backlog-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;BACKLOG&lt;/strong&gt;, as shown on the left, is an ordered and prioritized flat or hierarchical list of deliverables, features, technical debt, and other bits and pieces that should be implemented to deliver value to delighted end-users. The &lt;strong&gt;BOARD&lt;/strong&gt; is a &lt;code&gt;visual&lt;/code&gt; representation of the same data, commonly categorized in columns and swim lanes.&lt;/p&gt;
&lt;p&gt;Note a few important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ordered&lt;/strong&gt; and &lt;strong&gt;prioritized&lt;/strong&gt; list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;visual&lt;/strong&gt; representation&lt;/li&gt;
&lt;li&gt;items at the &lt;strong&gt;TOP&lt;/strong&gt; have the highest priority&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;The correct, but not default way&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="visual" src="../images/azure-boards-tips-stop-messing-with-our-backlog-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you set the &lt;code&gt;Card reordering&lt;/code&gt; feature to &lt;code&gt;Work items follow the backlog order when changing columns&lt;/code&gt; &lt;strong&gt;magic&lt;/strong&gt; happens when you drag a card from one column to the other on the board.&lt;/p&gt;
&lt;p&gt;In our example above, we are dragging the &lt;strong&gt;E2&lt;/strong&gt; card from the &lt;strong&gt;FUNNEL&lt;/strong&gt; to the &lt;strong&gt;ACTIVE&lt;/strong&gt; column and the center &lt;strong&gt;SWIMLANE&lt;/strong&gt;. As you drop the card &lt;strong&gt;anywhere&lt;/strong&gt; in the column, the board positions it correctly using the groomed and ordered backlog. As shown, the card will be placed above &lt;strong&gt;D2&lt;/strong&gt;, because on the backlog &lt;strong&gt;E2&lt;/strong&gt; is positioned before &lt;strong&gt;D2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After dragging the card, both Agent #9 and Agent #13 are &lt;code&gt;happy&lt;/code&gt; as their pristine, ordered, and prioritized single source of truth backlog remains unchanged.&lt;/p&gt;
&lt;p&gt;Unfortunately, this is not the default mode with &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The default, but not correct way&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="visual" src="../images/azure-boards-tips-stop-messing-with-our-backlog-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The default &lt;code&gt;Card reordering&lt;/code&gt; feature is set to &lt;code&gt;Work items reorder when changing columns and the backlog reflects the new order&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our example above, we are dragging the &lt;strong&gt;E2&lt;/strong&gt; card from the &lt;strong&gt;FUNNEL&lt;/strong&gt; to the &lt;strong&gt;ACTIVE&lt;/strong&gt; column and the center &lt;strong&gt;SWIMLANE&lt;/strong&gt;. As we drop the card after the &lt;strong&gt;&lt;em&gt;-&lt;/em&gt;&lt;/strong&gt; card, the board positions it where we drop it.&lt;/p&gt;
&lt;p&gt;After dragging the card, both Agent #9 and Agent #13 are &lt;code&gt;unhappy&lt;/code&gt; as their pristine, ordered, and prioritized backlog remains has been changed. While the tragedy is not evident with this simple example, consider hundreds of cards being dragged and dropped by a team per day. The backlog turns into a single pile of mess very quickly, making the board the single source of truth. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Upset with the current default?&lt;/h1&gt;
&lt;p&gt;It is obviously a personal / team preference as to whether the backlog or the board are their single source of truth. For me, the &lt;strong&gt;backlog&lt;/strong&gt; which I groom regularly like an immaculate Rose Garden, is my single source of truth. The &lt;strong&gt;Board&lt;/strong&gt; is a &lt;code&gt;visualization&lt;/code&gt; of the same data using the backlog as source.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Am I wrong to be upset with the default option selected by Microsoft?&lt;/li&gt;
&lt;li&gt;What are your thoughts?&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Fail, Learn, Reset, Transform!</title><link href="https://wsbctechnicalblog.github.io/fail-learn-reset-transform.html" rel="alternate"></link><published>2023-03-31T00:00:00-07:00</published><updated>2023-03-31T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-31:/fail-learn-reset-transform.html</id><summary type="html">&lt;p&gt;“Success is not final, failure is not fatal, it is the courage to continue that counts.” – Winston Churchill&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="/fail-learn-reset.html"&gt;Fail, Learn, Reset&lt;/a&gt; I explored how I encourage everyone in my team and our group to accept failure as an opportunity to learn and how we are trying hard to eradicate the &lt;strong&gt;fear of failure&lt;/strong&gt; that often accompanies the &lt;strong&gt;imposter syndrome&lt;/strong&gt;. In conversations, I realized that the &lt;a href="/fail-learn-reset.html"&gt;Fail, Learn, Reset&lt;/a&gt; post was very engineering focused, but that the concept of learning from failures applies to everything.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FAILURE&lt;/strong&gt; comes in many shapes and sizes. Here are a few of many definitions from the Merriam-Webster Dictionary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lack of success&lt;/li&gt;
&lt;li&gt;a falling short&lt;/li&gt;
&lt;li&gt;a fracturing or giving way under stress
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Personally, I prefer to think of &lt;strong&gt;FAILURE&lt;/strong&gt; as an "unexpected outcome" of doing, trying, evolving, or experimenting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Unexpected Result" src="../images/fail-learn-reset-transform-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which brings me to "transform" in today's blog post title.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;It is about how (I / we) can transform&lt;/h1&gt;
&lt;p&gt;When we look at the continuous circle of doing, trying, evolving, experimenting, reflecting, learning, and adjusting, it is important to realize that the LEARN + ADJUST steps are crucial. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="I/We" src="../images/fail-learn-reset-transform-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to reflect and transform continuously, otherwise we enter the world of insanity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"The definition of insanity is doing the same thing over and over and expecting different results." - Albert Einstein
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Two anti-patterns that drive me crazy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Paralysis&lt;/strong&gt; - If you have ever had the displeasure of working with a team that turns every retrospective into a complaining, venting, and blame saga, you know what I mean. Instead of reflecting, learning, and deciding how we / I can change (&lt;strong&gt;transform&lt;/strong&gt;) to make the next iteration better, these paralyzed teams drown in misery and hope for change that never comes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stagnation&lt;/strong&gt; - We have done it this way for decades and it has always worked for us. Sure, the postal office worker stamping envelopes by hand is doing a great job, but not in an efficient way. As a result the worker will always be &lt;strong&gt;too busy&lt;/strong&gt; to embrace new ways of automating and improving the stamping; giving relief and spare time to &lt;strong&gt;experiment&lt;/strong&gt; and &lt;strong&gt;innovate&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“Ask not what your country can do for you – ask what you can do for your country." - John F. Kennedy
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next time you get to the learn and adjust stages, take a step back, &lt;a href="https://examinedexistence.com/the-navy-seal-breathing-technique-to-calm-down/"&gt;breathe&lt;/a&gt;, and then ask yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What have we / I learned?&lt;/li&gt;
&lt;li&gt;What can we / I improve before we re-try?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;OMG, not another reorganization!?!&lt;/h1&gt;
&lt;p&gt;Another great example is when we as a group announce that we are going to reorganize again. The &lt;code&gt;paralyzed&lt;/code&gt; teams will once again spiral into a dark place, while teams with a healthy Agile and DevOps mindset will embrace the opportunity to change.&lt;/p&gt;
&lt;p&gt;Yes, we &lt;code&gt;tried&lt;/code&gt; and &lt;code&gt;experimented&lt;/code&gt; with a new structure for a year. We realized that we have not managed to evolve to where we wanted to be. We &lt;code&gt;learn&lt;/code&gt; from the experience, we &lt;code&gt;adjust&lt;/code&gt; (reorganize), and we embrace new ways.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;See change as an &lt;code&gt;opportunity&lt;/code&gt;, not as a threat!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;What makes humans different? Our ability to adapt to change; the more we do it, the more comfortable we are with this disruption as an opportunity.&lt;/em&gt;" - Martin Lacey
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Embrace change!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Communication Guidance Sideways (Part 2)</title><link href="https://wsbctechnicalblog.github.io/communication-guidance-sideways.html" rel="alternate"></link><published>2023-03-17T00:00:00-07:00</published><updated>2023-03-17T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-17:/communication-guidance-sideways.html</id><summary type="html">&lt;p&gt;"Not to be missed after you depart." - L.David Marquet&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from &lt;a href="/communication-guidance-upwards"&gt;Communication Guidance Upwards&lt;/a&gt;, where we discussed how to communicate upwards to executive domain. In this post I will share my thoughts on communicating &lt;code&gt;sideways&lt;/code&gt;, with my peer managers, and &lt;code&gt;rearwards&lt;/code&gt;, with my team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="up-side-rear" src="../images/communication-guidance-sideways-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The proposed value and outcome format, as proposed in the upwards communication can be re-used for sideways and rearwards communication.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="nv"&gt;want&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
        &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="nv"&gt;recommend&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;HOW&lt;/span&gt;,&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
        &lt;span class="nv"&gt;There&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;several&lt;/span&gt; &lt;span class="nv"&gt;benefits&lt;/span&gt;:
            &lt;span class="nv"&gt;First&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CORE&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Also&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Finally&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
    &lt;span class="nv"&gt;Imagine&lt;/span&gt;, &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before we peek into sideways communication, I must highlight an important epiphany I had. In the illustration, as above, you will notice my team in the center, with me (L4) communicating upwards, as discussed in &lt;a href="/communication-guidance-upwards"&gt;Communication Guidance Upwards&lt;/a&gt;, sideways, and rearwards. The epiphany is that what we are about to discuss as sideways and rearwards communication exists twice - #1 is my team and I, #2 are my peer managers and my leader L1. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Communicating sideways with peer managers&lt;/h1&gt;
&lt;p&gt;As the L1, L2, L3, and L4 team we must collaborate, actively listen, co-operate, partner to work to meet common and organizational goals, and most importantly &lt;strong&gt;TRUST&lt;/strong&gt; each other. For example, if I have a problem or am struggling with an unknown or challenging process, I need to be able to rely on my peers, reach out for help, and know that we will confront any challenge and follow-through until we have a solution.  The same can be said for my team of engineers, who themselves are a cluster of collaborative peers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="up-side-rear" src="../images/communication-guidance-sideways-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To improve the sideways communication and collaboration, I recommend that you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be respectful&lt;/strong&gt;, caring, and never talk down to them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice Active listening&lt;/strong&gt;, to understand your peers as humanoids and their unique needs. Silence is an effective ally!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use clear and concise language&lt;/strong&gt;, no TLAs (two/three lettered acronyms), technical jargon, and as my Geography teacher always said no "waffling." Keep it simple, short, concise, and clear. Do not forget to follow up to ensure that your peers are clear on expectations and next steps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be pro-active&lt;/strong&gt;, create a communication matrix and regularly reach out to your peers to build a strong and trusting relationship.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on solutions&lt;/strong&gt; over placing blame or critique. As I always tell my team - "we will burn up or succeed as a team."&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Some leadership anti-patterns you may recognize, for future discussion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Knights in shining armour.&lt;/li&gt;
&lt;li&gt;Blasphemous dictators.&lt;/li&gt;
&lt;li&gt;Zero trust, omnipresent, micro-managers.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Communicating rearwards with my team&lt;/h1&gt;
&lt;p&gt;For me, the most important part on the illustration is my team and I. It is my responsibility to lead them, protect them, and empower them. As quoted by L. David Marquet in &lt;a href="https://davidmarquet.com/turn-the-ship-around-book/"&gt;Turn the Ship Around&lt;/a&gt;, we "give our team control over WHAT they work on and HOW they work", creating a team of leaders and allowing you "not to be missed after you depart."&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="up-side-rear" src="../images/communication-guidance-sideways-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To improve rearward communication, I recommend that you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Establish transparency&lt;/strong&gt; empowering everyone to be informed, pro-active and supportive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Establish open and safe communication&lt;/strong&gt; encouraging everyone to share their ideas, concerns, thoughts, and even feel safe to &lt;strong&gt;vent&lt;/strong&gt; as needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be respectful&lt;/strong&gt;, as discussed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice Active listening&lt;/strong&gt;, as discussed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use clear and concise language&lt;/strong&gt;, as discussed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Provide regular and candid feedback&lt;/strong&gt; on goals, performance, and opportunities to continuously improve.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be approachable&lt;/strong&gt; and available to your team, which brings me to a few more leadership anti-patterns you may recognize:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;"Always behind closed doors office hermit."&lt;/li&gt;
&lt;li&gt;"Secretive and vanishing Houdini."&lt;/li&gt;
&lt;li&gt;"Command and control dictator."
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lastly, why do I refer to rearward communication. Well, something I learnt in my military days was to always lead by example and in the front, which means my team is not only behind me, but also &lt;strong&gt;has my back&lt;/strong&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Remember, less is more! Know your audience and make every word count!&lt;/p&gt;</content><category term="misc"></category><category term="learning"></category></entry><entry><title>Engineering Practice Layering</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-layering.html" rel="alternate"></link><published>2023-03-15T00:00:00-07:00</published><updated>2023-03-15T00:00:00-07:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-15:/engineering-practice-layering.html</id><summary type="html">&lt;p&gt;Application Layering - Separation of Concerns Architecture Principle&lt;/p&gt;</summary><content type="html">&lt;h1&gt;What is layering?&lt;/h1&gt;
&lt;p&gt;Layering is a common construct for identifying discreet areas of interest within an undertaking, so that work can be done in a focused way in each of 
those areas as well as to highlight the interconnections between each layer.  Typically, each layer has its own specialists that work on the specific
technology involved in any given layer and collaborate with other specialists where the layers interface.&lt;/p&gt;
&lt;p&gt;This is most easily understood when you look at the physical world - lets take construction for example.  To create a building, first an architectural drawing is created that identifies each aspect of construction as a layered endeavor.  Once the design is signed-off, a hole is dug, a frame and rebar are placed within and the concrete is poured into the frame - this is the foundation layer.  Next - layer 2 - the wall frames are built for the first floor, the ceiling, the 2nd floor foundation and its' walls; and so on up one floor in the 
building at a time.  &lt;/p&gt;
&lt;p&gt;After each floor has its wall frames in place, layer 3 begins with electrical and plumbing specialists routing their work through the wall frames and up through each level
of the building.  The 4th layer of work involves completing the walls with drywall and plaster, and installing the windows.  This continues to the final, finishing layer where the 
fixtures and appliances are installed, switches installed and connected, paint applied, and carpet or hardwood flooring is installed.&lt;/p&gt;
&lt;p&gt;This is no different in software - except the layers are logical, containing only code that address a particular area of interest.  But because it is code, each layer can be ommitted or subverted by the unwary.  Let's examine this more closely next.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why is Layering Important?&lt;/h1&gt;
&lt;p&gt;In Software, &lt;em&gt;Layering&lt;/em&gt; is a fundamental design principle enabling us to create lasting code of highest quality - and maintainability &amp;amp; testability.  When we layer our software, we
are acknowledging the different focal points that we need to be concerned with - and possibly employ different specialists to work on each layer independently. 
This creates a technology stack and loosely coupled interfaces between the layers that promote consistency at the communication channels between layers (re: public interfaces), and independence of each layer itself.  Each layer
can also be tested and verified independently when we employ additional architectural principles such as Dependency Inversion and Encapsulation.&lt;/p&gt;
&lt;p&gt;Like the construction example above, this layering represents technology and purpose boundaries, that, when respected, create a modular and consistent design pattern enabling components to be reused and 
more easily understood.  Indeed, this understanding leads to abstraction of fundamental behaviours that can organized the code into hierarchies and promote non-duplication of function.&lt;/p&gt;
&lt;p&gt;When we layer, we are more prepared for evolving the software as independent pieces in an Agile workflow and able to embrace CI/CD and microservice architecture more readily.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Separation of Concerns Principle&lt;/h1&gt;
&lt;p&gt;Layering is the result of following the &lt;em&gt;Separation of Concerns&lt;/em&gt; design principle, which states that software should be separated based on the kind
of work it performs.  When viewed from this lens, we can clearly see what should be in the User Interface collection of code - the code that deals
with artifacts used to collect or format data for display, and what code performs and enforces business rules and procedures, versus the code used to store and
retrieve data from a database or file system. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What are the Layers in Software Architecture&lt;/h1&gt;
&lt;p&gt;Architecturally, software applications should be logically constructed following the separation of concerns principle which identifies the application layers.  By separating core business 
rules and validation logic from user-interface and back-end (data service) infrastructure.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt; - The layer the end-user interacts with, a page or form or visual element such as tables, buttons, charts and graphs, input fields and layout.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business Logic&lt;/strong&gt; - The layer containing the business rules and logical processes, workflows, and validation rules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Access&lt;/strong&gt; - The layer is concerned with the storage and retrieval of data and other artifacts used by the application to perform its function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these layers is focused on a separate logical area of concern, uses different tools and has a different purpose.  Each of
these logical layers should be created in separate physical projects within the application solution, which helps enforce the separation of concerns principle, improves modularity and testability.  &lt;/p&gt;
&lt;p&gt;Ideally, The Business Rules and Logic should not depend on any other projects in the application.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Different Layering Scenarios&lt;/h1&gt;
&lt;p&gt;As mentioned above, there are logically 3 layers which can be placed into 3 or more physical Tiers enabled by following this software architecture design pattern.  These layers can then be 
organized into four distinct scenarios, shown here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Architecture Scenarios" src="../images/engineering-practice-layering-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image sourced from&lt;/em&gt; &lt;a href="https://nileshviradiya.blogspot.com/2014/01/what-is-meant-by-n-tier.html"&gt;&lt;em&gt;Programming Stuff: What is meant by “N Tier”?&lt;/em&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Classic&lt;/strong&gt; - All logical layers are combined into one, making direct access to the underlaying data source from within the single code layer.  This was a common implementation years ago and can still be found, but easily leads to &lt;em&gt;Boundary Bleed&lt;/em&gt; and messy spaghetti code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Two-Tier&lt;/strong&gt; - In this scenario, the data access layer is distinctly separated from all other code, which resides in the main project for the application.  This represents an understanding that data access and the object-relation-mapping (ORM) is a distinct aspect of a software application and requires specialized knowledge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Three-Tier&lt;/strong&gt; - This is a further refinement and maturation of the software architecture, uniquely placing the business rules (requirements) and logic (processes) within a distinct layer free from presentation and data access specialized coding needs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;N-Tier&lt;/strong&gt; - This is the holy-grail, where workflow is separated from the Presentation layer, and accesses the business services layer which uses the data services layer for storage and retrieval; all layers can be distributed across CPU and machine boundaries to achieve scale and reach.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;What is Boundary Bleed&lt;/h1&gt;
&lt;p&gt;Boundary Bleed occurs when you violate the separate of concerns principle and allow non-built-in types to be exposed through multiple layers.  For example, if you
create a class in your data service layer, and return it to your business service layer, and that in turn returns that same class to the presentation layer; you've
passed a class through 2 layers and inadvertently coupled the presentation layer with the data service layer.  This makes your code more brittle and harder to test, where changes
can have unexpected side-effects.  This is &lt;em&gt;Boundary Bleed&lt;/em&gt;, and it should be avoided and considered as an anti-pattern.&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Automation Bad Day</title><link href="https://wsbctechnicalblog.github.io/automation-bad-day.html" rel="alternate"></link><published>2023-03-06T00:00:00-08:00</published><updated>2023-03-06T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-06:/automation-bad-day.html</id><summary type="html">&lt;p&gt;Clearly yesterday was a bad day.&lt;/p&gt;</summary><content type="html">&lt;p&gt;"&lt;em&gt;Clearly yesterday was a bad day&lt;/em&gt;" is a quote by &lt;a href="https://www.linkedin.com/in/brharry/"&gt;Brian Harry&lt;/a&gt; in his &lt;a href="https://devblogs.microsoft.com/bharry/bad-day/"&gt;Bad Day&lt;/a&gt; blog post. I vividly remember that day as I had the honour of working for Brian at the time and learning a ton from him about the value of transparency, not getting discouraged by hindsight, and always being laser focused on our end-users. Our day was nowhere as bad as Brian's, but worth sharing. &lt;/p&gt;
&lt;p&gt;In an operational environment with 2500 classic Azure Pipelines and more than a dozen engineers manually updating the pre- and post-approval gates we began to struggle with snowflakes, guardrail breaches, and failed security audits. We configured the pre-and post-approval gates in CSV files and stored them in version control – our config-as-code (&lt;strong&gt;c-a-c&lt;/strong&gt;) era was born. The CSV files and associated automation using the Azure DevOps &lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.1"&gt;REST API&lt;/a&gt;, allows us to consistently re-apply the last known good configuration for thousands of classic Azure Pipelines in minutes on a weekly basis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Outcome&lt;/strong&gt;: Consistency, standardization, security, and time-savings!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us have a peak at one of our demo &lt;code&gt;c-a-c&lt;/code&gt; files to understand the automation process.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Our configuration-as-code (c-a-c)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="c-a-c" src="../images/azure-devops-automation-bad-day-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the top is a typical Azure Pipeline, delivering artifacts to a number of stage environments, with four humanoid gates.&lt;/p&gt;
&lt;p&gt;At the bottom is a demo &lt;code&gt;c-a-c&lt;/code&gt; CSV file, with one row per stage. Each row defines the pre approver(s), the post-approver(s), and the approval method. When our &lt;code&gt;c-a-c&lt;/code&gt; automation runs, it restores the Azure Pipeline pre- and post-approvals to the last known and desired configuration if the Set value is &lt;code&gt;Yes&lt;/code&gt;. In other words, if you fiddle with the approvals manually, the automation will overwrite your changes when it runs.&lt;/p&gt;
&lt;p&gt;Although the actual &lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.1"&gt;REST API&lt;/a&gt; logic is not trivial, our &lt;code&gt;c-a-c&lt;/code&gt; concept is.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Meltdown timeline&lt;/h1&gt;
&lt;p&gt;Our bad day actually started on March 2nd at high-noon, when my colleague Daniel ran the latest &lt;code&gt;c-a-c&lt;/code&gt; file I fine-tuned for hours. Fortunately, I opted against a big-bang &lt;code&gt;c-a-c&lt;/code&gt; reset and only had about 15% of the 2,500 Azure Pipelines and their stages configured with &lt;code&gt;Set=Yes&lt;/code&gt;. The automation ran like a dream.&lt;/p&gt;
&lt;p&gt;At around 15:00 our delivery teams reported that their pipelines were failing, unable to connect to an agent. At first, we all suspected our automation, because the &lt;a href="https://status.dev.azure.com/"&gt;Azure DevOps Status&lt;/a&gt; was showing an &lt;code&gt;Everything is looking good&lt;/code&gt; status.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="timeline" src="../images/azure-devops-automation-bad-day-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eventually after a barrage of tweets, Teams chats, and raising Microsoft Support tickets the &lt;a href="https://status.dev.azure.com/"&gt;Azure DevOps Status&lt;/a&gt; switched to an &lt;code&gt;unhealthy&lt;/code&gt; status due to the &lt;a href="https://status.dev.azure.com/_event/371776903"&gt;Pipeline error: Failure in sending the provision message&lt;/a&gt; incident. Little did we know that this incident actually reduced the blast radius of our bad day, as most teams opted for another day by the time the Azure Agents were back to a healthy state. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;2AM CALL @ high noon&lt;/h1&gt;
&lt;p&gt;Just before high-noon we were getting pulled into &lt;strong&gt;all hands-on deck&lt;/strong&gt;, also known as the &lt;strong&gt;infamous 2AM-call&lt;/strong&gt; collaboration sessions. One of our Azure Pipelines had deployed all the way to production, skipping our &lt;strong&gt;Staging (ST)&lt;/strong&gt; and &lt;strong&gt;Production (PR)&lt;/strong&gt; pre-approval gates. Bypassing change control is a severe issue. Luckily our operational support engineers delivered their usual exceptional operational support and reverted the incorrect production deployment within minutes to minimize negative end-user impact. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="2AM Call" src="../images/azure-devops-automation-bad-day-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In parallel we started the brainstorming and root-cause analysis of our Azure Pipelines. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="c-a-c meltdown" src="../images/azure-devops-automation-bad-day-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We determined that the automation run, from the previous day, had purged, not set, the pre-approver(s) for all processed pipelines. In other words, the only gate between production and the delivery teams was the Security Review &lt;strong&gt;post&lt;/strong&gt;-approver.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Core Issue&lt;/h1&gt;
&lt;p&gt;As all software glitches, the root cause was a trivial typo. Note the missing &lt;code&gt;s&lt;/code&gt; in the &lt;strong&gt;Pre Approver&lt;/strong&gt; column header.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="core issue" src="../images/azure-devops-automation-bad-day-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a result, the automation did exactly what my configuration file instructed it to do.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System Test (SY), Staging (SR), and Production (PR) Stage were updated as &lt;code&gt;Set=Yes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pre-approvers were purged as the value for &lt;code&gt;Pre-Approvers&lt;/code&gt; was &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another quote from Brian's post comes to mind here: "&lt;em&gt;The hard thing about this is that anything can go wrong and it’s only obvious in hindsight what you should have been protecting against&lt;/em&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Remediate &amp;amp; Learn&lt;/h1&gt;
&lt;p&gt;Our focus was, as expected, to restore the health of our Azure Pipelines. Fortunately, only a small subset of Azure Pipelines was affected, thanks to Microsoft outage and our close collaboration with our DevSecOps team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pipelines not triggered by a change to the &lt;code&gt;release&lt;/code&gt; branch, were stopped by our artifact filters.&lt;/li&gt;
&lt;li&gt;Pipelines that made it through to the &lt;strong&gt;Security Review&lt;/strong&gt; stage, where stopped cold by our security engineers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In parallel we fixed the &lt;code&gt;c-a-c&lt;/code&gt; header and triggered the automation to undo the damage. We also took the opportunity to add pre-automation validation to reduce the likelihood of a recurrence.&lt;/p&gt;
&lt;p&gt;And, most importantly, we shared the status of the incident, analysis, root cause, and remediation transparently. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A huge &lt;strong&gt;THANK YOU&lt;/strong&gt; to our vigilant delivery team, security engineers, operations engineers, and my team for keeping cool and focused throughout the turbulent Friday.&lt;/p&gt;
&lt;p&gt;Only one pipeline, the one that triggered the incident, made it through to production. It could have been a lot worse!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category></entry><entry><title>Communication Guidance Upwards</title><link href="https://wsbctechnicalblog.github.io/communication-guidance-upwards.html" rel="alternate"></link><published>2023-03-03T00:00:00-08:00</published><updated>2023-03-03T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-03:/communication-guidance-upwards.html</id><summary type="html">&lt;p&gt;Before you ask for anything, get clarity on the five WHYs!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am working on my communication and collaboration skills. Although these posts will not be of a technical nature, they will benefit us all. I learn by doing and sharing and I love getting candid feedback from you, as well as from my manager and mentor.&lt;/p&gt;
&lt;p&gt;In recent courses I learnt that the impact of communication is made up of 7% words, 38% tone, and 55% cues. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="communication" src="../images/communication-guidance-upwards-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is for interactive communication! For written communication we lose the cues, making the words and tone even more important.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Communicating upwards to executive domain&lt;/h1&gt;
&lt;p&gt;Our leaders are typically driven by &lt;strong&gt;goals&lt;/strong&gt;, focused on the &lt;strong&gt;bottom line&lt;/strong&gt;, and push for progress at a &lt;strong&gt;rapid&lt;/strong&gt; pace. If our communication and proposals are too complex, they quickly become overburdened with the complexities, and are more likely to become dismissive.&lt;/p&gt;
&lt;p&gt;We must paint a picture of success, clearly describe the &lt;strong&gt;WHY&lt;/strong&gt;, and &lt;strong&gt;HOW&lt;/strong&gt; we will affect the goals and bottom line. Communicate your idea/plan/request directly and objectively - no fillers, no waffling, no noise, and no redundant nouns.&lt;/p&gt;
&lt;p&gt;If you are a &lt;strong&gt;dreamer&lt;/strong&gt; like I am, you must balance your &lt;strong&gt;dream&lt;/strong&gt; with &lt;strong&gt;reality&lt;/strong&gt; or be viewed as overly optimistic and disruptive. &lt;/p&gt;
&lt;p&gt;I created a basic template to help me document initiatives when I need stakeholder advice, buy-in, and support. I am encouraging my team to use the same template when they have an idea, or if I ask them to create a plan.&lt;/p&gt;
&lt;p&gt;Hope the template will help you as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Proposal Template&lt;/h1&gt;
&lt;p&gt;Here is the template I created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Template" src="../images/communication-guidance-upwards-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slides 1 (cover), 2 (quotes), 9 (references), and 10 (Q&amp;amp;A) are intended for presentations.&lt;/li&gt;
&lt;li&gt;Slide 3: &lt;strong&gt;PROBLEM TO SOLVE&lt;/strong&gt; - Before you commit your &lt;strong&gt;problem&lt;/strong&gt; to paper, investigate the root cause. The five (5) WHYs technique is an effective way for you to do &lt;strong&gt;root&lt;/strong&gt; cause analysis and to find the root cause of any problem. It is also an effective way for your audience to test your &lt;strong&gt;problem definition&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;The basis of Toyota’s scientific approach is to ask why five times whenever we find a problem … By repeating why five times, the nature of the problem as well as its solution becomes clear.&lt;/em&gt;“ Taiichi Ohno&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slide 4: &lt;strong&gt;OVERVIEW&lt;/strong&gt; - A crisp overview of the proposal - &lt;strong&gt;WHAT&lt;/strong&gt; is it all about.&lt;/li&gt;
&lt;li&gt;Slide 5: &lt;strong&gt;BENEFITS&lt;/strong&gt; - Outline the benefits of investing in the proposal - &lt;strong&gt;WHAT&lt;/strong&gt; is the value.&lt;/li&gt;
&lt;li&gt;Slide 6: &lt;strong&gt;PROBLEM TO SOLVE&lt;/strong&gt; - If proposal is focused on a problem, describe the problem to be resolved.  &lt;/li&gt;
&lt;li&gt;Slide 7: &lt;strong&gt;INNOVATION&lt;/strong&gt; - If the proposal is focused on an innovation, describe the innovation to invest in.&lt;/li&gt;
&lt;li&gt;Slide 8: &lt;strong&gt;EXPECTED OUTCOME&lt;/strong&gt; - This is the most important part, which describes the outcome and value proposition in the following format:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="nv"&gt;want&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
        &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="nv"&gt;recommend&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;HOW&lt;/span&gt;,&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
        &lt;span class="nv"&gt;There&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;several&lt;/span&gt; &lt;span class="nv"&gt;benefits&lt;/span&gt;:
            &lt;span class="nv"&gt;First&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CORE&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Also&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Finally&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
    &lt;span class="nv"&gt;Imagine&lt;/span&gt;, &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to keep your communication crisp. The left sample is focused on the salient points and keeping the details (verbiage) in the speaker notes for reference. Avoid the slide on the right - you will lose your audience!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="crisp versus noisy" src="../images/communication-guidance-upwards-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hope this helps you with your next communication.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Remember, less is more! Know your audience and make every word count!&lt;/p&gt;</content><category term="misc"></category><category term="learning"></category></entry><entry><title>What about ChatGPT?</title><link href="https://wsbctechnicalblog.github.io/what-about-chatgpt.html" rel="alternate"></link><published>2023-03-01T00:00:00-08:00</published><updated>2023-03-01T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-01:/what-about-chatgpt.html</id><summary type="html">&lt;p&gt;A question that made me speechless at a recent Navigating the Future event.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A colleague asked a great question at a recent Navigating the Future event, which I answered with “I have no answer for you today.” To my defence, I was not feeling well at the time, had a cracking headache, and was therefore trying to hide in the audience. But … the reason I had no actionable answer was that I have been mulling over &lt;a href="https://openai.com/blog/chatgpt"&gt;ChatGPT&lt;/a&gt; and &lt;a href="https://openai.com"&gt;OpenAI&lt;/a&gt; for weeks, balancing a deep-rooted fear with respect for artificial intelligence. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AI" src="../images/what-about-chatgpt-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Fear as I am from the &lt;a href="https://en.wikipedia.org/wiki/HAL_9000"&gt;HAL9000&lt;/a&gt; and Terminator era where &lt;a href="https://en.wikipedia.org/wiki/Skynet_(Terminator)"&gt;SkyNet&lt;/a&gt; eventually took over control of our precious planet. The day machines develop self-awareness we are in serious trouble.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Respect" src="../images/what-about-chatgpt-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Respect as I programmed on the Intel 80186 processor, which had a 16-bit data width capable of addressing a phenomenal 65,536 bytes of memory. The magnitude of processing, memory space, and artificial intelligence we enjoy today makes engineers like a tad antiquated. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Old" src="../images/what-about-chatgpt-3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I'm old but I'm not obsolete." Terminator, aka Arnold Schwarzenegger&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;I loathe the dumb chat bots&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Dumb Robot" src="../images/what-about-chatgpt-4.png"&gt;&lt;/p&gt;
&lt;p&gt;We have all experienced it. You spend hours reading static web pages from your favourite online marketplace, looking for ways to contact anyone to get help on a missing or damaged shipment. Eventually you are chatting to a machine that starts with the friendly “Hi, how can I help you?” After agonising and wasteful exchanges of information, the chat bot refers you back to the same pages you spend hours reading.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Having a conversation with an intelligent bot sound appealing&lt;/h1&gt;
&lt;p&gt;&lt;img alt="AI Conversation" src="../images/what-about-chatgpt-5.png"&gt;&lt;/p&gt;
&lt;p&gt;What excites me about artificial intelligence is that we can turn the dialog with the machine into a meaningful conversation, making it possible for the machine to continuously learn, ask clarification questions, and investigate and formulate a detailed response in the background. Multi, continuous, repetitive, and context switching tasking is no problem for our binary companions.&lt;/p&gt;
&lt;p&gt;I dream of a common engineering bot that can be the friendly onboarding buddy, an engineer’s patient wingman, and the first point contact for all technical and operational support. If anyone wants to raise this as an idea for the upcoming InnoFest / Hackathon, then you have both my vote and support! &lt;/p&gt;
&lt;p&gt;We will have an uphill battle to convince our legal, freedom of information and protection of privacy act, and especially our security team, but having a conversation with an intelligent bot makes it all worth it. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;AI &amp;lt;&amp;gt; Humanoid&lt;/h1&gt;
&lt;p&gt;While many are scared that machines will take over our planet, we can rest assured that a machine will never be able to replace a human. Machines will never be able to demonstrate &lt;strong&gt;empathy&lt;/strong&gt; or &lt;strong&gt;passion&lt;/strong&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I hope that artificial intelligence is based in Azimov’s Laws of robotics&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The robot shall not harm human or, by inaction allow a human to come to harm. &lt;/li&gt;
&lt;li&gt;The robot shall obey any instructions given to it by humans. &lt;/li&gt;
&lt;li&gt;The robot shall avoid actions or situations which could cause it to come to harm itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let me ask my son, Thorsten who studied psychology, to review my post and share his thoughts on ChatGPT, OpenAI, and the rise of artificial intelligence. Handing the keyboard to T.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Closing thoughts by &lt;a href="https://twitter.com/tschaub18"&gt;(T)horsten&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As Willy said, a machine will never be able to replace a human. Given that statement, I prompted ChatGPT with the following question: “Do you have empathy?”&lt;/p&gt;
&lt;p&gt;This is the response I got: "As an artificial intelligence language model, I do not have emotions or feelings in the same way that humans do. While I can recognize and understand emotions based on the input I receive, I do not have the capacity to experience empathy or any other emotions. My primary function is to process information and provide responses based on that information.”&lt;/p&gt;
&lt;p&gt;So, what separates machines from humans? Humans have historically been compared to other beings as superior in intelligence, language, culture, technology, and self-awareness. AI models overshadow humans in intelligence, language, and technology, but cannot compensate in areas of culture and self-awareness. Self-awareness is the pivotal aspect that separates humans from other beings, including machines. It allows us to be aware of ourselves, others and have the ability to reflect on our own thoughts and feelings. These feelings drive the understanding humans have of the world, and the reality we create within it.&lt;/p&gt;
&lt;p&gt;What does this mean? If thinking about this in a rather simplistic way, is that for a machine to produce an output, it requires an initial input, which is ultimately driven by human emotions. &lt;/p&gt;
&lt;p&gt;While I believe AI models are progressively taking over the world and can be an intimidating force to accept, it cannot replace humans as a whole. A common understanding in Psychology is that we cannot predict human behaviour with absolute surety, because at the core of our beings, every human being is different. Human beings are reactive, mainly driven by emotions. &lt;/p&gt;
&lt;p&gt;AI models are already relevant in human society, what is important is that we recognize the limitations of these machines. Humans do have weaknesses that are fundamental to emotions, such as being irrational. A machine or so called AI-model, will never be irrational and rather just produce answers that are statistically driven by human input, which is still based on emotions.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Azure DevOps Pipeline OSS v2.1 Flow</title><link href="https://wsbctechnicalblog.github.io/azure-devops-pipeline-oss-v2-1-flow.html" rel="alternate"></link><published>2023-02-22T00:00:00-08:00</published><updated>2023-02-22T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-22:/azure-devops-pipeline-oss-v2-1-flow.html</id><summary type="html">&lt;p&gt;Two pull requests with pipeline updates for your perusal.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently enhanced our in-house Azure Pipelines v2 application-type blueprints. Although we deemed the latest blueprint as too WorkSafeBC specific and therefore have not published it, we posted two pull requests with an update to the git-tools-git-version.yml template, &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/13"&gt;PR#13&lt;/a&gt;, and an update to the overall pipeline workflow, &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/14"&gt;PR#14&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Path Version Variable&lt;/h1&gt;
&lt;p&gt;The change in the git-tools-git-version.yml template is subtle. By adding line &lt;code&gt;83&lt;/code&gt; we create and set both the &lt;code&gt;semVersion&lt;/code&gt; and the &lt;code&gt;patchVersion&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;81&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;82&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=semVersion;isOutput=true]$(GitVersion.MajorMinorPatch)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;83&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=patchVersion;isOutput=true]$(GitVersion.Patch)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Refer to &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/13"&gt;Pull Request 13&lt;/a&gt; for details.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ALSO SEE:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/sharing-variables-amongst-agents.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/sharing-variables-with-stages-and-jobs.html"&gt;Gotchas when sharing variables with Azure DevOps stages and jobs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Pre-Production Automation Stage&lt;/h1&gt;
&lt;p&gt;With the v2 blueprints we introduced the &lt;code&gt;Quality Assurance Automation&lt;/code&gt; and &lt;code&gt;Security Automation&lt;/code&gt; stages, allowing you to run quality assurance automation after deploying to development or system test environment, as well as security automation before triggering a security review.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;v2 pipeline flow&lt;/p&gt;
&lt;p&gt;&lt;img alt="v2" src="../images/azure-devops-pipeline-oss-v2-1-flow-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As per &lt;a href="https://github.com/orgs/WorkSafeBC-Common-Engineering/discussions/4#discussioncomment-5002914"&gt;discussion with 604Kev&lt;/a&gt; we introduced a pre-production automation stage, allowing you to perform trivial tasks before deploying to production environments, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notifying release management&lt;/li&gt;
&lt;li&gt;Creating work items of Azure Boards for tracking&lt;/li&gt;
&lt;li&gt;Telemetry&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;v2.1 pipeline flow&lt;/p&gt;
&lt;p&gt;&lt;img alt="v2.1" src="../images/azure-devops-pipeline-oss-v2-1-flow-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/14"&gt;Pull Request 14&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;Hope you like the improvements. Next up is a Cloud Native Web Application blueprint.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="oss"></category><category term="pipelines"></category></entry><entry><title>Engineering Practice Naming Conventions</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-naming-conventions.html" rel="alternate"></link><published>2023-02-17T00:00:00-08:00</published><updated>2023-02-17T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-17:/engineering-practice-naming-conventions.html</id><summary type="html">&lt;p&gt;Naming Convention Nuggets of Knowledge and Best Practices&lt;/p&gt;</summary><content type="html">&lt;h1&gt;What's in a Name?&lt;/h1&gt;
&lt;p&gt;How we name and categorize things conveys meaning and intent - what it &lt;em&gt;is&lt;/em&gt; and possibly &lt;em&gt;how&lt;/em&gt; it should be used.  All
in the aim of improving clarity of purpose and understanding its nature, and how it should be used.&lt;/p&gt;
&lt;p&gt;When we talk about software, we are specifically addressing naming conventions and standards, patterns that
can be exploited for automation and autonomous actions.  We are not talking about naming our children or pets in unique
or playful ways; this should be avoided in our software and thought of as an anti-pattern.  We need a pragmatic and
useful approach to naming &lt;em&gt;things&lt;/em&gt; to the benefit of our software quality and maintainability, and in fact scalability.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why are Naming Conventions Important?&lt;/h1&gt;
&lt;p&gt;We define conventions and standards so that the purpose and intent of the an object or variable can be inferred (i.e. its &lt;em&gt;Name&lt;/em&gt;), and indeed
be anticipated; that is where automation glory can be realized.  To get there, conventions must be adopted and applied organization-wide - 
across all products, projects, and development teams.  It is more important to define a convention and &lt;em&gt;stick with it&lt;/em&gt;, than it is
to pick the &lt;em&gt;best&lt;/em&gt; one - it may come down to style preferences and patterns that everyone agrees on.&lt;/p&gt;
&lt;p&gt;Naming conventions can apply to all &lt;em&gt;things&lt;/em&gt; in your software; for folders, files, variables, classes, methods, and even project files and solutions. Deciding on and following your convention is a cornerstone to creating great software.  When you adopt and follow an 
organization-wide standard &lt;em&gt;Naming Convention&lt;/em&gt; you will experience the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smooth Operation - When your data is easy to find, it is easy to extract the required knowledge and make decisions based on it. There won’t be any delay in getting information, and this ensures smooth administration in your organization without any bottlenecks.&lt;/li&gt;
&lt;li&gt;Better Version Control - Information gets constantly updated in an organizational setting. To make sure you are using the most recent version, you need to tag it accordingly in your file name. This helps you avoid errors associated with outdated knowledge.&lt;/li&gt;
&lt;li&gt;Save Time and Money - When you avoid duplication through proper naming conventions, you can save a lot of time and money. You won’t have to spend time looking for lost files and there will be no need to create new versions of already existing files.&lt;/li&gt;
&lt;li&gt;Automation - you can anticipate file and folder names, enabling process automation such as build pipelines and code scans&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other pillars in creating exceptional software as well, and we'll
explore those is upcoming articles.&lt;/p&gt;
&lt;p&gt;Let us explore these standards, and the patterns that we use &lt;em&gt;by convention&lt;/em&gt; to improve our software and unlock automation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Date Convention&lt;/h1&gt;
&lt;p&gt;Dates are so common, we run into them just about every day :).  &lt;/p&gt;
&lt;p&gt;We need a standard way to represent a date, since it can be used in filename and 
data we generate such as processing and event logs.  Some examples could be YYMMDD or YYYYMMDD, following a decreasing scope pattern.  Additional,
you might optionally include a time component suffix as well HHMMSSmmmm.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Case Convention&lt;/h1&gt;
&lt;p&gt;When we create &lt;em&gt;things&lt;/em&gt; that have compound names - names that contain multiple words combined into a single string - we may want to delineate
where each word begins. There are several popular conventions to apply Capital Letters and remove or replace blanks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Camel Case&lt;/strong&gt; (camelCase) - This involves capitalizing all words except the first word and removing the space in between them. For instance, 'product table id' can be written as productTableId.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pascal Case&lt;/strong&gt; (PascalCase) - This involves capitalizing all words in the name, including the first, and removing the space in between them. For instance, 'product table id' can be written as ProductTableId.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Snake Case&lt;/strong&gt; (snake_case) - This type of naming combines words simply by replacing the space with an underscore (_). The same example used above can be written as product_table_id.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kebab Case&lt;/strong&gt; (kebab-case) - This is similar to the snake case except the underscore is replaced with a dash (-). For the file name used above, the Kebab case name can be written as product-table-id.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Special Characters&lt;/h1&gt;
&lt;p&gt;It is probably best if you also include in your Naming Convention rules for what characters are valid to be used.  Some characters
have special meaning in some circumstances and should be avoided - such as the ampersand (@), dashes, backward and forward slashes.
When you use those special characters - any one can have implied meaning and create unexpected behaviours, so it is best to avoid them all together.
If you adopt the rule of only using Alpha-numerics, you will be well prepared for such situations.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Standard Terms&lt;/h1&gt;
&lt;p&gt;You should also consider managing a library of standard terms, with their encoded (Naming Convention applied) &lt;em&gt;name&lt;/em&gt;, definition and usage.&lt;br&gt;
When defining a name for an object - consult the library of standard terms first to see if words you want to use have been standardized on.  If it is
there, use it; if it is not, add it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;REMEMBER&lt;/strong&gt; this is organization wide set of terms used for all software endeavours - be careful when selecting terms that mean the same
across all development teams.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Azure DevOps Transient Faults</title><link href="https://wsbctechnicalblog.github.io/azure-devops-transient-faults.html" rel="alternate"></link><published>2023-02-15T00:00:00-08:00</published><updated>2023-02-15T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-15:/azure-devops-transient-faults.html</id><summary type="html">&lt;p&gt;Be careful not to annoy Azure DevOps with your automated maintenance jobs!&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you automate your operational support and maintenance of &lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt;, such as updating the pre- and post-approvers of 2500 Azure Pipelines, or creating a detailed report of all Azure Pipelines in your Azure DevOps Organization, you may come across ad-hoc exceptions, "429 Too Many Requests Error", "503 Service Unavailable", or a "&lt;em&gt;last time it 100% worked for sure with no issues&lt;/em&gt;" call for help.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example 1 of an automation meltdown&lt;/p&gt;
&lt;p&gt;&lt;img alt="failure" src="../images/azure-devops-transient-faults-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Service Unavailable
Service Unavailable
HTTP Error 503. The service is unavailable.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Example 2 of an automation meltdown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Azure DevOps Services Unavailable

    Azure DevOps Services

        Sorry! Our services aren&amp;#39;t available right now.
        We&amp;#39;re working to restore all services as quickly as
        possible. Please check back soon.
        To see the latest status on our services, please 
        visit our support page.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In both cases I ended up having to intervene manually and restart the maintenance job. Muda!&lt;/p&gt;
&lt;h1&gt;Transient fault&lt;/h1&gt;
&lt;p&gt;You probably triggered a &lt;strong&gt;throttling&lt;/strong&gt; or &lt;strong&gt;circuit breaker&lt;/strong&gt; pattern, which Azure DevOps uses to protect itself against excessive load or potential &lt;code&gt;denial of service&lt;/code&gt; attacks. If you do not deal with the transient fault you will end up with failed automation, wasted time, and &lt;strong&gt;manual&lt;/strong&gt; intervention - more &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Dealing with transient fault&lt;/h1&gt;
&lt;p&gt;Here is a simple &lt;strong&gt;retry pattern&lt;/strong&gt; that allows you to retry the operation after going to sleep for a while. You may have to play with and increase the &lt;code&gt;$retryValue&lt;/code&gt; default value, depending on the REST API you are calling. &lt;/p&gt;
&lt;p&gt;1.13 has worked for me and my automation scripts to date.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retry logic&lt;/p&gt;
&lt;p&gt;&lt;img alt="bandaid" src="../images/azure-devops-transient-faults-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;13&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-lt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;failureCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;DevOps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;REST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;API&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;$result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Invoke-RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$headers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;processing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;retry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;logic&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$retryCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ensure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;shows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;warning&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;Write-Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;##vso&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;task.complete&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;SucceededWithIssues&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;SUCCEEDED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ISSUES&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Logging&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;Write-Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;Sleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;retry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;processing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;loop.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; $failureCount &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Write-Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;retry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;Start-Sleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-Seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$retrySleep&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple, yet effective.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Read &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; for more details on transient faults.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Azure Devops simplicity to rule them all</title><link href="https://wsbctechnicalblog.github.io/azure-devops-simplicity-to-rule-them-all.html" rel="alternate"></link><published>2023-02-03T00:00:00-08:00</published><updated>2023-02-03T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-03:/azure-devops-simplicity-to-rule-them-all.html</id><summary type="html">&lt;p&gt;Keep Azure DevOps setup simple and avoid a lot of pain and waste!&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is seldom that you have an opportunity to plan and deploy your engineering process using &lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; from the ground up - a greenfield deployment not previously polluted by snowflakes (variations of the same) and custom development (everyone has a preference). If you do, I have two recommendations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep it &lt;strong&gt;simple&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;one&lt;/strong&gt; Azure DevOps Project to rule them all.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which reminds me of &lt;a href="https://devblogs.microsoft.com/devops/what-is-devops-donovan/"&gt;Donovan Brown's&lt;/a&gt; infamous definition of DevOps "&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users&lt;/em&gt;", and his iconic statement "&lt;em&gt;You cannot buy DevOps and install it.&lt;/em&gt;" I even created laptop stickers for his DevOps definition, as it is crisp and balances my belief in the value of DevOps. Unfortunately, Microsoft renamed their product to Azure DevOps, making the argument of his iconic statement a real challenge to uphold.&lt;/p&gt;
&lt;p&gt;This post, however, is based on learning lessons the hard way and preparing a brownfield that had years of development based on autonomy over guardrails and storms of snowflakes. It took us a year of hard work, amazing innovations, and grit …&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Simplicity and consistency over Snowflakes!&lt;/h1&gt;
&lt;p&gt;It does not take long to realize that supporting thousands of CI/CD &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"&gt;Azure Pipelines&lt;/a&gt;, &lt;a href="https://learn.microsoft.com/en-us/azure/devops/REPOS/?view=azure-devops"&gt;azure Repos&lt;/a&gt;, and &lt;a href="https://learn.microsoft.com/en-us/azure/devops/ARTIFACTS/?view=azure-devops"&gt;Azure Artifacts&lt;/a&gt; that have drifted from each other is neither sustainable, nor cost effective. We had some bright engineers create pipelines running steps in parallel, using a platter of custom extensions, and scripts that makes any engineer’s heart rate shoot through the roof with excitement. Until the engineer leaves the organization and another engineer has the responsibility of maintaining the artwork and deal with a hotfix at the same time. Multiply this by a hundred to a thousand fold and you quickly realize complexity, cost, and un-maintainability of a technology &lt;strong&gt;waste&lt;/strong&gt;, that is supposed to empower the engineers to deliver continuous value.&lt;/p&gt;
&lt;p&gt;We invested in creating the pillars for &lt;strong&gt;guardrails&lt;/strong&gt;, &lt;strong&gt;automation&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt;, and &lt;strong&gt;self-service automation&lt;/strong&gt;. See these posts for more details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html"&gt;Can government agencies be innovative?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/governance-manifestos-guardrails.html"&gt;Can we enact governance through engineering-friendly manifestos and guardrails?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/our-open-source-pipeline-blueprints-have-landed.html"&gt;Our open-source pipeline blueprints have landed!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part9.html"&gt;Self-service automation - A dream turns into reality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Lean on out-of-the-box features&lt;/h1&gt;
&lt;p&gt;Whenever a user requests a new custom extension to be installed from [Azure DevOps Marketplace)https://marketplace.visualstudio.com/azuredevops/), make sure you ask the five (5) WHYs! &lt;/p&gt;
&lt;p&gt;While it is fun and exciting to watch a delighted end-user, you will soon receive little patience and understanding when the  users have an issue with the extension or are looking for new features. Worst of all, if an extension is deprecated or a vulnerability is detected by security, there is very little of support and service level agreements you can rely on with &lt;strong&gt;free&lt;/strong&gt; extensions.&lt;/p&gt;
&lt;p&gt;Keeping it simple and relying on out-of-the-box service features, keeps the feature and maintenance under control. If you must invest in an extension, I recommend that you:&lt;/p&gt;
&lt;p&gt;Pick extensions with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Verified Logos" src="../images/azure-devops-simplicity-to-rule-them-all-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;verified domain&lt;/strong&gt; and the &lt;strong&gt;top publisher&lt;/strong&gt; validations - they imply commitment through exemplary policies, quality, reliability, and support.&lt;/li&gt;
&lt;li&gt;A high number of &lt;strong&gt;installs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A high average rating (&lt;strong&gt;stars&lt;/strong&gt;), Q&amp;amp;A, and Ratings &amp;amp; Reviews that give you a warm and fuzzy feeling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember, once an extension is installed, it quickly becomes a critical feature of your user’s processes, making it difficult to reverse or exchange.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Governance Reporting is a must&lt;/h1&gt;
&lt;p&gt;It is important that you can monitor and audit your engineering process for consistency, standardization, adherence to guardrails and standards, and identify when configurations start drifting apart. &lt;/p&gt;
&lt;p&gt;We invested in a platter of automated reporting, via the &lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.1"&gt;Azure DevOps REST API&lt;/a&gt;, and have also embraces the phenomenal work done by &lt;a href="https://twitter.com/vinijmoura"&gt;Vinicius Moura&lt;/a&gt; with his &lt;a href="https://github.com/vinijmoura/Azure-DevOps"&gt;Azure-DevOps&lt;/a&gt; open source project on GitHub.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;List all Release Definitions, Stages, and Approvers on Classic Releases in Azure DevOps&lt;/em&gt;
&lt;img alt="Sample Report" src="../images/azure-devops-simplicity-to-rule-them-all-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only are we able to answer most questions from internal audits in seconds, we are able to continuously observe the health of our engineering process and get a nudge when things are about to drift off the rails.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;One project to rule them all!&lt;/h1&gt;
&lt;p&gt;I will keep this section very short and refer you to the excellent &lt;a href="https://nkdagility.com/blog/one-team-project/"&gt;One Team Project to rule them all&lt;/a&gt; post by &lt;a href="https://nkdagility.com/"&gt;Martin Hinshelwood&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, I wish that Microsoft had not called it a Team Project, as it has resulted in years of confusion and migraines. As Martin correctly emphasizes in his blog a Team Project cannot be equated to a Visual Studio Project, a software, or whatever project. Project &amp;lt;&amp;gt; project! &lt;/p&gt;
&lt;p&gt;If only I had a dollar for every wasteFUL discussion that goes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User: "&lt;em&gt;Please create me a new Azure DevOps Project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;We are starting a new project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY&lt;/strong&gt; can we not just create a new Team for you in our mainstream Azure DevOps Team Project?&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;We feel that we need a new project, not a new team?&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;Because we are starting a new project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After 5-years of pushing for a "one project to rule them all" we are now staring at multiple Azure DevOps Team projects that have drifted apart from each other, making it sheer impossible to consolidate all Azure Repositories and Azure Pipelines, while maintaining all the history mandated by policies.&lt;/p&gt;
&lt;p&gt;Avoid the pain and start with "&lt;strong&gt;one project to rule them all!&lt;/strong&gt;"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use Active Directory (AD) groups to authorize users&lt;/h1&gt;
&lt;p&gt;Another hard lesson we learnt over time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;Active Directory (AD)&lt;/strong&gt; groups to authorize users.&lt;/li&gt;
&lt;li&gt;Keep your security model &lt;strong&gt;simple&lt;/strong&gt; and number of AD groups &lt;strong&gt;low&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delegate&lt;/strong&gt; the auditing and membership management of AD groups.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automate&lt;/strong&gt; the creation of AD groups and adding and removing of user memberships.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you are dealing with multiple Azure DevOps Team projects, you may end up with a security model like the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Complex Security Model" src="../images/azure-devops-simplicity-to-rule-them-all-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are the &lt;strong&gt;green&lt;/strong&gt; engineer, you will &lt;strong&gt;hate&lt;/strong&gt; the Azure DevOps powered engineering process. It is complex and anything but user-friendly and empowering - and no fault of Azure DevOps!&lt;/p&gt;
&lt;p&gt;One of our working groups invested well-spent time to understand our security model and come up with a &lt;strong&gt;simpler&lt;/strong&gt; and &lt;strong&gt;user-friendly&lt;/strong&gt; security model. It still defines AD groups per Azure DevOps Team project for AD groups providing &lt;strong&gt;administrative&lt;/strong&gt; and &lt;strong&gt;elevated&lt;/strong&gt; permissions to enforce the least-privilege policy, but introduces other AD groups that span all of the Azure DevOps Team Projects that should be **one"".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Simple Security Model" src="../images/azure-devops-simplicity-to-rule-them-all-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now if we had "one team project to rule them all" we would have started with the same security model from the start.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hopefully this post gives you a few pointers to mull over, to help you transform your Azure DevOps powered engineering process, and avoid a lot of the &lt;strong&gt;WASTE&lt;/strong&gt; and &lt;strong&gt;challenges&lt;/strong&gt; we endured over the past few years.&lt;/p&gt;
&lt;p&gt;I am excited our state of the engineering process. &lt;strong&gt;Watch the space&lt;/strong&gt;, as we shine the light on upcoming innovations, new and better ways to innovate, and empower our engineers through service excellence. &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category></entry><entry><title>Engineering Practice Nuggets</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-nuggets.html" rel="alternate"></link><published>2023-01-18T00:00:00-08:00</published><updated>2023-01-18T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-18:/engineering-practice-nuggets.html</id><summary type="html">&lt;p&gt;Nuggets of Knowledge and Best Practices in Software Engineering&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we design, build, and deploy software we aim to apply patterns and learned best practices in order to produce consistent and robust solutions that are of the highest quality and lowest possible technical dept (burden to maintain).&lt;/p&gt;
&lt;p&gt;These powerful nuggets of knowledge, patterns and practices, and key areas that we are evolving and improving will be the subject matter explored with the goal to invigorate vibrant collaboration and innovation, and indeed experimentation and tenacity when things don't go as desired.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Metrics and Quantitative Measures&lt;/h1&gt;
&lt;p&gt;In addition to the four standard DevOps metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deployment Frequency&lt;/strong&gt; - How often an organization successfully releases to production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lead Time for Changes&lt;/strong&gt; - The amount of time it takes a commit to get into production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change Failure Rate&lt;/strong&gt; - The percentage of deployments causing a failure in production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time to Restore Service&lt;/strong&gt; - How long it takes an organization to recover from a failure in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have begun the process of calculating various metrics on software created at WSBC, using SonarQube in the build and deploy pipelines. These will soon be augmented by Stryker to generate mutant test cases and validate them, as well as the Roslyn Analyzer for further code analysis.  &lt;/p&gt;
&lt;p&gt;These measurements are calculated when the pipeline for a product is invoked, providing us with statistical data that we can use to gauge the quality improvements over time.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Engineering Capability Maturity&lt;/h1&gt;
&lt;p&gt;We are now developing a Capability Maturity Model for Software Engineering Practices at WSBC, similar to the Maturity Model for Agile practices combined with CMM for Software - and supported by Scaled Agile Framework for the Enterprise (SAFe).  &lt;/p&gt;
&lt;p&gt;We are working to identify the capabilities at each level and how to measure them, and how to put processes in place or refine existing processes  to support their improvement and cultivate an open culture of experiment-fail-learn and share as discussed in &lt;a href="/fail-learn-reset.html"&gt;Fail, Learn, Reset!&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;EDO Ce Recommended Product Catalog&lt;/h1&gt;
&lt;p&gt;The EDO Recommended Product Catalog is getting a radical facelift, with a cool new periodic-table style layout with pop-up cells that clearly describe the product and purpose and current version.  Clicking on the tile opens a modal dialog describing the product in full, with links to download either from ServiceNow or the product own download page.&lt;/p&gt;
&lt;p&gt;We are busily creating Phase II, enabling a Search capability and populating the table cells based on a query to live &lt;em&gt;editable&lt;/em&gt; data in SharePoint.&lt;/p&gt;
&lt;p&gt;In a future post, we will dig deeper into the Product Catalog; how it has evolved to support and enhance our development teams navigation, education, and adoption of technology recommended for our development community.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Watch this space for bi-weekly Engineering Practice updates, latest developments, and recommended best practices, techniques, patterns, and methods recommended for building the next generation of interconnected loosely-coupled systems and services in our &lt;em&gt;Software Factory Vision&lt;/em&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="code-quality"></category><category term="design"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Pull Request empowered by engineering practices</title><link href="https://wsbctechnicalblog.github.io/pull-request-empowered-by-engineering-practices.html" rel="alternate"></link><published>2023-01-13T00:00:00-08:00</published><updated>2023-01-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-13:/pull-request-empowered-by-engineering-practices.html</id><summary type="html">&lt;p&gt;Pull Requests (PR) enable us improve built-in quality, engineering practices, and streamline our continuous integration pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us take a look at our latest pull request workflow and hopefully spark a few discussions that will empower all of us to embrace the pull request (PR) feature effectively.  &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a pull request (PR)?&lt;/h1&gt;
&lt;p&gt;Pull Requests (PR) enable us to change, review, and merge code. We can add policies to your PRs to enable code quality in key branches using policies, validation builds, code-quality, and security scans. We all want to protect key branches such as trunk, master, or main, which should always be stable and deployable – the single source of truth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MYTH&lt;/strong&gt;  - Pull-requests slow down your continuous integration value stream! A pull request takes as long as you and your process allow it to sit in a corner to gather dust. We encourage our engineers to track the lead and cycle times of pull requests using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=OneLuckiDev.prApprovalReport"&gt;Pull Request Completion Report&lt;/a&gt; and to collaborate with their peers to ensure that pull requests do not go stale. Also, the more you SHIFT-LEFT and present the evidence to the Pull Request validations, the more you can automate and thereby eradicate expensive human reviews and associated cycle times.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is the pull request (PR) workflow?&lt;/h1&gt;
&lt;p&gt;There are many pull request (PR) strategies. Here is the one we recommend for our common engineering ecosystem, based on our &lt;a href="/branching-trunk-based.html"&gt;trunk-based&lt;/a&gt; branching strategy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Workflow" src="../images/engineering-practices-pull-request-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;LEGEND&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Create a feature branch from the trunk/master/main branch, representing a unique feature, bug, or hotfix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Make code changes to implement the associated feature or fix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When ready to start collaboration, create a DRAFT PR to merge your feature branch to the trunk/master/main branch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DRAFT PR allow vibrant collaboration, without triggering Branch Policies, page 53, validations or notifying PR reviewers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Manually trigger branch policy validations, such as the validation build.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When ready to merge code changes to the trunk/master/main branch, publish the PR.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When a PR is published, reviewers are notified and Branch Policies become mandatory. Set the PR completion to manual or automatically, whereby automatic completion is triggered when all Branch Policies are validated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When a code change is committed within a published PR, all reviewer approvals are reset, and reviewers are duly notified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;With every commit, all Branch Policies are automatically re-validated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ready to merge changes – done with code changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The PR verifies that all Branch Policies are met.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The PR will not complete manually or automatically until all validations are met.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Users with elevated permissions can force complete the PR, irrespective of the state of validations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Code changes are merged to the source branch, which in turn triggers the continuous integration (CI) pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MYTH&lt;/strong&gt; - Pull-requests are manual interventions. With a high-TRUST team, we can define mandatory &lt;a href="https://learn.microsoft.com/en-us/azure/devops/repos/git/branch-policies-overview?view=azure-devops"&gt;Branch Policies&lt;/a&gt; and &lt;strong&gt;optional&lt;/strong&gt; approvals. That way collaboration is encouraged, but the PR will auto-complete as soon as all Branch Policies, are validated. No manual blocks, just validated  built-in quality.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is our accountability as PR reviewers?&lt;/h1&gt;
&lt;p&gt;Which brings us to an important topic – the &lt;strong&gt;responsibility&lt;/strong&gt; and &lt;strong&gt;accountability&lt;/strong&gt; of PR reviewers.&lt;/p&gt;
&lt;p&gt;If you are included in a pull request as an optional reviewer, you can review and collaborate within the context of the pull request. If you are included as a required reviewer, you must review and approve the PR so that the Branch Policies are met.&lt;/p&gt;
&lt;p&gt;While collaboration, continuous learning, information exchange, and guidance are important aspects of the pull request workflow, every reviewer, whether optional or required, is accountable to keep an eye on the following when reviewing a PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bad coding practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of security practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of engineering practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of repository, pipeline, or quality guardrails.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we automate the validations, the accountability and need to review PRs manually diminishes for our engineers.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part11.html"&gt;Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests"&gt;Pull requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pull-requests-friend.html"&gt;Pull Request is your friend not foe!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Fail, Learn, Reset!</title><link href="https://wsbctechnicalblog.github.io/fail-learn-reset.html" rel="alternate"></link><published>2023-01-11T00:00:00-08:00</published><updated>2023-01-11T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-11:/fail-learn-reset.html</id><summary type="html">&lt;p&gt;"Failure is a good option. If you are not failing, you are not trying hard enough." - Elon Musk&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last year, I tried hard to encourage everyone in my team and our group to accept failure as an opportunity to learn. I am so passionate about the value of failure, that I will continue to eradicate the &lt;strong&gt;fear of failure&lt;/strong&gt; with our engineers. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"There is a silly notion that failure is not an option at NASA. Failure is an option here. If things are not failing, you are not innovating enough."&lt;/em&gt; - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Good and bad failures&lt;/h1&gt;
&lt;p&gt;Just like cholesterol, there are &lt;strong&gt;BAD&lt;/strong&gt; and there are &lt;strong&gt;GOOD&lt;/strong&gt; failures. &lt;/p&gt;
&lt;p&gt;We must minimize the &lt;strong&gt;BAD&lt;/strong&gt;** failures, originating from context switching, stress, ignoring guardrails, and guidance, as they typically impact user experience and work:life balance. As we want to continuously deliver value to delighted end-users, we need to take the bad failures very seriously.&lt;/p&gt;
&lt;p&gt;Maximize the &lt;strong&gt;GOOD&lt;/strong&gt; failures, generally originating from experiments, which promote innovation and learning, and help us raise our built-in quality bar.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Create psychological safety!&lt;/h1&gt;
&lt;p&gt;For a team to embrace &lt;strong&gt;FAILURES&lt;/strong&gt;, psychological safety and support from the leadership is pivotal. If engineers must comply with metrics and performance reviews that do not support the value of failure, you will observe &lt;strong&gt;zero&lt;/strong&gt; traction by your team(s) to even consider the option of failure.&lt;/p&gt;
&lt;p&gt;Encourage safe and vibrant collaboration, to combat the imposter syndrome. In other words, we are all equal and what is discussed by the team stays with the team, until everyone is comfortable to share the context, the core issue, and the learnings after picking up the pieces and performing a retrospective on a FAILURE.&lt;/p&gt;
&lt;p&gt;You need an ecosystem based on &lt;strong&gt;TRUST&lt;/strong&gt;, and encourage everyone to be open-minded, respectful, and empathetic. &lt;/p&gt;
&lt;p&gt;Once these ingredients are stirred into the secret sauce of your team, you are ready to share your failures.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Accept and learn from your failures&lt;/h1&gt;
&lt;p&gt;I shared my top three failures with management and our engineers not only to showcase that no-one is invincible or perfect, but to encourage everyone to do the same. Here are the failures I shared:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the late 80’s I was working on a new encryption hardware module and integrating the service into a banking system in Switzerland. The project FAILED with spectacular operating system lockups, resulting in me flying to the US for the first time. I had a huge opportunity to debug and patch the &lt;a href="https://en.wikipedia.org/wiki/Convergent_Technologies_Operating_System"&gt;Convergent Technologies Operating System&lt;/a&gt; (CTOS) operating system kernel together with its creators. Finding the root cause for the operating system lockup was a phenomenal learning experience for all of us and as a result I also fell in love with Assembler and V2PLM programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In 2013 we toggled a feature flag in Team Foundation Service (now known as Azure DevOps) at a major conference. It did not go well … we blew up Azure and spent weeks fixing Azure DevOps. We learned about handling transient faults and avoiding similar failures with retries, throttling, and circuit breakers, and even created vibrant collaboration and trust by being transparent. My &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; article is one of the outcomes, as is my caution for dark launches and feature flags. Also read Brian Harry's &lt;a href="https://devblogs.microsoft.com/bharry/bad-day/"&gt;A bad day&lt;/a&gt; blog post for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At WorkSafeBC, I recently blew up our v1 blueprints with a two-space indent in one of our YAML templates which silenced WhiteSource, I repeatedly get the expense field in TRRs incorrect, and just recently mixed up two ServiceNow requests, creating the wrong team, in the wrong project, for the wrong users. What I am learning from these, is that &lt;strong&gt;context-switching is BAD&lt;/strong&gt;, and that &lt;strong&gt;focus&lt;/strong&gt; is worth every Penny.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could go on and on and on, but my top three hiccups are enough for this post.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Experiment, fail, learn, act!&lt;/h1&gt;
&lt;p&gt;The following illustration summarizes my thoughts on &lt;strong&gt;FAILURES&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="loop-of-failure" src="/images/fail-learn-reset.png"&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;We need to run &lt;strong&gt;experiments&lt;/strong&gt; to test ideas, proposed innovations, or minimally viable products (MVP) to evaluate if we achieve desired results (PASS) or not (FAIL).&lt;/li&gt;
&lt;li&gt;Either way we can &lt;strong&gt;act&lt;/strong&gt; upon invaluable &lt;strong&gt;learnings&lt;/strong&gt;, either reiterating on the experiment or focusing on the next.&lt;/li&gt;
&lt;li&gt;It is all about continuously &lt;strong&gt;learning&lt;/strong&gt; and delivering &lt;strong&gt;value&lt;/strong&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To create and support an ecosystem based on &lt;strong&gt;TRUST&lt;/strong&gt; and one that embraces the &lt;strong&gt;learn from failures&lt;/strong&gt; mindset we need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The leadership to create &lt;strong&gt;psychological safety&lt;/strong&gt; by enabling everyone to fail without the fear of retribution or bad reviews. This is my next challenge to address.&lt;/li&gt;
&lt;li&gt;Engineers need to eradicate the &lt;strong&gt;imposter syndrome&lt;/strong&gt; through vibrant, open-minded, respectful, and empathetic collaboration. We have been driving this through our &lt;a href="https://wsbctechnicalblog.github.io/ceremony-overview.html"&gt;collaboration ceremonies&lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What are your thoughts on failure?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Azure Pipelines Conditional Logic</title><link href="https://wsbctechnicalblog.github.io/azure-pipelines-conditional-logic.html" rel="alternate"></link><published>2022-12-28T00:00:00-08:00</published><updated>2022-12-28T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-28:/azure-pipelines-conditional-logic.html</id><summary type="html">&lt;p&gt;Make your YAML pipelines more versatile with conditional expressions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us review why and how we use conditional expressions in our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 application-type pipeline blueprints&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a conditional expression and why is it "cool"?&lt;/h1&gt;
&lt;p&gt;You can use the &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; clauses to conditionally assign values or, as discussed in this blog post, conditionally run a step when a condition is met. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Intersection" src="../images/azure-pipelines-conditional-logic-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Conditions are defined using &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops"&gt;Expressions&lt;/a&gt; and built-in &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#functions"&gt;Functions&lt;/a&gt;. We have made heavy use of conditional expressions to define what our blueprints assemble at queue (run) time, which is not only a powerful concept, but also allows us to tick off a couple of &lt;strong&gt;classic&lt;/strong&gt; Azure Pipeline security risks. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VARIABLES&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we include a &lt;a href=""&gt;variable template&lt;/a&gt; if, and only if, the &lt;code&gt;suppressCD&lt;/code&gt; parameter is not set to &lt;code&gt;true&lt;/code&gt;. Note that we are intentionally turning every character in the variable template e to lowercase using the &lt;code&gt;lower&lt;/code&gt; &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#lower"&gt;function&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Examples in our blueprints&lt;/h1&gt;
&lt;h2&gt;Conditional Quality Assurance and Security Scans&lt;/h2&gt;
&lt;p&gt;As described in our recent &lt;a href="/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt; post, our pipelines are designed to target a &lt;strong&gt;lower&lt;/strong&gt; and &lt;strong&gt;higher&lt;/strong&gt; environment, whereby the higher is locked down and only included when the artifact originates from a &lt;code&gt;release&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Typical CI/CD pipeline" src="../images/azure-pipelines-blueprint-qa-integration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us peel the example below, layer by layer, which is the template we are using for both the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/dev-sec-ops/security-scans-auto.yml"&gt;Security Automation&lt;/a&gt; and &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;Quality Assurance (QA)&lt;/a&gt; stages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The conditional expression example &lt;code&gt;${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/release'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:&lt;/code&gt; decides if part of the template is included, by checking if the source branch is named &lt;code&gt;release&lt;/code&gt; or &lt;code&gt;release/*&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is a semantic version using the MAJOR.MINOR format. For example: &lt;code&gt;release/1.3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The template is divided into three sections of &lt;code&gt;steps&lt;/code&gt;, the steps to run for &lt;strong&gt;LOWER&lt;/strong&gt; environment artifacts, the steps for the &lt;strong&gt;HIGHER&lt;/strong&gt; environment artifacts, and the steps to run for both the &lt;strong&gt;LOWER+HIGHER&lt;/strong&gt; environments. All implemented using &lt;code&gt;conditional expressions&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the lower, higher, and both lower+higher placeholders, the conditional expression example &lt;code&gt;${{ if eq( lower(parameters.applicationBlueprint), 'azure-function' ) }}:&lt;/code&gt; allows us to define application-specific steps to be run.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR LOWER (NON-PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Lower Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nuget-package&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;universal-artifact&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;universal-artifact&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nuget-package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UNKNOWN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Higher Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rinse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR LOWER AND HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Lower and Higher Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple, but powerful!&lt;/p&gt;
&lt;h2&gt;Boot-Strap Flow&lt;/h2&gt;
&lt;p&gt;&lt;img alt="boot-strap.yml" src="../images/azure-pipelines-conditional-logic-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/boot-strap.yml"&gt;boot-strap&lt;/a&gt; template is our secret sauce that injects &lt;strong&gt;DevSecOps&lt;/strong&gt;, &lt;strong&gt;Building Code&lt;/strong&gt;, &lt;strong&gt;Toolkits&lt;/strong&gt;, and &lt;strong&gt;Application Insights&lt;/strong&gt; steps into our continuous integration (CI) pipeline.&lt;/p&gt;
&lt;p&gt;In the 80's I would have written the boot-strap logic as a gigantic &lt;a href="https://en.wikipedia.org/wiki/Assembly_language"&gt;Assembler&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/PL/M"&gt;V2/PLM&lt;/a&gt; switch statement. Back to the future, we have conditional YAML expression that make the experience a lot more readable and user friendly q;-)&lt;/p&gt;
&lt;p&gt;Here is a short extract from our &lt;code&gt;bootstrap&lt;/code&gt; template where we checkout our toolbox and call our Application Insights logging steps if the &lt;code&gt;bootstrapMode&lt;/code&gt; is set to &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snipped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP TOOLBOX&lt;/span&gt;
&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# Production Toolbox&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;runbuildingcodeonly&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//Common-Engineering-System/AzureDevOps.Automation.Pipeline.Toolbox.v2&lt;/span&gt;

&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP AI LOGGING&lt;/span&gt;
&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Telemetry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;START&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Toolbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;insights&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;OperationId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Build.BuildNumber).$(Build.BuildId)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;BootstrapMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PortfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ProductName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;VerboseFlag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ForceCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snipped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conditional Templates&lt;/h2&gt;
&lt;p&gt;The last example is an extract from the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/nuget-package/azure-pipeline-nuget-package-ci.yml"&gt;azure-pipeline-nuget-package-ci.yml&lt;/a&gt; where we conditionally load a &lt;code&gt;portfolioName/productName&lt;/code&gt; specific or a &lt;code&gt;default&lt;/code&gt; variable template based on the value of the &lt;code&gt;useDefaultConfig&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VARIABLES&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Lastly, a spacing GOTCHA!&lt;/h1&gt;
&lt;p&gt;Finally, let us look at a common gotcha. YAML is &lt;strong&gt;very&lt;/strong&gt; space sensitive and the indents are important. For example, only the first two &lt;code&gt;script&lt;/code&gt; steps are part of the conditional expression context. The third &lt;code&gt;script&lt;/code&gt;, which is not indented will be run irrespective of the conditional expression result.&lt;/p&gt;
&lt;p&gt;We strongly recommend you use &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; to give visual cues of your code and grouping thereof and the Azure Pipeline YAML &lt;a href="https://johnlokerse.dev/2022/02/07/validating-yaml-using-azure-devops-or-cli/"&gt;Validate&lt;/a&gt; feature to validate that your syntax is correct. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Security CD Lower Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is, it for today folks! Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; if you have any questions or feedback. &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category><category term="tips"></category></entry><entry><title>Azure Boards Tips for Operations Teams</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips-operations-team.html" rel="alternate"></link><published>2022-12-23T00:00:00-08:00</published><updated>2022-12-23T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-23:/azure-boards-tips-operations-team.html</id><summary type="html">&lt;p&gt;A few useful "did you know" tips when using Azure Boards for Operational-type teams.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After observing users work with and occasionally struggle with the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;, it is time for me to share a few tips. We continue from &lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt; and focus on operational teams this time.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What makes an Operations team different from a Delivery team?&lt;/h1&gt;
&lt;p&gt;There are likely tons of definitions and views of groups of engineers making up an operations, operational, services, or system teams. I will focus on my team, Common Engineering, is one of our common services teams, focused on operations. We empower our delivery teams, aka software development, with consistent and standardized &lt;strong&gt;processes&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;, &lt;strong&gt;innovation&lt;/strong&gt; of tool chains and continuous delivery pipelines, and &lt;strong&gt;support&lt;/strong&gt; of operational infrastructure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Intake" src="../images/azure-boards-tips-operations-teams-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the focus on processes, products, innovation, and support are creating a  variation of support requests we receive and associated work that we plan after triage and prioritization. A challenging, but exciting mix of services we are focused on every day. &lt;/p&gt;
&lt;p&gt;If your daily working day looks similar, you may want to consider these learnings from our team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Document process of dealing with blockers and external dependencies&lt;/h1&gt;
&lt;p&gt;Delivering exceptional, responsive, and forward-thinking operational support is our top priority, which trumps all other visions, goals, objectives, and dreams. It requires us to continuously improve our value streams, to improve our &lt;a href="https://www.agile-academy.com/en/agile-dictionary/lead-time-vs-cycle-time/"&gt;cycle and lead times&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For example, we continuously analyze, collaborate, agree, and documented how to deal with common scenarios, powered by &lt;a href=""&gt;Azure DevOps&lt;/a&gt;, such as ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dependency" src="../images/azure-boards-tips-operations-teams-2a.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While &lt;strong&gt;processing&lt;/strong&gt; work item A, we realize that we need help from another common services team to complete the support &lt;strong&gt;request&lt;/strong&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We clone our original work item (A) and set up a predecessor --&amp;gt; successor relationship to work item (B). This allows us to visualize the dependencies on our &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;strong&gt;@mention&lt;/strong&gt; the original requestor and team B, so that they are notified to determine if work item (B) is actionable. If yes, they pull it to their backlog, triage, and action as per their process.&lt;/li&gt;
&lt;li&gt;We then click on the &lt;strong&gt;Follow&lt;/strong&gt; work item feature and wait for work item (B) to move to &lt;code&gt;DONE&lt;/code&gt; state and/or to be &lt;strong&gt;@mentioned&lt;/strong&gt; by team B.  &lt;/li&gt;
&lt;li&gt;As we complete our work in parallel, we move work item (A) to &lt;code&gt;DONE&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;The original request is considered DONE once work item (A) and work item (B) are &lt;code&gt;DONE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Slice" src="../images/azure-boards-tips-operations-teams-2b.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Optimally we detect &lt;strong&gt;dependencies&lt;/strong&gt; while &lt;strong&gt;triaging&lt;/strong&gt; the support &lt;strong&gt;request&lt;/strong&gt;. If yes, we proactively slice the job into multiple work items. As before, we configure with predecessor and successor relationships and notify (&lt;strong&gt;@mention&lt;/strong&gt;) the stakeholders - but it is done &lt;strong&gt;proactively&lt;/strong&gt;, not reactively which is far more efficient and less stressful q;-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rework" src="../images/azure-boards-tips-operations-teams-2c.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last example shows that we never move a work-item back from &lt;code&gt;DONE&lt;/code&gt; state or in other words, we never drag a work item card from right to left on our &lt;strong&gt;Kanban&lt;/strong&gt; board. Instead, we create a new work-item (typically a clone of the original), fix the issue(s), rinse and repeat the dependencies.&lt;/p&gt;
&lt;p&gt;Yes, it is more work, but it allows us to track and visualize the actual workflow.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Consider an Operational Work Item Type&lt;/h1&gt;
&lt;p&gt;As shown below, we have all encountered the work item type from hell - the worst work item (bug) type I had the misfortune to work with had 200+ fields, multiple tabs, mandatory dependencies, and fields that no-one could explain. An inefficient and frustrating user experience!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Operational" src="../images/azure-boards-tips-operations-teams-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;strong&gt;operational support requests&lt;/strong&gt; we created a streamlined work item type, which auto-filled most fields during creation. Both the &lt;strong&gt;requestor&lt;/strong&gt; and  team dealing with the request, can enjoy a far more efficient process and digest the request and status &lt;strong&gt;at-a-glance&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Arrange your board&lt;/h1&gt;
&lt;p&gt;It is important that you fine tune your &lt;strong&gt;Board&lt;/strong&gt; to suit &lt;strong&gt;you&lt;/strong&gt; and deliver visual value to &lt;strong&gt;your&lt;/strong&gt; team and stakeholders. Here is what ours looks like...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Kanban Board" src="../images/azure-boards-tips-operations-teams-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;We use &lt;strong&gt;swimlanes&lt;/strong&gt; to map the requests we receive into a few well-known buckets, such as hair on &lt;code&gt;FIRE&lt;/code&gt;, &lt;code&gt;security risks&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; date, &lt;code&gt;Kaizen&lt;/code&gt;, &lt;code&gt;STANDARD&lt;/code&gt;, and &lt;code&gt;Braindumps&lt;/code&gt; (information sharing).&lt;/li&gt;
&lt;li&gt;We use the standard &lt;code&gt;top=highest-priority&lt;/code&gt; prioritization strategy when scanning the swimlanes and cards within each swimlane column.&lt;/li&gt;
&lt;li&gt;As shown, we still have to work on and improve our &lt;code&gt;work in progress&lt;/code&gt; (WIP) and associated WIP limits.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;Filters&lt;/code&gt;, as discussed in &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;STANDARD&lt;/code&gt; swimlane is where we live and breath operational support, with a &lt;strong&gt;Kanban&lt;/strong&gt; mindset and focus on Flow. We pull work from the right and prioritize work that has a clear flow from &lt;code&gt;NEW&lt;/code&gt; to &lt;code&gt;DONE&lt;/code&gt;, using every opportunity to identify inefficiencies and waste.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FIXED&lt;/code&gt; and &lt;code&gt;KAIZEN&lt;/code&gt; swimlanes is where we practice our &lt;strong&gt;Scrum&lt;/strong&gt; and &lt;strong&gt;Scaled Agile Framework (SAFe)&lt;/strong&gt; mindset, planning, prioritizing, and committing work to program increments and associated iterations.  &lt;/p&gt;
&lt;p&gt;We are using the right-mindset for the right job, at the right time, to continuously deliver value,&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use a visual dashboard&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dashboard" src="../images/azure-boards-tips-operations-teams-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like Kanban boards, as discussed in &lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt;, you can create visual Azure DevOps dashboards, to monitor and identify smoke, before you have a raging fire on your hands. Our blurred dashboard is one of my default startup pages in my &lt;strong&gt;Edge&lt;/strong&gt; browser and a page I continuously monitor during the day.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The tiles present an assortment of invaluable indicators. Anything in &lt;code&gt;red&lt;/code&gt; requires our attention, for example &lt;code&gt;orphaned&lt;/code&gt; work items (no parent), &lt;code&gt;blocked&lt;/code&gt; work items, closed (&lt;code&gt;timeless&lt;/code&gt;) work items without an iteration, and operational support work items that are missing required &lt;code&gt;tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The list of pipeline &lt;code&gt;status&lt;/code&gt; allows us to keep an eye on our maintenance pipelines and the lead- and cycle-time graphs visualize how have been doing over the past 30 days.&lt;/li&gt;
&lt;li&gt;There are a lot more gems on the board, some relevant to all of us, some interesting for our scrum master. There are also gems, such as a list of &lt;code&gt;my pull requests&lt;/code&gt; and &lt;code&gt;pull requests assigned to me&lt;/code&gt; allow me to be more proactive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with Kanban boards, take two steps back and ensure that the visual cues for &lt;strong&gt;you&lt;/strong&gt; and &lt;strong&gt;your team&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, remember the &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; which allows you to create a delivery board-type plan view combining multiple teams, backlogs, and iteration cadences. The delivery plan configuration of settings and styles is like the board, but it also allows you to collapse cards and show dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;
Dependencies are only shown for predecessor/successor links and dependency lines are only drawn if both the predecessor and successor cards are visible on the delivery plan view.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any other tips to share?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Azure Pipelines Blueprint QA Integration</title><link href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html" rel="alternate"></link><published>2022-12-09T00:00:00-08:00</published><updated>2022-12-09T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-09:/azure-pipelines-blueprint-qa-integration.html</id><summary type="html">&lt;p&gt;WHERE and HOW to integrate quality assurance into our OSS pipeline blueprints.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us review and how you can integrate your quality assurance (QA) scans in our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 application-type pipeline blueprints&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;High-altitude peek at the pipeline flow&lt;/h1&gt;
&lt;p&gt;The following illustration shows a typical continuous delivery pipeline, including continuous integration (CI), continuous delivery (CD), and supporting built-in automation and quality scans. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Flow" src="../images/azure-pipelines-blueprint-qa-integration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us unpack the pipeline, based on the &lt;strong&gt;azure-function&lt;/strong&gt; blueprint. Thanks to the magic of assembling the pipeline instance at queue, not definition time, the higher and release-bound stages only exist if the source branch matches the &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release*&lt;/code&gt; pattern. The last two stages in the lower, high-churn area are always part of the pipeline and the focus of this discussion.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build" src="../images/azure-pipelines-blueprint-qa-integration-0-build.png"&gt;&lt;/p&gt;
&lt;p&gt;The first stage is the continuous integration (CI), aka build, stage which is focused on &lt;strong&gt;building&lt;/strong&gt; the product and injecting the &lt;strong&gt;DevSecOps&lt;/strong&gt;, &lt;strong&gt;Quality Assurance (QA)&lt;/strong&gt; and &lt;strong&gt;building code&lt;/strong&gt; scans, managed by our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/boot-strap.yml"&gt;boot-strap&lt;/a&gt; template.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Delivery" src="../images/azure-pipelines-blueprint-qa-integration-0-deploy.png"&gt;&lt;/p&gt;
&lt;p&gt;Subsequent stages are all part of the continuous delivery (CD), aka release, pipeline. In our case we deploy to &lt;strong&gt;development&lt;/strong&gt; and &lt;strong&gt;system test&lt;/strong&gt; environments, followed by the above-mentioned built-in automation and quality scans, the &lt;strong&gt;security review&lt;/strong&gt; stage (which my colleague Kevin will discuss soon), and finally we deploy to &lt;strong&gt;staging&lt;/strong&gt; and &lt;strong&gt;production&lt;/strong&gt; environments. We use &lt;strong&gt;manual approvals&lt;/strong&gt; to guard &lt;strong&gt;system test&lt;/strong&gt;, &lt;strong&gt;Staging&lt;/strong&gt;, and &lt;strong&gt;production&lt;/strong&gt; environments, as well as a check for known and trusted templates for the &lt;strong&gt;system test&lt;/strong&gt; and higher environments.&lt;/p&gt;
&lt;p&gt;But, you probably want to know where and how to integrate your quality assurance scans.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Quality-Assurance (QA) extension points&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Delivery" src="../images/azure-pipelines-blueprint-qa-integration-0-qa.png"&gt;&lt;/p&gt;
&lt;p&gt;In a nutshell, you have two opportunities to influence and trigger quality assurance automation as part of your continuous delivery pipeline, based on the blueprints. &lt;/p&gt;
&lt;h2&gt;Continuous integration (CI) QA extension points?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CI Integration" src="../images/azure-pipelines-blueprint-qa-integration-2.png"&gt;&lt;/p&gt;
&lt;p&gt;You will find the first extension point in the &lt;em&gt;-ci.yml templates, for example &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/azure-function/azure-pipeline-azure-function-ci.yml"&gt;azure-pipeline-azure-function-ci.yml&lt;/a&gt;. This extension point is &lt;/em&gt;&lt;em&gt;blueprint&lt;/em&gt;* specific!&lt;/p&gt;
&lt;p&gt;Scroll down to line around line 95, where you will find this placeholder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# CONTINUOUS INTEGRATION TEST&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; task: DotNetCoreCLI@2&lt;/span&gt;
&lt;span class="c"&gt;      displayName: &amp;#39;Run Tests&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;      inputs:&lt;/span&gt;
&lt;span class="c"&gt;        command:    &amp;#39;test&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;        projects:   &amp;#39;**/*Tests/*&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;csproj&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;        arguments:  &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;--&lt;/span&gt;&lt;span class="c"&gt;configuration $(buildConfiguration) &lt;/span&gt;&lt;span class="nb"&gt;--&lt;/span&gt;&lt;span class="c"&gt;no&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;restore&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is the responsibility of the software delivery team to define &lt;strong&gt;consistent&lt;/strong&gt;, &lt;strong&gt;comprehensive&lt;/strong&gt;, and &lt;strong&gt;quality&lt;/strong&gt; continuous integration tests to empower us to automate the unit and regression testing while building the artifacts we want to deploy. You can extend the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/building-code/building-code.yml"&gt;building-code&lt;/a&gt; to validate the health of your unit tests by using a tool such as &lt;a href="https://stryker-mutator.io/"&gt;Stryker&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Continuous delivery (CD) QA extension points?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CD Integration" src="../images/azure-pipelines-blueprint-qa-integration-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The second extension, which runs in parallel to the security automation scans, can be found in the&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template.&lt;/p&gt;
&lt;p&gt;A few words of caution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This extension point is re-used and triggered by all blueprints!&lt;/li&gt;
&lt;li&gt;Any tasks running as part of this extension point must be &lt;strong&gt;stable&lt;/strong&gt; and &lt;strong&gt;reliable&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;This extension point must honour the &lt;code&gt;modeElite&lt;/code&gt; parameter, as discussed below.&lt;/li&gt;
&lt;li&gt;Validate your extensions using your feature branch and the &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=schema#define-a-repositories-resource"&gt;ref:&lt;/a&gt; parameter before committing any change to your master branch. Once in master, your extensions will affect &lt;strong&gt;all&lt;/strong&gt; blueprint-based pipelines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we peek into the template, we realize that we have two main sections. One that runs for lower (non-production) environments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# QA AUTOMATION FOR LOWER (NON&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;PROD) ENVIRONMENTS STAGE&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; ${{ if not(or(eq(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release&amp;#39;)&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; startsWith(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release/&amp;#39;))) }}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And another that runs for the higher (production) environments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# QA AUTOMATION FOR HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; ${{ if or(eq(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release&amp;#39;)&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; startsWith(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release/&amp;#39;)) }}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words, you can selectively run quality-assurance in all pipelines or only in pipelines that are based on the &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release*&lt;/code&gt; source code branches, destined for production.&lt;/p&gt;
&lt;p&gt;Within both these sections, you will find &lt;strong&gt;blueprint&lt;/strong&gt; specific sections, allowing you to configure your quality assurance automation scans for the selected blueprints only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
    - script: echo deal with qa scan relevant to azure-function application type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have decided WHEN and for WHICH blueprints you want to run your quality assurance automation scans, insert your tasks into the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template. You &lt;strong&gt;must&lt;/strong&gt; honour and deal with the &lt;code&gt;modeElite&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;modeElite = false&lt;/code&gt; your scans must &lt;strong&gt;succeed&lt;/strong&gt; or complete with a &lt;strong&gt;warning&lt;/strong&gt; - they are not allowed to throw an error, which would terminate the pipeline.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;modeElite = true&lt;/code&gt; your scans must &lt;strong&gt;succeed&lt;/strong&gt; or &lt;strong&gt;fail&lt;/strong&gt; - any failure must terminate the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is up to you whether you deal with &lt;code&gt;eliteMode&lt;/code&gt; in the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template or pass and deal with it in your automation scans.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That is, it for today folks! Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; if you have any questions or feedback. Support for comments will hopefully soon be glued onto our technical blog. Watch the space!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category></entry></feed>