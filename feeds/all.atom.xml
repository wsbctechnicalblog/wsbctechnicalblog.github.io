<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2023-11-12T00:00:00-08:00</updated><entry><title>GitHub Copilot for Business FAQ</title><link href="https://wsbctechnicalblog.github.io/github-copilot-for-business-faq.html" rel="alternate"></link><published>2023-11-12T00:00:00-08:00</published><updated>2023-11-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-12:/github-copilot-for-business-faq.html</id><summary type="html">&lt;p&gt;Frequently Asked Questions (FAQ) that have been mushrooming during our evaluation phase. Part 2 - FAQ.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to our GitHub Copilot experimentation and usage FAQ Page! This page provide you with comprehensive answers to common questions raised by our engineers about &lt;a href="https://resources.github.com/copilot-for-business"&gt;GitHub Copilot for Business&lt;/a&gt;, an innovative tool that revolutionizes code development through intelligent suggestions and auto-completion. Whether you are a seasoned engineer or just starting out, this FAQ page aims to enhance your experience with GitHub Copilot and address any inquiries you may have. If you do not find the information you are looking for, feel free to reach out through the provided discussion channel, and we will be happy to assist you.&lt;/p&gt;
&lt;h1&gt;Frequently asked questions (FAQ)&lt;/h1&gt;
&lt;hr&gt;
&lt;h4&gt;1. Can I be logged onto GitHub with my &lt;code&gt;corporate&lt;/code&gt; and &lt;code&gt;personal&lt;/code&gt; GitHub account at the same time?&lt;/h4&gt;
&lt;p&gt;Currently, simultaneous support for two accounts is not available. However, you can switch between accounts by logging out of the current account and logging into the other one.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;2. What is the difference between Copilot for &lt;code&gt;Business&lt;/code&gt; and Copilot for &lt;code&gt;Individuals&lt;/code&gt;?&lt;/h4&gt;
&lt;p&gt;See &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/overview-of-github-copilot/about-github-copilot-for-business#understanding-the-differences-between-copilot-for-business-and-copilot-for-individuals"&gt;Understanding the differences between Copilot for Business and Copilot for Individuals&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;3. Why am I seeing this error in my Copilot log?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;[INFO] [auth] [2023-11-02T14:57:44.993Z] Invalid copilot token: missing token: 403&lt;/code&gt;
&lt;code&gt;[ERROR] [default] [2023-11-02T14:57:45.005Z] Extension activation failed: "User not authorized"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your GitHub Copilot for Business license is not currently valid. If you are using an active directory (AD) group for license management, it is possible that you have been removed from the AD group or were never added in the first place.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I trust that this FAQ list is enhancing the value of your GitHub Copilot evaluation. If you have additional frequently asked questions and answers to contribute to this post/list, feel free to leave a comment below.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="github"></category></entry><entry><title>GitHub Copilot for Business Setup</title><link href="https://wsbctechnicalblog.github.io/github-copilot-for-business-setup.html" rel="alternate"></link><published>2023-11-01T00:00:00-07:00</published><updated>2023-11-01T00:00:00-07:00</updated><author><name>&lt;Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-11-01:/github-copilot-for-business-setup.html</id><summary type="html">&lt;p&gt;Getting started with GitHub Copilot - Part 1: Setup.&lt;/p&gt;</summary><content type="html">&lt;p&gt;To kickstart your journey with the GitHub Copilot for Business product, we first need to configure both the service-side and user-side environments. In this guide, we will walk you through the steps we took and highlight any potential obstacles you may encounter along the way.&lt;/p&gt;
&lt;h2&gt;Useful Terminology&lt;/h2&gt;
&lt;p&gt;Terminology which will make things easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entra ID&lt;/strong&gt; - **New name for Azure Active Directory, for example &lt;code&gt;fabrikam.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal GitHub Account&lt;/strong&gt; - Personal GitHub account, for example &lt;a href="https://github.com/wpschaub"&gt;wpschaub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Account&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;Enterprise Managed Users (EMU)&lt;/a&gt; account \&amp;lt;ID&gt;_\&lt;Shortcode/&gt;, for example &lt;code&gt;wschaub_fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Admin&lt;/strong&gt; - EMU Administrator, for example &lt;code&gt;admin_fabikam&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Enterprise&lt;/strong&gt; - EMU Enterprise name, for example &lt;code&gt;fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Enterprise URL&lt;/strong&gt; - EMU Enterprise link, for example &lt;code&gt;https://github.com/enterprises/fabrikam&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EMU Shortcode&lt;/strong&gt; - EMU alias, for example https://github.com/enterprises/fabrikam.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Organization&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/about-organizations"&gt;Git Hub Organization&lt;/a&gt;, for example &lt;code&gt;fabrikam_innovation&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Team&lt;/strong&gt; - &lt;a href="https://docs.github.com/en/organizations/organizing-members-into-teams/about-teams"&gt;GitHub Team&lt;/a&gt;, for example &lt;code&gt;GitHub Copilot Evaluation&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an insightful illustration sourced from &lt;a href="HTTPS://GITHUB.COM"&gt;GitHub&lt;/a&gt; that provides a user-friendly overview of Enterprise Managed Users (EMU).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="EMU Overview" src="../images/github-copilot-for-business-setup-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Service-side Setup&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;GitHub Managed Users (EMU)&lt;/a&gt; is comprehensive, though it is detailed to the extent that you might overlook a crucial step (as we did). Here are the key steps:&lt;/p&gt;
&lt;h4&gt;Setup a &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users"&gt;GitHub Managed Users (EMU)&lt;/a&gt;.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Chat with your Microsoft / GitHub account manager and request EMU.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Setup the IdP Connection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/aad.fabrikamenterprisemanageduseroidc?tab=Overview"&gt;GitHub EMU Application&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 1: Preparations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Involve a person with AAD Admin Access. &lt;/li&gt;
&lt;li&gt;Create a &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic"&gt;Personal Access Token&lt;/a&gt; for the &lt;code&gt;EMU Admin&lt;/code&gt; account.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 2: Connect GitHub to AAD using OIDC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;EMU Name&lt;/code&gt;, &lt;code&gt;EMU Enterprise URL&lt;/code&gt;, and &lt;code&gt;EMU shortcode&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Follow all steps in the &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/configuring-oidc-for-enterprise-managed-users"&gt;GitHub Docs: Configuring OIDC for Enterprise Managed Users&lt;/a&gt; to setup the connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 3: Configure SCIM Provisioning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;EMU Name&lt;/code&gt;, &lt;code&gt;EMU Enterprise URL&lt;/code&gt;, &lt;code&gt;EMU shortcode&lt;/code&gt;, and your tenant URL, for example &lt;code&gt;https://api.github.com/scim/v2/enterprises/fabrikam&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Follow all the steps in &lt;a href="https://learn.microsoft.com/en-us/entra/identity/saas-apps/github-enterprise-managed-user-oidc-provisioning-tutorial"&gt;Azure Tutorial: Configure GitHub Enterprise Managed User (OIDC) for automatic user provisioning&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 4: Once connected, connect subscription&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Have these handy: &lt;code&gt;GitHub Organization&lt;/code&gt; and &lt;code&gt;GitHub Team&lt;/code&gt; names.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/enterprise-cloud@latest/billing/managing-the-plan-for-your-github-account/connecting-an-azure-subscription#connecting-your-azure-subscription-to-your-enterprise-account"&gt;Connect an Azure Subscription ID&lt;/a&gt; to pay for Copilot.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-copilot-in-your-enterprise"&gt;Enable Copilot at the Enterprise Level&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In your Organization of choice, &lt;a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization"&gt;enable Copilot for the user/team of choice&lt;/a&gt;. In our scenario, we handle GitHub team membership through an Azure Directory (AD) group. Being a member of the AD group automatically grants you membership in the GitHub team, providing access to a GitHub Copilot license.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Single-signon is alive and well. At this point you should be able to login with your &lt;code&gt;EMU Admin&lt;/code&gt; and your &lt;code&gt;corporate&lt;/code&gt; cedentials.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;User-side Setup&lt;/h1&gt;
&lt;p&gt;This is likely the section everyone is eager to dive into – welcoming your Artificial Intelligence (AI) Copilot and embarking on a journey of exploration to reap numerous benefits. These include heightened productivity, enhanced quality, accelerated experimentation and learning, and bolstered engineering confidence.&lt;/p&gt;
&lt;h2&gt;Before you begin!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First you need to logout of GitHub in your default web browser. This is a crucial step - easy to just ignore it at your own peril!  &lt;/li&gt;
&lt;li&gt;Then go to Visual Studio (VS) Code and sign-out. &lt;/li&gt;
&lt;li&gt;Make sure you IDE is the latest version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Failure to do so may lead you down the same nightmarish path I experienced last weekend.&lt;/p&gt;
&lt;h2&gt;Visual Studio Enterprise / Professional&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A special &lt;strong&gt;thank you&lt;/strong&gt; to my copilot, &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Martin Lacey&lt;/a&gt;], who completed the setup first, giving us the dos and do nots, as well as the screenshots.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Open Visual Studio Enterprise and go to &lt;code&gt;Profile &amp;gt; Add Account&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This will open your browser. Use your corporate account, for &lt;code&gt;demo_fabrikam&lt;/code&gt;. Your account name will be different, but follow the same format.&lt;/li&gt;
&lt;li&gt;Once you enter your account name (no password) and press &lt;code&gt;enter&lt;/code&gt;, you will be directed to the following web page after a short moment.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authenticate" src="../images/github-copilot-for-business-setup-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;Authorize GitHub&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authorize" src="../images/github-copilot-for-business-setup-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Close Visual Studio and restart it.&lt;/li&gt;
&lt;li&gt;Verify that you are now connected.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Verify" src="../images/github-copilot-for-business-setup-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Now it is time to start exploring!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual Studio Code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you sign-out from GitHub on your default browser now, as per &lt;strong&gt;before you begin&lt;/strong&gt;, you can save yourself a lot of pain! 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Open Visual Studio Code (VS Code).&lt;/li&gt;
&lt;li&gt;Ensure you are running at least version 1.83, dated September 2023, by checking for updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Check for updates" src="../images/github-copilot-for-business-setup-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;code&gt;View &amp;gt; Command Palette&lt;/code&gt; or press &lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;GitHub Copilot: Install&lt;/code&gt; and select it.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Install Copilot" src="../images/github-copilot-for-business-setup-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;After installation, log in to GitHub using your EMU Account (GitHub Enterprise Managed Users) such as &lt;code&gt;demo_fabrikam&lt;/code&gt;. Alternatively, you can modify your profile to add the GitHub account.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/github-copilot-for-business-setup-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Authorize the access.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Authorize" src="../images/github-copilot-for-business-setup-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once authorized, you will see the following view within VS Code.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Check authorization" src="../images/github-copilot-for-business-setup-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Now you are ready to explore the walkthroughs and get started!  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Welcome" src="../images/github-copilot-for-business-setup-10.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Have fun chatting with your AI Pair Engineer Copilot and watch this space for follow-up posts by my colleagues evaluating their Copilot. I am already crafting a "GitHub Copilot for Business FAQ" post 😊.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="github"></category></entry><entry><title>Embedding a Quality-Driven Engineering Mindset in Our DNA</title><link href="https://wsbctechnicalblog.github.io/embedding-a-quality-driven-engineering-mindset-in-our-dna.html" rel="alternate"></link><published>2023-10-02T00:00:00-07:00</published><updated>2023-10-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-10-02:/embedding-a-quality-driven-engineering-mindset-in-our-dna.html</id><summary type="html">&lt;p&gt;An engineering mindset that prioritizes quality is crucial for producing robust and reliable solutions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having a &lt;strong&gt;quality-first&lt;/strong&gt; and &lt;strong&gt;quality-driven engineering&lt;/strong&gt; mindset ensures that &lt;strong&gt;QUALITY&lt;/strong&gt; is not treated as an afterthought, but rather ingrained in the design, development, and operational processes from the outset. It encourages proactive measures such as thorough testing, code reviews, experimentation, and an appetite for guiding guardrails, ultimately leading to a higher standard of work. It promotes a culture of excellence and continuous improvement within the engineering team - and most importantly, delighted &lt;strong&gt;end-users&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Choosing the alternative means embracing a lifestyle of constant &lt;strong&gt;context-switching&lt;/strong&gt;, 2 AM incident calls, and a perpetually &lt;strong&gt;reactive&lt;/strong&gt; approach. This path leads to frustration, burnout, and increased operational costs. Engineers will find themselves caught in the continuous hamster wheel, struggling to balance firefighting with delivering value. The result? Unhappy end-users, potentially tarnishing your reputation in the long run.&lt;/p&gt;
&lt;p&gt;Fortunately we all have a choice.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here are several recommended strategies that you should consider exploring if you choose to adopt a QUALITY mindset.&lt;/p&gt;
&lt;h1&gt;Technical Debt rusts Quality!&lt;/h1&gt;
&lt;p&gt;The accrual of technical debt can significantly degrade the overall quality of a system over time. It is essential to proactively manage and address technical debt to maintain a high level of quality in software development. In other words, pro-actively avoid the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inconsistent or overly complicated code&lt;/strong&gt; - code should be recognisable and readable by all engineers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design shortcuts&lt;/strong&gt; - align with your architecture, operations, and development patterns and guardrails. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skipped or insufficient testing&lt;/strong&gt; - if you are strapped into your seat, atop a Falcon Heavy rocket using your software, you should feel comfortable to click the launch button.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outdated or end-of-life products&lt;/strong&gt; - proactively monitor and deprecate outdated dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incomplete or no documentation&lt;/strong&gt; - code should be self-explanatory, complemented by documentation that makes it easy to get the context,  overview, and flow. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop supporting the notion of "quick experiment", "proof-of-concept", or "throw-away" code. I have watched too many instances of this code ending up in production solutions and becoming the weakest link. Use common guidelines, guardrails, and peer-review workflows (such as pull request with policies) to avoid your solution starting to rust and its quality to deteriorate over time.&lt;/p&gt;
&lt;h1&gt;Think team!&lt;/h1&gt;
&lt;p&gt;We are accountable for QUALITY as a team and as a group of teams - in other words, we "are one" when it comes to quality and taking responsibility for how we design, build, test, and maintain the solutions we build. As &lt;strong&gt;software development engineer&lt;/strong&gt; our specialty is "developing code" and as &lt;strong&gt;quality assurance engineer&lt;/strong&gt; our specialty is "testing code”. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, this does not imply that developers are only tasked with writing code. They also shoulder responsibilities such as creating unit tests, executing test automation, performing code vulnerability scans, and in some cases, conducting manual tests to enhance the overall quality of our work. As engineers, we hold a stewardship role in our domain of expertise, enforcing associated guardrails, and mentoring others within our team, group, organization, or community. But, when it comes to quality, it is a collective team responsibility!&lt;/p&gt;
&lt;p&gt;Gone are the days of simply tossing tasks over the wall to different roles like content editors, developers, testers, admins, and so forth. The only boundary we acknowledge are the faintly dotted lines that delineate teams and groups of teams within our organization. Beyond that, we operate and own QUALITY as one unified entity.&lt;/p&gt;
&lt;h1&gt;Think product team!&lt;/h1&gt;
&lt;p&gt;When you operate with a healthy &lt;a href="https://www.donovanbrown.com/post/what-is-devopss"&gt;DevOps&lt;/a&gt; mindset, you will also be familiar with the "product mindset", which implies that we, as a team, are accountable for our solution from ideation to deprecation. Until we switch off the solution lights, we own the accountability for QUALITY!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Love a comment from my colleague: "&lt;em&gt;Pride, feeling like you've created and contributed to something you are proud of - that is the inner spirit we need to kindle.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Switch to &lt;a href="/shift-from-project-to-product-thinking.html"&gt;Shift from project to product thinking&lt;/a&gt; for more insight into the product mindset.&lt;/p&gt;
&lt;p&gt;Alternatively as per GPT: "&lt;em&gt;Thinking like a product team encourages a mindset that prioritizes the value delivered to end-users. This perspective helps ensure that the software being developed is aligned with the needs and expectations of the users, leading to more successful and impactful products. It also fosters a sense of ownership and &lt;strong&gt;accountability for the quality&lt;/strong&gt; and functionality of the software, which ultimately leads to higher-quality solutions. Thinking like a product team also encourages collaboration, innovation, and a focus on continuous improvement, which are all essential elements for building successful software products.&lt;/em&gt;"&lt;/p&gt;
&lt;h1&gt;Embrace guardrails for a safer journey&lt;/h1&gt;
&lt;p&gt;Guardrails are important to keep us within a safe zone to cross a bridge or in software engineering to create a safety net to promote consistency, standardization, and security. They allow us to thrive, create, and innovate in a structured and secure environment, while mitigating risks and ensuring long-term quality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Outcomes of guardrails, all of which support &lt;strong&gt;quality&lt;/strong&gt; include things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Risk Mitigation&lt;/strong&gt;, such as security vulnerabilities, system failures, and end-of life issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency and Standardization&lt;/strong&gt; making solutions easier to maintain and troubleshoot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compliance&lt;/strong&gt;, such as industry standards and organizational policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt; fostered when everyone has an understanding of what and how we are building our solution.
Scalability: Guardrails facilitate scaling efforts by ensuring that new code and practices align with established standards. This makes it easier to onboard new team members and integrate new features or services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confidence&lt;/strong&gt; created when everyone follows set of guidelines to follow, enciuraging creative problem-solving and innovation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost-Efficiency&lt;/strong&gt; by avoiding previous mistakes, saving time, and money.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Forward-thinking&lt;/strong&gt; promoted by promoting practices that are known, proven, and sustainable. This benefits the maintenance and evolution of solutions over time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid rigid and monolithic architectures&lt;/strong&gt; which impede the system's adaptability and evolution, especially in today's rapidly changing technological landscape. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work smarter and more efficiently&lt;/strong&gt; to optimise and capitalise on down time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more examples, but I need to touch on my 80:20 rule and then stop venting.&lt;/p&gt;
&lt;h1&gt;80:20 planning rule&lt;/h1&gt;
&lt;p&gt;Lastly, it is important to discuss how we plan and allocate our time. If we aim to fill every minute of our schedule, we are setting ourselves up to work beyond our capacity. This leaves us scrambling to address unexpected issues, bugs, and the lingering technical debt that tends to resurface repeatedly. I know it, you know it - it is time to smarter and more efficiently. We must move away from burnout and start embracing a healthier work:life balance.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;SAMPLE PIC&amp;gt;" src="../images/embedding-a-quality-driven-engineering-mindset-in-our-dna-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I encourage my team to allocate 80% of our capacity for delivering business value and addressing bug fixes. &lt;/p&gt;
&lt;p&gt;The remaining 20% is set aside for adapting to architecture changes, handling unexpected events, supporting disruptions, attending meetings, fostering innovation, engaging in continuous learning, and, most importantly, consistently reducing our technical debt. This approach empowers us to maintain the highest standard of quality in our work and a healthy work:life balance.&lt;/p&gt;
&lt;p&gt;If all else fails, learn to say "&lt;strong&gt;NO&lt;/strong&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In my opinion, being an "engineer" entails embodying traits like forward-thinking, accountability, a commitment to quality, and an unwavering passion for technology. These qualities should be embedded in the DNA of my engineering identity.&lt;/p&gt;
&lt;p&gt;How are you fostering an Engineering Mindset for Quality?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="eliminate-waste"></category><category term="quality"></category></entry><entry><title>Let us Elevate Our CI/IaC/CD Azure Pipeline Flow Together!</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-iac-flow-decision.html" rel="alternate"></link><published>2023-09-19T00:00:00-07:00</published><updated>2023-09-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-09-19:/azure-pipeline-iac-flow-decision.html</id><summary type="html">&lt;p&gt;Streamline Your Process: Isolating the Provision and Deployment Steps for Efficiency?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuing from our previous guide on &lt;a href="/azure-pipeline-yaml-refactor-parameter-objects.html"&gt;Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management&lt;/a&gt;, we have now successfully wrapped up our latest Minimally Viable Product (MVP) 2. This milestone encompasses the implementation of infrastructure-as-code provisioning logic, illustrated below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Pipeline Run" src="../images/azure-pipeline-iac-flow-decision-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a BINGO moment!&lt;/p&gt;
&lt;h1&gt;Application-type recipes&lt;/h1&gt;
&lt;p&gt;Before I address my question, let me encapsulate the fundamental concept of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;WorkSafeBC Common Engineering v2 Blueprint&lt;/a&gt;  pipelines:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a team embarks on creating a solution, they simply choose the desired application type from our user-friendly self-service menu. After confirming a few essential details, they can initiate the process with a single click.
Our self-service chef swiftly generates an Azure Repository, adhering to our established naming conventions for consistency.&lt;/li&gt;
&lt;li&gt;A sample of the selected application type is promptly uploaded to the repository, including essential common libraries like logging, ensuring standardized practices.&lt;/li&gt;
&lt;li&gt;An Azure Pipeline is then configured, seamlessly integrated into the repository, and automatically triggered to complete the CI-only phase, ensuring an automated workflow and development environment.&lt;/li&gt;
&lt;li&gt;As the Azure Pipeline is queued, it undergoes dynamic assembly using the application-type v2 blueprint templates, infusing a touch of magic while maintaining steadfast consistency.&lt;/li&gt;
&lt;li&gt;Furthermore, a variable configuration template is introduced, imparting solution-specific variables to be seamlessly integrated as parameters - think of it as an all-YAML braai (barbeque), blending elements seamlessly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This streamlined process exemplifies our commitment to efficiency, standardization, and automation in every facet of our pipeline workflows."&lt;/p&gt;
&lt;h1&gt;So what is our MVP 2 all about?&lt;/h1&gt;
&lt;p&gt;Let us kick things off with MVP1, where our primary objective was to deliver a parameterized YAML-based template that seamlessly integrates into step 4 of the process outlined above. Our main concern was not the specific provisioning method, but rather ensuring that it adheres to YAML-based standards, is well-parameterized, and eliminates any wasteful hard-coding.&lt;/p&gt;
&lt;p&gt;In MVP2, we successfully showcased the injection of this template into our v2 blueprints, with a specific focus on the development environment. Following some hours of dedicated effort in refining and fine-tuning MVP1, we proudly unveiled our inaugural CI+IaC+CD pipeline - the BINGO moment.&lt;/p&gt;
&lt;h1&gt;Back to the question: Segregate or Aggregate IaC from CD?&lt;/h1&gt;
&lt;p&gt;I will present two workflows: a segregated and an aggregated pipeline flow. The steps 1-5 remain consistent:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The pipeline is queued.&lt;/li&gt;
&lt;li&gt;The solution-specific variable configuration template is introduced. We deliberately integrated the IaC and CD configurations into a single, unified template. This consolidation ensures that many components, which are commonly shared and reused by both IaC and CD, are seamlessly pulled from the config repository.&lt;/li&gt;
&lt;li&gt;The infrastructure-as-code (IaC) template tailored to the application type is fetched from the IaC repository and seamlessly integrated into the pipeline.&lt;/li&gt;
&lt;li&gt;The build/CI (continuous integration) and release/CD (continuous delivery) templates specific to the application type are sourced from the templates.v2 repository and seamlessly integrated into the pipeline.&lt;/li&gt;
&lt;li&gt;The CI Flow initiates the application-type setup, compiles the solution, conducts thorough testing, and performs scans for vulnerabilities, ensuring adherence to high-quality coding practices.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GEM 1&lt;/strong&gt; 
The configuration, infrastructure-as-code, and pipeline-as-code repositories are accessible by all engineers - transparency.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GEM 2&lt;/strong&gt;
The repositories and associated policies allows our engineers to recommend configuration changes through a pull request, and our platform and enabling engineers (stewards) to validate the configuration changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Step 6 is the focal point of this post, where I introduce two distinct flow patterns, representing the core topic of discussion.&lt;/p&gt;
&lt;h3&gt;Segregated Flow&lt;/h3&gt;
&lt;p&gt;The infrastructure-as-code (IaC) and continuous delivery (CD) steps operate independently and are overseen by our application-type *control.yml template. Essentially, this template incorporates the IaC blueprint for every environment we intend to provision, ensuring all environments are set up before initiating the CD process&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Flow A" src="../images/azure-pipeline-iac-flow-decision-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IaC and CD are logically and visually isolated from each other.&lt;/li&gt;
&lt;li&gt;IaC and CD Azure Pipelines environments can be defined in separate environments. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The visual representation of the runtime pipeline flow will be twice as long.&lt;/li&gt;
&lt;li&gt;The logic for determining which stages to run and which to ignore will be duplicated in both the &lt;em&gt;control.yml and &lt;/em&gt;CD.yml templates. This introduces potential for duplication and drift&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Aggregated Flow&lt;/h3&gt;
&lt;p&gt;The infrastructure-as-code (IaC) and continuous delivery (CD) steps operate as one and are overseen by our application-type *CD.yml template. Essentially, we provision the environment, then deploy the solution to the environment in the same deployment job context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC Flow B" src="../images/azure-pipeline-iac-flow-decision-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The visual representation of the runtime pipeline flow will remain consistent.&lt;/li&gt;
&lt;li&gt;The logic for determining which stages to run and which to ignore will not be redundant.&lt;/li&gt;
&lt;li&gt;Azure Pipeline environments are recycled, minimizing duplication and streamlining administration efforts.&lt;/li&gt;
&lt;li&gt;The application-type *control.yml template maintains its simplicity.&lt;/li&gt;
&lt;li&gt;The application-type *CD.yml only requires one additional statement per environment: include IaC template.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IaC and CD are not logically and visually isolated from each other. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is likely you have gathered that I am inclined towards the aggregated flow. What am I missing?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Which of the two flow patterns do you favor, and what are your reasons?&lt;/strong&gt; Your input and candid feedback are highly valuable in shaping a CI/IaC/CD v2 blueprint grounded in the highest engineering standards.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Software Engineering Standardization</title><link href="https://wsbctechnicalblog.github.io/software-engineering-standardization.html" rel="alternate"></link><published>2023-09-17T00:00:00-07:00</published><updated>2023-09-17T00:00:00-07:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-09-17:/software-engineering-standardization.html</id><summary type="html">&lt;p&gt;Software Engineering Standardization&lt;/p&gt;</summary><content type="html">&lt;p&gt;Consistent and standardized software engineering practices refer to the establishment and adherence to a set of rules, guidelines, and processes within the field of software engineering, with the goal of ensuring reliability, efficiency, and quality in the development and maintenance of systems or products. These practices are particularly important in software development, as they can have a profound impact on the entire software development lifecycle (SDLC) and its various aspects, including automation, DevOps (Donovan Brown | What is DevOps?), responsible AI integration, design patterns, architecture patterns, infrastructure patterns, and concurrency management.&lt;br&gt;
Each of these aspects are broad in nature, and when standardized can harmonized and interoperate seamlessly and effortlessly.  Let's explore each of these concepts in more detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Consistent and standardized engineering practices often involve the automation of repetitive and error-prone tasks in the software development process. This includes automating build processes, testing, deployment, and infrastructure provisioning throughout our environment ecosystem. Automation helps reduce human error, accelerates development cycles, and ensures that development, testing, and production environments are consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;: DevOps is a set of mindset that aims to bridge the gap between the various groups and teams involved in the software development life cycle (SDLC) to promoting collaboration, automation, and continuous integration and delivery (CI/CD). Consistent and standardized engineering practices align with DevOps by establishing clear processes and automation pipelines, ensuring that software changes can be efficiently and reliably deployed into production environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embracing Artificial Intelligence (AI) Responsibly&lt;/strong&gt;: Responsible AI integration involves ethical considerations, fairness, transparency, and accountability in AI-driven systems. Consistent and standardized engineering practices include guidelines for ethically collecting and using data, developing AI models, and implementing AI algorithms in a way that respects privacy and avoids biases, are reliable, safe to use, respect laws and are secure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Patterns&lt;/strong&gt;: Design, Architecture and Infrastructure patterns are proven solutions to common software design problems. Consistent and standardized engineering practices encourage the use of patterns at each layer to create maintainable, scalable, and understandable software and the infrastructure used to create, validate, and deploy it for end-user delight. By following established patterns every empowered DevOps Engineer can build software that is easier to maintain and extend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concurrency Management&lt;/strong&gt;: In software development, concurrency refers to multiple tasks or processes running simultaneously. Consistent and standardized engineering practices include strategies and patterns for managing concurrency effectively, such as using locks, threads, or asynchronous programming. This ensures that applications can handle multiple simultaneous requests or tasks without conflicts or performance bottlenecks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enabling Sustainability and Maintenance&lt;/strong&gt;: Engineering practices that are consistent and standardized also consider the long-term sustainability and maintainability of software applications. This involves using clean code practices, thorough documentation, and version control systems to facilitate ongoing development and maintenance. It ensures that applications can evolve and adapt to changing requirements without becoming overly complex or fragile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Naming Conventions as the Glue&lt;/strong&gt;: Naming conventions are a set of rules and guidelines for naming variables, functions, classes, files, and other elements in a software project, as discussed in one of my previous blogs &lt;a href="https://wsbctechnicalblog.github.io/engineering-practice-naming-conventions.html"&gt;Engineering Practice Naming Conventions&lt;/a&gt;. They act as the glue that connects different parts of the codebase and ensures that developers can easily understand and work with the code. Naming conventions play a vital role in consistent and standardized engineering practices by promoting code readability, reducing ambiguity, enhancing maintainability, and facilitating integration within a software project. They act as the glue that binds different components of the codebase together, making it easier for everyone to work cohesively and maintain high-quality deliverables for the delight of end-users. To quote a colleague, “Consistent naming convention makes it easier for PEOPLE getting up at 2AM to find the root cause of an incident, working backwards down to the codebase.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, consistent and standardized engineering practices are essential in software development to promote efficiency, reliability, and quality across various aspects of the development process. These practices align with automation, DevOps, responsible AI integration, design patterns, concurrency management, and naming conventions to enable the development of software applications that can be sustained and maintained effectively while handling high levels of application concurrency. This approach ultimately leads to better software quality, shorter development cycles, and improved overall system performance.&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="standards"></category><category term="technical-excellence"></category></entry><entry><title>Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-yaml-refactor-parameter-objects.html" rel="alternate"></link><published>2023-08-23T00:00:00-07:00</published><updated>2023-08-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-08-23:/azure-pipeline-yaml-refactor-parameter-objects.html</id><summary type="html">&lt;p&gt;Seizing the chance to enhance and optimize our CI/CD/IaC pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I understand that you may have been delving into our open-source endeavor, which revolves around Azure Pipelines for continuous integration and continuous delivery, employing YAML-based methodologies. If this initiative has not caught your attention yet, I highly recommend acquainting yourself with our  source project, focused on YAML-based continuous integratuion and continuous delivery Azure Pipelines. If not, you better explore our open-source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;WorkSafeBC Common Engineering&lt;/a&gt; project as a starting point.&lt;/p&gt;
&lt;p&gt;For those who are new to this concept, I have compiled a selection of blog links that you might find valuable for a comprehensive understanding:
- &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt;
- &lt;a href="https://wsbctechnicalblog.github.io/azure-devops-pipeline-oss-v2-1-flow.html"&gt;Azure DevOps Pipeline OSS v2.1 Flow&lt;/a&gt;
- &lt;a href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;OK, why are we here?&lt;/h1&gt;
&lt;p&gt;Indeed, we are currently in the process of integrating infrastructure-as-code (IaC) into our v2 blueprints. This advancement entails the inclusion of a substantial number of parameters within our variable template files. As a consequence, a series of sleepless nights has ensued for our team. To provide a visual depiction, please refer to the illustration below, where the newly added components are represented in pink.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="IaC" src="../images/azure-pipeline-yaml-refactor-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we have a quick look at the basic &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/commit/eee9e2e895e8869e1f4fc8e7b55b1973b469351f#diff-34a1ea16e45e933dd3f78d78dd2752204483355a45237fb33d7a31b1bb51e383"&gt;101 sample variable template&lt;/a&gt; you will notice that we have a &lt;strong&gt;FLAT&lt;/strong&gt; configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;variables:&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# Blueprint: __101__&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# If you are not going to use all stages&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; as below&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; you can suppress them by simply commenting out&lt;/span&gt;
&lt;span class="c"&gt;# or removing their entire configuration section&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# DEVelopment Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Development&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  developmentStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# System Test Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;SystemTest&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  systemTestStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# Security Review Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  securityReviewStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# Staging Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Staging&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  stagingStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;

&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# PRODuction Test Stage&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;Production&amp;#39; # Do not change stage name value&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageEnvName&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; name:  productionStageVmImage&lt;/span&gt;
&lt;span class="c"&gt;  value: &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;TBD&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# TODO Add your variables here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result, each time a new parameter is introduced, it necessitates an update to the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/eee9e2e895e8869e1f4fc8e7b55b1973b469351f/blueprints/__101__/azure-pipeline-__101__-control.yml"&gt;control template&lt;/a&gt; to incorporate and transmit the extra parameter. This process has proven to be exasperating, labor-intensive, prone to errors, and ultimately, not a sustainable approach. It is far from straightforward and, therefore, presents a significant challenge and &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Exploring options&lt;/h1&gt;
&lt;h3&gt;YAML update August 13, 2013&lt;/h3&gt;
&lt;p&gt;Over the long weekend, I enjoyed a delightful blend of relaxation and productivity. In between moments of unwinding with videos and tending to our adorable 10-week-old Dachshund puppy, I found myself immersed in the world of re-coding our &lt;code&gt;__101__&lt;/code&gt; blueprint templates. Little did I know that this seemingly innocent endeavor would lead me on a tumultuous journey of debugging challenges.&lt;/p&gt;
&lt;p&gt;Azure DevOps YAML, unfortunately, proved to be an intricate maze to navigate. One perplexing discovery was that it steadfastly refuses to accommodate variables of the object type or arrays of objects. The reasoning behind this limitation remains elusive, but take my word for it – this kind of support is conspicuously absent and an area in the binary space that I will defer for another rainy day.&lt;/p&gt;
&lt;p&gt;This experience has taught me that even in the realm of coding, surprises abound. Despite the setbacks, I'm determined to continue refining our blueprint templates and conquering the intricacies of Azure DevOps YAML. Who knows what other insights and discoveries await as I press on with determination?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 1&lt;/strong&gt; - Defining YAML objects or array of objects as variables in an Azure Pipeline variable template is a no-go! You can do it with parameters, not variables.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;YAML update August 14, 2023&lt;/h3&gt;
&lt;p&gt;Following yet another early morning coding expedition and a debugging session that spanned the lunchtime hours, I made a pivotal decision. I opted to roll back our variable template to its simpler form, opting for straightforward variables. To address the array of objects within objects, I ingeniously integrated them as parameters within the control template. While this solution may not epitomize perfection, it undoubtedly provided a remedy for the crash debacle that had marred the weekend.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 2&lt;/strong&gt; - Simplify in small steps, not in a big bang. Otherwise you may embrace lots of debugging and unwinding of code changes.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moreover, the ripple effect of this adjustment extended its benefits to the Continuous Deployment (CD) stage templates. Looking ahead, this approach promises to streamline the Infrastructure as Code (IaC) stage templates as well. These incremental strides within the realm of YAML Pipelines might seem small in scale, yet they represent a significant leap forward for our blueprint endeavors.&lt;/p&gt;
&lt;p&gt;Initiating the submission of a draft pull request, I now find myself in a state of anticipation, eagerly awaiting the candid feedback of my colleagues. The outcome holds the promise of insights that will undoubtedly enrich the project and refine its trajectory q;-)&lt;/p&gt;
&lt;h3&gt;YAML update August 18, 2023&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Be sure to follow these steps before embarking on collaborative pull requests: stage your latest changes, commit them, and push them to the repository. Neglecting to push your changes can lead to confusion and inefficiencies, especially if the absence of a push results in non-sequential or illogical changes.
&lt;/p&gt;
&lt;p&gt;&lt;img alt="IaC" src="../images/azure-pipeline-yaml-refactor-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have received the 'thumbs up' from all of our stakeholders, except for Daniel, who is currently enjoying a well-deserved vacation. This marks the successful completion of the first phase of my simplification journey. Moving forward, the next steps are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publish this post.&lt;/li&gt;
&lt;li&gt;Initiate a Pull Request (PR) for open-source synchronization - Phase 1.&lt;/li&gt;
&lt;li&gt;Commence the process of updating our existing blueprints to align with the changes.&lt;/li&gt;
&lt;li&gt;Proceed with the submission of a Pull Request (PR) for open-source synchronization - Phase 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is the pull request (PR) that matches the internal PR I submitted for REVIEW: &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/22"&gt;Synchronize 101 simplifications from in-house&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Revision of the proposed solution&lt;/h1&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;config&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Regrettably, the concept of using variables to define objects and arrays of objects had to be abandoned as discussed. Instead, I have reverted back to the previous flat structure. Additionally, I have incorporated a state variable in place of the former name stage. I will delve into this further in our upcoming conversation.&lt;/p&gt;
&lt;p&gt;Here is an extract, with the &lt;strong&gt;&lt;strong&gt;101&lt;/strong&gt;&lt;/strong&gt; sample configuration data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# -----------------------------------------------
# Development Stage
- name:  developmentStageActive
  value: true
- name:  developmentStageEnvName
  value: &amp;#39;&amp;lt;tbd&amp;gt;&amp;#39;
- name:  developmentStageVmImage
  value: &amp;#39;&amp;lt;tbd&amp;gt;&amp;#39;
- name:  developmentStageTestData
  value: &amp;#39;Development Stage Test Data&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;control&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;The latest enhancement involves the creation of an array comprising stage configuration objects and supplementary parameters. Specifically, each stage environment now possesses its own dedicated object. To illustrate, I have provided an excerpt from the development stage below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageActive&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;nameEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;nameVM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;developmentStageTestData&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# TODO pass your configuration variables here&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This new approach aims to streamline stage management and configuration. I am eager to explore the finer details in our upcoming discussions.&lt;/p&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;cd&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Gone are the days of relying solely on a growing list of parameters and stage names to orchestrate our deployment pipeline. Instead, we have adopted a more dynamic and adaptable strategy by focusing on the &lt;code&gt;*.config.active&lt;/code&gt; value. This value serves as the driving force behind the inclusion or exclusion of stages from the pipeline. This approach provides a remarkable level of flexibility, enabling us to make adjustments without the fear of brittleness that stage names might introduce.&lt;/p&gt;
&lt;p&gt;Let us explore this transformation through a tangible example. Below, you will find an excerpt showcasing the new approach in action, specifically in the context of the development and system test stages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parameters:
- name:     stage
  type:     object

stages:

# -----------------------------------------------------------------
# DEVELOPMENT STAGE
# -----------------------------------------------------------------

- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
  - template: /blueprints/__101__/azure-pipeline-__101__-cd-stage.yml@CeBlueprints
    parameters:
      name:                         &amp;#39;Development&amp;#39;
      displayName:                  &amp;#39;Development (DV)&amp;#39;
      config:                       &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
      dependsOn:
      - ContinuousIntegration

# -----------------------------------------------------------------
# SYSTEM TEST STAGE
# ------------------------------------------------------------------
- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
  - template: /blueprints/__101__/azure-pipeline-__101__-cd-stage.yml@CeBlueprints
    parameters:
      name:                         &amp;#39;SystemTest&amp;#39;
      displayName:                  &amp;#39;System Test (SY)&amp;#39;
      config:                       &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
      dependsOn:
      - ContinuousIntegration
      - &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
        - Development
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet underscores how the cd template's revamped structure empowers us to effortlessly manage stages, pass configuration data, and adapt to evolving deployment needs.&lt;/p&gt;
&lt;h3&gt;Changes in our &lt;code&gt;__101__&lt;/code&gt; &lt;em&gt;-&lt;/em&gt;&lt;em&gt;cd-stage&lt;/em&gt;*.yml template&lt;/h3&gt;
&lt;p&gt;Lastly, the culmination of our efforts leads to the seamless flow of configuration and dependency objects into the &lt;code&gt;*cd-stage**.yml&lt;/code&gt; deployment stage template, an evolution that not only facilitates innovation but also encourages extension. This pivotal enhancement brings forth a user experience that is notably simplified and intuitive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setSemVersion.semVersion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameVM&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameEnv&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;runOnce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testData&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In comparison to managing an expanding list of parameters, working with a comprehensive object empowers us to navigate complexities effortlessly. This shift provides a fertile ground for creativity and expansion, enabling us to embrace new possibilities and adapt to evolving deployment landscapes with remarkable ease.&lt;/p&gt;
&lt;h1&gt;What is the impact on our open-source project?&lt;/h1&gt;
&lt;p&gt;In line with our commitment to progress and collaboration, we are excited to announce that the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2
&lt;/a&gt; open-source project is about to undergo a significant update. This update will reflect the advancements we have made and the enhancements we are introducing to our in-house blueprints.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - this is potentially a breaking change if you are relying on the default blueprints in the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering"&gt;
WorkSafeBC Common Engineering&lt;/a&gt; project. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;As we embrace this enhanced approach, we look forward to a future where deployment processes are not only efficient but also versatile, setting the stage for continuous innovation with our continuous integration, delivery, and provisioning pipelines.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Why do we care about infrastructure-as-code (IaC)?</title><link href="https://wsbctechnicalblog.github.io/why-we-care-about-iac.html" rel="alternate"></link><published>2023-08-02T00:00:00-07:00</published><updated>2023-08-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-08-02:/why-we-care-about-iac.html</id><summary type="html">&lt;p&gt;Our vision is *aC, but to avoid boiling the ocean, we will focus on an overview on IaC today.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Microsoft Azure has a great definition of &lt;a href="https://learn.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code"&gt;infrastructure as code (IaC)&lt;/a&gt; - "&lt;em&gt;Infrastructure as code (IaC) uses DevOps methodology and versioning with a descriptive model to define and deploy infrastructure, such as networks, virtual machines, load balancers, and connection topologies. Just as the same source code always generates the same binary, an IaC model generates the same environment every time it deploys.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;As highlighted in the above definition, one of the main goals of IaC is to bring the benefits of software development practices, such as version control, code reuse, and automation, to the infrastructure provisioning and management process. It makes it &lt;strong&gt;easier&lt;/strong&gt; to maintain, collaborate, and &lt;strong&gt;scale&lt;/strong&gt; infrastructure resources &lt;strong&gt;efficiently&lt;/strong&gt; and &lt;strong&gt;consistently&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Have you ever found yourself in a situation where you needed to manually provision infrastructure identical to what was set up 6 months ago by an engineer? Perhaps, in an emergency scenario like disaster recovery? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Wishing for IaC" src="../images/why-we-care-about-iac-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have, then you are likely familiar with the frustrating experience of encountering &lt;strong&gt;inconsistent&lt;/strong&gt; results and the significant &lt;strong&gt;time wasted&lt;/strong&gt; on searching for documentation, consulting subject matter experts, and tediously executing repetitive tasks. &lt;/p&gt;
&lt;p&gt;To streamline the process and avoid such challenges, embracing IaC can be a game-changer. Our digital friends can swiftly recreate infrastructure consistently, quickly, and repetitvely, especially during critical situations like disaster recovery or disruptive context switching.&lt;/p&gt;
&lt;p&gt;As I look back, I fondly remember hosting a presentation at the &lt;a href="https:/www.devconf.co.za"&gt;devconf&lt;/a&gt; conference in South Africa back in 2018. The topic of the talk was &lt;a href="https://www.slideshare.net/VSTSCommunityMicroso/moving-75000-microsofties-to-devops-with-visual-studio-team-services"&gt;Moving 75,000 Microsofties to DevOps with Visual Studio Team Services&lt;/a&gt;, and it was an incredible opportunity to share the valuable insights and lessons we had learned.&lt;/p&gt;
&lt;p&gt;During the presentation, there was one particular slide that stood out, capturing the essence of IaC.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Flash of the past" src="../images/why-we-care-about-iac-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast forwarding to 2023, it becomes evident that Infrastructure as Code (IaC) is far from a novel concept!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why is IaC important to us?&lt;/h1&gt;
&lt;p&gt;Why is our Enterprise DevOps (EDO) group exploring Infrastructure as Code (IaC)? The answer is clear - we aim to streamline the provisioning and maintenance of our infrastructure, enhancing factors like consistency, standardization, maintainability, and security. By embracing IaC, we seek to make these processes significantly easier and more efficient for our team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;My personal vision&lt;/strong&gt;: "&lt;em&gt;Streamline our software development lifecycle and make it so simple for engineers to start a new project the right way, that they no longer worry about reinventing the hammer.&lt;/em&gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;How are we planning to integrate IaC into our Pipeline-as-code (PaC)?&lt;/h1&gt;
&lt;p&gt;We are on a journey to innovate our &lt;a href="/yaml-pipelines-part1.html"&gt;Pipeline Journey&lt;/a&gt; by actively exploring fresh ideas. Our primary focus is to consistently enhance our continuous integration (CI) and continuous delivery (CD) pipelines, integrating Infrastructure as Code (IaC) into the CD pipeline, as illustrated below. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="v2.1 CI/CD/IaC" src="../images/why-we-care-about-iac-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This strategic move is set to bring greater efficiency and effectiveness to our processes, ultimately advancing our development and delivery capabilities.&lt;/p&gt;
&lt;p&gt;Watch this space for updates.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thoughts and feedback from your IaC experience?&lt;/p&gt;</content><category term="Posts"></category><category term="azure"></category><category term="azure-devops"></category><category term="pipelines"></category></entry><entry><title>Innovation podcast with WorkSafeBC and Microsoft</title><link href="https://wsbctechnicalblog.github.io/innovation-podcast-wsbc-msft.html" rel="alternate"></link><published>2023-07-31T00:00:00-07:00</published><updated>2023-07-31T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-07-31:/innovation-podcast-wsbc-msft.html</id><summary type="html">&lt;p&gt;An informal conversation around innovation with Bill, Omar, Sebastian, Sarav, and Todd&lt;/p&gt;</summary><content type="html">&lt;p&gt;Introducing the captivating "TechTalks: Exploring the Future" podcast by WorkSafeBC(WSBC) – where innovation meets leadership, technology, and human insight! Join our esteemed panel of seasoned technologists and visionary business leaders as they delve into the fascinating intersection of technology, work, and people: &lt;a href="https://www.linkedin.com/in/bbaldasti/"&gt;Bill Baldasi&lt;/a&gt; - National Leader, Azure Digital and Application Innovation (Microsoft), &lt;a href="https://www.linkedin.com/in/omar-naser-50bb9b266/"&gt;Omar Naser&lt;/a&gt; - Product Lead, Innovation Services (WSBC), Sarav Shan - Product Owner, Innovation Services, &lt;a href="https://www.linkedin.com/in/slecalvez/"&gt;Sebastian Le Calvez&lt;/a&gt; - National Director,  App Innovation, Customer Success Leader (Microsoft), and &lt;a href="https://www.linkedin.com/in/todd-yule-4679646/"&gt;Todd Yule&lt;/a&gt; - Head of Innovation Services and CDO (WSBC).&lt;/p&gt;
&lt;p&gt;As a passionate enthusiast in leadership, business, and technology, you will find this podcast a treasure trove of knowledge and inspiration. &lt;/p&gt;
&lt;p&gt;In this episode, we team up with industry giants Microsoft to embark on an exciting journey through the annals of tech history and explore cutting-edge innovations that shape our future. Brace yourself for a deep dive into captivating topics from the ever-evolving tech world, sprinkled with insightful discussions and thought-provoking insights from the brightest minds in the field.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/e_OwVcZNRcg"&gt;&lt;img alt="Podcast" src="../images/innovation-podcast-wsbc-msft-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Topics&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why all Developers should be using co-pilot&lt;/li&gt;
&lt;li&gt;How to build Artificial Intelligence (AI) co-pilots for your own apps&lt;/li&gt;
&lt;li&gt;Learn about responsible AI&lt;/li&gt;
&lt;li&gt;Recommended Microsoft certifications for AI&lt;/li&gt;
&lt;li&gt;What are the skills required for AI&lt;/li&gt;
&lt;li&gt;Concerns about privacy, security as it relates to AI&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Click &lt;a href="https://youtu.be/e_OwVcZNRcg"&gt;here&lt;/a&gt; to listen to the conversation.&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="ai"></category></entry><entry><title>Water Cooler Talk - Why Azure Devops is not a silver bullet</title><link href="https://wsbctechnicalblog.github.io/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet.html" rel="alternate"></link><published>2023-07-23T00:00:00-07:00</published><updated>2023-07-23T00:00:00-07:00</updated><author><name>&lt;Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-07-23:/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet.html</id><summary type="html">&lt;p&gt;Yes, I LOVE Azure DevOps, but it is not the answer to the universe.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="AzdO the silver bullet" src="../images/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; is a software as a service (SaaS) product that &lt;strong&gt;empowers&lt;/strong&gt; you to plan smarter, collaborate better, and ship faster. Integrated with &lt;a href="https://learn.microsoft.com/en-us/azure/?product=popular"&gt;Azure&lt;/a&gt; services, Azure DevOps is geared for software development.&lt;/p&gt;
&lt;p&gt;The latter, &lt;strong&gt;geared for software developnment&lt;/strong&gt;, is key. Recently when I received a request to create a new Azure DevOps project, with special requests for GANTT extensions and serious push back on the &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/plans/track-dependencies?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/boards/kanban-quickstart?view=azure-devops"&gt;Kanban Boared&lt;/a&gt; features.&lt;/p&gt;
&lt;p&gt;I wanted to know more ... a lot more. It quickly became apparent that the team were only interested in the Azure Boards service, the CMMI process, and were only going to use Azure DevOps to track a waterfall project.&lt;/p&gt;
&lt;p&gt;After considering the &lt;strong&gt;license&lt;/strong&gt; cost, required &lt;strong&gt;training&lt;/strong&gt;, and especially the &lt;strong&gt;support of extensions&lt;/strong&gt; not used by the rest of the organization, I recommended the user to consider &lt;a href="https://www.microsoft.com/en-ca/microsoft-365/project/compare-microsoft-project-management-software"&gt;Microsoft Project&lt;/a&gt; instead.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It is important to use the right tool for the right job!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sledgehammer" src="../images/water-cooler-talk-why-azure-devops-is-not-a-silver-bullet-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="water-cooler"></category><category term="azure-devops"></category></entry><entry><title>Water Cooler Talk - Why is WSBC such a cool place?</title><link href="https://wsbctechnicalblog.github.io/water-cooler-talk-why-is-wsbc-such-a-cool-place.html" rel="alternate"></link><published>2023-07-19T00:00:00-07:00</published><updated>2023-07-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-07-19:/water-cooler-talk-why-is-wsbc-such-a-cool-place.html</id><summary type="html">&lt;p&gt;At a recent water cooler we chatted about why WorkSafeBC is such a cool place to work for.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Water cooler talk occurs when we take a break from work, socialize with each other, and collaborate about things like hobbies, favourite beer brews, and other fun topics not associated with work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Why is WSBC Cool?" src="../images/water-cooler-talk-why-is-wsbc-such-a-cool-place-0.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me it is the &lt;strong&gt;culture&lt;/strong&gt;, the &lt;strong&gt;flexibility&lt;/strong&gt; (working from home), the &lt;strong&gt;opportunity&lt;/strong&gt; to dabble with old, current, and future technologies, the &lt;strong&gt;leadership&lt;/strong&gt; focused on &lt;strong&gt;empowering&lt;/strong&gt; and &lt;strong&gt;trusting&lt;/strong&gt; staff, and the amazing &lt;strong&gt;benefits&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TAKE NOTE&lt;/strong&gt; - My manager just published the following informative article, which touches on a number of important pillars to create an empowered culture: &lt;a href="https://cloud.cioreview.com/cxoinsight/leading-the-change-how-exemplary-behaviours-team-support-and-a-safe-environment-foster-innovation-nid-37684-cid-17.html"&gt;Leading the Change: How Exemplary Behaviours, Team Support, and a Safe Environment Foster Innovation&lt;/a&gt;, which gives a glimpse into how he and other leaders think.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;On the other hand, my team is self-managed and self-organized. If I had to summarize our vision in two words I would pick &lt;strong&gt;empower&lt;/strong&gt; and &lt;strong&gt;collaborate&lt;/strong&gt; - and yes, &lt;strong&gt;empower&lt;/strong&gt; overlaps with the leadership. We even get the opportunity to write a cookbook to explain our history with Azure Pipelines, our future, and share all our gotchas and learnings - tentative title is "Continuous Integration and Delivery Pipelines Cookbook".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Leadership and team focus" src="../images/water-cooler-talk-why-is-wsbc-such-a-cool-place-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;With that we made our way back to work. For more, read my &lt;a href="/can-government-agencies-be-innovative.html"&gt;can government agencies be innovative&lt;/a&gt; post and peruse my story:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Willy's Story" src="../images/water-cooler-talk-why-is-wsbc-such-a-cool-place-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="water-cooler"></category></entry><entry><title>Engineering Practice &amp; Processes</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-practices-processes.html" rel="alternate"></link><published>2023-06-14T00:00:00-07:00</published><updated>2023-06-14T00:00:00-07:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-06-14:/engineering-practice-practices-processes.html</id><summary type="html">&lt;p&gt;Software Engineering Practices &amp;amp; Process&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Software Engineering Landscape&lt;/h1&gt;
&lt;p&gt;When thinking of software engineering, we need to have a clear vision and utility of practices we employ and the processes we follow.  Firstly, software and software engineering does not exist in a vacuum; it exists to provide a service and solution to a customer facing problem – to create a viable product that not only meets the need but embraces the problem space to become a beacon of hope and vision in the domain of the end-user.  What we build has a purpose and a life of service to provide, to enhance and embrace changes that meet an evolving domain.  This is the fundamental viewpoint for a product focused software engineering practice – and the drive to efficiency, quality, and best practices is seen from that lens.&lt;/p&gt;
&lt;h1&gt;The Software Factory&lt;/h1&gt;
&lt;p&gt;When I think about software engineering, I think of a modern digital factory where humans are the creativity engines working along and within a well-defined and open, interconnected set of processes that not only guide the engineers but enhance their effectiveness and creativity while not wavering on quality.  To get this right, we need to have the right kind of infrastructure to support the product engineering mindset.  In fact, the infrastructure is itself software and a set of process and is the internal facing product to be consumed by our other software engineering teams in pursuit of the product deliveries; you can see the fractal nature of this.&lt;/p&gt;
&lt;h1&gt;Inner Workings &amp;amp; Collaboration&lt;/h1&gt;
&lt;p&gt;Our Common Engineering team is responsible for the inner workings of this software engineering factory, as their product to extend and improve – and automate everywhere possible.  There have been great strides in the past 10 years in the thinking and implementation of the managed software environment which has led to automation and streamlining of the process.  Our Ce team has embraced this mindset with continuous improvement and new implementations in automation of our Continuous Integration (CI) build pipelines including Continuous Deployment (CD) and On-Demand Delivery.  From the perspective of the infrastructure as a service, the Ce team continues to apply software engineering practices – adopting Infrastructure-as-Code (IaC) and Configuration-as-Code (CaC) using version control repositories to manage and track changes.  Lessons and best practices also apply here, and bite when they are not fully embraced; naming conventions and standard practices enable automation, and we are seeing the benefits of that software engineering mindset.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Active Collaboration" src="../images/engineering-practice-practices-processes-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Figure – Active Collaboration to create “one” view, “one” team. See https://wsbctechnicalblog.github.io/ceremony-overview.html for details on CoE.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Engineering Mission&lt;/h1&gt;
&lt;p&gt;Engineering a software application starts with a mission – and that mission is articulated by our Solution Architecture team in concert with other business groups (their customers).  This is an exciting point of collaboration between our Ce and Architecture groups as well; we can help them to discover and implement their deliverables in an Agile, evolving product and business landscape; to work together to find the best solutions to keeping the software factory running smoothly.  To communicate and apply lessons we’ve learned in standardization, integration, creating blueprints, and automation collaboratively.&lt;/p&gt;
&lt;h1&gt;Inception&lt;/h1&gt;
&lt;p&gt;The primary deliverable from the SA team is the Architecture Definition Document (ADD); a broadly scoped and multi-layered specification that covers a breadth technical and functional viewpoint.  The SA’s should build from a reference to the Azure Architecture and together with the Center of Enablement (CoE) create a library of organizational architecture patterns to be adopted or extended during ADD creation.   In an evolving (Agile / SAFe) product life cycle, the ADD needs to be iterative in nature as some viewpoints get more clarity and detail with time.  Some viewpoints have significant impact when altered, others can evolve without too much risk; these areas and work-flows need to be defined and documents to add clarity to the process, which can lead to process improvements and automation.  Currently the mechanics for crafting an ADD (word, Visio, draw.io, AzDO wiki), where it is stored, and its structural contents are not easily understood or consistent applied.  The content of the ADD’s should be based upon reusable design patterns that are referenced and possibly extended to avoid duplication of effort lack of consistent implementation across products.&lt;/p&gt;
&lt;h1&gt;Ideation&lt;/h1&gt;
&lt;p&gt;The Design Review Group (DRG) is the multi-disciplinary group including senior members from Common Engineering, Architecture, Security, and Cloud Operation areas whose task is to review and ensure the integrity of each product ADD.  As the ADD needs to evolve with the Agile products it is intended to describe and support, so too does the cadence, process and mechanics of the DRG.  Common Engineering is committed to assisting the Architecture team define the processes needed to support the needs of product design definition and review, creating the needed artifact to support and possibly automate the workflow where possible and practical.  Currently the DRG uses an Azure board to track the process of ADD creation and approval.  &lt;/p&gt;
&lt;h1&gt;Technology Adoption&lt;/h1&gt;
&lt;p&gt;When and how the Technology Adoption Process (TAP) gets triggered is another area that Common Engineering and the Architecture Groups can collaborate.  We have automated the inflow of requests to make the initial request for new technology at WSBC so that it sends a confirmation email to the requesting individual and add an entry into the TAP Azure boards setup to track processing of adoption requests through the TAP process.  Once a product has been approved for adoption, it should become an entry on the Product Catalog; this is another area of automation Ce team can help provide.  The TAP process needs to be supported by Common Engineering to help govern the landscape of technology we can reasonably consume and use consistently across products, product lines, and ARTs.&lt;/p&gt;
&lt;h1&gt;Lifecycle Support&lt;/h1&gt;
&lt;p&gt;The Common Engineering team supports the entire Software Product Engineering lifecycle from ideation to deprecation &amp;amp; decommissioning, working collaboratively with other teams to ensure our processes and practices are visible and well defined.  In doing so, we expose opportunities for improvement, further collaboration and automation.&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Azure Boards Tips - Retain hierarchy with filter</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips-retain-hierarchy-with-filter.html" rel="alternate"></link><published>2023-06-05T00:00:00-07:00</published><updated>2023-06-05T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-06-05:/azure-boards-tips-retain-hierarchy-with-filter.html</id><summary type="html">&lt;p&gt;Why does the hierarchy view [not] vanish when selecting a filter?&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue the journey of feature discovery with the &lt;a href="https://azure.microsoft.com/en-us/products/devops"&gt;AzureDevOps&lt;/a&gt; Board, which we started with &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;, &lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;, and &lt;a href="azure-boards-tips-operations-teams"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Odd behaviour when using the backlog filter&lt;/h1&gt;
&lt;p&gt;We often find ourselves switching the &lt;a href="https://azure.microsoft.com/en-us/products/devops/boards/"&gt;Azure Board&lt;/a&gt; to the backlog view and enable parents, giving us a hierarchical view as shown below. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hierarchy" src="../images/azure-boards-tips-retain-hierarchy-with-filter-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then we use the filter to show a subset of the work items, in this case those with a state of &lt;strong&gt;Active&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Filter removes hierarchy" src="../images/azure-boards-tips-retain-hierarchy-with-filter-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An annoying side effect of using filters, is that the hierarchical view disappears.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Flip a toggle to get the view you want&lt;/h1&gt;
&lt;p&gt;A feature I discovered is the "keep hierarchy with filters" toggle under &lt;strong&gt;View Options&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hierarchy Flag" src="../images/azure-boards-tips-retain-hierarchy-with-filter-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you toggle that to &lt;strong&gt;On&lt;/strong&gt; you get the view I believe should be the default. Best of both worlds ... filter set, and parent and child hierarchy enabled.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Filter not removed" src="../images/azure-boards-tips-retain-hierarchy-with-filter-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Any other tips to share?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Configuration and/or Dependency Management</title><link href="https://wsbctechnicalblog.github.io/configuration-and-or-dependency-management.html" rel="alternate"></link><published>2023-05-26T00:00:00-07:00</published><updated>2023-05-26T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-05-26:/configuration-and-or-dependency-management.html</id><summary type="html">&lt;p&gt;What am I missing? Is this not a common dependency challenge?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I do not have experience in this area and am slowly, but surely, losing my marbles as no-one seems to have an answer.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;System Center Configuration Manager to the rescue ... or not?&lt;/h1&gt;
&lt;p&gt;Yes, we are using Microsoft System Center Configuration Manager, to report on the health of our virtual servers, installed products, and missed patches. In essence, we know exactly WHAT is installed and WHAT is vulnerable - that is a goo thing, no?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Installed applications" src="../images/configuration-and-or-dependency-management-1.png"&gt; &lt;/p&gt;
&lt;p&gt;In the above example, we know we are running application A, B, and C, as well as dependencies .NET 2, 3, and 6. We alerted that .NET 2 and .NET 3 are end-of-life (EOL) and therefore a vulnerability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Team Framework Monitor&lt;/h1&gt;
&lt;p&gt;We have also developed a tool, called Team Framework Monitor (TFM), which we recently open-sourced. See &lt;a href="/bcit-computer-systems-technology-industry-sponsored-student-project.html"&gt;BCIT Computer Systems Technology Industry Sponsored Student Project.html&lt;/a&gt; for details. &lt;/p&gt;
&lt;p&gt;Using the tool, we regularly scan all our &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure DevOps&lt;/a&gt; repositories to produce a report of applications, their dependencies, and whether any of their dependencies are end-of-live (EOL) - another precious gem, no?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Application codebase" src="../images/configuration-and-or-dependency-management-2.png"&gt; &lt;/p&gt;
&lt;p&gt;In the above example, we know we have upgraded application A and B to use .NET 6. We have addressed two vulnerabilities in two of our applications in the codebase. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Dependency Management Dilemma&lt;/h1&gt;
&lt;p&gt;And here is my dilemma. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We diligently address the vulnerabilities on the server by removing .NET 2 and .NET 3.&lt;/li&gt;
&lt;li&gt;We trigger continuous delivery which deploys the latest versions of application A, B, and C.&lt;/li&gt;
&lt;li&gt;We smile, go home, and relax.&lt;/li&gt;
&lt;li&gt;At 2-AM in the morning, our phones ring off the hook - application C is down. Production incident.&lt;/li&gt;
&lt;li&gt;Root cause analysis determines that application C is still dependent on .NET 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sound familiar?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="The challenge" src="../images/configuration-and-or-dependency-management-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Neither System Center Configuration Manager, nor any of the other expensive products we use can &lt;strong&gt;pro-actively&lt;/strong&gt; warn us and avoid the 2AM call by generating a report such as this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="The ask" src="../images/configuration-and-or-dependency-management-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Obviously, we can spend manual effort to create yet another Excel workbook, with Pivot Tables that will help us figure our that we cannot remove .NET 3 yet. But ... there must be a smarter, more automated strategy?!?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;How are YOU solving this challenge? Do you have any case studies of organizations that have mastered this challenge?&lt;/p&gt;
&lt;p&gt;Comment below and let us start an interesting discussion!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category></entry><entry><title>BCIT Computer Systems Technology Industry Sponsored Student Project (ISSP)</title><link href="https://wsbctechnicalblog.github.io/bcit-computer-systems-technology-industry-sponsored-student-project.html" rel="alternate"></link><published>2023-05-25T00:00:00-07:00</published><updated>2023-05-25T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-05-25:/bcit-computer-systems-technology-industry-sponsored-student-project.html</id><summary type="html">&lt;p&gt;Today we have open-sourced our Technology Framework Monitor (TFM).&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I had another moment of pride, as I listened to the presentation delivered by two &lt;a href="https://www.bcit.ca/about/visit/campuses-directions/burnaby/"&gt;British Columbia Institute of Technology&lt;/a&gt; students who have worked with my team for the past 4.5 weeks. I realized that I was watching and listening to the next generation of software engineers, who will continue the adventure that I embarked on in the early 80s.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Presentation" src="../images/bcit-computer-systems-technology-industry-sponsored-student-project-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;The project&lt;/h1&gt;
&lt;p&gt;We (primarily AndreasM, GitHub: AndreasNVI) developed the Technology Framework Monitor (TFM) product to gather information about every project within an &lt;a href="https://azure.microsoft.com/en-us/products/devops"&gt;Azure DevOps&lt;/a&gt; organization. The product scans every &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure Repository&lt;/a&gt;, analyses the projects within each repository, and saves data in a SQL Server database for further analysis and reporting.&lt;/p&gt;
&lt;p&gt;Examples of information collected and analyzed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Details of Azure DevOps Team Projects within the organization.&lt;/li&gt;
&lt;li&gt;Details of Azure Repositories within Azure DevOps Team projects.&lt;/li&gt;
&lt;li&gt;Version of .NET and flag end-of-life versions.&lt;/li&gt;
&lt;li&gt;Version of Angular.&lt;/li&gt;
&lt;li&gt;Version of Azure Function runtime.&lt;/li&gt;
&lt;li&gt;Version of NuGet packages.&lt;/li&gt;
&lt;li&gt;Version of npm packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;The challenge we set for the BCIT students&lt;/h1&gt;
&lt;p&gt;The TFM product needed a lot of love and care to clean-up the codebase so that we can release it as one of our open-source projects. For example, we needed to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove unused code and refactor the codebase to improve the performance and maintainability.&lt;/li&gt;
&lt;li&gt;Handle transient faults to deal with Azure DevOps throttling and circuit breakers.&lt;/li&gt;
&lt;li&gt;Support automation to run the product on a specific day, at a specific time, and do so continuously.&lt;/li&gt;
&lt;li&gt;Document the product usage and optionally produce 101-usage videos.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;What they experimented with and learned during the student project&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Worked with a platter of products, such as Microsoft Azure DevOps, GitHub, Visual Studio, and SQL Server.&lt;/li&gt;
&lt;li&gt;Got an in-sight into why the gathered information is pivotal to a sound engineering process and practices.&lt;/li&gt;
&lt;li&gt;Got an opportunity to collaborate with our common engineering practice lead, developers, and cloud systems engineers.&lt;/li&gt;
&lt;li&gt;had an opportunity to experiment with Git, GitHub, Azure DevOps, Visual Studio, and SQL Server.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Oh, we open-sourced the solution!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You can peruse our open-source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor"&gt;Technology Framework Monitor (TFM) product&lt;/a&gt; on GitHub.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;My final message to the students: "&lt;em&gt;When the "WorkSafeCodeCleanUpCrew," Team #5, faced a reduction in members from 3 to 2 BCIT students shortly after the kick-off, I immediately raised a red flag for our ambitious Technology Framework Monitor (TFM) open-source project. However, I was pleasantly surprised by Daniel and Samuel's response to the challenge. They not only embraced the situation but also rapidly mastered essential tools such as SQL Server, Visual Studio, GitHub, and Azure DevOps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Throughout the project, Daniel and Samuel demonstrated their commitment by conducting thorough research on engineering practices and products. They fearlessly experimented, dedicating their time to refactor both code and documentation. Their utilization of the Trello and Azure DevOps Kanban Board to track their progress was highly effective, ensuring transparency and enabling efficient collaboration.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I cannot stress enough the awe-inspiring passion, perseverance, and dedication that Daniel and Samuel exhibited during this project. Their contributions to our open-source project, TFM, are nothing short of remarkable. I eagerly anticipate witnessing their future endeavors and the continued impact they will make.&lt;/em&gt;” &lt;/p&gt;
&lt;p&gt;Last, but not least, &lt;strong&gt;THANK YOU&lt;/strong&gt; Andreas for being a patient and phenomenal mentor, coach, and fellow software engineer in this adventure. Also, a special &lt;strong&gt;THANK YOU&lt;/strong&gt; to Martin (MerlinDarkstar) for being our Software Practice Lead and keeping us on the rails.&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="oss"></category></entry><entry><title>Why bother with governance?</title><link href="https://wsbctechnicalblog.github.io/why-bother-with-governance.html" rel="alternate"></link><published>2023-04-28T00:00:00-07:00</published><updated>2023-04-28T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-28:/why-bother-with-governance.html</id><summary type="html">&lt;p&gt;Why bother with governance when no-one can find it?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I will not waste your time with the &lt;strong&gt;why&lt;/strong&gt; and &lt;strong&gt;what&lt;/strong&gt; of governance, guardrails, policies, and standards have been covered in &lt;a href="/servant-stewardship-of-guardrails.html"&gt;Servant stewardship of guardrails&lt;/a&gt; and &lt;a href="/governance-manifestos-guardrails.html"&gt;Can we enact governance through engineering-friendly manifestos and guardrails&lt;/a&gt;. Instead, I want us to have a discussion as to why it is so difficult to encourage engineering to remain within guardrails, to collaborate to make improvements, and to steward the guardrails that intend to keep us all from danger.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why care about something I cannot find&lt;/h2&gt;
&lt;p&gt;Picture the typical software engineering team at their planning event. A quick visit by the business owner to describe the current state and vision. Product management presents needed features to deliver value and delight the end-users. Last, but not least, the schedule and priorities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Priority" src="../images/why-bother-with-governance-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After the buzz and dust settles, the software engineering team is left with what they perceive as another priority #1 and the sinking-feeling of more late nights and troubleshooting weekends.&lt;/p&gt;
&lt;p&gt;At the water cooler the team chatter starts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What is the recommended architecture for this solution?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Should we use .NET 6 or 8?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Go with Angular or Blazer?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Can we use self-service automation to get us started quicker within the guardrails?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Are there re-usable packages or bricks we can/must use?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;...&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the typical engineer cannot get these and other questions answered within minutes, they will proceed with what and how they know best ... which may not be aligned with your drive for consistency and standardization, guardrails, and organizational governance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Whether you have some, lots, or too much automation, guidance, and governance is not the question. &lt;strong&gt;Awareness&lt;/strong&gt; and &lt;strong&gt;Discoverability&lt;/strong&gt; thereof is the key!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Step 1 - Create a one-stop-shop, the eye of the spiderweb&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Spiderweb" src="../images/why-bother-with-governance-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Create one-stop-shop&lt;/h3&gt;
&lt;p&gt;The first step is to use products you have to create a one-stop-shop, where you can find pointers to all the information needed by a predefined persona. In our case we used SharePoint 365 (product) to create a one-stop portal that serves our software development engineers (persona).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Eye" src="../images/why-bother-with-governance-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It serves as an index to content related to collaboration centers, contacts, decisions, guardrails, presentations, processes, product catalog, reports, technology road maps, and tons of other materials, in a platter of formats.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Awareness" src="../images/why-bother-with-governance-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Raise awareness and gather candid feedback&lt;/h3&gt;
&lt;p&gt;Next challenge is to ensure everyone either tattoos the one-stop-shop URL on their forearm or remember it whenever they are looking for information. Something we are trying to achieve by continuously mentioning the site and the need for candid feedback - we can only continuously improve the one-stop-shop site if everyone tells us what is lacking and ideas how to improve the site.&lt;/p&gt;
&lt;h3&gt;Conversational discovery&lt;/h3&gt;
&lt;p&gt;Here is a snippet of our one-stop shop so far:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="AI" src="../images/why-bother-with-governance-6.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, even the best one-stop-shop is not a user-friendly or productive solution. What is missing is the opportunity to have a discussion with a person or a conversation with an intelligent bot to discover relevant information for the task or problem at hand, without having to spend hours looking for the right information.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Step 2 - next time&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="AI" src="../images/why-bother-with-governance-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the next post we will chat about Step 2, evaluating Open AI technology at the InnoFest to supplement the one-stop-shop to improve awareness and discoverability through conversation.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="quality"></category><category term="learning"></category></entry><entry><title>Shift from project to product thinking</title><link href="https://wsbctechnicalblog.github.io/shift-from-project-to-product-thinking.html" rel="alternate"></link><published>2023-04-14T00:00:00-07:00</published><updated>2023-04-14T00:00:00-07:00</updated><author><name>Andre Kaminski</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-14:/shift-from-project-to-product-thinking.html</id><summary type="html">&lt;p&gt;The problem is not with projects but with project-focused thinking&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The shift from Project to Product thinking – why is it important&lt;/h2&gt;
&lt;p&gt;You probably have heard of the ‘project to a product mind shift’ that became a new buzzword over the last few years. But do you really need it, and why?&lt;/p&gt;
&lt;p&gt;To address this, let me start with the name ‘DevOps.’ It consists of two words – Development and Operations.&lt;/p&gt;
&lt;p&gt;The first one – Development – is pretty straightforward. This is what we do when working on projects. But the second one is a bit more complicated. The Operations part starts already when the first MVP (Minimum Viable Product) is released, while the team continues working on the following MVP. However, when the project ends (all MVPs were delivered), the operations will continue.&lt;/p&gt;
&lt;p&gt;When I was starting my career (and this was a couple of decades ago), my mentor told me that every 6 to 8 years, software applications should be redeveloped. There was a good reason for that. It took about a year to develop and launch a product. Then the product went into sustainment and operations mode. Usually, this was done by a different team. This, in turn, when a production issue was identified’ led to complaints that the first team delivered a poor-quality application, and this team now needed to ‘save the world’ and fix the issues. At the same time, the sustainment team had to add new features requested mostly by sales and marketing teams. Often these features were done for a small market segment and sometimes didn’t make sense in the larger product picture. But sales deals and money talk. After three years, it was a ‘spaghetti’ code with a set of switches for various customers, and every new version had to be recompiled with a ‘#PRAGMA’ statement (remember that this was many years ago 😊). Around year 4, the team already spent more time fixing issues than adding more business features. Why was that? Because, at the time, we thought about a product as static. This is similar to buying a Toyota Corolla model, and besides normal maintenance, you try to add some additional fancy gauges and modify the engine. The result couldn’t be good, and most of the time, it wasn’t. So, after several years, you had to buy a new car with those fancy features.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Car" src="../images/shift-from-project-to-product-thinking-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;So what’s wrong with projects?&lt;/h2&gt;
&lt;p&gt;Actually, nothing. The problem is not with projects but with project-focused thinking.&lt;/p&gt;
&lt;p&gt;Projects are usually temporary, ranging from a few months to a few years. They have clearly defined start and end. We often assemble an ad-hoc delivery team. Each time this new team needs to go through all phases of team development (forming, storming, norming, and performing in Tuckman’s model). As soon as the project is finished, the team disperses. And so does the accommodated product knowledge.&lt;/p&gt;
&lt;p&gt;The projects are also linear in nature. Even in the agile world, the sequence of events is repetitive.&lt;/p&gt;
&lt;p&gt;They represent user experience when the project is initiated, and that vision becomes static.&lt;/p&gt;
&lt;p&gt;The projects are also part of the bigger product picture but are more isolated. The project team rarely considers how the product will grow in the future.&lt;/p&gt;
&lt;p&gt;The project is finished when the product is created. The projects are managed by how closely they adhere to the plan. Success is measured by triple constraints – time, money and scope, and usually, all three are fixed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;So why product thinking?&lt;/h2&gt;
&lt;p&gt;For one, the &lt;strong&gt;products are continuous&lt;/strong&gt;. The vision will change depending on market conditions and customer needs, and the product’s new features will be delivered by MVPs. This means that products have a way longer time span than the projects. And if built correctly, the application’s life span can be decades rather than years (when using, for example, microservices). This timeline is from the cradle to the grave, from MVP 1 to product decommissioning.&lt;/p&gt;
&lt;p&gt;We also need to consider the entire system, including the non-functional requirements like maintainability or stability, infrastructure, continuous monitoring, and the ability to add new or remove old features. And these are driven by market conditions or unpredictable customer needs.&lt;/p&gt;
&lt;p&gt;System thinking also encourages continuous innovation. In 2004, Greg Linden, a developer at Amazon, suggested to his boss to implement a feature – called “Customers Who Bought This Item Also Bought.”  His boss didn’t think that this was a good idea. Greg, however, took a risk and implemented the functionality anyway. This move led to a significant increase in sales. Amazon doesn’t publish results by how much, but we can guess that it was a major contributor to company revenues that jumped from $5.3 B in 2003 to $6.9 B a year later.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;product teams are long-standing teams&lt;/strong&gt;. They are the same team that started building the application, and they continue to add new functionality while supporting it. Since the team is already well established, they are usually at the ‘performing’ stage of the team lifecycle, making them more efficient at delivering new features. The deep expertise that they developed over time allows them to address problems and issues relatively quickly.&lt;/p&gt;
&lt;p&gt;The success metrics of product teams are – the frequency of business value delivery and its impact on the customers.&lt;/p&gt;
&lt;p&gt;But there are more benefits when shifting to product thinking. It allows the teams to build less and validate more often, correcting the course if needed. They are effective in quick adjustments to align with market trends and ever-changing customer needs. It allows the business and product managers to make measurable investments while working together with the DevOps teams. Focus in such team shifts from the amount of work done to the impact. Lastly, in many organizations, IT is perceived as a cost center. With the shift to product thinking, IT becomes a value center.&lt;/p&gt;
&lt;p&gt;I like this quote from Anthony Crain, CPrime, that summarizes it all:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a company moves from projects to products, they are changing the focus of every person in the organization from a short-term "let's get this project done and move on to the next" perspective to a long-term ownership perspective&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category></entry><entry><title>What keeps us awake at night - Technical Debt</title><link href="https://wsbctechnicalblog.github.io/what-keeps-us-awake-at-night-patching.html" rel="alternate"></link><published>2023-04-12T00:00:00-07:00</published><updated>2023-04-12T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-12:/what-keeps-us-awake-at-night-patching.html</id><summary type="html">&lt;p&gt;Empower engineering without compromising security&lt;/p&gt;</summary><content type="html">&lt;p&gt;The obvious question that comes mind is: "&lt;strong&gt;What is technical debt?&lt;/strong&gt;" I asked &lt;a href="https://chat.openai.com/chat"&gt;ChatGPT&lt;/a&gt; and got the following response: "&lt;em&gt;Technical debt is a term used in software development to describe the additional work required to maintain and update a codebase developed using suboptimal practices. It can occur due to factors such as tight deadlines or the use of quick-and-dirty coding practices that prioritize speed over code quality and maintainability. Technical debt can result in higher long-term costs and slower development, limiting the ability of the software to adapt to changing business needs. Therefore, it is important to manage and minimize technical debt to reduce risks and ensure the sustainability of software development projects.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;In a continued conversation another important nugget emerged from &lt;a href="https://chat.openai.com/chat"&gt;ChatGPT&lt;/a&gt;: "&lt;em&gt;Technical debt is typically considered to be self-imposed.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;Personally, I agree with all of the above, but have a very specific visual that pops up in my mind whenever I am part of a discussion where technical debt raises its ugly head:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Technical Debt" src="../images/what-keeps-us-awake-at-night-patching-0.png"&gt;
Source &lt;a href="https://www.pastemagazine.com/movies/jurassic-park/the-12-best-quotes-from-jurassic-park"&gt;Jurassic Park&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am currently having sleepless nights with technical debt in two areas.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Toxic server debt&lt;/h1&gt;
&lt;p&gt;The first is the iron, the servers, that host the outcome of our software development. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Cloud Accountability" src="../images/what-keeps-us-awake-at-night-patching-1.png"&gt;
Image Source: &lt;a href="https://learn.microsoft.com/en-us/azure/security/fundamentals/shared-responsibility"&gt;Shared responsibility in the cloud&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The image, I loaned from a Microsoft article, clearly shows that we are accountable for our servers and that we take responsibility to keep them up-to-date and secure. As we move to platform-as-a-service (PaaS) or software-as-a-service (SaaS) we delegate the accountability to the hosting vendor.&lt;/p&gt;
&lt;p&gt;This area will be covered in a future post by one of our operations-focused engineers, but it is worth mentioning my personal checklist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;SaaS&lt;/strong&gt; where you can. Someone else is accountable for solution and hosting infrastructure.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;PaaS&lt;/strong&gt; for custom built solutions. Someone else is accountable for hosting infrastructure.&lt;/li&gt;
&lt;li&gt;Perform continuous patching and upgrading of frameworks in &lt;strong&gt;IaaS&lt;/strong&gt; and &lt;strong&gt;on-prem&lt;/strong&gt;. You are responsible!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now for the second area.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Turbulent application WASTE&lt;/h1&gt;
&lt;p&gt;We intentionally and unintentionally gather WASTE, vulnerabilities, and technical debt in with our software development solutions when using 3rd-party frameworks, extensions, or services. We have to adapt to a dynamic and continuously evolving world. &lt;/p&gt;
&lt;p&gt;For example, when using the .NET framework, we need a strategy to understand which versions are supported, which versions we recommend as an organization, and how we upgrade hundred to thousands of solutions.&lt;/p&gt;
&lt;p&gt;The strategy could guide us as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support latest and latest - 1 versions of .NET.&lt;/li&gt;
&lt;li&gt;Upgrade the hosting servers you own, accordingly.&lt;/li&gt;
&lt;li&gt;Upgrade the solutions you own, accordingly.&lt;/li&gt;
&lt;li&gt;Do it as soon as possible. If you make a conscious decision to defer the upgrade, you have just made your pile of technical debt grow.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FOCUS ON TECHNICAL DEBT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too &lt;strong&gt;much&lt;/strong&gt; - unable to deliver continuous new value to your customers.&lt;/li&gt;
&lt;li&gt;Too &lt;strong&gt;little&lt;/strong&gt; - unable to deliver new value to your customers when your solutions drown in WASTE. In addition, you will create STRESS and eventually BURNOUT your engineers during ad-hoc remediation spikes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Option 1 - Reactive housekeeping&lt;/h2&gt;
&lt;p&gt;I do not support the reactive &lt;strong&gt;spikes&lt;/strong&gt; of remediating vulnerabilities and reducing technical debt remediation. It makes no sense!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Reactive" src="../images/what-keeps-us-awake-at-night-patching-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that the deliver of value is drastically reduced over three iterations. NOT a customer friendly experience!&lt;/p&gt;
&lt;h2&gt;Option 2 - Rotate housekeeping accountability&lt;/h2&gt;
&lt;p&gt;If you have Agile Teams within an ART Flow, you could rotate the housekeeping baton and associated accountability between the teams. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="TD Rotation" src="../images/what-keeps-us-awake-at-night-patching-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, each team in the Agile Flow will focus on housekeeping for an iteration, followed by one or more iterations of delivering business features and value. During an innovation and planning iteration, also known as a +1, all teams would park new features and housekeeping, and focus on innovation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;
Sustainment, maintenance, and housekeeping is something that should be part of every engineer's responsibility, similar to built-in quality. Avoid creating sustainment-only teams - most engineers will otherwise avoid it like the plague.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accountability and responsibility of housekeeping is &lt;strong&gt;shared&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Overall, the ART Flow delivers a &lt;strong&gt;continuous flow&lt;/strong&gt; of business and innovation value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus of housekeeping in an iteration is focused only on the Agile team's technical debt.&lt;/li&gt;
&lt;li&gt;Other teams may skip housekeeping for 2 or more consecutive iterations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Option 3 - Continuous housekeeping (my personal recommendation)&lt;/h2&gt;
&lt;p&gt;Alternatively, every Agile team in every Agile Flow can commit to one, two, or more items from their technical debt backlog, or commit to a predefined percentage of capacity dedicated to housekeeping activities, in parallel to delivering new features and value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="TD Slicing" src="../images/what-keeps-us-awake-at-night-patching-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown above, the &lt;strong&gt;tax&lt;/strong&gt; on each team is minimal and there are no costly and disruptive remediation spikes. As shown below there is a continuous flow of innovation and business value - Agile Team and customer FRIENDLY experience!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Value flow" src="../images/what-keeps-us-awake-at-night-patching-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continuous flow of value.&lt;/li&gt;
&lt;li&gt;Continuous reduction of WASTE.&lt;/li&gt;
&lt;li&gt;Ability to plan and budget for the housekeeping.&lt;/li&gt;
&lt;li&gt;Cannot think of a CON q;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Continuous vacuum cleaning!&lt;/h2&gt;
&lt;p&gt;I compare the continuous housekeeping to vacuuming our float home. If everyone in my family owns a chore and I do vacuuming on a regular weekly cadence, I typically spend 45-60 minutes collecting dust. If I ignore my responsibilities, I have to spend hours cleaning, often at the most inopportune time.&lt;/p&gt;
&lt;p&gt;I favour the former, because I can plan it and it only briefly distracts me from more interesting tasks, such as watching the Formula One grand-prix, or writing these posts.&lt;/p&gt;
&lt;p&gt;How are you dealing with technical debt? What are your learnings? Your pain points?&lt;/p&gt;</content><category term="Posts"></category><category term="azure"></category><category term="azure-devops"></category><category term="eliminate-waste"></category></entry><entry><title>Azure Boards Tips - Stop messing with our backlog!</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips-stop-messing-with-our-backlog.html" rel="alternate"></link><published>2023-04-02T00:00:00-07:00</published><updated>2023-04-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-04-02:/azure-boards-tips-stop-messing-with-our-backlog.html</id><summary type="html">&lt;p&gt;A few useful "did you know" tips when using Azure Boards.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We explored the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; in &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt; and &lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;. However, I failed to emphasize one important rule when you are working with my team, as well as the teams stewarded by my colleague, Agent #9 from our &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; adventure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Feel free to visit and peruse &lt;code&gt;our&lt;/code&gt; backlog, however, &lt;strong&gt;do not&lt;/strong&gt; make any changes on &lt;code&gt;our&lt;/code&gt; backlog!**&lt;/p&gt;
&lt;p&gt;&lt;img alt="look" src="../images/azure-boards-tips-stop-messing-with-our-backlog-0.png"&gt; 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;The board is a visualization&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="visual" src="../images/azure-boards-tips-stop-messing-with-our-backlog-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;BACKLOG&lt;/strong&gt;, as shown on the left, is an ordered and prioritized flat or hierarchical list of deliverables, features, technical debt, and other bits and pieces that should be implemented to deliver value to delighted end-users. The &lt;strong&gt;BOARD&lt;/strong&gt; is a &lt;code&gt;visual&lt;/code&gt; representation of the same data, commonly categorized in columns and swim lanes.&lt;/p&gt;
&lt;p&gt;Note a few important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ordered&lt;/strong&gt; and &lt;strong&gt;prioritized&lt;/strong&gt; list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;visual&lt;/strong&gt; representation&lt;/li&gt;
&lt;li&gt;items at the &lt;strong&gt;TOP&lt;/strong&gt; have the highest priority&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;The correct, but not default way&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="visual" src="../images/azure-boards-tips-stop-messing-with-our-backlog-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you set the &lt;code&gt;Card reordering&lt;/code&gt; feature to &lt;code&gt;Work items follow the backlog order when changing columns&lt;/code&gt; &lt;strong&gt;magic&lt;/strong&gt; happens when you drag a card from one column to the other on the board.&lt;/p&gt;
&lt;p&gt;In our example above, we are dragging the &lt;strong&gt;E2&lt;/strong&gt; card from the &lt;strong&gt;FUNNEL&lt;/strong&gt; to the &lt;strong&gt;ACTIVE&lt;/strong&gt; column and the center &lt;strong&gt;SWIMLANE&lt;/strong&gt;. As you drop the card &lt;strong&gt;anywhere&lt;/strong&gt; in the column, the board positions it correctly using the groomed and ordered backlog. As shown, the card will be placed above &lt;strong&gt;D2&lt;/strong&gt;, because on the backlog &lt;strong&gt;E2&lt;/strong&gt; is positioned before &lt;strong&gt;D2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After dragging the card, both Agent #9 and Agent #13 are &lt;code&gt;happy&lt;/code&gt; as their pristine, ordered, and prioritized single source of truth backlog remains unchanged.&lt;/p&gt;
&lt;p&gt;Unfortunately, this is not the default mode with &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The default, but not correct way&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="visual" src="../images/azure-boards-tips-stop-messing-with-our-backlog-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The default &lt;code&gt;Card reordering&lt;/code&gt; feature is set to &lt;code&gt;Work items reorder when changing columns and the backlog reflects the new order&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our example above, we are dragging the &lt;strong&gt;E2&lt;/strong&gt; card from the &lt;strong&gt;FUNNEL&lt;/strong&gt; to the &lt;strong&gt;ACTIVE&lt;/strong&gt; column and the center &lt;strong&gt;SWIMLANE&lt;/strong&gt;. As we drop the card after the &lt;strong&gt;&lt;em&gt;-&lt;/em&gt;&lt;/strong&gt; card, the board positions it where we drop it.&lt;/p&gt;
&lt;p&gt;After dragging the card, both Agent #9 and Agent #13 are &lt;code&gt;unhappy&lt;/code&gt; as their pristine, ordered, and prioritized backlog remains has been changed. While the tragedy is not evident with this simple example, consider hundreds of cards being dragged and dropped by a team per day. The backlog turns into a single pile of mess very quickly, making the board the single source of truth. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Upset with the current default?&lt;/h1&gt;
&lt;p&gt;It is obviously a personal / team preference as to whether the backlog or the board are their single source of truth. For me, the &lt;strong&gt;backlog&lt;/strong&gt; which I groom regularly like an immaculate Rose Garden, is my single source of truth. The &lt;strong&gt;Board&lt;/strong&gt; is a &lt;code&gt;visualization&lt;/code&gt; of the same data using the backlog as source.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Am I wrong to be upset with the default option selected by Microsoft?&lt;/li&gt;
&lt;li&gt;What are your thoughts?&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Fail, Learn, Reset, Transform!</title><link href="https://wsbctechnicalblog.github.io/fail-learn-reset-transform.html" rel="alternate"></link><published>2023-03-31T00:00:00-07:00</published><updated>2023-03-31T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-31:/fail-learn-reset-transform.html</id><summary type="html">&lt;p&gt;“Success is not final, failure is not fatal, it is the courage to continue that counts.” – Winston Churchill&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="/fail-learn-reset.html"&gt;Fail, Learn, Reset&lt;/a&gt; I explored how I encourage everyone in my team and our group to accept failure as an opportunity to learn and how we are trying hard to eradicate the &lt;strong&gt;fear of failure&lt;/strong&gt; that often accompanies the &lt;strong&gt;imposter syndrome&lt;/strong&gt;. In conversations, I realized that the &lt;a href="/fail-learn-reset.html"&gt;Fail, Learn, Reset&lt;/a&gt; post was very engineering focused, but that the concept of learning from failures applies to everything.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FAILURE&lt;/strong&gt; comes in many shapes and sizes. Here are a few of many definitions from the Merriam-Webster Dictionary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lack of success&lt;/li&gt;
&lt;li&gt;a falling short&lt;/li&gt;
&lt;li&gt;a fracturing or giving way under stress
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Personally, I prefer to think of &lt;strong&gt;FAILURE&lt;/strong&gt; as an "unexpected outcome" of doing, trying, evolving, or experimenting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Unexpected Result" src="../images/fail-learn-reset-transform-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which brings me to "transform" in today's blog post title.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;It is about how (I / we) can transform&lt;/h1&gt;
&lt;p&gt;When we look at the continuous circle of doing, trying, evolving, experimenting, reflecting, learning, and adjusting, it is important to realize that the LEARN + ADJUST steps are crucial. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="I/We" src="../images/fail-learn-reset-transform-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to reflect and transform continuously, otherwise we enter the world of insanity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"The definition of insanity is doing the same thing over and over and expecting different results." - Albert Einstein
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Two anti-patterns that drive me crazy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Paralysis&lt;/strong&gt; - If you have ever had the displeasure of working with a team that turns every retrospective into a complaining, venting, and blame saga, you know what I mean. Instead of reflecting, learning, and deciding how we / I can change (&lt;strong&gt;transform&lt;/strong&gt;) to make the next iteration better, these paralyzed teams drown in misery and hope for change that never comes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stagnation&lt;/strong&gt; - We have done it this way for decades and it has always worked for us. Sure, the postal office worker stamping envelopes by hand is doing a great job, but not in an efficient way. As a result the worker will always be &lt;strong&gt;too busy&lt;/strong&gt; to embrace new ways of automating and improving the stamping; giving relief and spare time to &lt;strong&gt;experiment&lt;/strong&gt; and &lt;strong&gt;innovate&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“Ask not what your country can do for you – ask what you can do for your country." - John F. Kennedy
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next time you get to the learn and adjust stages, take a step back, &lt;a href="https://examinedexistence.com/the-navy-seal-breathing-technique-to-calm-down/"&gt;breathe&lt;/a&gt;, and then ask yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What have we / I learned?&lt;/li&gt;
&lt;li&gt;What can we / I improve before we re-try?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;OMG, not another reorganization!?!&lt;/h1&gt;
&lt;p&gt;Another great example is when we as a group announce that we are going to reorganize again. The &lt;code&gt;paralyzed&lt;/code&gt; teams will once again spiral into a dark place, while teams with a healthy Agile and DevOps mindset will embrace the opportunity to change.&lt;/p&gt;
&lt;p&gt;Yes, we &lt;code&gt;tried&lt;/code&gt; and &lt;code&gt;experimented&lt;/code&gt; with a new structure for a year. We realized that we have not managed to evolve to where we wanted to be. We &lt;code&gt;learn&lt;/code&gt; from the experience, we &lt;code&gt;adjust&lt;/code&gt; (reorganize), and we embrace new ways.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;See change as an &lt;code&gt;opportunity&lt;/code&gt;, not as a threat!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;What makes humans different? Our ability to adapt to change; the more we do it, the more comfortable we are with this disruption as an opportunity.&lt;/em&gt;" - Martin Lacey
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Embrace change!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Communication Guidance Sideways (Part 2)</title><link href="https://wsbctechnicalblog.github.io/communication-guidance-sideways.html" rel="alternate"></link><published>2023-03-17T00:00:00-07:00</published><updated>2023-03-17T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-17:/communication-guidance-sideways.html</id><summary type="html">&lt;p&gt;"Not to be missed after you depart." - L.David Marquet&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from &lt;a href="/communication-guidance-upwards"&gt;Communication Guidance Upwards&lt;/a&gt;, where we discussed how to communicate upwards to executive domain. In this post I will share my thoughts on communicating &lt;code&gt;sideways&lt;/code&gt;, with my peer managers, and &lt;code&gt;rearwards&lt;/code&gt;, with my team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="up-side-rear" src="../images/communication-guidance-sideways-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The proposed value and outcome format, as proposed in the upwards communication can be re-used for sideways and rearwards communication.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="nv"&gt;want&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
        &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="nv"&gt;recommend&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;HOW&lt;/span&gt;,&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
        &lt;span class="nv"&gt;There&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;several&lt;/span&gt; &lt;span class="nv"&gt;benefits&lt;/span&gt;:
            &lt;span class="nv"&gt;First&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CORE&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Also&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Finally&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
    &lt;span class="nv"&gt;Imagine&lt;/span&gt;, &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before we peek into sideways communication, I must highlight an important epiphany I had. In the illustration, as above, you will notice my team in the center, with me (L4) communicating upwards, as discussed in &lt;a href="/communication-guidance-upwards"&gt;Communication Guidance Upwards&lt;/a&gt;, sideways, and rearwards. The epiphany is that what we are about to discuss as sideways and rearwards communication exists twice - #1 is my team and I, #2 are my peer managers and my leader L1. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Communicating sideways with peer managers&lt;/h1&gt;
&lt;p&gt;As the L1, L2, L3, and L4 team we must collaborate, actively listen, co-operate, partner to work to meet common and organizational goals, and most importantly &lt;strong&gt;TRUST&lt;/strong&gt; each other. For example, if I have a problem or am struggling with an unknown or challenging process, I need to be able to rely on my peers, reach out for help, and know that we will confront any challenge and follow-through until we have a solution.  The same can be said for my team of engineers, who themselves are a cluster of collaborative peers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="up-side-rear" src="../images/communication-guidance-sideways-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To improve the sideways communication and collaboration, I recommend that you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be respectful&lt;/strong&gt;, caring, and never talk down to them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice Active listening&lt;/strong&gt;, to understand your peers as humanoids and their unique needs. Silence is an effective ally!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use clear and concise language&lt;/strong&gt;, no TLAs (two/three lettered acronyms), technical jargon, and as my Geography teacher always said no "waffling." Keep it simple, short, concise, and clear. Do not forget to follow up to ensure that your peers are clear on expectations and next steps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be pro-active&lt;/strong&gt;, create a communication matrix and regularly reach out to your peers to build a strong and trusting relationship.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on solutions&lt;/strong&gt; over placing blame or critique. As I always tell my team - "we will burn up or succeed as a team."&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Some leadership anti-patterns you may recognize, for future discussion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Knights in shining armour.&lt;/li&gt;
&lt;li&gt;Blasphemous dictators.&lt;/li&gt;
&lt;li&gt;Zero trust, omnipresent, micro-managers.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Communicating rearwards with my team&lt;/h1&gt;
&lt;p&gt;For me, the most important part on the illustration is my team and I. It is my responsibility to lead them, protect them, and empower them. As quoted by L. David Marquet in &lt;a href="https://davidmarquet.com/turn-the-ship-around-book/"&gt;Turn the Ship Around&lt;/a&gt;, we "give our team control over WHAT they work on and HOW they work", creating a team of leaders and allowing you "not to be missed after you depart."&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="up-side-rear" src="../images/communication-guidance-sideways-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To improve rearward communication, I recommend that you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Establish transparency&lt;/strong&gt; empowering everyone to be informed, pro-active and supportive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Establish open and safe communication&lt;/strong&gt; encouraging everyone to share their ideas, concerns, thoughts, and even feel safe to &lt;strong&gt;vent&lt;/strong&gt; as needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be respectful&lt;/strong&gt;, as discussed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice Active listening&lt;/strong&gt;, as discussed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use clear and concise language&lt;/strong&gt;, as discussed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Provide regular and candid feedback&lt;/strong&gt; on goals, performance, and opportunities to continuously improve.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be approachable&lt;/strong&gt; and available to your team, which brings me to a few more leadership anti-patterns you may recognize:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;"Always behind closed doors office hermit."&lt;/li&gt;
&lt;li&gt;"Secretive and vanishing Houdini."&lt;/li&gt;
&lt;li&gt;"Command and control dictator."
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lastly, why do I refer to rearward communication. Well, something I learnt in my military days was to always lead by example and in the front, which means my team is not only behind me, but also &lt;strong&gt;has my back&lt;/strong&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Remember, less is more! Know your audience and make every word count!&lt;/p&gt;</content><category term="misc"></category><category term="learning"></category></entry><entry><title>Engineering Practice Layering</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-layering.html" rel="alternate"></link><published>2023-03-15T00:00:00-07:00</published><updated>2023-03-15T00:00:00-07:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-15:/engineering-practice-layering.html</id><summary type="html">&lt;p&gt;Application Layering - Separation of Concerns Architecture Principle&lt;/p&gt;</summary><content type="html">&lt;h1&gt;What is layering?&lt;/h1&gt;
&lt;p&gt;Layering is a common construct for identifying discreet areas of interest within an undertaking, so that work can be done in a focused way in each of 
those areas as well as to highlight the interconnections between each layer.  Typically, each layer has its own specialists that work on the specific
technology involved in any given layer and collaborate with other specialists where the layers interface.&lt;/p&gt;
&lt;p&gt;This is most easily understood when you look at the physical world - lets take construction for example.  To create a building, first an architectural drawing is created that identifies each aspect of construction as a layered endeavor.  Once the design is signed-off, a hole is dug, a frame and rebar are placed within and the concrete is poured into the frame - this is the foundation layer.  Next - layer 2 - the wall frames are built for the first floor, the ceiling, the 2nd floor foundation and its' walls; and so on up one floor in the 
building at a time.  &lt;/p&gt;
&lt;p&gt;After each floor has its wall frames in place, layer 3 begins with electrical and plumbing specialists routing their work through the wall frames and up through each level
of the building.  The 4th layer of work involves completing the walls with drywall and plaster, and installing the windows.  This continues to the final, finishing layer where the 
fixtures and appliances are installed, switches installed and connected, paint applied, and carpet or hardwood flooring is installed.&lt;/p&gt;
&lt;p&gt;This is no different in software - except the layers are logical, containing only code that address a particular area of interest.  But because it is code, each layer can be ommitted or subverted by the unwary.  Let's examine this more closely next.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why is Layering Important?&lt;/h1&gt;
&lt;p&gt;In Software, &lt;em&gt;Layering&lt;/em&gt; is a fundamental design principle enabling us to create lasting code of highest quality - and maintainability &amp;amp; testability.  When we layer our software, we
are acknowledging the different focal points that we need to be concerned with - and possibly employ different specialists to work on each layer independently. 
This creates a technology stack and loosely coupled interfaces between the layers that promote consistency at the communication channels between layers (re: public interfaces), and independence of each layer itself.  Each layer
can also be tested and verified independently when we employ additional architectural principles such as Dependency Inversion and Encapsulation.&lt;/p&gt;
&lt;p&gt;Like the construction example above, this layering represents technology and purpose boundaries, that, when respected, create a modular and consistent design pattern enabling components to be reused and 
more easily understood.  Indeed, this understanding leads to abstraction of fundamental behaviours that can organized the code into hierarchies and promote non-duplication of function.&lt;/p&gt;
&lt;p&gt;When we layer, we are more prepared for evolving the software as independent pieces in an Agile workflow and able to embrace CI/CD and microservice architecture more readily.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Separation of Concerns Principle&lt;/h1&gt;
&lt;p&gt;Layering is the result of following the &lt;em&gt;Separation of Concerns&lt;/em&gt; design principle, which states that software should be separated based on the kind
of work it performs.  When viewed from this lens, we can clearly see what should be in the User Interface collection of code - the code that deals
with artifacts used to collect or format data for display, and what code performs and enforces business rules and procedures, versus the code used to store and
retrieve data from a database or file system. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What are the Layers in Software Architecture&lt;/h1&gt;
&lt;p&gt;Architecturally, software applications should be logically constructed following the separation of concerns principle which identifies the application layers.  By separating core business 
rules and validation logic from user-interface and back-end (data service) infrastructure.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt; - The layer the end-user interacts with, a page or form or visual element such as tables, buttons, charts and graphs, input fields and layout.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business Logic&lt;/strong&gt; - The layer containing the business rules and logical processes, workflows, and validation rules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Access&lt;/strong&gt; - The layer is concerned with the storage and retrieval of data and other artifacts used by the application to perform its function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these layers is focused on a separate logical area of concern, uses different tools and has a different purpose.  Each of
these logical layers should be created in separate physical projects within the application solution, which helps enforce the separation of concerns principle, improves modularity and testability.  &lt;/p&gt;
&lt;p&gt;Ideally, The Business Rules and Logic should not depend on any other projects in the application.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Different Layering Scenarios&lt;/h1&gt;
&lt;p&gt;As mentioned above, there are logically 3 layers which can be placed into 3 or more physical Tiers enabled by following this software architecture design pattern.  These layers can then be 
organized into four distinct scenarios, shown here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Architecture Scenarios" src="../images/engineering-practice-layering-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image sourced from&lt;/em&gt; &lt;a href="https://nileshviradiya.blogspot.com/2014/01/what-is-meant-by-n-tier.html"&gt;&lt;em&gt;Programming Stuff: What is meant by “N Tier”?&lt;/em&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Classic&lt;/strong&gt; - All logical layers are combined into one, making direct access to the underlaying data source from within the single code layer.  This was a common implementation years ago and can still be found, but easily leads to &lt;em&gt;Boundary Bleed&lt;/em&gt; and messy spaghetti code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Two-Tier&lt;/strong&gt; - In this scenario, the data access layer is distinctly separated from all other code, which resides in the main project for the application.  This represents an understanding that data access and the object-relation-mapping (ORM) is a distinct aspect of a software application and requires specialized knowledge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Three-Tier&lt;/strong&gt; - This is a further refinement and maturation of the software architecture, uniquely placing the business rules (requirements) and logic (processes) within a distinct layer free from presentation and data access specialized coding needs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;N-Tier&lt;/strong&gt; - This is the holy-grail, where workflow is separated from the Presentation layer, and accesses the business services layer which uses the data services layer for storage and retrieval; all layers can be distributed across CPU and machine boundaries to achieve scale and reach.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;What is Boundary Bleed&lt;/h1&gt;
&lt;p&gt;Boundary Bleed occurs when you violate the separate of concerns principle and allow non-built-in types to be exposed through multiple layers.  For example, if you
create a class in your data service layer, and return it to your business service layer, and that in turn returns that same class to the presentation layer; you've
passed a class through 2 layers and inadvertently coupled the presentation layer with the data service layer.  This makes your code more brittle and harder to test, where changes
can have unexpected side-effects.  This is &lt;em&gt;Boundary Bleed&lt;/em&gt;, and it should be avoided and considered as an anti-pattern.&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Automation Bad Day</title><link href="https://wsbctechnicalblog.github.io/automation-bad-day.html" rel="alternate"></link><published>2023-03-06T00:00:00-08:00</published><updated>2023-03-06T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-06:/automation-bad-day.html</id><summary type="html">&lt;p&gt;Clearly yesterday was a bad day.&lt;/p&gt;</summary><content type="html">&lt;p&gt;"&lt;em&gt;Clearly yesterday was a bad day&lt;/em&gt;" is a quote by &lt;a href="https://www.linkedin.com/in/brharry/"&gt;Brian Harry&lt;/a&gt; in his &lt;a href="https://devblogs.microsoft.com/bharry/bad-day/"&gt;Bad Day&lt;/a&gt; blog post. I vividly remember that day as I had the honour of working for Brian at the time and learning a ton from him about the value of transparency, not getting discouraged by hindsight, and always being laser focused on our end-users. Our day was nowhere as bad as Brian's, but worth sharing. &lt;/p&gt;
&lt;p&gt;In an operational environment with 2500 classic Azure Pipelines and more than a dozen engineers manually updating the pre- and post-approval gates we began to struggle with snowflakes, guardrail breaches, and failed security audits. We configured the pre-and post-approval gates in CSV files and stored them in version control – our config-as-code (&lt;strong&gt;c-a-c&lt;/strong&gt;) era was born. The CSV files and associated automation using the Azure DevOps &lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.1"&gt;REST API&lt;/a&gt;, allows us to consistently re-apply the last known good configuration for thousands of classic Azure Pipelines in minutes on a weekly basis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Outcome&lt;/strong&gt;: Consistency, standardization, security, and time-savings!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us have a peak at one of our demo &lt;code&gt;c-a-c&lt;/code&gt; files to understand the automation process.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Our configuration-as-code (c-a-c)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="c-a-c" src="../images/azure-devops-automation-bad-day-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the top is a typical Azure Pipeline, delivering artifacts to a number of stage environments, with four humanoid gates.&lt;/p&gt;
&lt;p&gt;At the bottom is a demo &lt;code&gt;c-a-c&lt;/code&gt; CSV file, with one row per stage. Each row defines the pre approver(s), the post-approver(s), and the approval method. When our &lt;code&gt;c-a-c&lt;/code&gt; automation runs, it restores the Azure Pipeline pre- and post-approvals to the last known and desired configuration if the Set value is &lt;code&gt;Yes&lt;/code&gt;. In other words, if you fiddle with the approvals manually, the automation will overwrite your changes when it runs.&lt;/p&gt;
&lt;p&gt;Although the actual &lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.1"&gt;REST API&lt;/a&gt; logic is not trivial, our &lt;code&gt;c-a-c&lt;/code&gt; concept is.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Meltdown timeline&lt;/h1&gt;
&lt;p&gt;Our bad day actually started on March 2nd at high-noon, when my colleague Daniel ran the latest &lt;code&gt;c-a-c&lt;/code&gt; file I fine-tuned for hours. Fortunately, I opted against a big-bang &lt;code&gt;c-a-c&lt;/code&gt; reset and only had about 15% of the 2,500 Azure Pipelines and their stages configured with &lt;code&gt;Set=Yes&lt;/code&gt;. The automation ran like a dream.&lt;/p&gt;
&lt;p&gt;At around 15:00 our delivery teams reported that their pipelines were failing, unable to connect to an agent. At first, we all suspected our automation, because the &lt;a href="https://status.dev.azure.com/"&gt;Azure DevOps Status&lt;/a&gt; was showing an &lt;code&gt;Everything is looking good&lt;/code&gt; status.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="timeline" src="../images/azure-devops-automation-bad-day-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eventually after a barrage of tweets, Teams chats, and raising Microsoft Support tickets the &lt;a href="https://status.dev.azure.com/"&gt;Azure DevOps Status&lt;/a&gt; switched to an &lt;code&gt;unhealthy&lt;/code&gt; status due to the &lt;a href="https://status.dev.azure.com/_event/371776903"&gt;Pipeline error: Failure in sending the provision message&lt;/a&gt; incident. Little did we know that this incident actually reduced the blast radius of our bad day, as most teams opted for another day by the time the Azure Agents were back to a healthy state. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;2AM CALL @ high noon&lt;/h1&gt;
&lt;p&gt;Just before high-noon we were getting pulled into &lt;strong&gt;all hands-on deck&lt;/strong&gt;, also known as the &lt;strong&gt;infamous 2AM-call&lt;/strong&gt; collaboration sessions. One of our Azure Pipelines had deployed all the way to production, skipping our &lt;strong&gt;Staging (ST)&lt;/strong&gt; and &lt;strong&gt;Production (PR)&lt;/strong&gt; pre-approval gates. Bypassing change control is a severe issue. Luckily our operational support engineers delivered their usual exceptional operational support and reverted the incorrect production deployment within minutes to minimize negative end-user impact. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="2AM Call" src="../images/azure-devops-automation-bad-day-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In parallel we started the brainstorming and root-cause analysis of our Azure Pipelines. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="c-a-c meltdown" src="../images/azure-devops-automation-bad-day-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We determined that the automation run, from the previous day, had purged, not set, the pre-approver(s) for all processed pipelines. In other words, the only gate between production and the delivery teams was the Security Review &lt;strong&gt;post&lt;/strong&gt;-approver.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Core Issue&lt;/h1&gt;
&lt;p&gt;As all software glitches, the root cause was a trivial typo. Note the missing &lt;code&gt;s&lt;/code&gt; in the &lt;strong&gt;Pre Approver&lt;/strong&gt; column header.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="core issue" src="../images/azure-devops-automation-bad-day-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a result, the automation did exactly what my configuration file instructed it to do.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System Test (SY), Staging (SR), and Production (PR) Stage were updated as &lt;code&gt;Set=Yes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pre-approvers were purged as the value for &lt;code&gt;Pre-Approvers&lt;/code&gt; was &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another quote from Brian's post comes to mind here: "&lt;em&gt;The hard thing about this is that anything can go wrong and it’s only obvious in hindsight what you should have been protecting against&lt;/em&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Remediate &amp;amp; Learn&lt;/h1&gt;
&lt;p&gt;Our focus was, as expected, to restore the health of our Azure Pipelines. Fortunately, only a small subset of Azure Pipelines was affected, thanks to Microsoft outage and our close collaboration with our DevSecOps team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pipelines not triggered by a change to the &lt;code&gt;release&lt;/code&gt; branch, were stopped by our artifact filters.&lt;/li&gt;
&lt;li&gt;Pipelines that made it through to the &lt;strong&gt;Security Review&lt;/strong&gt; stage, where stopped cold by our security engineers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In parallel we fixed the &lt;code&gt;c-a-c&lt;/code&gt; header and triggered the automation to undo the damage. We also took the opportunity to add pre-automation validation to reduce the likelihood of a recurrence.&lt;/p&gt;
&lt;p&gt;And, most importantly, we shared the status of the incident, analysis, root cause, and remediation transparently. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A huge &lt;strong&gt;THANK YOU&lt;/strong&gt; to our vigilant delivery team, security engineers, operations engineers, and my team for keeping cool and focused throughout the turbulent Friday.&lt;/p&gt;
&lt;p&gt;Only one pipeline, the one that triggered the incident, made it through to production. It could have been a lot worse!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category></entry><entry><title>Communication Guidance Upwards</title><link href="https://wsbctechnicalblog.github.io/communication-guidance-upwards.html" rel="alternate"></link><published>2023-03-03T00:00:00-08:00</published><updated>2023-03-03T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-03:/communication-guidance-upwards.html</id><summary type="html">&lt;p&gt;Before you ask for anything, get clarity on the five WHYs!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am working on my communication and collaboration skills. Although these posts will not be of a technical nature, they will benefit us all. I learn by doing and sharing and I love getting candid feedback from you, as well as from my manager and mentor.&lt;/p&gt;
&lt;p&gt;In recent courses I learnt that the impact of communication is made up of 7% words, 38% tone, and 55% cues. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="communication" src="../images/communication-guidance-upwards-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is for interactive communication! For written communication we lose the cues, making the words and tone even more important.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Communicating upwards to executive domain&lt;/h1&gt;
&lt;p&gt;Our leaders are typically driven by &lt;strong&gt;goals&lt;/strong&gt;, focused on the &lt;strong&gt;bottom line&lt;/strong&gt;, and push for progress at a &lt;strong&gt;rapid&lt;/strong&gt; pace. If our communication and proposals are too complex, they quickly become overburdened with the complexities, and are more likely to become dismissive.&lt;/p&gt;
&lt;p&gt;We must paint a picture of success, clearly describe the &lt;strong&gt;WHY&lt;/strong&gt;, and &lt;strong&gt;HOW&lt;/strong&gt; we will affect the goals and bottom line. Communicate your idea/plan/request directly and objectively - no fillers, no waffling, no noise, and no redundant nouns.&lt;/p&gt;
&lt;p&gt;If you are a &lt;strong&gt;dreamer&lt;/strong&gt; like I am, you must balance your &lt;strong&gt;dream&lt;/strong&gt; with &lt;strong&gt;reality&lt;/strong&gt; or be viewed as overly optimistic and disruptive. &lt;/p&gt;
&lt;p&gt;I created a basic template to help me document initiatives when I need stakeholder advice, buy-in, and support. I am encouraging my team to use the same template when they have an idea, or if I ask them to create a plan.&lt;/p&gt;
&lt;p&gt;Hope the template will help you as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Proposal Template&lt;/h1&gt;
&lt;p&gt;Here is the template I created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Template" src="../images/communication-guidance-upwards-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slides 1 (cover), 2 (quotes), 9 (references), and 10 (Q&amp;amp;A) are intended for presentations.&lt;/li&gt;
&lt;li&gt;Slide 3: &lt;strong&gt;PROBLEM TO SOLVE&lt;/strong&gt; - Before you commit your &lt;strong&gt;problem&lt;/strong&gt; to paper, investigate the root cause. The five (5) WHYs technique is an effective way for you to do &lt;strong&gt;root&lt;/strong&gt; cause analysis and to find the root cause of any problem. It is also an effective way for your audience to test your &lt;strong&gt;problem definition&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;The basis of Toyota’s scientific approach is to ask why five times whenever we find a problem … By repeating why five times, the nature of the problem as well as its solution becomes clear.&lt;/em&gt;“ Taiichi Ohno&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Slide 4: &lt;strong&gt;OVERVIEW&lt;/strong&gt; - A crisp overview of the proposal - &lt;strong&gt;WHAT&lt;/strong&gt; is it all about.&lt;/li&gt;
&lt;li&gt;Slide 5: &lt;strong&gt;BENEFITS&lt;/strong&gt; - Outline the benefits of investing in the proposal - &lt;strong&gt;WHAT&lt;/strong&gt; is the value.&lt;/li&gt;
&lt;li&gt;Slide 6: &lt;strong&gt;PROBLEM TO SOLVE&lt;/strong&gt; - If proposal is focused on a problem, describe the problem to be resolved.  &lt;/li&gt;
&lt;li&gt;Slide 7: &lt;strong&gt;INNOVATION&lt;/strong&gt; - If the proposal is focused on an innovation, describe the innovation to invest in.&lt;/li&gt;
&lt;li&gt;Slide 8: &lt;strong&gt;EXPECTED OUTCOME&lt;/strong&gt; - This is the most important part, which describes the outcome and value proposition in the following format:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="nv"&gt;want&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
        &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="nv"&gt;recommend&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;HOW&lt;/span&gt;,&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
        &lt;span class="nv"&gt;There&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;several&lt;/span&gt; &lt;span class="nv"&gt;benefits&lt;/span&gt;:
            &lt;span class="nv"&gt;First&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CORE&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Also&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;. 
            &lt;span class="nv"&gt;Finally&lt;/span&gt;, &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;OTHER&lt;/span&gt; &lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
    &lt;span class="nv"&gt;Imagine&lt;/span&gt;, &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;WHAT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;VALUE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to keep your communication crisp. The left sample is focused on the salient points and keeping the details (verbiage) in the speaker notes for reference. Avoid the slide on the right - you will lose your audience!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="crisp versus noisy" src="../images/communication-guidance-upwards-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hope this helps you with your next communication.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Remember, less is more! Know your audience and make every word count!&lt;/p&gt;</content><category term="misc"></category><category term="learning"></category></entry><entry><title>What about ChatGPT?</title><link href="https://wsbctechnicalblog.github.io/what-about-chatgpt.html" rel="alternate"></link><published>2023-03-01T00:00:00-08:00</published><updated>2023-03-01T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-03-01:/what-about-chatgpt.html</id><summary type="html">&lt;p&gt;A question that made me speechless at a recent Navigating the Future event.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A colleague asked a great question at a recent Navigating the Future event, which I answered with “I have no answer for you today.” To my defence, I was not feeling well at the time, had a cracking headache, and was therefore trying to hide in the audience. But … the reason I had no actionable answer was that I have been mulling over &lt;a href="https://openai.com/blog/chatgpt"&gt;ChatGPT&lt;/a&gt; and &lt;a href="https://openai.com"&gt;OpenAI&lt;/a&gt; for weeks, balancing a deep-rooted fear with respect for artificial intelligence. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AI" src="../images/what-about-chatgpt-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Fear as I am from the &lt;a href="https://en.wikipedia.org/wiki/HAL_9000"&gt;HAL9000&lt;/a&gt; and Terminator era where &lt;a href="https://en.wikipedia.org/wiki/Skynet_(Terminator)"&gt;SkyNet&lt;/a&gt; eventually took over control of our precious planet. The day machines develop self-awareness we are in serious trouble.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Respect" src="../images/what-about-chatgpt-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Respect as I programmed on the Intel 80186 processor, which had a 16-bit data width capable of addressing a phenomenal 65,536 bytes of memory. The magnitude of processing, memory space, and artificial intelligence we enjoy today makes engineers like a tad antiquated. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Old" src="../images/what-about-chatgpt-3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I'm old but I'm not obsolete." Terminator, aka Arnold Schwarzenegger&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;I loathe the dumb chat bots&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Dumb Robot" src="../images/what-about-chatgpt-4.png"&gt;&lt;/p&gt;
&lt;p&gt;We have all experienced it. You spend hours reading static web pages from your favourite online marketplace, looking for ways to contact anyone to get help on a missing or damaged shipment. Eventually you are chatting to a machine that starts with the friendly “Hi, how can I help you?” After agonising and wasteful exchanges of information, the chat bot refers you back to the same pages you spend hours reading.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Having a conversation with an intelligent bot sound appealing&lt;/h1&gt;
&lt;p&gt;&lt;img alt="AI Conversation" src="../images/what-about-chatgpt-5.png"&gt;&lt;/p&gt;
&lt;p&gt;What excites me about artificial intelligence is that we can turn the dialog with the machine into a meaningful conversation, making it possible for the machine to continuously learn, ask clarification questions, and investigate and formulate a detailed response in the background. Multi, continuous, repetitive, and context switching tasking is no problem for our binary companions.&lt;/p&gt;
&lt;p&gt;I dream of a common engineering bot that can be the friendly onboarding buddy, an engineer’s patient wingman, and the first point contact for all technical and operational support. If anyone wants to raise this as an idea for the upcoming InnoFest / Hackathon, then you have both my vote and support! &lt;/p&gt;
&lt;p&gt;We will have an uphill battle to convince our legal, freedom of information and protection of privacy act, and especially our security team, but having a conversation with an intelligent bot makes it all worth it. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;AI &amp;lt;&amp;gt; Humanoid&lt;/h1&gt;
&lt;p&gt;While many are scared that machines will take over our planet, we can rest assured that a machine will never be able to replace a human. Machines will never be able to demonstrate &lt;strong&gt;empathy&lt;/strong&gt; or &lt;strong&gt;passion&lt;/strong&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I hope that artificial intelligence is based in Azimov’s Laws of robotics&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The robot shall not harm human or, by inaction allow a human to come to harm. &lt;/li&gt;
&lt;li&gt;The robot shall obey any instructions given to it by humans. &lt;/li&gt;
&lt;li&gt;The robot shall avoid actions or situations which could cause it to come to harm itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let me ask my son, Thorsten who studied psychology, to review my post and share his thoughts on ChatGPT, OpenAI, and the rise of artificial intelligence. Handing the keyboard to T.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Closing thoughts by &lt;a href="https://twitter.com/tschaub18"&gt;(T)horsten&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As Willy said, a machine will never be able to replace a human. Given that statement, I prompted ChatGPT with the following question: “Do you have empathy?”&lt;/p&gt;
&lt;p&gt;This is the response I got: "As an artificial intelligence language model, I do not have emotions or feelings in the same way that humans do. While I can recognize and understand emotions based on the input I receive, I do not have the capacity to experience empathy or any other emotions. My primary function is to process information and provide responses based on that information.”&lt;/p&gt;
&lt;p&gt;So, what separates machines from humans? Humans have historically been compared to other beings as superior in intelligence, language, culture, technology, and self-awareness. AI models overshadow humans in intelligence, language, and technology, but cannot compensate in areas of culture and self-awareness. Self-awareness is the pivotal aspect that separates humans from other beings, including machines. It allows us to be aware of ourselves, others and have the ability to reflect on our own thoughts and feelings. These feelings drive the understanding humans have of the world, and the reality we create within it.&lt;/p&gt;
&lt;p&gt;What does this mean? If thinking about this in a rather simplistic way, is that for a machine to produce an output, it requires an initial input, which is ultimately driven by human emotions. &lt;/p&gt;
&lt;p&gt;While I believe AI models are progressively taking over the world and can be an intimidating force to accept, it cannot replace humans as a whole. A common understanding in Psychology is that we cannot predict human behaviour with absolute surety, because at the core of our beings, every human being is different. Human beings are reactive, mainly driven by emotions. &lt;/p&gt;
&lt;p&gt;AI models are already relevant in human society, what is important is that we recognize the limitations of these machines. Humans do have weaknesses that are fundamental to emotions, such as being irrational. A machine or so called AI-model, will never be irrational and rather just produce answers that are statistically driven by human input, which is still based on emotions.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Azure DevOps Pipeline OSS v2.1 Flow</title><link href="https://wsbctechnicalblog.github.io/azure-devops-pipeline-oss-v2-1-flow.html" rel="alternate"></link><published>2023-02-22T00:00:00-08:00</published><updated>2023-02-22T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-22:/azure-devops-pipeline-oss-v2-1-flow.html</id><summary type="html">&lt;p&gt;Two pull requests with pipeline updates for your perusal.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently enhanced our in-house Azure Pipelines v2 application-type blueprints. Although we deemed the latest blueprint as too WorkSafeBC specific and therefore have not published it, we posted two pull requests with an update to the git-tools-git-version.yml template, &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/13"&gt;PR#13&lt;/a&gt;, and an update to the overall pipeline workflow, &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/14"&gt;PR#14&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Path Version Variable&lt;/h1&gt;
&lt;p&gt;The change in the git-tools-git-version.yml template is subtle. By adding line &lt;code&gt;83&lt;/code&gt; we create and set both the &lt;code&gt;semVersion&lt;/code&gt; and the &lt;code&gt;patchVersion&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;81&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;82&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=semVersion;isOutput=true]$(GitVersion.MajorMinorPatch)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;83&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=patchVersion;isOutput=true]$(GitVersion.Patch)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Refer to &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/13"&gt;Pull Request 13&lt;/a&gt; for details.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ALSO SEE:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/sharing-variables-amongst-agents.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/sharing-variables-with-stages-and-jobs.html"&gt;Gotchas when sharing variables with Azure DevOps stages and jobs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Pre-Production Automation Stage&lt;/h1&gt;
&lt;p&gt;With the v2 blueprints we introduced the &lt;code&gt;Quality Assurance Automation&lt;/code&gt; and &lt;code&gt;Security Automation&lt;/code&gt; stages, allowing you to run quality assurance automation after deploying to development or system test environment, as well as security automation before triggering a security review.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;v2 pipeline flow&lt;/p&gt;
&lt;p&gt;&lt;img alt="v2" src="../images/azure-devops-pipeline-oss-v2-1-flow-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As per &lt;a href="https://github.com/orgs/WorkSafeBC-Common-Engineering/discussions/4#discussioncomment-5002914"&gt;discussion with 604Kev&lt;/a&gt; we introduced a pre-production automation stage, allowing you to perform trivial tasks before deploying to production environments, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notifying release management&lt;/li&gt;
&lt;li&gt;Creating work items of Azure Boards for tracking&lt;/li&gt;
&lt;li&gt;Telemetry&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;v2.1 pipeline flow&lt;/p&gt;
&lt;p&gt;&lt;img alt="v2.1" src="../images/azure-devops-pipeline-oss-v2-1-flow-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/14"&gt;Pull Request 14&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;Hope you like the improvements. Next up is a Cloud Native Web Application blueprint.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="oss"></category><category term="pipelines"></category></entry><entry><title>Engineering Practice Naming Conventions</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-naming-conventions.html" rel="alternate"></link><published>2023-02-17T00:00:00-08:00</published><updated>2023-02-17T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-17:/engineering-practice-naming-conventions.html</id><summary type="html">&lt;p&gt;Naming Convention Nuggets of Knowledge and Best Practices&lt;/p&gt;</summary><content type="html">&lt;h1&gt;What's in a Name?&lt;/h1&gt;
&lt;p&gt;How we name and categorize things conveys meaning and intent - what it &lt;em&gt;is&lt;/em&gt; and possibly &lt;em&gt;how&lt;/em&gt; it should be used.  All
in the aim of improving clarity of purpose and understanding its nature, and how it should be used.&lt;/p&gt;
&lt;p&gt;When we talk about software, we are specifically addressing naming conventions and standards, patterns that
can be exploited for automation and autonomous actions.  We are not talking about naming our children or pets in unique
or playful ways; this should be avoided in our software and thought of as an anti-pattern.  We need a pragmatic and
useful approach to naming &lt;em&gt;things&lt;/em&gt; to the benefit of our software quality and maintainability, and in fact scalability.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why are Naming Conventions Important?&lt;/h1&gt;
&lt;p&gt;We define conventions and standards so that the purpose and intent of the an object or variable can be inferred (i.e. its &lt;em&gt;Name&lt;/em&gt;), and indeed
be anticipated; that is where automation glory can be realized.  To get there, conventions must be adopted and applied organization-wide - 
across all products, projects, and development teams.  It is more important to define a convention and &lt;em&gt;stick with it&lt;/em&gt;, than it is
to pick the &lt;em&gt;best&lt;/em&gt; one - it may come down to style preferences and patterns that everyone agrees on.&lt;/p&gt;
&lt;p&gt;Naming conventions can apply to all &lt;em&gt;things&lt;/em&gt; in your software; for folders, files, variables, classes, methods, and even project files and solutions. Deciding on and following your convention is a cornerstone to creating great software.  When you adopt and follow an 
organization-wide standard &lt;em&gt;Naming Convention&lt;/em&gt; you will experience the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smooth Operation - When your data is easy to find, it is easy to extract the required knowledge and make decisions based on it. There won’t be any delay in getting information, and this ensures smooth administration in your organization without any bottlenecks.&lt;/li&gt;
&lt;li&gt;Better Version Control - Information gets constantly updated in an organizational setting. To make sure you are using the most recent version, you need to tag it accordingly in your file name. This helps you avoid errors associated with outdated knowledge.&lt;/li&gt;
&lt;li&gt;Save Time and Money - When you avoid duplication through proper naming conventions, you can save a lot of time and money. You won’t have to spend time looking for lost files and there will be no need to create new versions of already existing files.&lt;/li&gt;
&lt;li&gt;Automation - you can anticipate file and folder names, enabling process automation such as build pipelines and code scans&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other pillars in creating exceptional software as well, and we'll
explore those is upcoming articles.&lt;/p&gt;
&lt;p&gt;Let us explore these standards, and the patterns that we use &lt;em&gt;by convention&lt;/em&gt; to improve our software and unlock automation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Date Convention&lt;/h1&gt;
&lt;p&gt;Dates are so common, we run into them just about every day :).  &lt;/p&gt;
&lt;p&gt;We need a standard way to represent a date, since it can be used in filename and 
data we generate such as processing and event logs.  Some examples could be YYMMDD or YYYYMMDD, following a decreasing scope pattern.  Additional,
you might optionally include a time component suffix as well HHMMSSmmmm.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Case Convention&lt;/h1&gt;
&lt;p&gt;When we create &lt;em&gt;things&lt;/em&gt; that have compound names - names that contain multiple words combined into a single string - we may want to delineate
where each word begins. There are several popular conventions to apply Capital Letters and remove or replace blanks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Camel Case&lt;/strong&gt; (camelCase) - This involves capitalizing all words except the first word and removing the space in between them. For instance, 'product table id' can be written as productTableId.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pascal Case&lt;/strong&gt; (PascalCase) - This involves capitalizing all words in the name, including the first, and removing the space in between them. For instance, 'product table id' can be written as ProductTableId.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Snake Case&lt;/strong&gt; (snake_case) - This type of naming combines words simply by replacing the space with an underscore (_). The same example used above can be written as product_table_id.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kebab Case&lt;/strong&gt; (kebab-case) - This is similar to the snake case except the underscore is replaced with a dash (-). For the file name used above, the Kebab case name can be written as product-table-id.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Special Characters&lt;/h1&gt;
&lt;p&gt;It is probably best if you also include in your Naming Convention rules for what characters are valid to be used.  Some characters
have special meaning in some circumstances and should be avoided - such as the ampersand (@), dashes, backward and forward slashes.
When you use those special characters - any one can have implied meaning and create unexpected behaviours, so it is best to avoid them all together.
If you adopt the rule of only using Alpha-numerics, you will be well prepared for such situations.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Standard Terms&lt;/h1&gt;
&lt;p&gt;You should also consider managing a library of standard terms, with their encoded (Naming Convention applied) &lt;em&gt;name&lt;/em&gt;, definition and usage.&lt;br&gt;
When defining a name for an object - consult the library of standard terms first to see if words you want to use have been standardized on.  If it is
there, use it; if it is not, add it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;REMEMBER&lt;/strong&gt; this is organization wide set of terms used for all software endeavours - be careful when selecting terms that mean the same
across all development teams.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Azure DevOps Transient Faults</title><link href="https://wsbctechnicalblog.github.io/azure-devops-transient-faults.html" rel="alternate"></link><published>2023-02-15T00:00:00-08:00</published><updated>2023-02-15T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-15:/azure-devops-transient-faults.html</id><summary type="html">&lt;p&gt;Be careful not to annoy Azure DevOps with your automated maintenance jobs!&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you automate your operational support and maintenance of &lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt;, such as updating the pre- and post-approvers of 2500 Azure Pipelines, or creating a detailed report of all Azure Pipelines in your Azure DevOps Organization, you may come across ad-hoc exceptions, "429 Too Many Requests Error", "503 Service Unavailable", or a "&lt;em&gt;last time it 100% worked for sure with no issues&lt;/em&gt;" call for help.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example 1 of an automation meltdown&lt;/p&gt;
&lt;p&gt;&lt;img alt="failure" src="../images/azure-devops-transient-faults-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Service Unavailable
Service Unavailable
HTTP Error 503. The service is unavailable.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Example 2 of an automation meltdown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Azure DevOps Services Unavailable

    Azure DevOps Services

        Sorry! Our services aren&amp;#39;t available right now.
        We&amp;#39;re working to restore all services as quickly as
        possible. Please check back soon.
        To see the latest status on our services, please 
        visit our support page.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In both cases I ended up having to intervene manually and restart the maintenance job. Muda!&lt;/p&gt;
&lt;h1&gt;Transient fault&lt;/h1&gt;
&lt;p&gt;You probably triggered a &lt;strong&gt;throttling&lt;/strong&gt; or &lt;strong&gt;circuit breaker&lt;/strong&gt; pattern, which Azure DevOps uses to protect itself against excessive load or potential &lt;code&gt;denial of service&lt;/code&gt; attacks. If you do not deal with the transient fault you will end up with failed automation, wasted time, and &lt;strong&gt;manual&lt;/strong&gt; intervention - more &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Dealing with transient fault&lt;/h1&gt;
&lt;p&gt;Here is a simple &lt;strong&gt;retry pattern&lt;/strong&gt; that allows you to retry the operation after going to sleep for a while. You may have to play with and increase the &lt;code&gt;$retryValue&lt;/code&gt; default value, depending on the REST API you are calling. &lt;/p&gt;
&lt;p&gt;1.13 has worked for me and my automation scripts to date.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retry logic&lt;/p&gt;
&lt;p&gt;&lt;img alt="bandaid" src="../images/azure-devops-transient-faults-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;13&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-lt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;retryCount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;failureCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;DevOps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;REST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;API&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;$result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Invoke-RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$headers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;processing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;retry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;logic&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$retryCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ensure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;shows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;warning&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;Write-Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;##vso&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;task.complete&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;SucceededWithIssues&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;SUCCEEDED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ISSUES&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Logging&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;Write-Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;Sleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;retry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;processing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;loop.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; $failureCount &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Write-Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;retry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;retrySleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;failureCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;Start-Sleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-Seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$retrySleep&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple, yet effective.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Read &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; for more details on transient faults.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Azure Devops simplicity to rule them all</title><link href="https://wsbctechnicalblog.github.io/azure-devops-simplicity-to-rule-them-all.html" rel="alternate"></link><published>2023-02-03T00:00:00-08:00</published><updated>2023-02-03T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-03:/azure-devops-simplicity-to-rule-them-all.html</id><summary type="html">&lt;p&gt;Keep Azure DevOps setup simple and avoid a lot of pain and waste!&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is seldom that you have an opportunity to plan and deploy your engineering process using &lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; from the ground up - a greenfield deployment not previously polluted by snowflakes (variations of the same) and custom development (everyone has a preference). If you do, I have two recommendations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep it &lt;strong&gt;simple&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;one&lt;/strong&gt; Azure DevOps Project to rule them all.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which reminds me of &lt;a href="https://devblogs.microsoft.com/devops/what-is-devops-donovan/"&gt;Donovan Brown's&lt;/a&gt; infamous definition of DevOps "&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users&lt;/em&gt;", and his iconic statement "&lt;em&gt;You cannot buy DevOps and install it.&lt;/em&gt;" I even created laptop stickers for his DevOps definition, as it is crisp and balances my belief in the value of DevOps. Unfortunately, Microsoft renamed their product to Azure DevOps, making the argument of his iconic statement a real challenge to uphold.&lt;/p&gt;
&lt;p&gt;This post, however, is based on learning lessons the hard way and preparing a brownfield that had years of development based on autonomy over guardrails and storms of snowflakes. It took us a year of hard work, amazing innovations, and grit …&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Simplicity and consistency over Snowflakes!&lt;/h1&gt;
&lt;p&gt;It does not take long to realize that supporting thousands of CI/CD &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"&gt;Azure Pipelines&lt;/a&gt;, &lt;a href="https://learn.microsoft.com/en-us/azure/devops/REPOS/?view=azure-devops"&gt;azure Repos&lt;/a&gt;, and &lt;a href="https://learn.microsoft.com/en-us/azure/devops/ARTIFACTS/?view=azure-devops"&gt;Azure Artifacts&lt;/a&gt; that have drifted from each other is neither sustainable, nor cost effective. We had some bright engineers create pipelines running steps in parallel, using a platter of custom extensions, and scripts that makes any engineer’s heart rate shoot through the roof with excitement. Until the engineer leaves the organization and another engineer has the responsibility of maintaining the artwork and deal with a hotfix at the same time. Multiply this by a hundred to a thousand fold and you quickly realize complexity, cost, and un-maintainability of a technology &lt;strong&gt;waste&lt;/strong&gt;, that is supposed to empower the engineers to deliver continuous value.&lt;/p&gt;
&lt;p&gt;We invested in creating the pillars for &lt;strong&gt;guardrails&lt;/strong&gt;, &lt;strong&gt;automation&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt;, and &lt;strong&gt;self-service automation&lt;/strong&gt;. See these posts for more details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html"&gt;Can government agencies be innovative?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/governance-manifestos-guardrails.html"&gt;Can we enact governance through engineering-friendly manifestos and guardrails?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/our-open-source-pipeline-blueprints-have-landed.html"&gt;Our open-source pipeline blueprints have landed!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part9.html"&gt;Self-service automation - A dream turns into reality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Lean on out-of-the-box features&lt;/h1&gt;
&lt;p&gt;Whenever a user requests a new custom extension to be installed from [Azure DevOps Marketplace)https://marketplace.visualstudio.com/azuredevops/), make sure you ask the five (5) WHYs! &lt;/p&gt;
&lt;p&gt;While it is fun and exciting to watch a delighted end-user, you will soon receive little patience and understanding when the  users have an issue with the extension or are looking for new features. Worst of all, if an extension is deprecated or a vulnerability is detected by security, there is very little of support and service level agreements you can rely on with &lt;strong&gt;free&lt;/strong&gt; extensions.&lt;/p&gt;
&lt;p&gt;Keeping it simple and relying on out-of-the-box service features, keeps the feature and maintenance under control. If you must invest in an extension, I recommend that you:&lt;/p&gt;
&lt;p&gt;Pick extensions with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Verified Logos" src="../images/azure-devops-simplicity-to-rule-them-all-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;verified domain&lt;/strong&gt; and the &lt;strong&gt;top publisher&lt;/strong&gt; validations - they imply commitment through exemplary policies, quality, reliability, and support.&lt;/li&gt;
&lt;li&gt;A high number of &lt;strong&gt;installs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A high average rating (&lt;strong&gt;stars&lt;/strong&gt;), Q&amp;amp;A, and Ratings &amp;amp; Reviews that give you a warm and fuzzy feeling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember, once an extension is installed, it quickly becomes a critical feature of your user’s processes, making it difficult to reverse or exchange.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Governance Reporting is a must&lt;/h1&gt;
&lt;p&gt;It is important that you can monitor and audit your engineering process for consistency, standardization, adherence to guardrails and standards, and identify when configurations start drifting apart. &lt;/p&gt;
&lt;p&gt;We invested in a platter of automated reporting, via the &lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.1"&gt;Azure DevOps REST API&lt;/a&gt;, and have also embraces the phenomenal work done by &lt;a href="https://twitter.com/vinijmoura"&gt;Vinicius Moura&lt;/a&gt; with his &lt;a href="https://github.com/vinijmoura/Azure-DevOps"&gt;Azure-DevOps&lt;/a&gt; open source project on GitHub.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;List all Release Definitions, Stages, and Approvers on Classic Releases in Azure DevOps&lt;/em&gt;
&lt;img alt="Sample Report" src="../images/azure-devops-simplicity-to-rule-them-all-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only are we able to answer most questions from internal audits in seconds, we are able to continuously observe the health of our engineering process and get a nudge when things are about to drift off the rails.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;One project to rule them all!&lt;/h1&gt;
&lt;p&gt;I will keep this section very short and refer you to the excellent &lt;a href="https://nkdagility.com/blog/one-team-project/"&gt;One Team Project to rule them all&lt;/a&gt; post by &lt;a href="https://nkdagility.com/"&gt;Martin Hinshelwood&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, I wish that Microsoft had not called it a Team Project, as it has resulted in years of confusion and migraines. As Martin correctly emphasizes in his blog a Team Project cannot be equated to a Visual Studio Project, a software, or whatever project. Project &amp;lt;&amp;gt; project! &lt;/p&gt;
&lt;p&gt;If only I had a dollar for every wasteFUL discussion that goes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User: "&lt;em&gt;Please create me a new Azure DevOps Project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;We are starting a new project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY&lt;/strong&gt; can we not just create a new Team for you in our mainstream Azure DevOps Team Project?&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;We feel that we need a new project, not a new team?&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;Because we are starting a new project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After 5-years of pushing for a "one project to rule them all" we are now staring at multiple Azure DevOps Team projects that have drifted apart from each other, making it sheer impossible to consolidate all Azure Repositories and Azure Pipelines, while maintaining all the history mandated by policies.&lt;/p&gt;
&lt;p&gt;Avoid the pain and start with "&lt;strong&gt;one project to rule them all!&lt;/strong&gt;"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use Active Directory (AD) groups to authorize users&lt;/h1&gt;
&lt;p&gt;Another hard lesson we learnt over time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;Active Directory (AD)&lt;/strong&gt; groups to authorize users.&lt;/li&gt;
&lt;li&gt;Keep your security model &lt;strong&gt;simple&lt;/strong&gt; and number of AD groups &lt;strong&gt;low&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delegate&lt;/strong&gt; the auditing and membership management of AD groups.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automate&lt;/strong&gt; the creation of AD groups and adding and removing of user memberships.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you are dealing with multiple Azure DevOps Team projects, you may end up with a security model like the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Complex Security Model" src="../images/azure-devops-simplicity-to-rule-them-all-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are the &lt;strong&gt;green&lt;/strong&gt; engineer, you will &lt;strong&gt;hate&lt;/strong&gt; the Azure DevOps powered engineering process. It is complex and anything but user-friendly and empowering - and no fault of Azure DevOps!&lt;/p&gt;
&lt;p&gt;One of our working groups invested well-spent time to understand our security model and come up with a &lt;strong&gt;simpler&lt;/strong&gt; and &lt;strong&gt;user-friendly&lt;/strong&gt; security model. It still defines AD groups per Azure DevOps Team project for AD groups providing &lt;strong&gt;administrative&lt;/strong&gt; and &lt;strong&gt;elevated&lt;/strong&gt; permissions to enforce the least-privilege policy, but introduces other AD groups that span all of the Azure DevOps Team Projects that should be **one"".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Simple Security Model" src="../images/azure-devops-simplicity-to-rule-them-all-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now if we had "one team project to rule them all" we would have started with the same security model from the start.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hopefully this post gives you a few pointers to mull over, to help you transform your Azure DevOps powered engineering process, and avoid a lot of the &lt;strong&gt;WASTE&lt;/strong&gt; and &lt;strong&gt;challenges&lt;/strong&gt; we endured over the past few years.&lt;/p&gt;
&lt;p&gt;I am excited our state of the engineering process. &lt;strong&gt;Watch the space&lt;/strong&gt;, as we shine the light on upcoming innovations, new and better ways to innovate, and empower our engineers through service excellence. &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category></entry><entry><title>Engineering Practice Nuggets</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-nuggets.html" rel="alternate"></link><published>2023-01-18T00:00:00-08:00</published><updated>2023-01-18T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-18:/engineering-practice-nuggets.html</id><summary type="html">&lt;p&gt;Nuggets of Knowledge and Best Practices in Software Engineering&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we design, build, and deploy software we aim to apply patterns and learned best practices in order to produce consistent and robust solutions that are of the highest quality and lowest possible technical dept (burden to maintain).&lt;/p&gt;
&lt;p&gt;These powerful nuggets of knowledge, patterns and practices, and key areas that we are evolving and improving will be the subject matter explored with the goal to invigorate vibrant collaboration and innovation, and indeed experimentation and tenacity when things don't go as desired.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Metrics and Quantitative Measures&lt;/h1&gt;
&lt;p&gt;In addition to the four standard DevOps metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deployment Frequency&lt;/strong&gt; - How often an organization successfully releases to production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lead Time for Changes&lt;/strong&gt; - The amount of time it takes a commit to get into production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change Failure Rate&lt;/strong&gt; - The percentage of deployments causing a failure in production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time to Restore Service&lt;/strong&gt; - How long it takes an organization to recover from a failure in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have begun the process of calculating various metrics on software created at WSBC, using SonarQube in the build and deploy pipelines. These will soon be augmented by Stryker to generate mutant test cases and validate them, as well as the Roslyn Analyzer for further code analysis.  &lt;/p&gt;
&lt;p&gt;These measurements are calculated when the pipeline for a product is invoked, providing us with statistical data that we can use to gauge the quality improvements over time.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Engineering Capability Maturity&lt;/h1&gt;
&lt;p&gt;We are now developing a Capability Maturity Model for Software Engineering Practices at WSBC, similar to the Maturity Model for Agile practices combined with CMM for Software - and supported by Scaled Agile Framework for the Enterprise (SAFe).  &lt;/p&gt;
&lt;p&gt;We are working to identify the capabilities at each level and how to measure them, and how to put processes in place or refine existing processes  to support their improvement and cultivate an open culture of experiment-fail-learn and share as discussed in &lt;a href="/fail-learn-reset.html"&gt;Fail, Learn, Reset!&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;EDO Ce Recommended Product Catalog&lt;/h1&gt;
&lt;p&gt;The EDO Recommended Product Catalog is getting a radical facelift, with a cool new periodic-table style layout with pop-up cells that clearly describe the product and purpose and current version.  Clicking on the tile opens a modal dialog describing the product in full, with links to download either from ServiceNow or the product own download page.&lt;/p&gt;
&lt;p&gt;We are busily creating Phase II, enabling a Search capability and populating the table cells based on a query to live &lt;em&gt;editable&lt;/em&gt; data in SharePoint.&lt;/p&gt;
&lt;p&gt;In a future post, we will dig deeper into the Product Catalog; how it has evolved to support and enhance our development teams navigation, education, and adoption of technology recommended for our development community.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Watch this space for bi-weekly Engineering Practice updates, latest developments, and recommended best practices, techniques, patterns, and methods recommended for building the next generation of interconnected loosely-coupled systems and services in our &lt;em&gt;Software Factory Vision&lt;/em&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="code-quality"></category><category term="design"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Pull Request empowered by engineering practices</title><link href="https://wsbctechnicalblog.github.io/pull-request-empowered-by-engineering-practices.html" rel="alternate"></link><published>2023-01-13T00:00:00-08:00</published><updated>2023-01-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-13:/pull-request-empowered-by-engineering-practices.html</id><summary type="html">&lt;p&gt;Pull Requests (PR) enable us improve built-in quality, engineering practices, and streamline our continuous integration pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us take a look at our latest pull request workflow and hopefully spark a few discussions that will empower all of us to embrace the pull request (PR) feature effectively.  &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a pull request (PR)?&lt;/h1&gt;
&lt;p&gt;Pull Requests (PR) enable us to change, review, and merge code. We can add policies to your PRs to enable code quality in key branches using policies, validation builds, code-quality, and security scans. We all want to protect key branches such as trunk, master, or main, which should always be stable and deployable – the single source of truth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MYTH&lt;/strong&gt;  - Pull-requests slow down your continuous integration value stream! A pull request takes as long as you and your process allow it to sit in a corner to gather dust. We encourage our engineers to track the lead and cycle times of pull requests using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=OneLuckiDev.prApprovalReport"&gt;Pull Request Completion Report&lt;/a&gt; and to collaborate with their peers to ensure that pull requests do not go stale. Also, the more you SHIFT-LEFT and present the evidence to the Pull Request validations, the more you can automate and thereby eradicate expensive human reviews and associated cycle times.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is the pull request (PR) workflow?&lt;/h1&gt;
&lt;p&gt;There are many pull request (PR) strategies. Here is the one we recommend for our common engineering ecosystem, based on our &lt;a href="/branching-trunk-based.html"&gt;trunk-based&lt;/a&gt; branching strategy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Workflow" src="../images/engineering-practices-pull-request-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;LEGEND&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Create a feature branch from the trunk/master/main branch, representing a unique feature, bug, or hotfix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Make code changes to implement the associated feature or fix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When ready to start collaboration, create a DRAFT PR to merge your feature branch to the trunk/master/main branch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DRAFT PR allow vibrant collaboration, without triggering Branch Policies, page 53, validations or notifying PR reviewers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Manually trigger branch policy validations, such as the validation build.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When ready to merge code changes to the trunk/master/main branch, publish the PR.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When a PR is published, reviewers are notified and Branch Policies become mandatory. Set the PR completion to manual or automatically, whereby automatic completion is triggered when all Branch Policies are validated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When a code change is committed within a published PR, all reviewer approvals are reset, and reviewers are duly notified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;With every commit, all Branch Policies are automatically re-validated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ready to merge changes – done with code changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The PR verifies that all Branch Policies are met.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The PR will not complete manually or automatically until all validations are met.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Users with elevated permissions can force complete the PR, irrespective of the state of validations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Code changes are merged to the source branch, which in turn triggers the continuous integration (CI) pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MYTH&lt;/strong&gt; - Pull-requests are manual interventions. With a high-TRUST team, we can define mandatory &lt;a href="https://learn.microsoft.com/en-us/azure/devops/repos/git/branch-policies-overview?view=azure-devops"&gt;Branch Policies&lt;/a&gt; and &lt;strong&gt;optional&lt;/strong&gt; approvals. That way collaboration is encouraged, but the PR will auto-complete as soon as all Branch Policies, are validated. No manual blocks, just validated  built-in quality.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is our accountability as PR reviewers?&lt;/h1&gt;
&lt;p&gt;Which brings us to an important topic – the &lt;strong&gt;responsibility&lt;/strong&gt; and &lt;strong&gt;accountability&lt;/strong&gt; of PR reviewers.&lt;/p&gt;
&lt;p&gt;If you are included in a pull request as an optional reviewer, you can review and collaborate within the context of the pull request. If you are included as a required reviewer, you must review and approve the PR so that the Branch Policies are met.&lt;/p&gt;
&lt;p&gt;While collaboration, continuous learning, information exchange, and guidance are important aspects of the pull request workflow, every reviewer, whether optional or required, is accountable to keep an eye on the following when reviewing a PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bad coding practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of security practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of engineering practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of repository, pipeline, or quality guardrails.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we automate the validations, the accountability and need to review PRs manually diminishes for our engineers.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part11.html"&gt;Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests"&gt;Pull requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pull-requests-friend.html"&gt;Pull Request is your friend not foe!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Fail, Learn, Reset!</title><link href="https://wsbctechnicalblog.github.io/fail-learn-reset.html" rel="alternate"></link><published>2023-01-11T00:00:00-08:00</published><updated>2023-01-11T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-11:/fail-learn-reset.html</id><summary type="html">&lt;p&gt;"Failure is a good option. If you are not failing, you are not trying hard enough." - Elon Musk&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last year, I tried hard to encourage everyone in my team and our group to accept failure as an opportunity to learn. I am so passionate about the value of failure, that I will continue to eradicate the &lt;strong&gt;fear of failure&lt;/strong&gt; with our engineers. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"There is a silly notion that failure is not an option at NASA. Failure is an option here. If things are not failing, you are not innovating enough."&lt;/em&gt; - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Good and bad failures&lt;/h1&gt;
&lt;p&gt;Just like cholesterol, there are &lt;strong&gt;BAD&lt;/strong&gt; and there are &lt;strong&gt;GOOD&lt;/strong&gt; failures. &lt;/p&gt;
&lt;p&gt;We must minimize the &lt;strong&gt;BAD&lt;/strong&gt;** failures, originating from context switching, stress, ignoring guardrails, and guidance, as they typically impact user experience and work:life balance. As we want to continuously deliver value to delighted end-users, we need to take the bad failures very seriously.&lt;/p&gt;
&lt;p&gt;Maximize the &lt;strong&gt;GOOD&lt;/strong&gt; failures, generally originating from experiments, which promote innovation and learning, and help us raise our built-in quality bar.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Create psychological safety!&lt;/h1&gt;
&lt;p&gt;For a team to embrace &lt;strong&gt;FAILURES&lt;/strong&gt;, psychological safety and support from the leadership is pivotal. If engineers must comply with metrics and performance reviews that do not support the value of failure, you will observe &lt;strong&gt;zero&lt;/strong&gt; traction by your team(s) to even consider the option of failure.&lt;/p&gt;
&lt;p&gt;Encourage safe and vibrant collaboration, to combat the imposter syndrome. In other words, we are all equal and what is discussed by the team stays with the team, until everyone is comfortable to share the context, the core issue, and the learnings after picking up the pieces and performing a retrospective on a FAILURE.&lt;/p&gt;
&lt;p&gt;You need an ecosystem based on &lt;strong&gt;TRUST&lt;/strong&gt;, and encourage everyone to be open-minded, respectful, and empathetic. &lt;/p&gt;
&lt;p&gt;Once these ingredients are stirred into the secret sauce of your team, you are ready to share your failures.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Accept and learn from your failures&lt;/h1&gt;
&lt;p&gt;I shared my top three failures with management and our engineers not only to showcase that no-one is invincible or perfect, but to encourage everyone to do the same. Here are the failures I shared:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the late 80’s I was working on a new encryption hardware module and integrating the service into a banking system in Switzerland. The project FAILED with spectacular operating system lockups, resulting in me flying to the US for the first time. I had a huge opportunity to debug and patch the &lt;a href="https://en.wikipedia.org/wiki/Convergent_Technologies_Operating_System"&gt;Convergent Technologies Operating System&lt;/a&gt; (CTOS) operating system kernel together with its creators. Finding the root cause for the operating system lockup was a phenomenal learning experience for all of us and as a result I also fell in love with Assembler and V2PLM programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In 2013 we toggled a feature flag in Team Foundation Service (now known as Azure DevOps) at a major conference. It did not go well … we blew up Azure and spent weeks fixing Azure DevOps. We learned about handling transient faults and avoiding similar failures with retries, throttling, and circuit breakers, and even created vibrant collaboration and trust by being transparent. My &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; article is one of the outcomes, as is my caution for dark launches and feature flags. Also read Brian Harry's &lt;a href="https://devblogs.microsoft.com/bharry/bad-day/"&gt;A bad day&lt;/a&gt; blog post for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At WorkSafeBC, I recently blew up our v1 blueprints with a two-space indent in one of our YAML templates which silenced WhiteSource, I repeatedly get the expense field in TRRs incorrect, and just recently mixed up two ServiceNow requests, creating the wrong team, in the wrong project, for the wrong users. What I am learning from these, is that &lt;strong&gt;context-switching is BAD&lt;/strong&gt;, and that &lt;strong&gt;focus&lt;/strong&gt; is worth every Penny.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could go on and on and on, but my top three hiccups are enough for this post.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Experiment, fail, learn, act!&lt;/h1&gt;
&lt;p&gt;The following illustration summarizes my thoughts on &lt;strong&gt;FAILURES&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="loop-of-failure" src="/images/fail-learn-reset.png"&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;We need to run &lt;strong&gt;experiments&lt;/strong&gt; to test ideas, proposed innovations, or minimally viable products (MVP) to evaluate if we achieve desired results (PASS) or not (FAIL).&lt;/li&gt;
&lt;li&gt;Either way we can &lt;strong&gt;act&lt;/strong&gt; upon invaluable &lt;strong&gt;learnings&lt;/strong&gt;, either reiterating on the experiment or focusing on the next.&lt;/li&gt;
&lt;li&gt;It is all about continuously &lt;strong&gt;learning&lt;/strong&gt; and delivering &lt;strong&gt;value&lt;/strong&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To create and support an ecosystem based on &lt;strong&gt;TRUST&lt;/strong&gt; and one that embraces the &lt;strong&gt;learn from failures&lt;/strong&gt; mindset we need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The leadership to create &lt;strong&gt;psychological safety&lt;/strong&gt; by enabling everyone to fail without the fear of retribution or bad reviews. This is my next challenge to address.&lt;/li&gt;
&lt;li&gt;Engineers need to eradicate the &lt;strong&gt;imposter syndrome&lt;/strong&gt; through vibrant, open-minded, respectful, and empathetic collaboration. We have been driving this through our &lt;a href="https://wsbctechnicalblog.github.io/ceremony-overview.html"&gt;collaboration ceremonies&lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What are your thoughts on failure?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Azure Pipelines Conditional Logic</title><link href="https://wsbctechnicalblog.github.io/azure-pipelines-conditional-logic.html" rel="alternate"></link><published>2022-12-28T00:00:00-08:00</published><updated>2022-12-28T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-28:/azure-pipelines-conditional-logic.html</id><summary type="html">&lt;p&gt;Make your YAML pipelines more versatile with conditional expressions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us review why and how we use conditional expressions in our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 application-type pipeline blueprints&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a conditional expression and why is it "cool"?&lt;/h1&gt;
&lt;p&gt;You can use the &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; clauses to conditionally assign values or, as discussed in this blog post, conditionally run a step when a condition is met. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Intersection" src="../images/azure-pipelines-conditional-logic-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Conditions are defined using &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops"&gt;Expressions&lt;/a&gt; and built-in &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#functions"&gt;Functions&lt;/a&gt;. We have made heavy use of conditional expressions to define what our blueprints assemble at queue (run) time, which is not only a powerful concept, but also allows us to tick off a couple of &lt;strong&gt;classic&lt;/strong&gt; Azure Pipeline security risks. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VARIABLES&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we include a &lt;a href=""&gt;variable template&lt;/a&gt; if, and only if, the &lt;code&gt;suppressCD&lt;/code&gt; parameter is not set to &lt;code&gt;true&lt;/code&gt;. Note that we are intentionally turning every character in the variable template e to lowercase using the &lt;code&gt;lower&lt;/code&gt; &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#lower"&gt;function&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Examples in our blueprints&lt;/h1&gt;
&lt;h2&gt;Conditional Quality Assurance and Security Scans&lt;/h2&gt;
&lt;p&gt;As described in our recent &lt;a href="/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt; post, our pipelines are designed to target a &lt;strong&gt;lower&lt;/strong&gt; and &lt;strong&gt;higher&lt;/strong&gt; environment, whereby the higher is locked down and only included when the artifact originates from a &lt;code&gt;release&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Typical CI/CD pipeline" src="../images/azure-pipelines-blueprint-qa-integration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us peel the example below, layer by layer, which is the template we are using for both the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/dev-sec-ops/security-scans-auto.yml"&gt;Security Automation&lt;/a&gt; and &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;Quality Assurance (QA)&lt;/a&gt; stages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The conditional expression example &lt;code&gt;${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/release'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:&lt;/code&gt; decides if part of the template is included, by checking if the source branch is named &lt;code&gt;release&lt;/code&gt; or &lt;code&gt;release/*&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is a semantic version using the MAJOR.MINOR format. For example: &lt;code&gt;release/1.3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The template is divided into three sections of &lt;code&gt;steps&lt;/code&gt;, the steps to run for &lt;strong&gt;LOWER&lt;/strong&gt; environment artifacts, the steps for the &lt;strong&gt;HIGHER&lt;/strong&gt; environment artifacts, and the steps to run for both the &lt;strong&gt;LOWER+HIGHER&lt;/strong&gt; environments. All implemented using &lt;code&gt;conditional expressions&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the lower, higher, and both lower+higher placeholders, the conditional expression example &lt;code&gt;${{ if eq( lower(parameters.applicationBlueprint), 'azure-function' ) }}:&lt;/code&gt; allows us to define application-specific steps to be run.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR LOWER (NON-PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Lower Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nuget-package&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;universal-artifact&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;universal-artifact&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nuget-package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UNKNOWN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Higher Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rinse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR LOWER AND HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Lower and Higher Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple, but powerful!&lt;/p&gt;
&lt;h2&gt;Boot-Strap Flow&lt;/h2&gt;
&lt;p&gt;&lt;img alt="boot-strap.yml" src="../images/azure-pipelines-conditional-logic-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/boot-strap.yml"&gt;boot-strap&lt;/a&gt; template is our secret sauce that injects &lt;strong&gt;DevSecOps&lt;/strong&gt;, &lt;strong&gt;Building Code&lt;/strong&gt;, &lt;strong&gt;Toolkits&lt;/strong&gt;, and &lt;strong&gt;Application Insights&lt;/strong&gt; steps into our continuous integration (CI) pipeline.&lt;/p&gt;
&lt;p&gt;In the 80's I would have written the boot-strap logic as a gigantic &lt;a href="https://en.wikipedia.org/wiki/Assembly_language"&gt;Assembler&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/PL/M"&gt;V2/PLM&lt;/a&gt; switch statement. Back to the future, we have conditional YAML expression that make the experience a lot more readable and user friendly q;-)&lt;/p&gt;
&lt;p&gt;Here is a short extract from our &lt;code&gt;bootstrap&lt;/code&gt; template where we checkout our toolbox and call our Application Insights logging steps if the &lt;code&gt;bootstrapMode&lt;/code&gt; is set to &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snipped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP TOOLBOX&lt;/span&gt;
&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# Production Toolbox&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;runbuildingcodeonly&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//Common-Engineering-System/AzureDevOps.Automation.Pipeline.Toolbox.v2&lt;/span&gt;

&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP AI LOGGING&lt;/span&gt;
&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Telemetry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;START&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Toolbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;insights&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;OperationId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Build.BuildNumber).$(Build.BuildId)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;BootstrapMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PortfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ProductName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;VerboseFlag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ForceCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snipped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conditional Templates&lt;/h2&gt;
&lt;p&gt;The last example is an extract from the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/nuget-package/azure-pipeline-nuget-package-ci.yml"&gt;azure-pipeline-nuget-package-ci.yml&lt;/a&gt; where we conditionally load a &lt;code&gt;portfolioName/productName&lt;/code&gt; specific or a &lt;code&gt;default&lt;/code&gt; variable template based on the value of the &lt;code&gt;useDefaultConfig&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VARIABLES&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Lastly, a spacing GOTCHA!&lt;/h1&gt;
&lt;p&gt;Finally, let us look at a common gotcha. YAML is &lt;strong&gt;very&lt;/strong&gt; space sensitive and the indents are important. For example, only the first two &lt;code&gt;script&lt;/code&gt; steps are part of the conditional expression context. The third &lt;code&gt;script&lt;/code&gt;, which is not indented will be run irrespective of the conditional expression result.&lt;/p&gt;
&lt;p&gt;We strongly recommend you use &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; to give visual cues of your code and grouping thereof and the Azure Pipeline YAML &lt;a href="https://johnlokerse.dev/2022/02/07/validating-yaml-using-azure-devops-or-cli/"&gt;Validate&lt;/a&gt; feature to validate that your syntax is correct. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Security CD Lower Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is, it for today folks! Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; if you have any questions or feedback. &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category><category term="tips"></category></entry><entry><title>Azure Boards Tips for Operations Teams</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips-operations-team.html" rel="alternate"></link><published>2022-12-23T00:00:00-08:00</published><updated>2022-12-23T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-23:/azure-boards-tips-operations-team.html</id><summary type="html">&lt;p&gt;A few useful "did you know" tips when using Azure Boards for Operational-type teams.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After observing users work with and occasionally struggle with the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;, it is time for me to share a few tips. We continue from &lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt; and focus on operational teams this time.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What makes an Operations team different from a Delivery team?&lt;/h1&gt;
&lt;p&gt;There are likely tons of definitions and views of groups of engineers making up an operations, operational, services, or system teams. I will focus on my team, Common Engineering, is one of our common services teams, focused on operations. We empower our delivery teams, aka software development, with consistent and standardized &lt;strong&gt;processes&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;, &lt;strong&gt;innovation&lt;/strong&gt; of tool chains and continuous delivery pipelines, and &lt;strong&gt;support&lt;/strong&gt; of operational infrastructure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Intake" src="../images/azure-boards-tips-operations-teams-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the focus on processes, products, innovation, and support are creating a  variation of support requests we receive and associated work that we plan after triage and prioritization. A challenging, but exciting mix of services we are focused on every day. &lt;/p&gt;
&lt;p&gt;If your daily working day looks similar, you may want to consider these learnings from our team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Document process of dealing with blockers and external dependencies&lt;/h1&gt;
&lt;p&gt;Delivering exceptional, responsive, and forward-thinking operational support is our top priority, which trumps all other visions, goals, objectives, and dreams. It requires us to continuously improve our value streams, to improve our &lt;a href="https://www.agile-academy.com/en/agile-dictionary/lead-time-vs-cycle-time/"&gt;cycle and lead times&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For example, we continuously analyze, collaborate, agree, and documented how to deal with common scenarios, powered by &lt;a href=""&gt;Azure DevOps&lt;/a&gt;, such as ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dependency" src="../images/azure-boards-tips-operations-teams-2a.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While &lt;strong&gt;processing&lt;/strong&gt; work item A, we realize that we need help from another common services team to complete the support &lt;strong&gt;request&lt;/strong&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We clone our original work item (A) and set up a predecessor --&amp;gt; successor relationship to work item (B). This allows us to visualize the dependencies on our &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;strong&gt;@mention&lt;/strong&gt; the original requestor and team B, so that they are notified to determine if work item (B) is actionable. If yes, they pull it to their backlog, triage, and action as per their process.&lt;/li&gt;
&lt;li&gt;We then click on the &lt;strong&gt;Follow&lt;/strong&gt; work item feature and wait for work item (B) to move to &lt;code&gt;DONE&lt;/code&gt; state and/or to be &lt;strong&gt;@mentioned&lt;/strong&gt; by team B.  &lt;/li&gt;
&lt;li&gt;As we complete our work in parallel, we move work item (A) to &lt;code&gt;DONE&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;The original request is considered DONE once work item (A) and work item (B) are &lt;code&gt;DONE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Slice" src="../images/azure-boards-tips-operations-teams-2b.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Optimally we detect &lt;strong&gt;dependencies&lt;/strong&gt; while &lt;strong&gt;triaging&lt;/strong&gt; the support &lt;strong&gt;request&lt;/strong&gt;. If yes, we proactively slice the job into multiple work items. As before, we configure with predecessor and successor relationships and notify (&lt;strong&gt;@mention&lt;/strong&gt;) the stakeholders - but it is done &lt;strong&gt;proactively&lt;/strong&gt;, not reactively which is far more efficient and less stressful q;-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rework" src="../images/azure-boards-tips-operations-teams-2c.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last example shows that we never move a work-item back from &lt;code&gt;DONE&lt;/code&gt; state or in other words, we never drag a work item card from right to left on our &lt;strong&gt;Kanban&lt;/strong&gt; board. Instead, we create a new work-item (typically a clone of the original), fix the issue(s), rinse and repeat the dependencies.&lt;/p&gt;
&lt;p&gt;Yes, it is more work, but it allows us to track and visualize the actual workflow.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Consider an Operational Work Item Type&lt;/h1&gt;
&lt;p&gt;As shown below, we have all encountered the work item type from hell - the worst work item (bug) type I had the misfortune to work with had 200+ fields, multiple tabs, mandatory dependencies, and fields that no-one could explain. An inefficient and frustrating user experience!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Operational" src="../images/azure-boards-tips-operations-teams-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;strong&gt;operational support requests&lt;/strong&gt; we created a streamlined work item type, which auto-filled most fields during creation. Both the &lt;strong&gt;requestor&lt;/strong&gt; and  team dealing with the request, can enjoy a far more efficient process and digest the request and status &lt;strong&gt;at-a-glance&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Arrange your board&lt;/h1&gt;
&lt;p&gt;It is important that you fine tune your &lt;strong&gt;Board&lt;/strong&gt; to suit &lt;strong&gt;you&lt;/strong&gt; and deliver visual value to &lt;strong&gt;your&lt;/strong&gt; team and stakeholders. Here is what ours looks like...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Kanban Board" src="../images/azure-boards-tips-operations-teams-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;We use &lt;strong&gt;swimlanes&lt;/strong&gt; to map the requests we receive into a few well-known buckets, such as hair on &lt;code&gt;FIRE&lt;/code&gt;, &lt;code&gt;security risks&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; date, &lt;code&gt;Kaizen&lt;/code&gt;, &lt;code&gt;STANDARD&lt;/code&gt;, and &lt;code&gt;Braindumps&lt;/code&gt; (information sharing).&lt;/li&gt;
&lt;li&gt;We use the standard &lt;code&gt;top=highest-priority&lt;/code&gt; prioritization strategy when scanning the swimlanes and cards within each swimlane column.&lt;/li&gt;
&lt;li&gt;As shown, we still have to work on and improve our &lt;code&gt;work in progress&lt;/code&gt; (WIP) and associated WIP limits.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;Filters&lt;/code&gt;, as discussed in &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;STANDARD&lt;/code&gt; swimlane is where we live and breath operational support, with a &lt;strong&gt;Kanban&lt;/strong&gt; mindset and focus on Flow. We pull work from the right and prioritize work that has a clear flow from &lt;code&gt;NEW&lt;/code&gt; to &lt;code&gt;DONE&lt;/code&gt;, using every opportunity to identify inefficiencies and waste.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FIXED&lt;/code&gt; and &lt;code&gt;KAIZEN&lt;/code&gt; swimlanes is where we practice our &lt;strong&gt;Scrum&lt;/strong&gt; and &lt;strong&gt;Scaled Agile Framework (SAFe)&lt;/strong&gt; mindset, planning, prioritizing, and committing work to program increments and associated iterations.  &lt;/p&gt;
&lt;p&gt;We are using the right-mindset for the right job, at the right time, to continuously deliver value,&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use a visual dashboard&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dashboard" src="../images/azure-boards-tips-operations-teams-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like Kanban boards, as discussed in &lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt;, you can create visual Azure DevOps dashboards, to monitor and identify smoke, before you have a raging fire on your hands. Our blurred dashboard is one of my default startup pages in my &lt;strong&gt;Edge&lt;/strong&gt; browser and a page I continuously monitor during the day.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The tiles present an assortment of invaluable indicators. Anything in &lt;code&gt;red&lt;/code&gt; requires our attention, for example &lt;code&gt;orphaned&lt;/code&gt; work items (no parent), &lt;code&gt;blocked&lt;/code&gt; work items, closed (&lt;code&gt;timeless&lt;/code&gt;) work items without an iteration, and operational support work items that are missing required &lt;code&gt;tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The list of pipeline &lt;code&gt;status&lt;/code&gt; allows us to keep an eye on our maintenance pipelines and the lead- and cycle-time graphs visualize how have been doing over the past 30 days.&lt;/li&gt;
&lt;li&gt;There are a lot more gems on the board, some relevant to all of us, some interesting for our scrum master. There are also gems, such as a list of &lt;code&gt;my pull requests&lt;/code&gt; and &lt;code&gt;pull requests assigned to me&lt;/code&gt; allow me to be more proactive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with Kanban boards, take two steps back and ensure that the visual cues for &lt;strong&gt;you&lt;/strong&gt; and &lt;strong&gt;your team&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, remember the &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; which allows you to create a delivery board-type plan view combining multiple teams, backlogs, and iteration cadences. The delivery plan configuration of settings and styles is like the board, but it also allows you to collapse cards and show dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;
Dependencies are only shown for predecessor/successor links and dependency lines are only drawn if both the predecessor and successor cards are visible on the delivery plan view.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any other tips to share?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Azure Pipelines Blueprint QA Integration</title><link href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html" rel="alternate"></link><published>2022-12-09T00:00:00-08:00</published><updated>2022-12-09T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-09:/azure-pipelines-blueprint-qa-integration.html</id><summary type="html">&lt;p&gt;WHERE and HOW to integrate quality assurance into our OSS pipeline blueprints.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us review and how you can integrate your quality assurance (QA) scans in our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 application-type pipeline blueprints&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;High-altitude peek at the pipeline flow&lt;/h1&gt;
&lt;p&gt;The following illustration shows a typical continuous delivery pipeline, including continuous integration (CI), continuous delivery (CD), and supporting built-in automation and quality scans. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Flow" src="../images/azure-pipelines-blueprint-qa-integration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us unpack the pipeline, based on the &lt;strong&gt;azure-function&lt;/strong&gt; blueprint. Thanks to the magic of assembling the pipeline instance at queue, not definition time, the higher and release-bound stages only exist if the source branch matches the &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release*&lt;/code&gt; pattern. The last two stages in the lower, high-churn area are always part of the pipeline and the focus of this discussion.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build" src="../images/azure-pipelines-blueprint-qa-integration-0-build.png"&gt;&lt;/p&gt;
&lt;p&gt;The first stage is the continuous integration (CI), aka build, stage which is focused on &lt;strong&gt;building&lt;/strong&gt; the product and injecting the &lt;strong&gt;DevSecOps&lt;/strong&gt;, &lt;strong&gt;Quality Assurance (QA)&lt;/strong&gt; and &lt;strong&gt;building code&lt;/strong&gt; scans, managed by our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/boot-strap.yml"&gt;boot-strap&lt;/a&gt; template.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Delivery" src="../images/azure-pipelines-blueprint-qa-integration-0-deploy.png"&gt;&lt;/p&gt;
&lt;p&gt;Subsequent stages are all part of the continuous delivery (CD), aka release, pipeline. In our case we deploy to &lt;strong&gt;development&lt;/strong&gt; and &lt;strong&gt;system test&lt;/strong&gt; environments, followed by the above-mentioned built-in automation and quality scans, the &lt;strong&gt;security review&lt;/strong&gt; stage (which my colleague Kevin will discuss soon), and finally we deploy to &lt;strong&gt;staging&lt;/strong&gt; and &lt;strong&gt;production&lt;/strong&gt; environments. We use &lt;strong&gt;manual approvals&lt;/strong&gt; to guard &lt;strong&gt;system test&lt;/strong&gt;, &lt;strong&gt;Staging&lt;/strong&gt;, and &lt;strong&gt;production&lt;/strong&gt; environments, as well as a check for known and trusted templates for the &lt;strong&gt;system test&lt;/strong&gt; and higher environments.&lt;/p&gt;
&lt;p&gt;But, you probably want to know where and how to integrate your quality assurance scans.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Quality-Assurance (QA) extension points&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Delivery" src="../images/azure-pipelines-blueprint-qa-integration-0-qa.png"&gt;&lt;/p&gt;
&lt;p&gt;In a nutshell, you have two opportunities to influence and trigger quality assurance automation as part of your continuous delivery pipeline, based on the blueprints. &lt;/p&gt;
&lt;h2&gt;Continuous integration (CI) QA extension points?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CI Integration" src="../images/azure-pipelines-blueprint-qa-integration-2.png"&gt;&lt;/p&gt;
&lt;p&gt;You will find the first extension point in the &lt;em&gt;-ci.yml templates, for example &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/azure-function/azure-pipeline-azure-function-ci.yml"&gt;azure-pipeline-azure-function-ci.yml&lt;/a&gt;. This extension point is &lt;/em&gt;&lt;em&gt;blueprint&lt;/em&gt;* specific!&lt;/p&gt;
&lt;p&gt;Scroll down to line around line 95, where you will find this placeholder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# CONTINUOUS INTEGRATION TEST&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; task: DotNetCoreCLI@2&lt;/span&gt;
&lt;span class="c"&gt;      displayName: &amp;#39;Run Tests&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;      inputs:&lt;/span&gt;
&lt;span class="c"&gt;        command:    &amp;#39;test&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;        projects:   &amp;#39;**/*Tests/*&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;csproj&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;        arguments:  &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;--&lt;/span&gt;&lt;span class="c"&gt;configuration $(buildConfiguration) &lt;/span&gt;&lt;span class="nb"&gt;--&lt;/span&gt;&lt;span class="c"&gt;no&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;restore&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is the responsibility of the software delivery team to define &lt;strong&gt;consistent&lt;/strong&gt;, &lt;strong&gt;comprehensive&lt;/strong&gt;, and &lt;strong&gt;quality&lt;/strong&gt; continuous integration tests to empower us to automate the unit and regression testing while building the artifacts we want to deploy. You can extend the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/building-code/building-code.yml"&gt;building-code&lt;/a&gt; to validate the health of your unit tests by using a tool such as &lt;a href="https://stryker-mutator.io/"&gt;Stryker&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Continuous delivery (CD) QA extension points?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CD Integration" src="../images/azure-pipelines-blueprint-qa-integration-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The second extension, which runs in parallel to the security automation scans, can be found in the&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template.&lt;/p&gt;
&lt;p&gt;A few words of caution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This extension point is re-used and triggered by all blueprints!&lt;/li&gt;
&lt;li&gt;Any tasks running as part of this extension point must be &lt;strong&gt;stable&lt;/strong&gt; and &lt;strong&gt;reliable&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;This extension point must honour the &lt;code&gt;modeElite&lt;/code&gt; parameter, as discussed below.&lt;/li&gt;
&lt;li&gt;Validate your extensions using your feature branch and the &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=schema#define-a-repositories-resource"&gt;ref:&lt;/a&gt; parameter before committing any change to your master branch. Once in master, your extensions will affect &lt;strong&gt;all&lt;/strong&gt; blueprint-based pipelines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we peek into the template, we realize that we have two main sections. One that runs for lower (non-production) environments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# QA AUTOMATION FOR LOWER (NON&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;PROD) ENVIRONMENTS STAGE&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; ${{ if not(or(eq(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release&amp;#39;)&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; startsWith(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release/&amp;#39;))) }}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And another that runs for the higher (production) environments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# QA AUTOMATION FOR HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; ${{ if or(eq(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release&amp;#39;)&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; startsWith(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release/&amp;#39;)) }}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words, you can selectively run quality-assurance in all pipelines or only in pipelines that are based on the &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release*&lt;/code&gt; source code branches, destined for production.&lt;/p&gt;
&lt;p&gt;Within both these sections, you will find &lt;strong&gt;blueprint&lt;/strong&gt; specific sections, allowing you to configure your quality assurance automation scans for the selected blueprints only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
    - script: echo deal with qa scan relevant to azure-function application type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have decided WHEN and for WHICH blueprints you want to run your quality assurance automation scans, insert your tasks into the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template. You &lt;strong&gt;must&lt;/strong&gt; honour and deal with the &lt;code&gt;modeElite&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;modeElite = false&lt;/code&gt; your scans must &lt;strong&gt;succeed&lt;/strong&gt; or complete with a &lt;strong&gt;warning&lt;/strong&gt; - they are not allowed to throw an error, which would terminate the pipeline.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;modeElite = true&lt;/code&gt; your scans must &lt;strong&gt;succeed&lt;/strong&gt; or &lt;strong&gt;fail&lt;/strong&gt; - any failure must terminate the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is up to you whether you deal with &lt;code&gt;eliteMode&lt;/code&gt; in the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template or pass and deal with it in your automation scans.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That is, it for today folks! Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; if you have any questions or feedback. Support for comments will hopefully soon be glued onto our technical blog. Watch the space!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category></entry><entry><title>Azure Boards Tips</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips.html" rel="alternate"></link><published>2022-12-02T00:00:00-08:00</published><updated>2022-12-02T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-02:/azure-boards-tips.html</id><summary type="html">&lt;p&gt;A few useful "did you know" tips when using Azure Boards.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After observing users work with and occasionally struggle with the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;, it is time for me to share a few tips.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Select the right card reordering strategy&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="reordering" src="../images/azure-boards-tips-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The board supports two reorder behaviours when you drag and drop your cards. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reorder work items when changing columns and update the backlog accordingly. (Default)&lt;/li&gt;
&lt;li&gt;Follow backlog order when changing columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I &lt;strong&gt;groom&lt;/strong&gt; and maintain an &lt;strong&gt;ordered&lt;/strong&gt; (prioritised) backlog, I prefer the second behaviour. It drops the card according to the work items order within the backlog. In other words, if it has the highest priority on the backlog it will appear at the top of the column, no matter where you drop it. Once dropped, you can intentionally drag and drop the card within the column, which updates its order (priority)within the column and updates the backlog accordingly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOTO&lt;/strong&gt; &lt;code&gt;Configure team settings&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Card reordering&lt;/code&gt; and select the expected reorder strategy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Create visual cues on your board&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="cues" src="../images/azure-boards-tips-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maximize your &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; on your biggest monitor and take two steps back. Can you see visual cues for (1) cards flowing in swim lanes, (2) tags that pop out from the rest to indicate special metadata, such as PRIORITY, and (3) card colours that indicate their states?&lt;/p&gt;
&lt;p&gt;Even though the above board has been blurred, I notice nine (9) cards that are a &lt;code&gt;PRIORITY&lt;/code&gt; due to the tag colour, one (1) card that needs to be discussed &lt;code&gt;violet colour&lt;/code&gt;, two (2) cards that need to be groomed &lt;code&gt;salmon colour&lt;/code&gt;, and two (2) cards that are stale &lt;code&gt;orange colour&lt;/code&gt;. Oh, the yellow cards on the right tell me that their &lt;code&gt;iteration path&lt;/code&gt; has not yet been set.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; delivers powerful &lt;strong&gt;visual cue&lt;/strong&gt; features - use them! &lt;/p&gt;
&lt;p&gt;Please do not use the card colour styles to indicate who they have been assigned to. There are only ten (10) possible styles, and you are better off using the &lt;strong&gt;filter&lt;/strong&gt; to focus on your work - see below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOTO&lt;/strong&gt; &lt;code&gt;Configure team settings&lt;/code&gt;. 
Select &lt;code&gt;Tag colors&lt;/code&gt; and define special colours for special tags.&lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Styles&lt;/code&gt; and define up to ten (10) styles to stand out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an example of a rule that turns stale cards orange:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="style" src="../images/azure-boards-tips-7.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Use the filter!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="filter" src="../images/azure-boards-tips-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Board&lt;/a&gt; team implemented a great filter, allowing you to filter you board on &lt;code&gt;work item types&lt;/code&gt;, &lt;code&gt;assigned to&lt;/code&gt;, &lt;code&gt;Tags&lt;/code&gt;, &lt;code&gt;Iterations&lt;/code&gt;, &lt;code&gt;Area paths&lt;/code&gt;, and &lt;code&gt;Parent Work Items&lt;/code&gt; to reduce the noise and allow you to focus on what is important. &lt;/p&gt;
&lt;p&gt;For example, my board is filtered on cards assigned to &lt;code&gt;@Me&lt;/code&gt;, &lt;code&gt;Unassigned&lt;/code&gt;, and &lt;code&gt;my team's AD group&lt;/code&gt; so that I can focus on my work and keep an eye on the unassigned work. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;My work items are vanishing!?!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="states" src="../images/azure-boards-tips-6.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ensure that all work item possible states are mapped to one or more of the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Board&lt;/a&gt; columns. If a state is not mapped against a column, the card will literally &lt;strong&gt;vanish&lt;/strong&gt; from your board when its state changes to the unmapped state - the board is literally doing what &lt;strong&gt;you&lt;/strong&gt; have configured it to do.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOTO&lt;/strong&gt; &lt;code&gt;Configure team settings&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Columns&lt;/code&gt; and map the work item states for each column.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Add high-value fields on the card&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="fields" src="../images/azure-boards-tips-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last thing you want to do is click on a card on your Kanban board - &lt;strong&gt;WASTE&lt;/strong&gt;! Ensure you have the relevant fields mapped to your card so that in most cases you can simply look at the card to understand what to do next. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;GOTO &lt;code&gt;Configure team settings&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Fields&lt;/code&gt; and map up to 10 fields in the order they need to appear on your card.&lt;/p&gt;
&lt;p&gt;DO NOT check &lt;code&gt;Check if you want to display fields even if they are empty&lt;/code&gt; - &lt;strong&gt;WASTE&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Do not forget the Delivery Plan!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="delivery plan" src="../images/azure-boards-tips-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lastly, remember the &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; which allows you to create a delivery board-type plan view combining multiple teams, backlogs, and iteration cadences. The delivery plan configuration of settings and styles is similar to the board, but it also allow you to collapse cards and show dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;
Dependencies are only shown for predecessor/successor links and dependency lines are only drawn if both the predecessor and successor cards are visible on the delivery plan view.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any other tips to share?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Our open-source pipeline blueprints have landed!</title><link href="https://wsbctechnicalblog.github.io/our-open-source-pipeline-blueprints-have-landed.html" rel="alternate"></link><published>2022-11-08T00:00:00-08:00</published><updated>2022-11-08T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-11-08:/our-open-source-pipeline-blueprints-have-landed.html</id><summary type="html">&lt;p&gt;Lifting the hood of our consistent, standardized, and self-service based Azure Pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our group took huge step when we convinced our leadership to empower us to create this technical blog and share our technology journeys, learnings, and innovation with the community back in September 2020. Two years later, we finally managed to dot the &lt;code&gt;i's&lt;/code&gt; and cross the &lt;code&gt;t's&lt;/code&gt; and publish our &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;second-generation application-type blueprints&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It is hopefully the splash down of a long and innovative collaboration to improve our (community) use of &lt;a href="https://azure.microsoft.com/en-ca/products/devops/pipelines"&gt;Azure Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Splash down" src="../images/our-open-source-pipeline-blueprints-have-landed-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Peruse our &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;why bother and what are our nightmares and options?&lt;/a&gt; pipeline series for the complete story.&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;Constantly think about how you could be doing things better.&lt;/em&gt;” - Elon Musk&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Discussions&lt;/h1&gt;
&lt;p&gt;&lt;img alt="GitHub Discussions" src="../images/our-open-source-pipeline-blueprints-have-landed-0.png"&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;a href="https://github.com/orgs/WorkSafeBC-Common-Engineering/discussions"&gt;Discussions&lt;/a&gt; feature to collaborate with our team and/or the rest of the community. Please keep discussions focused on the application-type blueprints, communicate clearly, be open-minded, respectful, and empathetic. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - All discussions and comments are moderated. Users who do not adhere to the &lt;a href="https://docs.github.com/en/site-policy/acceptable-use-policies/github-acceptable-use-policies"&gt;GitHub Acceptable Use Policies&lt;/a&gt; will be blocked from our organization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Vibrant collaboration (over black holes and silos)&lt;/li&gt;
&lt;li&gt;Consistent, standardized, and secure continuous integration (CI) and delivery (CD) pipelines&lt;/li&gt;
&lt;li&gt;Empower software engineers with self-service automation&lt;/li&gt;
&lt;li&gt;Take advantage of every ounce of YAML &lt;a href="https://azure.microsoft.com/en-ca/products/devops/pipelines"&gt;Azure Pipelines&lt;/a&gt; features&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Repositories&lt;/h1&gt;
&lt;p&gt;&lt;img alt="GitHub Repos" src="../images/our-open-source-pipeline-blueprints-have-landed-1.png"&gt;&lt;/p&gt;
&lt;p&gt;We have published a total of eight (8) repositories, consisting of five (5) sample repositories and three (3) application-type blueprint core repositories.&lt;/p&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;p&gt;The five (5) sample repositories are used by our self-service automation to extract an application-type sample and inject it into the users repository. We reduced the &lt;a href="https://youtu.be/DWuDqCM1t6A"&gt;self-service cycle-time&lt;/a&gt; to less than 15 seconds ... a success story that we will cover in an upcoming self-service automation post. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;azure-function&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;generic-multiple-jobs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;generic-single-job&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;nuget-package&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;universal-artifact&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Core&lt;/h3&gt;
&lt;p&gt;The three (3) core repositories represent the heart of our blueprint-based &lt;a href="https://azure.microsoft.com/en-ca/products/devops/pipelines"&gt;Azure Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AzureDevOps.Automation.Pipeline.Configuration.v2&lt;/strong&gt; - Contains a configuration file for each solution using our blueprints, organized in a flat &lt;code&gt;deploy/&amp;lt;portfolio&amp;gt;/&amp;lt;product&amp;gt;-config.yml&lt;/code&gt; hierarchy. The configuration files are loaded and injected when the pipelines are queued.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/strong&gt; - Application-type blueprint and other templates. See &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;meet our second-generation app-type blueprints&lt;/a&gt; for details. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AzureDevOps.Automation.Pipeline.Toolbox.v2&lt;/strong&gt; - Scripts and config files that are loaded by the &lt;code&gt;boot-strap.yml&lt;/code&gt; template, using the &lt;code&gt;checkout:&lt;/code&gt; feature. See &lt;a href="https://wsbctechnicalblog.github.io/share-your-toolbox-with-pipelines.html"&gt;two ways to share your toolbox with your pipelines&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on the history and a peek under the hood of the blueprints, please peruse our technical blog &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;pipelines series&lt;/a&gt; and anything that is tagged with &lt;a href="https://wsbctechnicalblog.github.io/tag/pipelines.html"&gt;pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the templates contain a &lt;code&gt;__TODO_&amp;lt;ACTION&amp;gt;_&lt;/code&gt; placeholders to hide our internal implementation but maintain the blueprint template dependencies and integrity. You will need to search for &lt;code&gt;__TODO_&lt;/code&gt; and implement these &lt;code&gt;STUBBED&lt;/code&gt; templates yourself. Contact our team using the &lt;a href="https://github.com/orgs/WorkSafeBC-Common-Engineering/discussions"&gt;Discussions&lt;/a&gt; if you have any questions.&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Fork the repositories if you intend to make changes.&lt;/li&gt;
&lt;li&gt;Create or use a common engineering Azure DevOps project.&lt;/li&gt;
&lt;li&gt;Clone the repositories to your Azure DevOps project.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;__TODO_&lt;/code&gt; placeholders in all repositories and adjust to match your Azure DevOps Project(s) and services.&lt;/li&gt;
&lt;li&gt;Remember to contribute your changes back using a pull request.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;How to contribute&lt;/h1&gt;
&lt;p&gt;As mentioned, collaborate with us using the &lt;strong&gt;Discussions&lt;/strong&gt; feature and submit your blueprints changes through &lt;strong&gt;pull requests&lt;/strong&gt; which will be considered, reviewed, integrated, and synchronized by our common engineering open source team of passionate engineers.&lt;/p&gt;
&lt;p&gt;May the &lt;strong&gt;collaboration&lt;/strong&gt;, &lt;strong&gt;fun&lt;/strong&gt;, and &lt;strong&gt;innovation&lt;/strong&gt; begin!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="automation"></category><category term="oss"></category></entry><entry><title>Test Environment Management in a hybrid world</title><link href="https://wsbctechnicalblog.github.io/test-environment-management-in-a-hybrid-world.html" rel="alternate"></link><published>2022-10-12T00:00:00-07:00</published><updated>2022-10-12T00:00:00-07:00</updated><author><name>Shay Vannery</name></author><id>tag:wsbctechnicalblog.github.io,2022-10-12:/test-environment-management-in-a-hybrid-world.html</id><summary type="html">&lt;p&gt;Test Environments are a critical component of any software development lifecycle.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Correctly configured test environments can help detect bugs, errors &amp;amp; other issues early in a controlled setting; saving the development team time, effort, money and stress. And yet, test environments are often an after-thought. &lt;/p&gt;
&lt;h1&gt;Problems with Test Environment Management&lt;/h1&gt;
&lt;p&gt;Traditional test environment management is a cumbersome and labor-intensive process. In an organization with a complex technological landscape, this means keeping track of hundreds of applications, related configurations and attributes in complex spreadsheets. &lt;/p&gt;
&lt;p&gt;As static environments are dependent upon humans for upkeep &amp;amp; maintenance, these environments become inconsistent over time leading to less reliable test results. This sometimes leads to bugs &amp;amp; errors escaping to the Production environment undetected, despite running a battery of tests. Misconfigured environments also make it difficult to troubleshoot and pinpoint the source of bugs and errors. &lt;/p&gt;
&lt;p&gt;In complex organizations like ours, test environments are a shared resource; and can become a bottleneck. As specific applications and tests may require specific environment configurations, teams sometimes have to wait for test environments to become available. This unfortunately causes delays to program delivery or to teams skipping critical SDLC stages. Shared test environments usually have access and permission gates to ensure environment sanctity, but this further slows down the delivery cadence due to the added overhead of coordination, communication &amp;amp; compliance tracking. &lt;/p&gt;
&lt;p&gt;As we continue along our Cloud journey, we are becoming less and less dependent on physical, static environments that we have to maintain and manage. It is now possible to have entirely “ephemeral” short-lived environments that are instantly generated with specific code, configuration and conditions required for a specific purpose; and destroyed once the purpose is served. &lt;/p&gt;
&lt;h1&gt;Ephemeral Environments&lt;/h1&gt;
&lt;p&gt;An ephemeral environment is just a virtual replica of an environment. Infrastructure-as-Code (IaC) makes it possible to make environment creation an automated stage in a pipeline. For instance, an environment can be created with specific configurations, and specific test-data, triggered by a pull request. This environment can be staged and shared with other stakeholders like business/ UAT teams as desired, and destroyed once the tests have run successfully. This theoretically enables teams to have an infinite number of environments running in parallel, thereby eliminating the need for manual environment coordination, tracking &amp;amp; booking. Parallel independent test environments also enable us to eliminate access gates &amp;amp; manual approvals entirely; thereby speeding up program delivery. &lt;/p&gt;
&lt;p&gt;Since environments can be configured for any purpose, separate environments can be configured for QA tests, integration tests, load and performance tests, training, staging etc. in parallel as and when needed; we have the opportunity to sharply pare down a lengthy software development life cycle that runs in series due to infrastructure limitations.&lt;/p&gt;
&lt;p&gt;Ephemeral environments can also save an organization money, as the “environments” can be “turned off” when computing resources are not being utilized.&lt;/p&gt;
&lt;h1&gt;Configuration Management Database (CMDB)&lt;/h1&gt;
&lt;p&gt;In an ephemeral world, the importance of maintaining a single-source-of-truth increases even further. A purpose driven environment is only useful if it is correctly configured with the appropriate attributes and conditions. Most configuration management databases are just glorified spreadsheets; just as reliant upon manual upkeep and intervention. They are error-prone, difficult to scale and must be reviewed for consistency and accuracy. For a CMDB to be truly effective, it necessitates constant and ideally automated updates. Modern CMDB tools enable configuration changes to be automatically discovered and tracked across on premise servers and cloud infrastructure using scheduled scans.  &lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Test Environment Management is a critical component of modern day software delivery. If leveraged properly, using a combination of modern tools and the right processes, it can make a considerable difference in the quality and efficiency of the delivery life cycle. &lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="testing"></category><category term="release"></category></entry><entry><title>Built-in Quality</title><link href="https://wsbctechnicalblog.github.io/built-in-quality.html" rel="alternate"></link><published>2022-09-30T00:00:00-07:00</published><updated>2022-09-30T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-30:/built-in-quality.html</id><summary type="html">&lt;p&gt;Ensuring that our solutions meet quality guardrails and governance from ideation to deprecation.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Post-deployment analysis, audits and inspection does not improve quality - it is usually too late, resulting in spectacular failures. While we can learn from these failures, they tend to be expensive and reputation busters - remember, first impressions last!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Crash" src="/images/built-in-quality-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Quality must be built-in from the moment a team has an idea until the feature or product is deprecated. Also, it is the responsibility of all stakeholders, such as development, operations, architecture, security, and business. It should therefore come as no surprise that built-in quality is the North Star of our EDO Common Engineering &lt;a href="https://wsbctechnicalblog.github.io/ceremony-overview.html"&gt;Center of Enablement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me explore three (3) of many parts of the &lt;strong&gt;built-in quality&lt;/strong&gt; puzzle in our common engineering system.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Pull Request&lt;/h1&gt;
&lt;p&gt;I covered many of the myths of pull requests in &lt;a href="https://wsbctechnicalblog.github.io/branching-pull-request.html"&gt;why we use pull requests with our trunk-based branching strategies&lt;/a&gt; and like &lt;a href="X"&gt;Mike Kaufman's&lt;/a&gt; definition "&lt;em&gt;the pull request integration helps you to keep your main branch clean and detect issues before merging and making the code analysis part of the review process&lt;/em&gt;", in his &lt;a href="https://www.amazon.ca/Accelerate-DevOps-GitHub-software-performance/dp/1801813353"&gt;Accelerate DevOps with GitHub&lt;/a&gt; book. Used correctly, Pull Requests validate branch policies &lt;strong&gt;automatically&lt;/strong&gt;, trigger validation builds &lt;strong&gt;automatically&lt;/strong&gt;, and even merge to master &lt;strong&gt;automatically&lt;/strong&gt; if all guardrails are met. Any change to the feature branch associated with the Pull Request &lt;strong&gt;automatically&lt;/strong&gt; re-triggers the validations, ensuring that the engineering teams have a near real-time health check of their code and a potential merge with tha &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://sec.ch9.ms/ch9/151a/ba7ad81b-ed67-4dfc-a9fb-4ebf323e151a/CONN17T184_high.mp4"&gt;Azure DevOps Pull Requests&lt;/a&gt; are one piece of our arsenal to be pro- not re-active and help us raise the quality bar through automated validations and a pair of human eyeballs, if and only if required. When we change our &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;Azure Pipeline blueprints&lt;/a&gt;, for example, stakeholders from common engineering, operations, security, and/or site reliability engineering are looped in if the change impacts their area of responsibility.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Pull Requests are autonomous stewards of our &lt;a href="TBD"&gt;Guardrails&lt;/a&gt; and complement our peer-programming, by creating awareness of our engineering efforts across differing engineering disciplines. Fosters &lt;strong&gt;resilience&lt;/strong&gt;!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Application-type CI/CD Blueprints&lt;/h1&gt;
&lt;p&gt;One of our great innovations, the &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;Azure Pipeline blueprints&lt;/a&gt;, deliver &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;standardization&lt;/strong&gt;, foster &lt;strong&gt;collaboration&lt;/strong&gt;, all of which contribute to the built-in quality. A neat side effect is that they also enable &lt;strong&gt;self-service automation&lt;/strong&gt;, removing mind-numbing and error prone processes - it is a &lt;strong&gt;win&lt;/strong&gt;:&lt;strong&gt;win&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Template" src="/images/built-in-quality-5.png"&gt;&lt;/p&gt;
&lt;p&gt;With the blueprints, made up of a collection of re-usable templates, most of our big rocks of continuous innovation, enablement, and built-in quality are ticked off in our continuous integration (CI) and delivery (CD) pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Watch this space. We will open source our blueprints on GitHub soon!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Pathfinders&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Soldier" src="/images/built-in-quality-3.png"&gt;&lt;/p&gt;
&lt;p&gt;In the armed forces pathfinders are specialized troops inserted to perform a reconnaissance to gather information, setup and operate drop zones. They share their specialized skills and gather intelligence.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Engineer" src="/images/built-in-quality-4.png"&gt;&lt;/p&gt;
&lt;p&gt;In our world, we insert our engineers to software delivery teams to share their expertise, steward Guardrails, gather information on challenges and how we can improve our common engineering ecosystem to empower all engineers.&lt;/p&gt;
&lt;p&gt;By understanding our stakeholders and sharing our learnings with the engineers, we ensure that we continuously improve the built-in quality of both our common engineering system and our products. It is another &lt;strong&gt;win&lt;/strong&gt;:&lt;strong&gt;win&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HINT&lt;/strong&gt;, &lt;strong&gt;HINT&lt;/strong&gt; ... I hope that our Quality Assurance engineers will create a follow-on post to explore how we build-in and validate quality through our quality assurance services. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Pencil" src="/images/built-in-quality-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Watch the space for more in-depth content on &lt;strong&gt;built-in quality&lt;/strong&gt; and our engineering &lt;strong&gt;practices&lt;/strong&gt;. Our software development practice lead is busy sharpening his blogging pencils q;-) &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Servant stewardship of guardrails</title><link href="https://wsbctechnicalblog.github.io/servant-stewardship-of-guardrails.html" rel="alternate"></link><published>2022-09-28T00:00:00-07:00</published><updated>2022-09-28T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-28:/servant-stewardship-of-guardrails.html</id><summary type="html">&lt;p&gt;You can chose between governance, policies, or standards, or collaborate with us through guardrails.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We covered this topic before in &lt;a href="/governance-manifestos-guardrails.html"&gt;can we enact governance through engineering-friendly manifestos and guardrails?&lt;/a&gt; ... but recent experiences emphasise the need for a quick refresher. First, let us compare the difference between governance, policies, standards, and what we refer to as guardrails.&lt;/p&gt;
&lt;p&gt;Listed from most to least formal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Governance&lt;/strong&gt; - "&lt;em&gt;Is the process of interactions through the laws, norms, power or language of an organized society over a social system (family, tribe, formal or informal organization, a territory or across territories).&lt;/em&gt;" - &lt;a href="https://en.wikipedia.org/wiki/Governance"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Policy&lt;/strong&gt; - "&lt;em&gt;Is a deliberate system of guidelines to guide decisions and achieve rational outcomes. A policy is a statement of intent and is implemented as a procedure or protocol. Policies are generally adopted by a governance body within an organization&lt;/em&gt;" - &lt;a href="https://en.wikipedia.org/wiki/Policy"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Standards&lt;/strong&gt; - "&lt;em&gt;An established norm or requirement for a repeatable technical task which is applied to a common and repeated use of rules, conditions, guidelines or characteristics for products or related processes and production methods, and related management systems practices.&lt;/em&gt;" - &lt;a href="https://en.wikipedia.org/wiki/Technical_standard"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have work with engineers, especially those with an Agile and healthy DevOps mindset, pushing the boundaries through experimentation and innovation is common. Governance, policies, and standards are frowned upon as they generally &lt;strong&gt;restrict&lt;/strong&gt; (opposite of empower) rapid innovation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What about Guardrails?&lt;/h1&gt;
&lt;p&gt;Our vision is to &lt;strong&gt;Empower engineering through consistent and standardized processes, practices, and products, within guardrails.&lt;/strong&gt; We collaborate with experts from different disciplines in our centers of enablement to identify, introduce, and support processes, engineering principles, and products and create &lt;strong&gt;guardrails&lt;/strong&gt;. We do not enforce but recommend guardrails to ensure that we reduce the risk of non-compliance and last-minute "stop the bus" decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;guardrail&lt;/strong&gt; is a less formal version of technical standards which are &lt;strong&gt;recommended&lt;/strong&gt;, not &lt;strong&gt;enforced&lt;/strong&gt;. The basic content describes the &lt;strong&gt;WHAT&lt;/strong&gt; the guardrail is about, &lt;strong&gt;WHY&lt;/strong&gt; is it important, and &lt;strong&gt;HOW&lt;/strong&gt; to apply it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I cover guardrails, I ask engineers to visualize a bridge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bridge" src="../images/servant-stewardship-of-guardrails-1.png"&gt;&lt;/p&gt;
&lt;p&gt;We are your servant stewards of guardrails to support you to cross the bridge safely and swiftly. If, however, you decide to climb on or climb over the guardrails, you are on your own. In other words, do not call us  if someone's hair is on fire, you are sitting in an infamous 2AM-call, or a failed security review stops you from deploying a mission critical release.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WS.Infrastructure?!?&lt;/h1&gt;
&lt;p&gt;I recently received an email with a request to migrate a repository named &lt;code&gt;WS.Infrastructure&lt;/code&gt; to another Azure DevOps project. Here is what went through my mind as I read the email:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hmmm, what does the TLA (two lettered acronym) &lt;strong&gt;WS&lt;/strong&gt; mean? &lt;strong&gt;W&lt;/strong&gt;illy &lt;strong&gt;S&lt;/strong&gt;chaub, &lt;strong&gt;W&lt;/strong&gt;indows &lt;strong&gt;S&lt;/strong&gt;ervice, &lt;strong&gt;W&lt;/strong&gt;ater &lt;strong&gt;S&lt;/strong&gt;tation, ...?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Let me peek into the repository and look at the &lt;strong&gt;Infrastructure&lt;/strong&gt; stuff ... but there is no typical infrastructure stuff. A platter of long-lived feature branches with NuGet packages focused on infrastructure.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Had the creator of the repository reviewed our naming guidelines and branching strategy guardrails, we would have a deployable master branch and a user-friendly repository name. For example &lt;code&gt;CrossCutting.NuGet.Infrastructure&lt;/code&gt; would be a lot more intuitive.&lt;/p&gt;
&lt;p&gt;This is a very simple example of not operating within our guardrails, which &lt;strong&gt;WASTES&lt;/strong&gt; a lot of valuable engineering time on guess-work, creates an &lt;strong&gt;ERROR-PRONE&lt;/strong&gt; bridge crossing, and does not empower engineers who have to takeover the artifacts when the creators move on to new adventures.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part11.html" rel="alternate"></link><published>2022-09-21T00:00:00-07:00</published><updated>2022-09-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-21:/yaml-pipelines-part11.html</id><summary type="html">&lt;p&gt;A glimpse at our OSS progress and how we use the same pipeline in and out of pull requests.&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;Open Sourcing our Application-type CI/CD Blueprints&lt;/h2&gt;
&lt;p&gt;We are on the home stretch to open source our v2 application-type CI/CD blueprints. In fact, we only have one last optimization story enabler to complete, before we will start setting up an OSS repository in GitHub. Thank you for your patience &lt;strong&gt;Said&lt;/strong&gt; - we are close!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Using the same Application-type CI/CD Blueprints as Pull Request (PR) Validation Build&lt;/h2&gt;
&lt;h3&gt;suppressCD parameter&lt;/h3&gt;
&lt;p&gt;Why do we want to suppress the continuous delivery (CD) part of our CI/CD blueprint-based pipelines?&lt;/p&gt;
&lt;p&gt;Pipeline is triggered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By self-service automation, when the configuration is not yet configured.&lt;/li&gt;
&lt;li&gt;By development team that is not ready to deploy yet.&lt;/li&gt;
&lt;li&gt;As a validation &lt;strong&gt;build&lt;/strong&gt; within a pull request, where you only want the continuous integration (CI) to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our &lt;code&gt;*start.yml&lt;/code&gt; template we have the optional &lt;strong&gt;suppressCD&lt;/strong&gt; parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="sr"&gt;/__101__/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PORTFOLIO__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PRODUCT__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;publishFolder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_FOLDERNAME__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;engineering&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;immediate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;being&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When set to &lt;strong&gt;true&lt;/strong&gt;, this part of the &lt;em&gt;control.yml is &lt;/em&gt;&lt;em&gt;not&lt;/em&gt;* processed. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result the CD part of the pipeline will not be injected at queue time.&lt;/p&gt;
&lt;h3&gt;Suppress CD within PR&lt;/h3&gt;
&lt;p&gt;The optional parameter works well, until you are ready to deploy your solution and you set &lt;code&gt;suppressCD = false&lt;/code&gt;. In this case the validation build in a pull request would trigger both the continuous integration (CI) and continuous delivery (CD) pipeline phases. &lt;/p&gt;
&lt;p&gt;This explains this code snippet at the end of the &lt;code&gt;*-CI.yml&lt;/code&gt; template, which suppresses the CD part if the pipeline was triggered by a pull request ("merge"):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suppressed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;validation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builds&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Validation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Suppression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Alert&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="magic" src="/images/yaml-pipelines-part11.png"&gt;&lt;/p&gt;
&lt;p&gt;It goes hand-in-hand with the second half of the conditional statement after the suppressCD check, as above. The source branch name will be &lt;strong&gt;merge&lt;/strong&gt; if the build originated as a pull request merge validation build.&lt;/p&gt;
&lt;p&gt;A simple, but powerful trick!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; | Part 11 |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Accelerate DevOps with GitHub Book</title><link href="https://wsbctechnicalblog.github.io/accelerate-devops-with-github-book.html" rel="alternate"></link><published>2022-09-16T00:00:00-07:00</published><updated>2022-09-16T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-16:/accelerate-devops-with-github-book.html</id><summary type="html">&lt;p&gt;"Enhance software delivery performance with GitHub Issues, Projects, Actions, and Advanced Security" - Michael Kaufman&lt;/p&gt;</summary><content type="html">&lt;p&gt;In our book &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; I not only emphasize my support for &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan's definition of DevOps&lt;/a&gt; as the "Union of people, process, and products to enable continuous delivery of value to our end users", but also that &lt;strong&gt;products&lt;/strong&gt; represents only 5% of the DevOps pie. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Accelerate DevOps with GitHub Book&lt;/h1&gt;
&lt;p&gt;So, when I received a copy of Michael's book "Accelerate DevOps with GitHub" to review, I was skeptical. Why bother with another technical &lt;strong&gt;product&lt;/strong&gt;-based book, which would be out-of-date by the time I get to the end? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I could not have been more wrong!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although the book is based on GitHub (&lt;strong&gt;product&lt;/strong&gt; 5%), it shares experience and information that applies to the other core pieces of the DevOps pie - &lt;strong&gt;process&lt;/strong&gt; (15%), and &lt;strong&gt;people&lt;/strong&gt; (80%) in these six parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lean Management and Collaboration&lt;/li&gt;
&lt;li&gt;Engineering DevOps Practices&lt;/li&gt;
&lt;li&gt;Release with Confidence&lt;/li&gt;
&lt;li&gt;Software Architecture&lt;/li&gt;
&lt;li&gt;Lean Product Management&lt;/li&gt;
&lt;li&gt;GitHub for your Enterprise &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The book has become one of my invaluable references for topics such as &lt;em&gt;Metrics that matter&lt;/em&gt;, &lt;em&gt;OKRs&lt;/em&gt; (objectives, key, results), &lt;em&gt;YAML basics&lt;/em&gt;, &lt;em&gt;Feature Flags&lt;/em&gt;, &lt;em&gt;Trunk-based Development&lt;/em&gt;, &lt;em&gt;working with Git&lt;/em&gt;, &lt;em&gt;Code Security&lt;/em&gt;, &lt;em&gt;Testing&lt;/em&gt;, and much more. What caught my eye throughout the book is Michael's focus on &lt;strong&gt;keeping it simple&lt;/strong&gt; - love it!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Meet the author - Michael Kaufman&lt;/h1&gt;
&lt;p&gt;We are pleased to announce that Michael will join us at our &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/"&gt;DevOps Vancouver BC Canada Meetup&lt;/a&gt; at the end of November to talk about his book. For him it will be 4AM in the morning, demonstrating his passion for DevOps and commitment to share his knowledge.&lt;/p&gt;
&lt;p&gt;Here is an outline of his meetup session:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accelerate DevOps – What I learned writing a book about GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I was asked to write a book about GitHub, I first came up with an outline that had an introduction to DevOps with nearly 200 pages and then covered all GitHub Features in a logical order. “Nobody wants to read a 200-page introduction” was the phrase of my editor that made me completely rethink what I wanted to write about and how I should structure it.&lt;/p&gt;
&lt;p&gt;In this session I want to share with you my learnings and explain why I chose the new structure for my book. I will explain how you can see the book as a practical step-by-step guide to a data-driven DevOps transformation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Michael Kaufman" src="../images/book-accelerate-devops-github-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Michael Kaufmann believes that developers and engineers can be happy and productive at work. He loves DevOps, GitHub, Azure, and modern work.&lt;/p&gt;
&lt;p&gt;Microsoft has awarded him with the title Microsoft Regional Director (RD) and Microsoft Most Valuable Professional (MVP) – the latter in the category DevOps and GitHub.&lt;/p&gt;
&lt;p&gt;Michael is also the founder and CEO of Xpirit Germany. Xpirit is a Microsoft Consulting firm that helps its customers become digital leaders by building Engineering Cultures and supporting them in their Cloud &amp;amp; DevOps transformation Xpirit is part of Xebia, a full-service digital consulting company working on a worldwide ambition.&lt;/p&gt;
&lt;p&gt;Michael shares his knowledge in books, trainings, and as a frequent speaker at international conferences.&lt;/p&gt;
&lt;p&gt;Bookmark &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/"&gt;DevOps Vancouver BC Canada Meetup&lt;/a&gt; and keep an eye for the official event announcement. I will come back and update this post as soon as we have a published link to the event.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Find book here:&lt;/strong&gt;
- &lt;a href="https://www.amazon.ca/Accelerate-DevOps-GitHub-software-performance/dp/1801813353"&gt;Amazon Canada&lt;/a&gt;
- &lt;a href="https://www.amazon.com/Accelerate-DevOps-GitHub-software-performance/dp/1801813353"&gt;Amazon US&lt;/a&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="book"></category><category term="devops"></category></entry><entry><title>Positive energy goes a long way to encourage innovation</title><link href="https://wsbctechnicalblog.github.io/be-positive.html" rel="alternate"></link><published>2022-09-09T00:00:00-07:00</published><updated>2022-09-09T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-09:/be-positive.html</id><summary type="html">&lt;p&gt;"Every person in your company is a vector. Your progress is determined by the sum of all vectors." - Elon Musk&lt;/p&gt;</summary><content type="html">&lt;p&gt;After observing a lot of technical leads and mentors over the past 35+ years of bits &amp;amp; bytes adventures, as well as observing those they influence, I have compiled my short list of top and least effective qualities. Take it with a pinch of salt, read between the lines, and remember it is my list - my views.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Inspiration and leadership are based on a pull, not push model&lt;/h1&gt;
&lt;p&gt;When you approach the world with a "my way or the highway" mindset, directing, inspecting, monitoring, supervising, and in extreme cases micromanaging - the least effective level of leadership. Some common leadership anti-pattern signs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Questioning everything&lt;/strong&gt; - there is a fine line (tone) between being curious and questioning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dominating discussions&lt;/strong&gt; - not allowing your team to self-manage and have vibrant discussions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Micromanaging&lt;/strong&gt; - double and triple checking everything, creating a &lt;strong&gt;no-trust&lt;/strong&gt; environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Directing from behind&lt;/strong&gt; - aka command and control.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point triggered an interesting discussion with &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Andre&lt;/a&gt;. Leaders who subscribe to &lt;strong&gt;servant leadership&lt;/strong&gt;, are &lt;strong&gt;leading&lt;/strong&gt; from behind, putting people first, and striving to empower everyone. &lt;/p&gt;
&lt;p&gt;I witnessed true leadership in the early 80's when I served with a humble, but phenomenal leader in the military. He was always part of the team, usually observing, encouraging, and delegating at the front, at times supporting everyone at the back carrying extra equipment on long marches. His secret sauce was to empower everyone in our unit to take responsibility and make decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a huge difference between &lt;strong&gt;directing&lt;/strong&gt; and &lt;strong&gt;leading&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;You cannot &lt;strong&gt;push&lt;/strong&gt; as a leader, you have to &lt;strong&gt;lead&lt;/strong&gt;, &lt;strong&gt;encourage&lt;/strong&gt;, and &lt;strong&gt;pull&lt;/strong&gt; the team to towards a common &lt;strong&gt;goal&lt;/strong&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Negative energy sucks the life out of innovation&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Negative" src="/images/be-positive-2.png"&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Someone who is negative or continuously criticizes everything and everyone, sucks the passion and energy out of a room like a raging fire consumes oxygen. What remains is a lonely lead in a toxic environment, surrounded by uncooperative engineers, and declining support for their goals,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove &lt;strong&gt;toxic&lt;/strong&gt; influence and noise from your Twitter, LinkedIn, and other collaboration  channels today!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No matter how dire the situation, if you lead with &lt;strong&gt;passion&lt;/strong&gt; and &lt;strong&gt;commitment&lt;/strong&gt;, you will find the support you need to move forward and be successful.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;You are but a piece of the bigger puzzle - Union of PEOPLE!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;"DevOps is the union of people, process, and products to enable continuous delivery of value to our end users." = &lt;a href="https://devblogs.microsoft.com/devops/what-is-devops-donovan/"&gt;Donovan Brown&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both Elon's quote, see above, and Donovan's definition of DevOps highlights the importance of the collective, the Borg, the people, the &lt;strong&gt;team&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A true leader extends &lt;strong&gt;trust&lt;/strong&gt; and &lt;strong&gt;empowers&lt;/strong&gt; every member of the team to self-organize, self-manage, and to make decisions. This ensures that the team and its members become self-sufficient and that they do not miss the leader if absent short- or long-term.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;I am the beginning, the end, the one who is many. I am the Borg.&lt;/em&gt;", the Borg.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Lead by example&lt;/h1&gt;
&lt;p&gt;Leaders who inspire me have the following qualities (and more):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;They are &lt;strong&gt;curious&lt;/strong&gt; and &lt;strong&gt;listen&lt;/strong&gt; to their team and stakeholders to be informed on every individual, understand what can be improved, and to learn what they do not know.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They &lt;strong&gt;get their hands dirty&lt;/strong&gt; and are part of the team, especially when the infamous 2AM production incident call is received.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They &lt;strong&gt;deliver on promises&lt;/strong&gt;. Making promises and not delivering will rapidly erode the team's morale and support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They &lt;strong&gt;value people&lt;/strong&gt; and their &lt;strong&gt;work-life balance&lt;/strong&gt;. Any discussion that touches on the work-life balance or a team member's welfare takes priority above everything else.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;TRUST!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trust" src="/images/be-positive-3.png"&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a great quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Building trust and taking care of your people is a mechanism for clarity." - L. David Marquet
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Trust&lt;/strong&gt; is earned through factors such as psychological safety, transparency, understanding of each other, fairness, involvement in decision-making, and a clear vision. &lt;/p&gt;
&lt;p&gt;A few ideas to make your trust account grow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a safe space for everyone to speak up and share their feedback. &lt;/li&gt;
&lt;li&gt;Explain decisions and directives.&lt;/li&gt;
&lt;li&gt;Inspire creativity.&lt;/li&gt;
&lt;li&gt;Foster work:life balance.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Challenge your ecosystem&lt;/h1&gt;
&lt;p&gt;Last, but not least, you must challenge everyone to continuously learn, innovate, learn from failures, innovate, strive to be a tiny bit better tomorrow. Our common engineering ecosystem uses a platter of motivators and challenges to keep our engineers on their toes. &lt;/p&gt;
&lt;p&gt;For example, I just challenged all our engineers with the following:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Challenge" src="/images/be-positive-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What are your experiences and thoughts on this topic?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Visualizing work item dependencies in Azure Boards</title><link href="https://wsbctechnicalblog.github.io/azure-devops-dependencies.html" rel="alternate"></link><published>2022-09-07T00:00:00-07:00</published><updated>2022-09-07T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-07:/azure-devops-dependencies.html</id><summary type="html">&lt;p&gt;We want to plan and manage dependencies across multiple teams areas, providing awareness of the dependencies in a simple way.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post summarizes the findings from our working group that focused on finding better, simpler, and more reliable ways to plan, manage, and track dependencies in product development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rocket" src="../images/azure-devops-dependencies-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am using a hypothetical scenario of two teams in our &lt;strong&gt;Delivery Teams&lt;/strong&gt; Azure DevOps project who have been tasked to build a rocket with two stages and boosters. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stage 1 must be built first and includes a SpaceX Raptor 1 engine. &lt;/li&gt;
&lt;li&gt;Stage 2 is built next and includes a SpaceX Raptor 2 engines for Vacuum conditions. &lt;/li&gt;
&lt;li&gt;The boosters with SpaceX Merlin engines are built last. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All engines are supplied by the &lt;strong&gt;Build Engines&lt;/strong&gt; team in another &lt;strong&gt;Common Services&lt;/strong&gt; Azure DevOps project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Team" src="../images/azure-devops-dependencies-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When creating the team backlogs, we use the &lt;strong&gt;predecessor&lt;/strong&gt; and &lt;strong&gt;successor&lt;/strong&gt; work item link types to craft the dependency tree and guide the teams through a turbulence free development phase. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Links" src="../images/azure-devops-dependencies-11.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown above, the 1-stage Feature (489406) work item has two &lt;strong&gt;successor&lt;/strong&gt; links, defining that 1-stage must be completed first. It also has a &lt;strong&gt;predecessor&lt;/strong&gt; link to the Raptor v1 engine, which must be available before the 1-stage can be completed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Refer to &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/link-type-reference?view=azure-devops"&gt;Reference guide for link types used in Azure DevOps and Azure Boards&lt;/a&gt; for details on link types. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Delivery Team 1 - Using Dependency Query&lt;/h1&gt;
&lt;p&gt;Delivery team 1 has opted to create one Story Enabler work item for the Raptor v1 engine they need from the Build Engines team and link it to the &lt;strong&gt;1-stage&lt;/strong&gt; Feature (489406), as shown above. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - The delivery team &lt;strong&gt;1&lt;/strong&gt; creates the dependency work item, collaborates with the common services &lt;strong&gt;Engines&lt;/strong&gt; team, and once the requirements are clearly defined the work item is &lt;strong&gt;pulled&lt;/strong&gt; by the common services team to their backlog. Teams only create work items on their own backlogs and never &lt;strong&gt;push&lt;/strong&gt; work items to other backlogs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog 1" src="../images/azure-devops-dependencies-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at their team backlog there is no visual evidence of the Raptor v1 engine dependency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query" src="../images/azure-devops-dependencies-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team uses a &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/wiql-syntax?view=azure-devops"&gt;WIQL Query&lt;/a&gt; to track and manage their and other team dependencies.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query Edit" src="../images/azure-devops-dependencies-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The dependency query is using the &lt;strong&gt;Work Items and direct links&lt;/strong&gt; query type and looks for &lt;strong&gt;predecessor&lt;/strong&gt; link type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;QUERY-BASED DEPENDENCY TRACKING&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their backlog and board only show what they, as team 1, are responsible to deliver.&lt;/li&gt;
&lt;li&gt;There is no noise or &lt;strong&gt;waste&lt;/strong&gt; on their Kanban board.&lt;/li&gt;
&lt;li&gt;Their dependency query has a consistent look &amp;amp; feel as their backlog view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their backlog and board show no visual cue of the Raptor v1 engine dependency. 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Delivery Team 2 - Using Dependency Work Items&lt;/h1&gt;
&lt;p&gt;Delivery team 2 has opted to create a dependency work item (489410) and a Story Enabler (489417) work item for the Raptor v2 engine they need from the Build Engines team. The dependency work item (489410) is used as a placeholder work item on the team's backlog linked to the Story Enabler (489417) which is pulled by the Engines Common Services team to their backlog. They use the same placeholder+dependency pair process to add the Booster's dependency on Merlin engines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog 2" src="../images/azure-devops-dependencies-6.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at team 2's backlog, we note the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dependency work item (489410) for v2 Raptor engine is on the backlog, linked as a child to 2-stage Feature (489407).&lt;/li&gt;
&lt;li&gt;Raptor v2 engine Story Enabler (489417) is gone - pulled to the Engine team's backlog.&lt;/li&gt;
&lt;li&gt;Dependency work item (489411) for Merlin engine is on the backlog, linked as a child to Booster Feature (489408).&lt;/li&gt;
&lt;li&gt;Merlin engine Story Enabler (489419) is still on the team 2 backlog, which implies that the common services Engine team is not able to commit to the work item yet.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board 2" src="../images/azure-devops-dependencies-7.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Switching to the &lt;strong&gt;Feature&lt;/strong&gt; board view, we have a visual cue on both the 2-stage and Booster cards that they have dependencies. Users can click on the dependencies to get more detail and to follow the dependency links.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dependency Extension" src="../images/azure-devops-dependencies-10.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team also uses the optional &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; extension to get visual information on their dependencies, timelines, and risks. The extension is not for the faint hearted but delivers phenomenal dependency details when used correctly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CARD-BASED DEPENDENCY TRACKING&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their backlog and board show what they &lt;strong&gt;and&lt;/strong&gt; common services teams are responsible to deliver.&lt;/li&gt;
&lt;li&gt;Their backlog and board show visual cues of the Raptor v2 and Merlin engine dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need a custom dependency work item type.&lt;/li&gt;
&lt;li&gt;There is noise and &lt;strong&gt;waste&lt;/strong&gt; on their Kanban board for work their team is not responsible for.&lt;/li&gt;
&lt;li&gt;While common services team are unable to commit, we have two (often confusing) cards on the backlog for each dependency.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="NOTE" src="../images/azure-devops-dependencies-13.png"&gt;&lt;/p&gt;
&lt;p&gt;Personally I prefer how team 1 deals with their dependencies. It is simple, it avoids the noise and complexity of custom and multiple dependency cards and can be combined with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; extension or the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plans&lt;/a&gt; to create visual cues.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Common Services Team - Building Rockets&lt;/h1&gt;
&lt;p&gt;Let us switch focus to the common services Azure DevOps project and the &lt;strong&gt;Engines&lt;/strong&gt; team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog" src="../images/azure-devops-dependencies-12.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at their backlog we see the two Raptor engine Story Enablers (489417, 489418) dependencies and a Spike. They could use &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/add-tags-to-work-items?view=azure-devops"&gt;Tags&lt;/a&gt; to create visual cues that two of the work items are dependencies, or they too could consider a custom Dependency work item type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query" src="../images/azure-devops-dependencies-8.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using a similar WIQL query as the delivery team 2, as above, the Engines team visualize and manage their dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Delivery Plan" src="../images/azure-devops-dependencies-9.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last, but not least the team uses a &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; to visualize their Feature and Requirement backlogs, as well as those of the teams they serve. The Delivery Plan provides an interactive visual view of multiple team backlogs and the dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - The Delivery Plan only draws a dependency line for dependencies which has both the successor and predecessor cards visually shown on the plan.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Other extensions to consider include the &lt;a href="https://marketplace.visualstudio.com/items?itemName=solidify.solidify-scale"&gt;@Scale&lt;/a&gt; extension, which delivers a program board on steroids.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Summary of recommended approach&lt;/h1&gt;
&lt;p&gt;&lt;img alt="NOTE" src="../images/azure-devops-dependencies-13.png"&gt;&lt;/p&gt;
&lt;p&gt;Personally I prefer how the &lt;strong&gt;Delivery Team 1 - Using Dependency Query&lt;/strong&gt; defines their dependencies. Here is a high-altitude overview of their process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delivery team identifies a dependency X (Merlin engine) in feature A (booster).&lt;/li&gt;
&lt;li&gt;Delivery team opens feature A and runs dependency &lt;a href="https://marketplace.visualstudio.com/items?itemName=mohitbagra.witoneclickactions"&gt;one-click&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Merlin engine is the &lt;strong&gt;predecessor&lt;/strong&gt; (must be done first)&lt;/li&gt;
&lt;li&gt;Booster is the &lt;strong&gt;successor&lt;/strong&gt; (must be done after Merlin engine)&lt;/li&gt;
&lt;li&gt;One-click creates work item X&lt;/li&gt;
&lt;li&gt;Adds &lt;strong&gt;parent-child&lt;/strong&gt; to Feature (parent) &lt;/li&gt;
&lt;li&gt;Adds &lt;strong&gt;successor/predecessor&lt;/strong&gt; link to Feature (successor)&lt;/li&gt;
&lt;li&gt;Team collaborates with common services &lt;strong&gt;Engines&lt;/strong&gt; team to define the WHAT, WHY, and WHEN in X.&lt;/li&gt;
&lt;li&gt;Actionable description.&lt;/li&gt;
&lt;li&gt;Realistic acceptance criteria.&lt;/li&gt;
&lt;li&gt;Information on WHEN and priority.&lt;/li&gt;
&lt;li&gt;When common services team is ready to commit, they pull the work item X to their backlog.&lt;/li&gt;
&lt;li&gt;Everyone should "Follow" the work item to be notified of changes.&lt;/li&gt;
&lt;li&gt;Common services optionally changes work item to be parented to one of their Features.&lt;/li&gt;
&lt;li&gt;At this time the work item X vanishes off the backlog as a work item on delivery side.&lt;/li&gt;
&lt;li&gt;Once assigned to an iteration, the work item X will appear on the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; showing the delivery and common services teams.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;SIMPLE&lt;/strong&gt; and no duplicate or confusing cards.&lt;/p&gt;
&lt;p&gt;Everyone then uses the dependency queries we covered herein, and/or &lt;a href="https://marketplace.visualstudio.com/items?itemName=solidify.solidify-scale"&gt;@Scale&lt;/a&gt;, and/or &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt;, and/or &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; to visualize extension.&lt;/p&gt;
&lt;p&gt;How are you dealing with dependencies in Azure DevOps? &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category></entry><entry><title>Trunk-based branching strategy without the bells and whistles</title><link href="https://wsbctechnicalblog.github.io/branching-trunk-based.html" rel="alternate"></link><published>2022-09-02T00:00:00-07:00</published><updated>2022-09-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-02:/branching-trunk-based.html</id><summary type="html">&lt;p&gt;Keeping it simple and avoiding the soul quenching politics&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from the &lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt; virtual chat, where we discussed &lt;a href="/pull-requests-friend.html"&gt;pull requests&lt;/a&gt; and briefly touched on trunk-based development. This article is based on a script I prepared for an upcoming innovation workshop, where we will lift the bonnet to explore our blueprints and&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Why" src="/images/branching-trunk-based-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is one of many branching strategies, our recommended strategy, and the norm with our &lt;a href="./yaml-pipelines-part10.html"&gt;application-type blueprint&lt;/a&gt;-based pipelines to enable &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Reasons" src="/images/branching-trunk-based-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By merging &lt;strong&gt;small&lt;/strong&gt; and &lt;strong&gt;frequent&lt;/strong&gt; updates (short-lived feature branches) to a core &lt;strong&gt;trunk&lt;/strong&gt;, master, or main branch, we streamline merging, integration of code, enable continuous integrations, automated tests, continuous code reviews, and automated validations. We guard the trunk to maintain a &lt;strong&gt;green&lt;/strong&gt; source of truth, ready to deploy at any commit.&lt;/p&gt;
&lt;p&gt;Trunk-based development is a proven and common practice among high-performing DevOps teams, often complemented by feature flags and/or ring-deployments to deploy continuously and release on demand – our future vision. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trunk" src="/images/branching-trunk-based-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We start with a trunk, that has a hypothetical version of MAJOR 0, MINOR 1, and PATCH 0, aka &lt;strong&gt;0.1.0&lt;/strong&gt;. At some point we create a feature branch to build a new feature and another feature branch to address a bug.&lt;/p&gt;
&lt;p&gt;When we are ready to deploy we merge our changes back to the &lt;strong&gt;stable&lt;/strong&gt; trunk. As discussed in &lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;, we are stopped by the branch policies that demand a code review by one or more reviewers, closed comments, linked work items, a clean validation build, and healthy code and security scans.&lt;/p&gt;
&lt;p&gt;We could, but we will not, argue that with trunk-based development we should be able to commit directly to the &lt;strong&gt;trunk&lt;/strong&gt;. Theoretically &lt;strong&gt;yes&lt;/strong&gt; - if we are part of a high-performance and high-trust team we can commit &lt;strong&gt;directly&lt;/strong&gt; to the trunk, however, in my 35+ years of engineering I have had the privilege of working for such a team two or three times.have a small, mature, and experienced team that &lt;strong&gt;trusts&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;When our code has been proven GREEN the changes are merged to the trunk and versioned 0.1.1, followed by the bug fix changes, versioned 0.1.2.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Release branch&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trunk+Release" src="/images/branching-trunk-based-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we are ready to deploy, we create a label and a release branch from the label, which triggers our continuous integration and delivery pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hotfix-1" src="/images/branching-trunk-based-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After we deploy to production the unthinkable happens ... we detect a bug! &lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;not&lt;/strong&gt; serious, we add it to our technical debt and to be fixed with the next feature work.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Hotfix - Option 1&lt;/h1&gt;
&lt;p&gt;If &lt;strong&gt;serious&lt;/strong&gt;, we create a HOTFIX on the trunk and merge it back to the release branch, which in turn triggers another production deploy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that you can perform the merge to trunk and the release branch with one pull request, using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=1ESLighthouseEng.pr-multi-cherry-pick"&gt;PR Multi-Cherry-Pick&lt;/a&gt; extension, developed by the Microsoft Office team. This tool allows you to use the git cherry-pick operation to apply changes to multiple branches.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Hotfix - Option 2&lt;/h1&gt;
&lt;p&gt;Another option is to apply the hotfix to the release branch and then merge it back to &lt;strong&gt;trunk&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hotfix-2" src="/images/branching-trunk-based-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which option is better? You decide and you pick your strategy!&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;trunk-based&lt;/strong&gt; branching strategy is straight-forward, well-suited for the 2-pizza sized product team, and lays a solid foundation for our quest for continuous delivery and release on demand. &lt;/p&gt;
&lt;p&gt;Remember, as with everything else, keep it &lt;strong&gt;SIMPLE&lt;/strong&gt;!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="version-control"></category></entry><entry><title>Automation and the great unknown</title><link href="https://wsbctechnicalblog.github.io/automation-task-group-learning.html" rel="alternate"></link><published>2022-08-05T00:00:00-07:00</published><updated>2022-08-05T00:00:00-07:00</updated><author><name>Daniel Broderick</name></author><id>tag:wsbctechnicalblog.github.io,2022-08-05:/automation-task-group-learning.html</id><summary type="html">&lt;p&gt;Inadvertently restricting access to thousands of pipelines with a simple automated task group insertion.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The problem: How can the security team run all the tasks like the scans they need to run? &lt;/p&gt;
&lt;p&gt;The idea was simple inject an empty security review task group into the release pipelines, the security team can update the task group whenever they please. Providing a central location for the security items. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Simple idea" src="../images/automation-task-group-learning-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Automation to the rescue&lt;/h1&gt;
&lt;p&gt;The automation was written, fired off by a YAML pipeline and the empty task group was injected. Over 3000 pipelines were updated. The injection automation runs weekly to inject the task group to any new pipelines that may be created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Automation 2 the rescue" src="../images/automation-task-group-learning-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the REST API all that had to be done was create the JSON payload and send it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
    &amp;quot;environment&amp;quot;: {},
    &amp;quot;refName&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;enabled&amp;quot;: true,
    &amp;quot;alwaysRun&amp;quot;: true,
    &amp;quot;taskId&amp;quot;: &amp;quot;$TaskGroupID&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.*&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;$TaskGroupName&amp;quot;,
    &amp;quot;continueOnError&amp;quot;: true,
    &amp;quot;timeoutInMinutes&amp;quot;: 0,
    &amp;quot;retryCountOnTaskFailure&amp;quot;: 0,
    &amp;quot;definitionType&amp;quot;: &amp;quot;metaTask&amp;quot;,
    &amp;quot;overrideInputs&amp;quot;: {},
    &amp;quot;condition&amp;quot;: &amp;quot;succeededOrFailed()&amp;quot;,
    &amp;quot;inputs&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Job done – or so it was thought.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Users cannot edit&lt;/h2&gt;
&lt;p&gt;The team got a call a few weeks later that some users could no longer edit their releases, there was an error saving due to an issue with the security review stage.&lt;/p&gt;
&lt;p&gt;How strange? Users could edit before, a quick check of the permissions yield no results as to why. &lt;/p&gt;
&lt;p&gt;After working with a user we discovered the steps that allowed editing and steps to invoke the error. &lt;/p&gt;
&lt;p&gt;What was not known at this stage was why. What was causing this? The security review task group was working, the release pipeline was working. Saving – nope.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Exporting and comparing&lt;/h2&gt;
&lt;p&gt;The pipeline JSON definition was exported before and after changes that enabled users to edit – low and behold a variable that the security team were using in one of the tasks was a parameter in the task group. This was not present when injecting the empty security task group.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;The automation was not injecting this parameter into the definition. This caused the error when certain users saved. The automation was Injecting an empty task group though this task group was no longer empty. &lt;/p&gt;
&lt;p&gt;The automation needed to reflect this. &lt;/p&gt;
&lt;p&gt;A quick edit of the automation and users are back in business.&lt;/p&gt;
&lt;p&gt;Below one can see the input field that is required when using the REST API.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;environment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;taskId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$TaskGroupID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$TaskGroupName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;refName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alwaysRun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;continueOnError&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timeoutInMinutes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;retryCountOnTaskFailure&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;definitionType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;metaTask&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;overrideInputs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;succeededOrFailed()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;inputs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;variableName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;variableValue&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Lesson learnt&lt;/strong&gt;, anytime a new variable or parameter is required the automation will have to be modified to add this input in.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Back to happy customers!!!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy Customers" src="../images/automation-task-group-learning-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This goes to show that automation and improvement is a continuous process. It would have been easy to abandon the automation and go back to what works. With any automation there will be bumps in the road however it’s important to navigate past these. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy automation" src="../images/automation-task-group-learning-4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Happy automation!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="learning"></category><category term="tips"></category><category term="azure-devops"></category></entry><entry><title>Automation Mayhem and Angst is normal</title><link href="https://wsbctechnicalblog.github.io/automation-churn-and-angst.html" rel="alternate"></link><published>2022-07-29T00:00:00-07:00</published><updated>2022-07-29T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-07-29:/automation-churn-and-angst.html</id><summary type="html">&lt;p&gt;Doing a manual and mind-numbing task twice or more? Automate!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The simplest form of automation replaces meek, rudimentary, and manual tasks with digitized processes. While automation is part of the deoxyribonucleic acid (DNA) of a healthy DevOps mindset, we should continue to “strive to innovate and improve beyond repeatable processes and frameworks” – &lt;a href="https://www.tactec.ca/devops-core-values"&gt;Core DevOps Values&lt;/a&gt;. Therefore, instead of focusing on examples of automation we have introduces to help us maintain 2000+ continuous delivery pipelines and associates services, I will focus on the emotional side of automation in this brief post. The automation samples and “gotchas” will follow soon.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Angst Chart" src="../images/automation-churn-and-angst-3.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Brace yourself for instability and churn&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Churn" src="../images/automation-churn-and-angst-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After we identify, analyze, and prioritize a manual and mind-numbing task we &lt;strong&gt;BUILD&lt;/strong&gt; our automation code, as shown in the “Automation Angst” illustration. After &lt;strong&gt;BUILD&lt;/strong&gt;, follows &lt;strong&gt;VALIDATE&lt;/strong&gt;, during which we validate the automation script, the pre- and post-automation state, and the overall outcome of the automation exercise. &lt;/p&gt;
&lt;p&gt;There is usually an initial spike of churn as the automation &lt;strong&gt;failures&lt;/strong&gt; due to unexpected outliers or when we realize that a task that is super easy for a human is a not suited for our binary machines.&lt;/p&gt;
&lt;p&gt;What follows are a few less dramatic spikes as we revise and fine &lt;strong&gt;TUNE&lt;/strong&gt; the automation. There are new feature requests, triggered by new improvement ideas, refactoring, and revisions to reduce technical debt – until we finally make the &lt;strong&gt;GO-FOR-LAUNCH&lt;/strong&gt; call.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Turn it off" src="../images/automation-churn-and-angst-3.png"&gt;&lt;/p&gt;
&lt;p&gt;This type of Microsoft Teams chat message is not uncommon as you flip the automation from dormant to active and it is tempting to disable the automation as requested. However, to be able to fine tune the automation, I urge you not to flip the switch back to dormant. Instead work with the stakeholders, especially the agitated ones, to continuously improve the automation – there is never a good time to action the automation churn! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNINGS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remain critical&lt;/strong&gt; to identify and promote the automation that add value, and to deprecate unviable automation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not despair&lt;/strong&gt; when automation takes time and effort to fine-tune and integrate into our existing processes. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;“Angst” that will never really go away&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Angst" src="../images/automation-churn-and-angst-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The major turbulence we experience while working on process automation is the “Angst” when we realize the potential of the automation on our operational environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Oops" src="../images/automation-churn-and-angst-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As highlighted in the "Automation Angst” illustration the fear of &lt;strong&gt;FAILURE&lt;/strong&gt; spikes at the start and declines gradually as we make progress with fine-tuning and continuous improvement of our automation. The Angst is normal - embrace it as your guardian of built-in quality and embrace the continuous &lt;strong&gt;FAILURES&lt;/strong&gt; to advance your automation.&lt;/p&gt;
&lt;p&gt;While I have no recipe for sleepless nights where you mull over thousands of lines of config-as-code, wake up in a sweat dreaming of scrum masters and engineers pounding on your door after breaking their pipeline, or pondering over when to click the launch button, I can reassure you that my entire team is still intact and promoting automation as a pivotal pillar. At some point you simply have to click on the &lt;strong&gt;ENTER&lt;/strong&gt; button and watch the action q-;) &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNINGS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FAILURE is an option here. If things are not failing, you are not innovating enough.&lt;/strong&gt; - Elon Musk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gradually increase the blast radius&lt;/strong&gt;. Use feature flags or other strategies to gradually increase the area of impact (blast radius) of your automation. The &lt;strong&gt;big bang&lt;/strong&gt; strategy is not only bold, but mote t minimizes your chance to continuously automate, observe, learn, and refine.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What are your automation experiences?&lt;/h1&gt;
&lt;p&gt;What are your automation stories? I am looking for the good, the bad, and the ugly 😊 Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/wpschaub/"&gt;LinkedIN&lt;/a&gt; until we enable the commenting feature below.&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="learning"></category></entry><entry><title>The WHY, HOW, and WHAT of our technical blog</title><link href="https://wsbctechnicalblog.github.io/demo-technical-blog-1.html" rel="alternate"></link><published>2022-06-22T00:00:00-07:00</published><updated>2022-06-22T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-06-22:/demo-technical-blog-1.html</id><summary type="html">&lt;p&gt;Creating a demo pull request and post for our technical blog demo.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been invited to share our insights into how we are experimenting and present our WorkSafeBC technical blog. To show how we moved from ideation to action, gather feedback, and connect with the audience I decided to create a pull request - which will be turned into an actual blog post by the time you read this. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY did we create this blog?&lt;/h1&gt;
&lt;p&gt;This blog is based on an initiative that started as an idea at our March 2021 InnoFest to explore how we can enter the open-source world, collaborate, and share our cutting-edge engineering practices, products, and innovation such as our application-type CI/CD pipeline blueprints, and show the rest of the world that WorkSafeBC is a phenomenal place for engineers to work for.&lt;/p&gt;
&lt;p&gt;We introduced the idea with the following slide (pulled from the original InnoFest 2-min pitch) ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY 1" src="../images/demo-technical-blog-1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;... and suggested that users unfamiliar with WorkSafeBC often wonder if a &lt;a href="/can-government-agencies-be-innovative.html"&gt;government agency can be innovative&lt;/a&gt;. Our innovation may as well have been hiding in a black hole - the community ( YOU ) had no insight into the exciting stuff we were dabbling with.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY 2" src="../images/demo-technical-blog-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;For example, we have shared all our insights and learnings of Azure Pipelines in the detailed &lt;a href="https://wsbctechnicalblog.github.io/tag/pipelines.html"&gt;tag:pipelines&lt;/a&gt; posts.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;HOW did we create this blog?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="How we did it" src="../images/demo-technical-blog-1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;We opted to host the project on GitHub as an open-source project using open-source tools, such as &lt;a href="https://get.foundation/"&gt;Bricks based on Zurb Foundation&lt;/a&gt; and the &lt;a href="https://bricks.stackexchange.com/users/311/sam-hocevar"&gt;Bricks by Sam Hocevar&lt;/a&gt; and &lt;/p&gt;
&lt;p&gt;The blog is based on informal-style technical content, using engineering-friendly markup language, and relying on the pull request workflow for collaboration, review, and revisions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each pull request is reviewed by at least two reviewers, typically a subject matter expert and a manager. &lt;/li&gt;
&lt;li&gt;Once reviewed, the pull request is approved, which triggers the GitHub actions to publish to the live blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is a collaboration channel that has demonstrated to the rest of the world that WorkSafeBC is an innovative and cool company to work for.  &lt;/p&gt;
&lt;p&gt;We have been mentioned in the &lt;strong&gt;Top Stories&lt;/strong&gt; by the &lt;a href="https://devblogs.microsoft.com/devops/"&gt;Microsoft DevOps&lt;/a&gt; channel a few times and have been approached by engineers from around the world through our personal Twitter and LinkedIn channels.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHAT is next?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Next steps" src="../images/demo-technical-blog-1-4.png"&gt;&lt;/p&gt;
&lt;p&gt;What the demo highlights is that what started as a simple idea, using simple tooling, requires more tender loving care and an investment to make it an attractive and successful platform. &lt;/p&gt;
&lt;p&gt;We must &lt;strong&gt;enable comments&lt;/strong&gt; to encourage collaboration and capture feedback, and &lt;strong&gt;enable telemetry&lt;/strong&gt; so that we can track overall traffic and analyze popular content.&lt;/p&gt;
&lt;p&gt;Lastly, a branding guidance and alignment tweak would not only improve your user experience but align our blog with the rest of our organization in terms of the look-and-feel.&lt;/p&gt;
&lt;p&gt;Hope you enjoyed the demo. Thank you for listening / reading.&lt;/p&gt;</content><category term="Events"></category><category term="event"></category><category term="learning"></category></entry><entry><title>Stop the email overload!</title><link href="https://wsbctechnicalblog.github.io/stop-the-email-hell.html" rel="alternate"></link><published>2022-05-27T00:00:00-07:00</published><updated>2022-05-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-05-27:/stop-the-email-hell.html</id><summary type="html">&lt;p&gt;Our quest to optimize email and associated WASTE&lt;/p&gt;</summary><content type="html">&lt;p&gt;Email was born around 1978 and has been the backbone of communication ever since. Unfortunately, when you start to &lt;a href="/optimize-and-track-emails.html"&gt;track&lt;/a&gt; your actual email volume or consider options to &lt;a href="/optimize-and-avoid-emails.html"&gt;optimize&lt;/a&gt; after a well deserved vacation, you realize that enough is enough. Similar to &lt;a href="/stop-the-meeting-hell.html"&gt;stop the meeting overload&lt;/a&gt; we will discuss strategies to optimize your use of email and reduce the amount of email and &lt;strong&gt;WASTE&lt;/strong&gt; thereof.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt;? Well, I receive an average of 154 emails per working day. I have time to read about 20%, skimming the rest as I context switch between meetings, work, and breaks. &lt;strong&gt;NOT&lt;/strong&gt; efficient!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Communication" src="../images/stop-the-email-hell-0.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;A few email anti-patterns to avoid at all costs!&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Communication" src="../images/stop-the-email-hell-1.png"&gt;&lt;/p&gt;
&lt;p&gt;As discussed in &lt;a href="TBD"&gt;Navigating DevOps through Waterfalls&lt;/a&gt;, act 4 STORM - Building a better Boat, communication complexity becomes unproductive and &lt;strong&gt;WASTE&lt;/strong&gt;ful as the number of members in the collaboration thread increases. Looking at the simple illustration above, it is evident that five or more members introduces duplication, split (separate) discussions, inherent quality issues, a flood of emails that impedes our productivity.&lt;/p&gt;
&lt;p&gt;Let us look at some email practices you should avoid to drastically reduce the amount of collaboration &lt;strong&gt;noise&lt;/strong&gt; for your colleagues.&lt;/p&gt;
&lt;h2&gt;The duplicate and split email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Duplicate and Split" src="../images/stop-the-email-hell-2.png"&gt;&lt;/p&gt;
&lt;p&gt;When you send an email to a shared mailbox, as shown above, you may inadvertently send an email to Willy in his private mailbox and an email through the shared mailbox. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Duplicate and Split Noise" src="../images/stop-the-email-hell-2b.png"&gt;&lt;/p&gt;
&lt;p&gt;A minor annoyance, but also an unfortunate opportunity to create a split in collaboration, or worse duplication of effort if the team reacts to the message in the shared mailbox and Willy to the message in his mailbox.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #1&lt;/strong&gt; - **When addressing an email to a shared mailbox, do not add individual users of the same team!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The planetary email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Planetary" src="../images/stop-the-email-hell-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Avoid sending an email to hundreds of users using broad distribution lists without discouraging reply-all.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Planetary Noise" src="../images/stop-the-email-hell-3b.png"&gt;&lt;/p&gt;
&lt;p&gt;If only a fraction of recipients "reply all" you inadvertently create a brushfire of split collaboration threads and an inbox from hell for everyone. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #2&lt;/strong&gt; - Think twice before "replying all" to an email with one or more distribution lists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The meta morphed email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Problem X" src="../images/stop-the-email-hell-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Recognize this type of email response? "&lt;em&gt;Thank you for your help. I have another question ...&lt;/em&gt;" - completely unrelated to the email subject. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Problem Y with Subject X" src="../images/stop-the-email-hell-4b.png"&gt;&lt;/p&gt;
&lt;p&gt;Not only is this confusing but creates a major headache when searching for an email with the solution to the subsequent discussions months later. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #3&lt;/strong&gt; - Stick to the subject! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The empty subject email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Empty Subject" src="../images/stop-the-email-hell-5.png"&gt;&lt;/p&gt;
&lt;p&gt;It happens to all of us, but please try not to send an email with no subject.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty Subject" src="../images/stop-the-email-hell-5b.png"&gt;&lt;/p&gt;
&lt;p&gt;Not only is it bad email etiquette, but it breaks email rules and workflow automation, forcing the recipient to read the email to get an idea of context and priority.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #4&lt;/strong&gt; - Use meaningful and actionable email subjects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The fire and forget email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Fire and forget" src="../images/stop-the-email-hell-6.png"&gt;&lt;/p&gt;
&lt;p&gt;The last example is one that I have started to intentionally deprioritize, and I urge everyone to do the same. User encounters an issue, for example, user is unable to deploy latest release, and decides to send us an email to ask for help. For good measure user also loops in management, after which user disappears (coffee break, lunch, or end-of-day).&lt;/p&gt;
&lt;p&gt;The result is a firestorm with everyone wanting to understand the issue, resolution, and status. Instead of focus on finding the root cause and a speedy remediation, we are shrouded by stress, context switching, duplication of effort, and a work:life imbalance that will taint any future vibrant collaboration.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;A few collaboration strategies that work for us&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Options" src="../images/stop-the-email-hell-7.png"&gt;&lt;/p&gt;
&lt;p&gt;As a team, we looked at three options. (1) No more email, (2) less email, and (3) using different collaboration channels. We opted for a hybrid option, generating less email, and switching to Microsoft Teams for all our team internal and immediate stakeholder collaboration. Essentially we are trying to replicate the in-person environment where we used to have a quick chat on a whiteboard, made our own notes (OneNote, Notepad, ...), and seldom used email to collaborate with stakeholders in our line of sight.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Some users love, some hate email. Some users love, some hate Teams. It is a personal preference - find the sweat spot for your &lt;strong&gt;team&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are three of our core collaboration guardrails:&lt;/p&gt;
&lt;h2&gt;Use email for broad one-way notifications&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Options" src="../images/stop-the-email-hell-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Use email for broad notifications, clearly stipulating that recipient(s) should &lt;strong&gt;not&lt;/strong&gt; reply-all.  &lt;/p&gt;
&lt;h2&gt;Use email where process dictates&lt;/h2&gt;
&lt;p&gt;Use email where an existing process dictates the use of email or is optimized for the use of emails.&lt;/p&gt;
&lt;h2&gt;Use teams collaboration for everything else&lt;/h2&gt;
&lt;p&gt;For everything else, use another collaboration channel, such as Microsoft Teams. &lt;/p&gt;
&lt;p&gt;Email promotes costly context switches. Send email, wait for response, switch context, focus on something else, response email notification, and another context switch is triggered. Interruptive, costly, and stressful!&lt;/p&gt;
&lt;p&gt;In comparison Microsoft Teams gives use a cue if you are available, busy, or out of the office. Gone are the guessing days and impatiently waiting for a reply. Instead, we can ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a chat to exchange ideas, share video to add virtual (v) face to vFace social cues, and share our desktops or a virtual whiteboard to inject visual feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Use named Team Chats and Teams Channels to focus collaboration on a specific context and improve discoverability of shared content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Easily share files, data, and knowledge, stored on SharePoint.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Share files by reference, not a copy thereof. This allows everyone part of the collaboration to revise and observe the content real-time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search for discussions and content in one place. Gone are the days of brittle and time-consuming Outlook searches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate Microsoft Teams with Microsoft PowerApps, Azure DevOps, and other 3rd party products, to create an efficient collaboration ecosystem that empower us to move forward &lt;strong&gt;together&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope you enjoyed this quick chat. Good luck optimizing your &lt;a href="/stop-the-meeting-hell.html"&gt;meetings&lt;/a&gt; and &lt;strong&gt;collaboration&lt;/strong&gt; - focus on what is important!&lt;/p&gt;
&lt;p&gt;Please share your thoughts on email, Microsoft Teams, and other collaboration solutions.&lt;/p&gt;</content><category term="Posts"></category><category term="eliminate-waste"></category></entry><entry><title>Can government agencies be innovative?</title><link href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html" rel="alternate"></link><published>2022-05-24T13:13:00-07:00</published><updated>2022-05-24T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-05-24:/can-government-agencies-be-innovative.html</id><summary type="html">&lt;p&gt;How WorkSafeBC changed my perception.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was a sunny day in July 2018, when I found myself standing on Westminster Highway, gazing at the WorkSafeBC entrance sign. &lt;/p&gt;
&lt;p&gt;&lt;img alt="WSBC" src="../images/can-government-agencies-be-innovative-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Performing the 4x4x4x4 breathing technique, I was calming myself down to be focused.  After years of working as a consultant at government agencies, including in Bahrain and Kuwait, I was at two minds whether to show up for the interview at the provincial agency. To me, government contracts smell of rigid management, mind-numbing processes, regulations, lackluster and non-innovative engineering – right?&lt;/p&gt;
&lt;p&gt;I started my career as an electrical engineer and fell in love with programming when I was introduced to debugging assembler code at the hardware level and spent my weekends tinkering with my &lt;a href="https://en.wikipedia.org/wiki/Zilog_Z80"&gt;ZX Spectrum&lt;/a&gt; at home in the early 80s. My career was a mind-blowing adventure of more processes and products that I can remember, such as Assembler, Basic  , Cobol, C++, C#, Fortran, and PL/M programming, analysis, design, research, and management, with a strong focus on being an individual contributor – an engineer at heart.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Engineering is the closest thing to magic that exists in the world." ~ Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In early 2018, after a phenomenal 9-year stint at Microsoft, I was burnt-out. My passion for technology, energy, and health were at an all-time low. I opted for a personal sabbatical and switched off all electronic devices for 6 months, focusing on my family, the stunning beauty of British Columbia, and a pile of unread books.&lt;/p&gt;
&lt;p&gt;By July, I started to get restless as my passion for bits and bytes began to reboot my systems and   working on my work:life balance. At the same time, I got a call from a local vendor, looking for an experienced Scrum Master for WorkSafeBC. I walked past the entrance sign, up the parking lot hill, walked past the concrete complex, and signed in at the main reception.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agent9" src="../images/can-government-agencies-be-innovative-2.png"&gt; &lt;/p&gt;
&lt;p&gt;The interview was not what I expected. Instead of formality, I enjoyed a behavioural and informal interview. I met Agent of Change #9 from &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; for the first time, as well as a manager that not only contradicted my perception of government organizations but pivoted from the Scrum Master role to Cloud Systems Engineering – very Agile! On my way back to the main reception I was mesmerized by a poster with WorkSafeBC’s noble vision: “&lt;em&gt;British Columbians free from workplace injury, disease, and death.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;Less than a month later, I joined the Cloud Operations team and found myself in an environment buzzing with an Agile and emerging DevOps mindset, and one that had an open ear for many of the improvement ideas I shared with engineering and management.  I became an advocate for simplicity, chiseling at complex, expensive and manual processes, expecting to be shown the main entrance door sooner than later. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Simplicity is a great virtue, but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.” – Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast forward 1.5 years and I joined the organization full-time. Other than benefits and payroll, nothing changed  . I was empowered to start the common engineering idea on the side of my desk, continuously experimenting, innovating, and collaborating across the organization   through informal working groups and communities of practice. &lt;/p&gt;
&lt;p&gt;Agile and DevOps transformations, Scaled Agile Framework (SPC), SAFe DevOps, Azure and Azure DevOps services, Visual Studio, PowerShell, continuous integration and delivery automation, shift-left, shift-right, guardrail stewardship, collaborate on manifestos, working groups, dojos, communities of practice, centers of enablement, config-as-code, pipeline-as-code, automating everything automatable, reducing waste, optimizing meetings, writing blogs, articles, and even co-authoring a book was a sprinkle of the amazing exposure to people, process, and products I enjoyed during this period.  &lt;/p&gt;
&lt;p&gt;I also had the privilege of completing the emerging leadership program. What I learned about myself during the program was both thrilling and chilling. I was flabbergasted by how others viewed me. I received lots of positive feedback, but it was the candid feedback that revealed unsettling challenges that had played a major role in my 2018 burnout - my obsession to be a perfectionist, my inability to achieve a work/life balance, and my acute allergy for command&amp;amp;control micro-managers. During the program, and especially in my final assignment, I highlighted the need for more collaboration, trust, the willingness to fail, and to create a fun working environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Failure is an option here. If things are not failing, you are not innovating enough." - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast-forward another 1.5 years, I find myself working with colleagues who are embracing Agile, continuously working on its DevOps mindset, moving from a project to a product approach, inspiring continuous learning, continuous improvement, continuous experimentation, and encouraging everyone to embrace failure as an opportunity to reflect and learn. Vibrant collaboration, forward-thinking, and innovation have become the norm. It is gratifying to see leadership   not only actioning industry trends and driving the bottom line, but actively listening to its people. &lt;/p&gt;
&lt;p&gt;Today, I am leading the now official Enterprise Development and Operations (EDO) Common Engineering team, filled with passionate, exceptionally smart, and down-to-earth engineers, collaborating with management that walks-the-talk, trusts, and supports our drive for simplicity, consistency, security, empowerment, and unrestricted collaboration to continue to build connections. Around me, I have observed     a growth in servant leaders, who appreciate the value of people and the importance of collaboration and empowering everyone to become a leader. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Bosses demand respect, delegate and hold people accountable. Leaders collaborate and hold themselves accountable.” – Willy-Peter Schaub&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are an empowered team, focused and serious when we must be, brainwashed by SpaceX and Elon’s infamous quotes (my doing), always reminding each other of our quest for a healthy work:life balance and the importance of having fun.  You can peruse Why are we a (the) place to work for? to get an insight into our team.&lt;/p&gt;
&lt;p&gt;I recently stood at the same spot, looking at the entrance sign. It dawned on me that a mere 3.5 years has passed. The phenomenal change is not only exciting but obliterates any doubts and concerns I had when I was calming myself down for my interview. I see how our innovation and technology work not only supports our overall  organizational vision but will take us places we may not have dreamt of.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“As a leader I want to serve and protect my team, and encourage and empower everyone’s creativity, passion, purpose, and strengths. I want to leave an empowered team and not be missed.” – Willy-Peter Schaub&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="journal"></category><category term="learning"></category></entry><entry><title>Improving DORA metrics</title><link href="https://wsbctechnicalblog.github.io/improving-dora-metrics.html" rel="alternate"></link><published>2022-04-29T13:13:00-07:00</published><updated>2022-04-29T13:13:00-07:00</updated><author><name>Shay Vannery</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-29:/improving-dora-metrics.html</id><summary type="html">&lt;p&gt;We would like to plan how to track and empower engineering to increase deployment frequency, and reduce lead time for change, MTTR, and change failure rates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Streamlining software delivery can seem deceptively simple. Technology consultants (like myself) are quick to tout the trending new tool or methodology that can magically solve all of an organization’s woes. Though tools, automations and practices can help to a large extent, there is no alternative to holistically and critically examining one’s own organizational practices and value streams.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;1.0 Map the value stream for each application&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;value stream&lt;/strong&gt; is the set of actions that take place to add value to a customer from the initial request through realization of value by the customer.&lt;/p&gt;
&lt;p&gt;Every organization has a somewhat unique set of actions that must occur to get a user story from the Ideation phase into the hands of the end-user. This value stream has likely been developed over many years, by several groups of people with differing priorities. It is imperative to examine said value stream periodically to ensure it is free of redundancies; and updated to better fit present-day organizational priorities and goals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Tip&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Applications come in different shapes, sizes and forms. It is worthwhile to re-examine your value streams on an application/ component level; as what works for a highly-visible, complex end-user facing application might be overkill for a simpler, back-end service or job.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;2.0 Measure baseline metrics for each application &amp;amp; set SMART goals&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;What is not measured, cannot be improved.&lt;/strong&gt; What is not improved, is always degraded.&lt;/p&gt;
&lt;p&gt;Before embarking upon an improvement journey, it is critical to examine where we currently stand. The purpose of this baselining activity is to assess current levels, and to be able to articulate where we’re headed; with real quantitative data.  Enthusiastic teams have a tendency to aspire for grandiose goals like “Zero defects in Production”. Though admirable; it is best to set goals that are Specific, Measurable, Achievable, Realistic and Time-bound at this stage.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;3.0 Analyze commonalities and patterns&lt;/h1&gt;
&lt;p&gt;Real data obtained from steps 1.0 and 2.0 above will undoubtedly reveal commonalities and patterns. Some of these may have been obvious; but now we have proof and can make decisions driven by data. This data can help identify bottlenecks and repetitive manual tasks ripe for automation. Such an approach will ensure maximum return on investment.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;4.0 Identifying barriers&lt;/h1&gt;
&lt;p&gt;Now, let’s assume that the organization has bought into the efficacy of DORA metrics; and the teams consider it a worthwhile endeavor to try and improve upon them. 
Each organization and each team must ask themselves some questions. These are just indicative examples:&lt;/p&gt;
&lt;h2&gt;4.1 Deployment Frequency&lt;/h2&gt;
&lt;p&gt;Increasing deployment frequency has its benefits. Teams deploying changes to Production frequently stand to benefit from quicker end-user feedback, quicker detection of bugs and defects, fewer conflicts, and easier recovery from unintended consequences. Reducing batch sizes is the easiest way teams can achieve more frequent deployments. However, this might not be a viable option for (say) monolithic legacy applications. Answering some of these questions could likely reveal the path to increasing deployment frequency:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are we slicing feature stories finely enough? Can we slice them finer?&lt;/li&gt;
&lt;li&gt;Are there application architecture constraints?&lt;/li&gt;
&lt;li&gt;Are there infrastructure/ test environment constraints? &lt;/li&gt;
&lt;li&gt;Are there resource/ staffing constraints?&lt;/li&gt;
&lt;li&gt;Is there a lot of rework happening? Why?&lt;/li&gt;
&lt;li&gt;Any external factors?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Deployment Frequency is by far the easiest metric to measure. This information could be gathered manually at the team level, or in an automated fashion from the deployment pipeline. Task tracking tools like JIRA or Azure Boards have effective tagging, filtering and reporting mechanisms to simplify gathering and disseminating this metric at scale. &lt;/p&gt;
&lt;h2&gt;4.2 Lead time for change&lt;/h2&gt;
&lt;p&gt;There are different ways to scope lead time for change. For the sake of this conversation; let’s assume lead time begins the moment a developer starts working on a change; and ends the moment the change is available to an end-user. Reducing lead time allows an organization to pivot quickly, and act upon changing requirements with agility. Answering some of these questions could help identify barriers to reduce lead times:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;See 4.1.2 &amp;amp; 4.1.3. (architecture/ infrastructure constraints)&lt;/li&gt;
&lt;li&gt;Is the DEV/TEST methodology conducive to quick lead times?&lt;/li&gt;
&lt;li&gt;Is the delivery pipeline automated? Are there further opportunities to automate?&lt;/li&gt;
&lt;li&gt;Are there redundancies in the pipeline?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Change Lead time can be tracked manually at the team level. It can also be broadly measured with the help of the deployment pipeline. If set up correctly, the deployment pipeline can also provide deeper and more granular insights into the lead times at various pipeline stages. &lt;/p&gt;
&lt;h2&gt;4.3 Change Failure Rate (CFR)&lt;/h2&gt;
&lt;p&gt;Change failure rate is the percentage of deployments that lead to downtime, or serious issues in a given time period. The definition of “failure” may vary from team to team. For the sake of this conversation, let’s assume a failed deployment refers to a deployment that had to be rolled back from production, or required a hotfix to resolve a high-severity incident. Though it is easy to guess root cause of failures by relying on anecdotal evidence or gut-feel, it is best to make improvements by asking questions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are testing best practices consistently followed across the SDLC?&lt;/li&gt;
&lt;li&gt;Are test cases comprehensive enough to detect issues in lower environments?&lt;/li&gt;
&lt;li&gt;Are lower environments similar enough to production to allow for reliable test results? &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on how a rollback is initiated, Change Failure Rate can potentially be tracked at the repository level. This would require each hotfix/ remediation build to be labelled as such in (say) GitHub. However, if the rollback protocol is not managed via the deployment pipeline, or if the failure is remediated using a manual hotfix; service management tools like ServiceNow can help record and measure CFR. &lt;/p&gt;
&lt;h2&gt;4.4 Mean Time To Recovery (MTTR)&lt;/h2&gt;
&lt;p&gt;Mean time to Recovery or Mean time to Resolution is the average amount of time required to recover from a failure. For the sake of continuity; let’s define failure as explained in 4.3 (CFR). If the application requires high-availability and high-resiliency, MTTR becomes the most important metric to track and improve. Answering some of these questions could help identify barriers to improving MTTR:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How are issues (errors/ defects/ outages) detected today?&lt;/li&gt;
&lt;li&gt;How are incidents routed to the appropriate resolution teams?&lt;/li&gt;
&lt;li&gt;Do development teams have expected Service Levels objectives and indicators codified?&lt;/li&gt;
&lt;li&gt;Are resolution teams aware of the mitigation protocol?&lt;/li&gt;
&lt;li&gt;Are resolution teams empowered to resolve issues and make quick decisions?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Similar to Change Failure Rate, MTTR can be complex to measure. At the risk of oversimplifying this nuanced process, teams may rely on monitoring and observability platforms to capture the start and end times of an incident. Depending on the nature of the issues; Application Insights within Azure Monitor or even PagerDuty can be leveraged to measure MTTR. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;5.0 Prioritize and eliminate barriers&lt;/h1&gt;
&lt;p&gt;As a proponent of a data-driven decision making culture, I have avoided prescriptive approaches to improving DORA metrics. It is best to contemplate the barriers on a team level, or better still, an application level; and focus on dismantling these barriers in a methodical and purposeful way guided by priority and return on investment. &lt;/p&gt;
&lt;p&gt;That said, most of the identified barriers can likely be classified into the following categories (in order of difficulty):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Skill/Knowledge constraints&lt;/li&gt;
&lt;li&gt;Process constraints&lt;/li&gt;
&lt;li&gt;Budgetary constraints&lt;/li&gt;
&lt;li&gt;Architecture/ Infrastructure limitations&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;6.0 Conclusion&lt;/h1&gt;
&lt;p&gt;It is likely that some of the barriers we encountered can be eliminated by coaching team members on existing organizational protocols and widely accepted engineering best practices around development, testing, deployment, monitoring, error detection and mitigation. Communities of Practice must make continuous learning a key priority, and time must be allocated for learning and teaching.&lt;/p&gt;
&lt;p&gt;If it emerges that changes to processes are required, these changes must be meticulously recorded, observed and measured as an experiment. The results must be peer reviewed and widely distributed within the organization, so as to foster a culture of experimentation and continuous improvement.&lt;/p&gt;
&lt;p&gt;Organizations must examine time and investment budgets and ensure there are appropriate allocations for learning, experimentation, knowledge sharing and technical debt. If required, monolithic applications must be pared down and eventually replaced with micro-services that are conducive to modern-day technological advances. It is now possible to achieve levels of uptime and resiliency that were unheard of even 5 years ago. Let’s work together to ask questions, celebrate successes and failures alike, and continue to deliver exceptional value to our end users on time, every time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Related References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/devops-sre/announcing-dora-2021-accelerate-state-of-devops-report"&gt;2021 Accelerate State of DevOps report addresses burnout, team performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/metrics-importance.html"&gt;Metrics importance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="devops"></category><category term="metrics"></category><category term="eliminate-waste"></category></entry></feed>