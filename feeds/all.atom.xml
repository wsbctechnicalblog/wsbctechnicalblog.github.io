<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2023-02-03T00:00:00-08:00</updated><entry><title>Azure Devops simplicity to rule them all</title><link href="https://wsbctechnicalblog.github.io/azure-devops-simplicity-to-rule-them-all.html" rel="alternate"></link><published>2023-02-03T00:00:00-08:00</published><updated>2023-02-03T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-02-03:/azure-devops-simplicity-to-rule-them-all.html</id><summary type="html">&lt;p&gt;Keep Azure DevOps setup simple and avoid a lot of pain and waste!&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is seldom that you have an opportunity to plan and deploy your engineering process using &lt;a href="https://azure.microsoft.com/en-us/products/devops/"&gt;Azure DevOps&lt;/a&gt; from the ground up - a greenfield deployment not previously polluted by snowflakes (variations of the same) and custom development (everyone has a preference). If you do, I have two recommendations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep it &lt;strong&gt;simple&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;one&lt;/strong&gt; Azure DevOps Project to rule them all.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which reminds me of &lt;a href="https://devblogs.microsoft.com/devops/what-is-devops-donovan/"&gt;Donovan Brown's&lt;/a&gt; infamous definition of DevOps "&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users&lt;/em&gt;", and his iconic statement "&lt;em&gt;You cannot buy DevOps and install it.&lt;/em&gt;" I even created laptop stickers for his DevOps definition, as it is crisp and balances my belief in the value of DevOps. Unfortunately, Microsoft renamed their product to Azure DevOps, making the argument of his iconic statement a real challenge to uphold.&lt;/p&gt;
&lt;p&gt;This post, however, is based on learning lessons the hard way and preparing a brownfield that had years of development based on autonomy over guardrails and storms of snowflakes. It took us a year of hard work, amazing innovations, and grit …&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Simplicity and consistency over Snowflakes!&lt;/h1&gt;
&lt;p&gt;It does not take long to realize that supporting thousands of CI/CD &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"&gt;Azure Pipelines&lt;/a&gt;, &lt;a href="https://learn.microsoft.com/en-us/azure/devops/REPOS/?view=azure-devops"&gt;azure Repos&lt;/a&gt;, and &lt;a href="https://learn.microsoft.com/en-us/azure/devops/ARTIFACTS/?view=azure-devops"&gt;Azure Artifacts&lt;/a&gt; that have drifted from each other is neither sustainable, nor cost effective. We had some bright engineers create pipelines running steps in parallel, using a platter of custom extensions, and scripts that makes any engineer’s heart rate shoot through the roof with excitement. Until the engineer leaves the organization and another engineer has the responsibility of maintaining the artwork and deal with a hotfix at the same time. Multiply this by a hundred to a thousand fold and you quickly realize complexity, cost, and un-maintainability of a technology &lt;strong&gt;waste&lt;/strong&gt;, that is supposed to empower the engineers to deliver continuous value.&lt;/p&gt;
&lt;p&gt;We invested in creating the pillars for &lt;strong&gt;guardrails&lt;/strong&gt;, &lt;strong&gt;automation&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt;, and &lt;strong&gt;self-service automation&lt;/strong&gt;. See these posts for more details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html"&gt;Can government agencies be innovative?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/governance-manifestos-guardrails.html"&gt;Can we enact governance through engineering-friendly manifestos and guardrails?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/our-open-source-pipeline-blueprints-have-landed.html"&gt;Our open-source pipeline blueprints have landed!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part9.html"&gt;Self-service automation - A dream turns into reality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Lean on out-of-the-box features&lt;/h1&gt;
&lt;p&gt;Whenever a user requests a new custom extension to be installed from [Azure DevOps Marketplace)https://marketplace.visualstudio.com/azuredevops/), make sure you ask the five (5) WHYs! &lt;/p&gt;
&lt;p&gt;While it is fun and exciting to watch a delighted end-user, you will soon receive little patience and understanding when the  users have an issue with the extension or are looking for new features. Worst of all, if an extension is deprecated or a vulnerability is detected by security, there is very little of support and service level agreements you can rely on with &lt;strong&gt;free&lt;/strong&gt; extensions.&lt;/p&gt;
&lt;p&gt;Keeping it simple and relying on out-of-the-box service features, keeps the feature and maintenance under control. If you must invest in an extension, I recommend that you:&lt;/p&gt;
&lt;p&gt;Pick extensions with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Verified Logos" src="../images/azure-devops-simplicity-to-rule-them-all-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;verified domain&lt;/strong&gt; and the &lt;strong&gt;top publisher&lt;/strong&gt; validations - they imply commitment through exemplary policies, quality, reliability, and support.&lt;/li&gt;
&lt;li&gt;A high number of &lt;strong&gt;installs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A high average rating (&lt;strong&gt;stars&lt;/strong&gt;), Q&amp;amp;A, and Ratings &amp;amp; Reviews that give you a warm and fuzzy feeling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember, once an extension is installed, it quickly becomes a critical feature of your user’s processes, making it difficult to reverse or exchange.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Governance Reporting is a must&lt;/h1&gt;
&lt;p&gt;It is important that you can monitor and audit your engineering process for consistency, standardization, adherence to guardrails and standards, and identify when configurations start drifting apart. &lt;/p&gt;
&lt;p&gt;We invested in a platter of automated reporting, via the &lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.1"&gt;Azure DevOps REST API&lt;/a&gt;, and have also embraces the phenomenal work done by &lt;a href="https://twitter.com/vinijmoura"&gt;Vinicius Moura&lt;/a&gt; with his &lt;a href="https://github.com/vinijmoura/Azure-DevOps"&gt;Azure-DevOps&lt;/a&gt; open source project on GitHub.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;List all Release Definitions, Stages, and Approvers on Classic Releases in Azure DevOps&lt;/em&gt;
&lt;img alt="Sample Report" src="../images/azure-devops-simplicity-to-rule-them-all-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only are we able to answer most questions from internal audits in seconds, we are able to continuously observe the health of our engineering process and get a nudge when things are about to drift off the rails.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;One project to rule them all!&lt;/h1&gt;
&lt;p&gt;I will keep this section very short and refer you to the excellent &lt;a href="https://nkdagility.com/blog/one-team-project/"&gt;One Team Project to rule them all&lt;/a&gt; post by &lt;a href="https://nkdagility.com/"&gt;Martin Hinshelwood&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, I wish that Microsoft had not called it a Team Project, as it has resulted in years of confusion and migraines. As Martin correctly emphasizes in his blog a Team Project cannot be equated to a Visual Studio Project, a software, or whatever project. Project &amp;lt;&amp;gt; project! &lt;/p&gt;
&lt;p&gt;If only I had a dollar for every wasteFUL discussion that goes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User: "&lt;em&gt;Please create me a new Azure DevOps Project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;We are starting a new project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY&lt;/strong&gt; can we not just create a new Team for you in our mainstream Azure DevOps Team Project?&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;We feel that we need a new project, not a new team?&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WHY?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;User: "&lt;em&gt;Because we are starting a new project.&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After 5-years of pushing for a "one project to rule them all" we are now staring at multiple Azure DevOps Team projects that have drifted apart from each other, making it sheer impossible to consolidate all Azure Repositories and Azure Pipelines, while maintaining all the history mandated by policies.&lt;/p&gt;
&lt;p&gt;Avoid the pain and start with "&lt;strong&gt;one project to rule them all!&lt;/strong&gt;"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use Active Directory (AD) groups to authorize users&lt;/h1&gt;
&lt;p&gt;Another hard lesson we learnt over time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;Active Directory (AD)&lt;/strong&gt; groups to authorize users.&lt;/li&gt;
&lt;li&gt;Keep your security model &lt;strong&gt;simple&lt;/strong&gt; and number of AD groups &lt;strong&gt;low&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delegate&lt;/strong&gt; the auditing and membership management of AD groups.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automate&lt;/strong&gt; the creation of AD groups and adding and removing of user memberships.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you are dealing with multiple Azure DevOps Team projects, you may end up with a security model like the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Complex Security Model" src="../images/azure-devops-simplicity-to-rule-them-all-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are the &lt;strong&gt;green&lt;/strong&gt; engineer, you will &lt;strong&gt;hate&lt;/strong&gt; the Azure DevOps powered engineering process. It is complex and anything but user-friendly and empowering - and no fault of Azure DevOps!&lt;/p&gt;
&lt;p&gt;One of our working groups invested well-spent time to understand our security model and come up with a &lt;strong&gt;simpler&lt;/strong&gt; and &lt;strong&gt;user-friendly&lt;/strong&gt; security model. It still defines AD groups per Azure DevOps Team project for AD groups providing &lt;strong&gt;administrative&lt;/strong&gt; and &lt;strong&gt;elevated&lt;/strong&gt; permissions to enforce the least-privilege policy, but introduces other AD groups that span all of the Azure DevOps Team Projects that should be **one"".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Simple Security Model" src="../images/azure-devops-simplicity-to-rule-them-all-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now if we had "one team project to rule them all" we would have started with the same security model from the start.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hopefully this post gives you a few pointers to mull over, to help you transform your Azure DevOps powered engineering process, and avoid a lot of the &lt;strong&gt;WASTE&lt;/strong&gt; and &lt;strong&gt;challenges&lt;/strong&gt; we endured over the past few years.&lt;/p&gt;
&lt;p&gt;I am excited our state of the engineering process. &lt;strong&gt;Watch the space&lt;/strong&gt;, as we shine the light on upcoming innovations, new and better ways to innovate, and empower our engineers through service excellence. &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category></entry><entry><title>Engineering Practice Nuggets</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-1.html" rel="alternate"></link><published>2023-01-18T00:00:00-08:00</published><updated>2023-01-18T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-18:/engineering-practice-1.html</id><summary type="html">&lt;p&gt;Nuggets of Knowledge and Best Practices in Software Engineering&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we design, build, and deploy software we aim to apply patterns and learned best practices in order to produce consistent and robust solutions that are of the highest quality and lowest possible technical dept (burden to maintain).&lt;/p&gt;
&lt;p&gt;These powerful nuggets of knowledge, patterns and practices, and key areas that we are evolving and improving will be the subject matter explored with the goal to invigorate vibrant collaboration and innovation, and indeed experimentation and tenacity when things don't go as desired.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Metrics and Quantitative Measures&lt;/h1&gt;
&lt;p&gt;In addition to the four standard DevOps metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deployment Frequency&lt;/strong&gt; - How often an organization successfully releases to production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lead Time for Changes&lt;/strong&gt; - The amount of time it takes a commit to get into production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change Failure Rate&lt;/strong&gt; - The percentage of deployments causing a failure in production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time to Restore Service&lt;/strong&gt; - How long it takes an organization to recover from a failure in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have begun the process of calculating various metrics on software created at WSBC, using SonarQube in the build and deploy pipelines. These will soon be augmented by Stryker to generate mutant test cases and validate them, as well as the Roslyn Analyzer for further code analysis.  &lt;/p&gt;
&lt;p&gt;These measurements are calculated when the pipeline for a product is invoked, providing us with statistical data that we can use to gauge the quality improvements over time.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Engineering Capability Maturity&lt;/h1&gt;
&lt;p&gt;We are now developing a Capability Maturity Model for Software Engineering Practices at WSBC, similar to the Maturity Model for Agile practices combined with CMM for Software - and supported by Scaled Agile Framework for the Enterprise (SAFe).  &lt;/p&gt;
&lt;p&gt;We are working to identify the capabilities at each level and how to measure them, and how to put processes in place or refine existing processes  to support their improvement and cultivate an open culture of experiment-fail-learn and share as discussed in &lt;a href="/fail-learn-reset.html"&gt;Fail, Learn, Reset!&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;EDO Ce Recommended Product Catalog&lt;/h1&gt;
&lt;p&gt;The EDO Recommended Product Catalog is getting a radical facelift, with a cool new periodic-table style layout with pop-up cells that clearly describe the product and purpose and current version.  Clicking on the tile opens a modal dialog describing the product in full, with links to download either from ServiceNow or the product own download page.&lt;/p&gt;
&lt;p&gt;We are busily creating Phase II, enabling a Search capability and populating the table cells based on a query to live &lt;em&gt;editable&lt;/em&gt; data in SharePoint.&lt;/p&gt;
&lt;p&gt;In a future post, we will dig deeper into the Product Catalog; how it has evolved to support and enhance our development teams navigation, education, and adoption of technology recommended for our development community.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Watch this space for bi-weekly Engineering Practice updates, latest developments, and recommended best practices, techniques, patterns, and methods recommended for building the next generation of interconnected loosely-coupled systems and services in our &lt;em&gt;Software Factory Vision&lt;/em&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="architecture"></category><category term="code"></category><category term="code-quality"></category><category term="design"></category><category term="engineering"></category><category term="technical-excellence"></category><category term="tdd"></category><category term="tips"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Pull Request empowered by engineering practices</title><link href="https://wsbctechnicalblog.github.io/pull-request-empowered-by-engineering-practices.html" rel="alternate"></link><published>2023-01-13T00:00:00-08:00</published><updated>2023-01-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-13:/pull-request-empowered-by-engineering-practices.html</id><summary type="html">&lt;p&gt;Pull Requests (PR) enable us improve built-in quality, engineering practices, and streamline our continuous integration pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us take a look at our latest pull request workflow and hopefully spark a few discussions that will empower all of us to embrace the pull request (PR) feature effectively.  &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a pull request (PR)?&lt;/h1&gt;
&lt;p&gt;Pull Requests (PR) enable us to change, review, and merge code. We can add policies to your PRs to enable code quality in key branches using policies, validation builds, code-quality, and security scans. We all want to protect key branches such as trunk, master, or main, which should always be stable and deployable – the single source of truth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MYTH&lt;/strong&gt;  - Pull-requests slow down your continuous integration value stream! A pull request takes as long as you and your process allow it to sit in a corner to gather dust. We encourage our engineers to track the lead and cycle times of pull requests using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=OneLuckiDev.prApprovalReport"&gt;Pull Request Completion Report&lt;/a&gt; and to collaborate with their peers to ensure that pull requests do not go stale. Also, the more you SHIFT-LEFT and present the evidence to the Pull Request validations, the more you can automate and thereby eradicate expensive human reviews and associated cycle times.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is the pull request (PR) workflow?&lt;/h1&gt;
&lt;p&gt;There are many pull request (PR) strategies. Here is the one we recommend for our common engineering ecosystem, based on our &lt;a href="/branching-trunk-based.html"&gt;trunk-based&lt;/a&gt; branching strategy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Workflow" src="../images/engineering-practices-pull-request-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;LEGEND&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Create a feature branch from the trunk/master/main branch, representing a unique feature, bug, or hotfix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Make code changes to implement the associated feature or fix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When ready to start collaboration, create a DRAFT PR to merge your feature branch to the trunk/master/main branch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DRAFT PR allow vibrant collaboration, without triggering Branch Policies, page 53, validations or notifying PR reviewers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Manually trigger branch policy validations, such as the validation build.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When ready to merge code changes to the trunk/master/main branch, publish the PR.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When a PR is published, reviewers are notified and Branch Policies become mandatory. Set the PR completion to manual or automatically, whereby automatic completion is triggered when all Branch Policies are validated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;When a code change is committed within a published PR, all reviewer approvals are reset, and reviewers are duly notified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;With every commit, all Branch Policies are automatically re-validated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ready to merge changes – done with code changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The PR verifies that all Branch Policies are met.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The PR will not complete manually or automatically until all validations are met.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Users with elevated permissions can force complete the PR, irrespective of the state of validations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Code changes are merged to the source branch, which in turn triggers the continuous integration (CI) pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MYTH&lt;/strong&gt; - Pull-requests are manual interventions. With a high-TRUST team, we can define mandatory &lt;a href="https://learn.microsoft.com/en-us/azure/devops/repos/git/branch-policies-overview?view=azure-devops"&gt;Branch Policies&lt;/a&gt; and &lt;strong&gt;optional&lt;/strong&gt; approvals. That way collaboration is encouraged, but the PR will auto-complete as soon as all Branch Policies, are validated. No manual blocks, just validated  built-in quality.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is our accountability as PR reviewers?&lt;/h1&gt;
&lt;p&gt;Which brings us to an important topic – the &lt;strong&gt;responsibility&lt;/strong&gt; and &lt;strong&gt;accountability&lt;/strong&gt; of PR reviewers.&lt;/p&gt;
&lt;p&gt;If you are included in a pull request as an optional reviewer, you can review and collaborate within the context of the pull request. If you are included as a required reviewer, you must review and approve the PR so that the Branch Policies are met.&lt;/p&gt;
&lt;p&gt;While collaboration, continuous learning, information exchange, and guidance are important aspects of the pull request workflow, every reviewer, whether optional or required, is accountable to keep an eye on the following when reviewing a PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bad coding practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of security practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of engineering practices.&lt;/li&gt;
&lt;li&gt;Deviations and breach of repository, pipeline, or quality guardrails.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we automate the validations, the accountability and need to review PRs manually diminishes for our engineers.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part11.html"&gt;Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests"&gt;Pull requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pull-requests-friend.html"&gt;Pull Request is your friend not foe!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Fail, Learn, Reset!</title><link href="https://wsbctechnicalblog.github.io/fail-learn-reset.html" rel="alternate"></link><published>2023-01-11T00:00:00-08:00</published><updated>2023-01-11T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2023-01-11:/fail-learn-reset.html</id><summary type="html">&lt;p&gt;"Failure is a good option. If you are not failing, you are not trying hard enough." - Elon Musk&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last year, I tried hard to encourage everyone in my team and our group to accept failure as an opportunity to learn. I am so passionate about the value of failure, that I will continue to eradicate the &lt;strong&gt;fear of failure&lt;/strong&gt; with our engineers. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"There is a silly notion that failure is not an option at NASA. Failure is an option here. If things are not failing, you are not innovating enough."&lt;/em&gt; - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Good and bad failures&lt;/h1&gt;
&lt;p&gt;Just like cholesterol, there are &lt;strong&gt;BAD&lt;/strong&gt; and there are &lt;strong&gt;GOOD&lt;/strong&gt; failures. &lt;/p&gt;
&lt;p&gt;We must minimize the &lt;strong&gt;BAD&lt;/strong&gt;** failures, originating from context switching, stress, ignoring guardrails, and guidance, as they typically impact user experience and work:life balance. As we want to continuously deliver value to delighted end-users, we need to take the bad failures very seriously.&lt;/p&gt;
&lt;p&gt;Maximize the &lt;strong&gt;GOOD&lt;/strong&gt; failures, generally originating from experiments, which promote innovation and learning, and help us raise our built-in quality bar.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Create psychological safety!&lt;/h1&gt;
&lt;p&gt;For a team to embrace &lt;strong&gt;FAILURES&lt;/strong&gt;, psychological safety and support from the leadership is pivotal. If engineers must comply with metrics and performance reviews that do not support the value of failure, you will observe &lt;strong&gt;zero&lt;/strong&gt; traction by your team(s) to even consider the option of failure.&lt;/p&gt;
&lt;p&gt;Encourage safe and vibrant collaboration, to combat the imposter syndrome. In other words, we are all equal and what is discussed by the team stays with the team, until everyone is comfortable to share the context, the core issue, and the learnings after picking up the pieces and performing a retrospective on a FAILURE.&lt;/p&gt;
&lt;p&gt;You need an ecosystem based on &lt;strong&gt;TRUST&lt;/strong&gt;, and encourage everyone to be open-minded, respectful, and empathetic. &lt;/p&gt;
&lt;p&gt;Once these ingredients are stirred into the secret sauce of your team, you are ready to share your failures.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Accept and learn from your failures&lt;/h1&gt;
&lt;p&gt;I shared my top three failures with management and our engineers not only to showcase that no-one is invincible or perfect, but to encourage everyone to do the same. Here are the failures I shared:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the late 80’s I was working on a new encryption hardware module and integrating the service into a banking system in Switzerland. The project FAILED with spectacular operating system lockups, resulting in me flying to the US for the first time. I had a huge opportunity to debug and patch the &lt;a href="https://en.wikipedia.org/wiki/Convergent_Technologies_Operating_System"&gt;Convergent Technologies Operating System&lt;/a&gt; (CTOS) operating system kernel together with its creators. Finding the root cause for the operating system lockup was a phenomenal learning experience for all of us and as a result I also fell in love with Assembler and V2PLM programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In 2013 we toggled a feature flag in Team Foundation Service (now known as Azure DevOps) at a major conference. It did not go well … we blew up Azure and spent weeks fixing Azure DevOps. We learned about handling transient faults and avoiding similar failures with retries, throttling, and circuit breakers, and even created vibrant collaboration and trust by being transparent. My &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; article is one of the outcomes, as is my caution for dark launches and feature flags. Also read Brian Harry's &lt;a href="https://devblogs.microsoft.com/bharry/bad-day/"&gt;A bad day&lt;/a&gt; blog post for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At WorkSafeBC, I recently blew up our v1 blueprints with a two-space indent in one of our YAML templates which silenced WhiteSource, I repeatedly get the expense field in TRRs incorrect, and just recently mixed up two ServiceNow requests, creating the wrong team, in the wrong project, for the wrong users. What I am learning from these, is that &lt;strong&gt;context-switching is BAD&lt;/strong&gt;, and that &lt;strong&gt;focus&lt;/strong&gt; is worth every Penny.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could go on and on and on, but my top three hiccups are enough for this post.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Experiment, fail, learn, act!&lt;/h1&gt;
&lt;p&gt;The following illustration summarizes my thoughts on &lt;strong&gt;FAILURES&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="loop-of-failure" src="/images/fail-learn-reset.png"&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;We need to run &lt;strong&gt;experiments&lt;/strong&gt; to test ideas, proposed innovations, or minimally viable products (MVP) to evaluate if we achieve desired results (PASS) or not (FAIL).&lt;/li&gt;
&lt;li&gt;Either way we can &lt;strong&gt;act&lt;/strong&gt; upon invaluable &lt;strong&gt;learnings&lt;/strong&gt;, either reiterating on the experiment or focusing on the next.&lt;/li&gt;
&lt;li&gt;It is all about continuously &lt;strong&gt;learning&lt;/strong&gt; and delivering &lt;strong&gt;value&lt;/strong&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To create and support an ecosystem based on &lt;strong&gt;TRUST&lt;/strong&gt; and one that embraces the &lt;strong&gt;learn from failures&lt;/strong&gt; mindset we need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The leadership to create &lt;strong&gt;psychological safety&lt;/strong&gt; by enabling everyone to fail without the fear of retribution or bad reviews. This is my next challenge to address.&lt;/li&gt;
&lt;li&gt;Engineers need to eradicate the &lt;strong&gt;imposter syndrome&lt;/strong&gt; through vibrant, open-minded, respectful, and empathetic collaboration. We have been driving this through our &lt;a href="https://wsbctechnicalblog.github.io/ceremony-overview.html"&gt;collaboration ceremonies&lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What are your thoughts on failure?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Azure Pipelines Conditional Logic</title><link href="https://wsbctechnicalblog.github.io/azure-pipelines-conditional-logic.html" rel="alternate"></link><published>2022-12-28T00:00:00-08:00</published><updated>2022-12-28T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-28:/azure-pipelines-conditional-logic.html</id><summary type="html">&lt;p&gt;Make your YAML pipelines more versatile with conditional expressions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us review why and how we use conditional expressions in our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 application-type pipeline blueprints&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a conditional expression and why is it "cool"?&lt;/h1&gt;
&lt;p&gt;You can use the &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; clauses to conditionally assign values or, as discussed in this blog post, conditionally run a step when a condition is met. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Intersection" src="../images/azure-pipelines-conditional-logic-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Conditions are defined using &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops"&gt;Expressions&lt;/a&gt; and built-in &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#functions"&gt;Functions&lt;/a&gt;. We have made heavy use of conditional expressions to define what our blueprints assemble at queue (run) time, which is not only a powerful concept, but also allows us to tick off a couple of &lt;strong&gt;classic&lt;/strong&gt; Azure Pipeline security risks. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VARIABLES&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we include a &lt;a href=""&gt;variable template&lt;/a&gt; if, and only if, the &lt;code&gt;suppressCD&lt;/code&gt; parameter is not set to &lt;code&gt;true&lt;/code&gt;. Note that we are intentionally turning every character in the variable template e to lowercase using the &lt;code&gt;lower&lt;/code&gt; &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#lower"&gt;function&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Examples in our blueprints&lt;/h1&gt;
&lt;h2&gt;Conditional Quality Assurance and Security Scans&lt;/h2&gt;
&lt;p&gt;As described in our recent &lt;a href="/azure-pipelines-blueprint-qa-integration.html"&gt;Azure Pipelines Blueprint QA Integration&lt;/a&gt; post, our pipelines are designed to target a &lt;strong&gt;lower&lt;/strong&gt; and &lt;strong&gt;higher&lt;/strong&gt; environment, whereby the higher is locked down and only included when the artifact originates from a &lt;code&gt;release&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Typical CI/CD pipeline" src="../images/azure-pipelines-blueprint-qa-integration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us peel the example below, layer by layer, which is the template we are using for both the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/dev-sec-ops/security-scans-auto.yml"&gt;Security Automation&lt;/a&gt; and &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;Quality Assurance (QA)&lt;/a&gt; stages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The conditional expression example &lt;code&gt;${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/release'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:&lt;/code&gt; decides if part of the template is included, by checking if the source branch is named &lt;code&gt;release&lt;/code&gt; or &lt;code&gt;release/*&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is a semantic version using the MAJOR.MINOR format. For example: &lt;code&gt;release/1.3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The template is divided into three sections of &lt;code&gt;steps&lt;/code&gt;, the steps to run for &lt;strong&gt;LOWER&lt;/strong&gt; environment artifacts, the steps for the &lt;strong&gt;HIGHER&lt;/strong&gt; environment artifacts, and the steps to run for both the &lt;strong&gt;LOWER+HIGHER&lt;/strong&gt; environments. All implemented using &lt;code&gt;conditional expressions&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the lower, higher, and both lower+higher placeholders, the conditional expression example &lt;code&gt;${{ if eq( lower(parameters.applicationBlueprint), 'azure-function' ) }}:&lt;/code&gt; allows us to define application-specific steps to be run.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR LOWER (NON-PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Lower Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nuget-package&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;universal-artifact&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;universal-artifact&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nuget-package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UNKNOWN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Higher Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rinse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# QA AUTOMATION FOR LOWER AND HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QA CD Lower and Higher Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple, but powerful!&lt;/p&gt;
&lt;h2&gt;Boot-Strap Flow&lt;/h2&gt;
&lt;p&gt;&lt;img alt="boot-strap.yml" src="../images/azure-pipelines-conditional-logic-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/boot-strap.yml"&gt;boot-strap&lt;/a&gt; template is our secret sauce that injects &lt;strong&gt;DevSecOps&lt;/strong&gt;, &lt;strong&gt;Building Code&lt;/strong&gt;, &lt;strong&gt;Toolkits&lt;/strong&gt;, and &lt;strong&gt;Application Insights&lt;/strong&gt; steps into our continuous integration (CI) pipeline.&lt;/p&gt;
&lt;p&gt;In the 80's I would have written the boot-strap logic as a gigantic &lt;a href="https://en.wikipedia.org/wiki/Assembly_language"&gt;Assembler&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/PL/M"&gt;V2/PLM&lt;/a&gt; switch statement. Back to the future, we have conditional YAML expression that make the experience a lot more readable and user friendly q;-)&lt;/p&gt;
&lt;p&gt;Here is a short extract from our &lt;code&gt;bootstrap&lt;/code&gt; template where we checkout our toolbox and call our Application Insights logging steps if the &lt;code&gt;bootstrapMode&lt;/code&gt; is set to &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snipped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP TOOLBOX&lt;/span&gt;
&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# Production Toolbox&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;runbuildingcodeonly&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//Common-Engineering-System/AzureDevOps.Automation.Pipeline.Toolbox.v2&lt;/span&gt;

&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP AI LOGGING&lt;/span&gt;
&lt;span class="o"&gt;======================================================&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Telemetry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;START&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Toolbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;insights&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;OperationId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Build.BuildNumber).$(Build.BuildId)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;BootstrapMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PortfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ProductName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;VerboseFlag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ForceCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snipped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conditional Templates&lt;/h2&gt;
&lt;p&gt;The last example is an extract from the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/nuget-package/azure-pipeline-nuget-package-ci.yml"&gt;azure-pipeline-nuget-package-ci.yml&lt;/a&gt; where we conditionally load a &lt;code&gt;portfolioName/productName&lt;/code&gt; specific or a &lt;code&gt;default&lt;/code&gt; variable template based on the value of the &lt;code&gt;useDefaultConfig&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VARIABLES&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Lastly, a spacing GOTCHA!&lt;/h1&gt;
&lt;p&gt;Finally, let us look at a common gotcha. YAML is &lt;strong&gt;very&lt;/strong&gt; space sensitive and the indents are important. For example, only the first two &lt;code&gt;script&lt;/code&gt; steps are part of the conditional expression context. The third &lt;code&gt;script&lt;/code&gt;, which is not indented will be run irrespective of the conditional expression result.&lt;/p&gt;
&lt;p&gt;We strongly recommend you use &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; to give visual cues of your code and grouping thereof and the Azure Pipeline YAML &lt;a href="https://johnlokerse.dev/2022/02/07/validating-yaml-using-azure-devops-or-cli/"&gt;Validate&lt;/a&gt; feature to validate that your syntax is correct. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Security CD Lower Environment Automation Placeholder ***&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is, it for today folks! Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; if you have any questions or feedback. &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category><category term="tips"></category></entry><entry><title>Azure Boards Tips for Operations Teams</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips-operations-team.html" rel="alternate"></link><published>2022-12-23T00:00:00-08:00</published><updated>2022-12-23T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-23:/azure-boards-tips-operations-team.html</id><summary type="html">&lt;p&gt;A few useful "did you know" tips when using Azure Boards for Operational-type teams.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After observing users work with and occasionally struggle with the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;, it is time for me to share a few tips. We continue from &lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt; and focus on operational teams this time.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What makes an Operations team different from a Delivery team?&lt;/h1&gt;
&lt;p&gt;There are likely tons of definitions and views of groups of engineers making up an operations, operational, services, or system teams. I will focus on my team, Common Engineering, is one of our common services teams, focused on operations. We empower our delivery teams, aka software development, with consistent and standardized &lt;strong&gt;processes&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;, &lt;strong&gt;innovation&lt;/strong&gt; of tool chains and continuous delivery pipelines, and &lt;strong&gt;support&lt;/strong&gt; of operational infrastructure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Intake" src="../images/azure-boards-tips-operations-teams-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the focus on processes, products, innovation, and support are creating a  variation of support requests we receive and associated work that we plan after triage and prioritization. A challenging, but exciting mix of services we are focused on every day. &lt;/p&gt;
&lt;p&gt;If your daily working day looks similar, you may want to consider these learnings from our team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Document process of dealing with blockers and external dependencies&lt;/h1&gt;
&lt;p&gt;Delivering exceptional, responsive, and forward-thinking operational support is our top priority, which trumps all other visions, goals, objectives, and dreams. It requires us to continuously improve our value streams, to improve our &lt;a href="https://www.agile-academy.com/en/agile-dictionary/lead-time-vs-cycle-time/"&gt;cycle and lead times&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For example, we continuously analyze, collaborate, agree, and documented how to deal with common scenarios, powered by &lt;a href=""&gt;Azure DevOps&lt;/a&gt;, such as ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dependency" src="../images/azure-boards-tips-operations-teams-2a.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While &lt;strong&gt;processing&lt;/strong&gt; work item A, we realize that we need help from another common services team to complete the support &lt;strong&gt;request&lt;/strong&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We clone our original work item (A) and set up a predecessor --&amp;gt; successor relationship to work item (B). This allows us to visualize the dependencies on our &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;strong&gt;@mention&lt;/strong&gt; the original requestor and team B, so that they are notified to determine if work item (B) is actionable. If yes, they pull it to their backlog, triage, and action as per their process.&lt;/li&gt;
&lt;li&gt;We then click on the &lt;strong&gt;Follow&lt;/strong&gt; work item feature and wait for work item (B) to move to &lt;code&gt;DONE&lt;/code&gt; state and/or to be &lt;strong&gt;@mentioned&lt;/strong&gt; by team B.  &lt;/li&gt;
&lt;li&gt;As we complete our work in parallel, we move work item (A) to &lt;code&gt;DONE&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;The original request is considered DONE once work item (A) and work item (B) are &lt;code&gt;DONE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Slice" src="../images/azure-boards-tips-operations-teams-2b.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Optimally we detect &lt;strong&gt;dependencies&lt;/strong&gt; while &lt;strong&gt;triaging&lt;/strong&gt; the support &lt;strong&gt;request&lt;/strong&gt;. If yes, we proactively slice the job into multiple work items. As before, we configure with predecessor and successor relationships and notify (&lt;strong&gt;@mention&lt;/strong&gt;) the stakeholders - but it is done &lt;strong&gt;proactively&lt;/strong&gt;, not reactively which is far more efficient and less stressful q;-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rework" src="../images/azure-boards-tips-operations-teams-2c.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last example shows that we never move a work-item back from &lt;code&gt;DONE&lt;/code&gt; state or in other words, we never drag a work item card from right to left on our &lt;strong&gt;Kanban&lt;/strong&gt; board. Instead, we create a new work-item (typically a clone of the original), fix the issue(s), rinse and repeat the dependencies.&lt;/p&gt;
&lt;p&gt;Yes, it is more work, but it allows us to track and visualize the actual workflow.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Consider an Operational Work Item Type&lt;/h1&gt;
&lt;p&gt;As shown below, we have all encountered the work item type from hell - the worst work item (bug) type I had the misfortune to work with had 200+ fields, multiple tabs, mandatory dependencies, and fields that no-one could explain. An inefficient and frustrating user experience!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Operational" src="../images/azure-boards-tips-operations-teams-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;strong&gt;operational support requests&lt;/strong&gt; we created a streamlined work item type, which auto-filled most fields during creation. Both the &lt;strong&gt;requestor&lt;/strong&gt; and  team dealing with the request, can enjoy a far more efficient process and digest the request and status &lt;strong&gt;at-a-glance&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Arrange your board&lt;/h1&gt;
&lt;p&gt;It is important that you fine tune your &lt;strong&gt;Board&lt;/strong&gt; to suit &lt;strong&gt;you&lt;/strong&gt; and deliver visual value to &lt;strong&gt;your&lt;/strong&gt; team and stakeholders. Here is what ours looks like...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Kanban Board" src="../images/azure-boards-tips-operations-teams-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;We use &lt;strong&gt;swimlanes&lt;/strong&gt; to map the requests we receive into a few well-known buckets, such as hair on &lt;code&gt;FIRE&lt;/code&gt;, &lt;code&gt;security risks&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; date, &lt;code&gt;Kaizen&lt;/code&gt;, &lt;code&gt;STANDARD&lt;/code&gt;, and &lt;code&gt;Braindumps&lt;/code&gt; (information sharing).&lt;/li&gt;
&lt;li&gt;We use the standard &lt;code&gt;top=highest-priority&lt;/code&gt; prioritization strategy when scanning the swimlanes and cards within each swimlane column.&lt;/li&gt;
&lt;li&gt;As shown, we still have to work on and improve our &lt;code&gt;work in progress&lt;/code&gt; (WIP) and associated WIP limits.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;Filters&lt;/code&gt;, as discussed in &lt;a href="/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;STANDARD&lt;/code&gt; swimlane is where we live and breath operational support, with a &lt;strong&gt;Kanban&lt;/strong&gt; mindset and focus on Flow. We pull work from the right and prioritize work that has a clear flow from &lt;code&gt;NEW&lt;/code&gt; to &lt;code&gt;DONE&lt;/code&gt;, using every opportunity to identify inefficiencies and waste.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;FIXED&lt;/code&gt; and &lt;code&gt;KAIZEN&lt;/code&gt; swimlanes is where we practice our &lt;strong&gt;Scrum&lt;/strong&gt; and &lt;strong&gt;Scaled Agile Framework (SAFe)&lt;/strong&gt; mindset, planning, prioritizing, and committing work to program increments and associated iterations.  &lt;/p&gt;
&lt;p&gt;We are using the right-mindset for the right job, at the right time, to continuously deliver value,&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use a visual dashboard&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dashboard" src="../images/azure-boards-tips-operations-teams-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like Kanban boards, as discussed in &lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt;, you can create visual Azure DevOps dashboards, to monitor and identify smoke, before you have a raging fire on your hands. Our blurred dashboard is one of my default startup pages in my &lt;strong&gt;Edge&lt;/strong&gt; browser and a page I continuously monitor during the day.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The tiles present an assortment of invaluable indicators. Anything in &lt;code&gt;red&lt;/code&gt; requires our attention, for example &lt;code&gt;orphaned&lt;/code&gt; work items (no parent), &lt;code&gt;blocked&lt;/code&gt; work items, closed (&lt;code&gt;timeless&lt;/code&gt;) work items without an iteration, and operational support work items that are missing required &lt;code&gt;tags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The list of pipeline &lt;code&gt;status&lt;/code&gt; allows us to keep an eye on our maintenance pipelines and the lead- and cycle-time graphs visualize how have been doing over the past 30 days.&lt;/li&gt;
&lt;li&gt;There are a lot more gems on the board, some relevant to all of us, some interesting for our scrum master. There are also gems, such as a list of &lt;code&gt;my pull requests&lt;/code&gt; and &lt;code&gt;pull requests assigned to me&lt;/code&gt; allow me to be more proactive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with Kanban boards, take two steps back and ensure that the visual cues for &lt;strong&gt;you&lt;/strong&gt; and &lt;strong&gt;your team&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, remember the &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; which allows you to create a delivery board-type plan view combining multiple teams, backlogs, and iteration cadences. The delivery plan configuration of settings and styles is like the board, but it also allows you to collapse cards and show dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;
Dependencies are only shown for predecessor/successor links and dependency lines are only drawn if both the predecessor and successor cards are visible on the delivery plan view.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any other tips to share?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Azure Pipelines Blueprint QA Integration</title><link href="https://wsbctechnicalblog.github.io/azure-pipelines-blueprint-qa-integration.html" rel="alternate"></link><published>2022-12-09T00:00:00-08:00</published><updated>2022-12-09T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-09:/azure-pipelines-blueprint-qa-integration.html</id><summary type="html">&lt;p&gt;WHERE and HOW to integrate quality assurance into our OSS pipeline blueprints.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us review and how you can integrate your quality assurance (QA) scans in our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 application-type pipeline blueprints&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;High-altitude peek at the pipeline flow&lt;/h1&gt;
&lt;p&gt;The following illustration shows a typical continuous delivery pipeline, including continuous integration (CI), continuous delivery (CD), and supporting built-in automation and quality scans. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Flow" src="../images/azure-pipelines-blueprint-qa-integration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us unpack the pipeline, based on the &lt;strong&gt;azure-function&lt;/strong&gt; blueprint. Thanks to the magic of assembling the pipeline instance at queue, not definition time, the higher and release-bound stages only exist if the source branch matches the &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release*&lt;/code&gt; pattern. The last two stages in the lower, high-churn area are always part of the pipeline and the focus of this discussion.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build" src="../images/azure-pipelines-blueprint-qa-integration-0-build.png"&gt;&lt;/p&gt;
&lt;p&gt;The first stage is the continuous integration (CI), aka build, stage which is focused on &lt;strong&gt;building&lt;/strong&gt; the product and injecting the &lt;strong&gt;DevSecOps&lt;/strong&gt;, &lt;strong&gt;Quality Assurance (QA)&lt;/strong&gt; and &lt;strong&gt;building code&lt;/strong&gt; scans, managed by our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/boot-strap.yml"&gt;boot-strap&lt;/a&gt; template.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Delivery" src="../images/azure-pipelines-blueprint-qa-integration-0-deploy.png"&gt;&lt;/p&gt;
&lt;p&gt;Subsequent stages are all part of the continuous delivery (CD), aka release, pipeline. In our case we deploy to &lt;strong&gt;development&lt;/strong&gt; and &lt;strong&gt;system test&lt;/strong&gt; environments, followed by the above-mentioned built-in automation and quality scans, the &lt;strong&gt;security review&lt;/strong&gt; stage (which my colleague Kevin will discuss soon), and finally we deploy to &lt;strong&gt;staging&lt;/strong&gt; and &lt;strong&gt;production&lt;/strong&gt; environments. We use &lt;strong&gt;manual approvals&lt;/strong&gt; to guard &lt;strong&gt;system test&lt;/strong&gt;, &lt;strong&gt;Staging&lt;/strong&gt;, and &lt;strong&gt;production&lt;/strong&gt; environments, as well as a check for known and trusted templates for the &lt;strong&gt;system test&lt;/strong&gt; and higher environments.&lt;/p&gt;
&lt;p&gt;But, you probably want to know where and how to integrate your quality assurance scans.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Quality-Assurance (QA) extension points&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Delivery" src="../images/azure-pipelines-blueprint-qa-integration-0-qa.png"&gt;&lt;/p&gt;
&lt;p&gt;In a nutshell, you have two opportunities to influence and trigger quality assurance automation as part of your continuous delivery pipeline, based on the blueprints. &lt;/p&gt;
&lt;h2&gt;Continuous integration (CI) QA extension points?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CI Integration" src="../images/azure-pipelines-blueprint-qa-integration-2.png"&gt;&lt;/p&gt;
&lt;p&gt;You will find the first extension point in the &lt;em&gt;-ci.yml templates, for example &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/azure-function/azure-pipeline-azure-function-ci.yml"&gt;azure-pipeline-azure-function-ci.yml&lt;/a&gt;. This extension point is &lt;/em&gt;&lt;em&gt;blueprint&lt;/em&gt;* specific!&lt;/p&gt;
&lt;p&gt;Scroll down to line around line 95, where you will find this placeholder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# CONTINUOUS INTEGRATION TEST&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; task: DotNetCoreCLI@2&lt;/span&gt;
&lt;span class="c"&gt;      displayName: &amp;#39;Run Tests&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;      inputs:&lt;/span&gt;
&lt;span class="c"&gt;        command:    &amp;#39;test&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;        projects:   &amp;#39;**/*Tests/*&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;csproj&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;        arguments:  &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;--&lt;/span&gt;&lt;span class="c"&gt;configuration $(buildConfiguration) &lt;/span&gt;&lt;span class="nb"&gt;--&lt;/span&gt;&lt;span class="c"&gt;no&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;restore&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is the responsibility of the software delivery team to define &lt;strong&gt;consistent&lt;/strong&gt;, &lt;strong&gt;comprehensive&lt;/strong&gt;, and &lt;strong&gt;quality&lt;/strong&gt; continuous integration tests to empower us to automate the unit and regression testing while building the artifacts we want to deploy. You can extend the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/building-code/building-code.yml"&gt;building-code&lt;/a&gt; to validate the health of your unit tests by using a tool such as &lt;a href="https://stryker-mutator.io/"&gt;Stryker&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Continuous delivery (CD) QA extension points?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CD Integration" src="../images/azure-pipelines-blueprint-qa-integration-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The second extension, which runs in parallel to the security automation scans, can be found in the&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template.&lt;/p&gt;
&lt;p&gt;A few words of caution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This extension point is re-used and triggered by all blueprints!&lt;/li&gt;
&lt;li&gt;Any tasks running as part of this extension point must be &lt;strong&gt;stable&lt;/strong&gt; and &lt;strong&gt;reliable&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;This extension point must honour the &lt;code&gt;modeElite&lt;/code&gt; parameter, as discussed below.&lt;/li&gt;
&lt;li&gt;Validate your extensions using your feature branch and the &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=schema#define-a-repositories-resource"&gt;ref:&lt;/a&gt; parameter before committing any change to your master branch. Once in master, your extensions will affect &lt;strong&gt;all&lt;/strong&gt; blueprint-based pipelines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we peek into the template, we realize that we have two main sections. One that runs for lower (non-production) environments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# QA AUTOMATION FOR LOWER (NON&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;PROD) ENVIRONMENTS STAGE&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; ${{ if not(or(eq(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release&amp;#39;)&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; startsWith(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release/&amp;#39;))) }}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And another that runs for the higher (production) environments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# QA AUTOMATION FOR HIGHER (PROD) ENVIRONMENTS STAGE&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;-----------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; ${{ if or(eq(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release&amp;#39;)&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; startsWith(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release/&amp;#39;)) }}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words, you can selectively run quality-assurance in all pipelines or only in pipelines that are based on the &lt;code&gt;release/*&lt;/code&gt; or &lt;code&gt;release*&lt;/code&gt; source code branches, destined for production.&lt;/p&gt;
&lt;p&gt;Within both these sections, you will find &lt;strong&gt;blueprint&lt;/strong&gt; specific sections, allowing you to configure your quality assurance automation scans for the selected blueprints only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;azure-function&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
    - script: echo deal with qa scan relevant to azure-function application type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have decided WHEN and for WHICH blueprints you want to run your quality assurance automation scans, insert your tasks into the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template. You &lt;strong&gt;must&lt;/strong&gt; honour and deal with the &lt;code&gt;modeElite&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;modeElite = false&lt;/code&gt; your scans must &lt;strong&gt;succeed&lt;/strong&gt; or complete with a &lt;strong&gt;warning&lt;/strong&gt; - they are not allowed to throw an error, which would terminate the pipeline.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;modeElite = true&lt;/code&gt; your scans must &lt;strong&gt;succeed&lt;/strong&gt; or &lt;strong&gt;fail&lt;/strong&gt; - any failure must terminate the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is up to you whether you deal with &lt;code&gt;eliteMode&lt;/code&gt; in the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;qa-scans-cd.yml&lt;/a&gt; template or pass and deal with it in your automation scans.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That is, it for today folks! Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; if you have any questions or feedback. Support for comments will hopefully soon be glued onto our technical blog. Watch the space!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category></entry><entry><title>Azure Boards Tips</title><link href="https://wsbctechnicalblog.github.io/azure-boards-tips.html" rel="alternate"></link><published>2022-12-02T00:00:00-08:00</published><updated>2022-12-02T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-12-02:/azure-boards-tips.html</id><summary type="html">&lt;p&gt;A few useful "did you know" tips when using Azure Boards.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After observing users work with and occasionally struggle with the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt;, it is time for me to share a few tips.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Select the right card reordering strategy&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="reordering" src="../images/azure-boards-tips-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The board supports two reorder behaviours when you drag and drop your cards. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reorder work items when changing columns and update the backlog accordingly. (Default)&lt;/li&gt;
&lt;li&gt;Follow backlog order when changing columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I &lt;strong&gt;groom&lt;/strong&gt; and maintain an &lt;strong&gt;ordered&lt;/strong&gt; (prioritised) backlog, I prefer the second behaviour. It drops the card according to the work items order within the backlog. In other words, if it has the highest priority on the backlog it will appear at the top of the column, no matter where you drop it. Once dropped, you can intentionally drag and drop the card within the column, which updates its order (priority)within the column and updates the backlog accordingly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOTO&lt;/strong&gt; &lt;code&gt;Configure team settings&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Card reordering&lt;/code&gt; and select the expected reorder strategy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Create visual cues on your board&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="cues" src="../images/azure-boards-tips-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maximize your &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; on your biggest monitor and take two steps back. Can you see visual cues for (1) cards flowing in swim lanes, (2) tags that pop out from the rest to indicate special metadata, such as PRIORITY, and (3) card colours that indicate their states?&lt;/p&gt;
&lt;p&gt;Even though the above board has been blurred, I notice nine (9) cards that are a &lt;code&gt;PRIORITY&lt;/code&gt; due to the tag colour, one (1) card that needs to be discussed &lt;code&gt;violet colour&lt;/code&gt;, two (2) cards that need to be groomed &lt;code&gt;salmon colour&lt;/code&gt;, and two (2) cards that are stale &lt;code&gt;orange colour&lt;/code&gt;. Oh, the yellow cards on the right tell me that their &lt;code&gt;iteration path&lt;/code&gt; has not yet been set.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Boards&lt;/a&gt; delivers powerful &lt;strong&gt;visual cue&lt;/strong&gt; features - use them! &lt;/p&gt;
&lt;p&gt;Please do not use the card colour styles to indicate who they have been assigned to. There are only ten (10) possible styles, and you are better off using the &lt;strong&gt;filter&lt;/strong&gt; to focus on your work - see below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOTO&lt;/strong&gt; &lt;code&gt;Configure team settings&lt;/code&gt;. 
Select &lt;code&gt;Tag colors&lt;/code&gt; and define special colours for special tags.&lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Styles&lt;/code&gt; and define up to ten (10) styles to stand out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an example of a rule that turns stale cards orange:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="style" src="../images/azure-boards-tips-7.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Use the filter!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="filter" src="../images/azure-boards-tips-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Board&lt;/a&gt; team implemented a great filter, allowing you to filter you board on &lt;code&gt;work item types&lt;/code&gt;, &lt;code&gt;assigned to&lt;/code&gt;, &lt;code&gt;Tags&lt;/code&gt;, &lt;code&gt;Iterations&lt;/code&gt;, &lt;code&gt;Area paths&lt;/code&gt;, and &lt;code&gt;Parent Work Items&lt;/code&gt; to reduce the noise and allow you to focus on what is important. &lt;/p&gt;
&lt;p&gt;For example, my board is filtered on cards assigned to &lt;code&gt;@Me&lt;/code&gt;, &lt;code&gt;Unassigned&lt;/code&gt;, and &lt;code&gt;my team's AD group&lt;/code&gt; so that I can focus on my work and keep an eye on the unassigned work. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;My work items are vanishing!?!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="states" src="../images/azure-boards-tips-6.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ensure that all work item possible states are mapped to one or more of the &lt;a href="https://azure.microsoft.com/en-ca/products/devops/boards/"&gt;Azure Board&lt;/a&gt; columns. If a state is not mapped against a column, the card will literally &lt;strong&gt;vanish&lt;/strong&gt; from your board when its state changes to the unmapped state - the board is literally doing what &lt;strong&gt;you&lt;/strong&gt; have configured it to do.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GOTO&lt;/strong&gt; &lt;code&gt;Configure team settings&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Columns&lt;/code&gt; and map the work item states for each column.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Add high-value fields on the card&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="fields" src="../images/azure-boards-tips-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last thing you want to do is click on a card on your Kanban board - &lt;strong&gt;WASTE&lt;/strong&gt;! Ensure you have the relevant fields mapped to your card so that in most cases you can simply look at the card to understand what to do next. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="settings" src="../images/azure-boards-tips-0.png"&gt; &lt;/p&gt;
&lt;p&gt;GOTO &lt;code&gt;Configure team settings&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Select &lt;code&gt;Fields&lt;/code&gt; and map up to 10 fields in the order they need to appear on your card.&lt;/p&gt;
&lt;p&gt;DO NOT check &lt;code&gt;Check if you want to display fields even if they are empty&lt;/code&gt; - &lt;strong&gt;WASTE&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Do not forget the Delivery Plan!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="delivery plan" src="../images/azure-boards-tips-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lastly, remember the &lt;a href="https://learn.microsoft.com/en-in/azure/devops/boards/plans/review-team-plans?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; which allows you to create a delivery board-type plan view combining multiple teams, backlogs, and iteration cadences. The delivery plan configuration of settings and styles is similar to the board, but it also allow you to collapse cards and show dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;
Dependencies are only shown for predecessor/successor links and dependency lines are only drawn if both the predecessor and successor cards are visible on the delivery plan view.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any other tips to share?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Our open-source pipeline blueprints have landed!</title><link href="https://wsbctechnicalblog.github.io/our-open-source-pipeline-blueprints-have-landed.html" rel="alternate"></link><published>2022-11-08T00:00:00-08:00</published><updated>2022-11-08T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-11-08:/our-open-source-pipeline-blueprints-have-landed.html</id><summary type="html">&lt;p&gt;Lifting the hood of our consistent, standardized, and self-service based Azure Pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our group took huge step when we convinced our leadership to empower us to create this technical blog and share our technology journeys, learnings, and innovation with the community back in September 2020. Two years later, we finally managed to dot the &lt;code&gt;i's&lt;/code&gt; and cross the &lt;code&gt;t's&lt;/code&gt; and publish our &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;second-generation application-type blueprints&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It is hopefully the splash down of a long and innovative collaboration to improve our (community) use of &lt;a href="https://azure.microsoft.com/en-ca/products/devops/pipelines"&gt;Azure Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Splash down" src="../images/our-open-source-pipeline-blueprints-have-landed-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Peruse our &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;why bother and what are our nightmares and options?&lt;/a&gt; pipeline series for the complete story.&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;Constantly think about how you could be doing things better.&lt;/em&gt;” - Elon Musk&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Discussions&lt;/h1&gt;
&lt;p&gt;&lt;img alt="GitHub Discussions" src="../images/our-open-source-pipeline-blueprints-have-landed-0.png"&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;a href="https://github.com/orgs/WorkSafeBC-Common-Engineering/discussions"&gt;Discussions&lt;/a&gt; feature to collaborate with our team and/or the rest of the community. Please keep discussions focused on the application-type blueprints, communicate clearly, be open-minded, respectful, and empathetic. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - All discussions and comments are moderated. Users who do not adhere to the &lt;a href="https://docs.github.com/en/site-policy/acceptable-use-policies/github-acceptable-use-policies"&gt;GitHub Acceptable Use Policies&lt;/a&gt; will be blocked from our organization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Vibrant collaboration (over black holes and silos)&lt;/li&gt;
&lt;li&gt;Consistent, standardized, and secure continuous integration (CI) and delivery (CD) pipelines&lt;/li&gt;
&lt;li&gt;Empower software engineers with self-service automation&lt;/li&gt;
&lt;li&gt;Take advantage of every ounce of YAML &lt;a href="https://azure.microsoft.com/en-ca/products/devops/pipelines"&gt;Azure Pipelines&lt;/a&gt; features&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Repositories&lt;/h1&gt;
&lt;p&gt;&lt;img alt="GitHub Repos" src="../images/our-open-source-pipeline-blueprints-have-landed-1.png"&gt;&lt;/p&gt;
&lt;p&gt;We have published a total of eight (8) repositories, consisting of five (5) sample repositories and three (3) application-type blueprint core repositories.&lt;/p&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;p&gt;The five (5) sample repositories are used by our self-service automation to extract an application-type sample and inject it into the users repository. We reduced the &lt;a href="https://youtu.be/DWuDqCM1t6A"&gt;self-service cycle-time&lt;/a&gt; to less than 15 seconds ... a success story that we will cover in an upcoming self-service automation post. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;azure-function&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;generic-multiple-jobs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;generic-single-job&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;nuget-package&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.&lt;strong&gt;universal-artifact&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Core&lt;/h3&gt;
&lt;p&gt;The three (3) core repositories represent the heart of our blueprint-based &lt;a href="https://azure.microsoft.com/en-ca/products/devops/pipelines"&gt;Azure Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AzureDevOps.Automation.Pipeline.Configuration.v2&lt;/strong&gt; - Contains a configuration file for each solution using our blueprints, organized in a flat &lt;code&gt;deploy/&amp;lt;portfolio&amp;gt;/&amp;lt;product&amp;gt;-config.yml&lt;/code&gt; hierarchy. The configuration files are loaded and injected when the pipelines are queued.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/strong&gt; - Application-type blueprint and other templates. See &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;meet our second-generation app-type blueprints&lt;/a&gt; for details. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AzureDevOps.Automation.Pipeline.Toolbox.v2&lt;/strong&gt; - Scripts and config files that are loaded by the &lt;code&gt;boot-strap.yml&lt;/code&gt; template, using the &lt;code&gt;checkout:&lt;/code&gt; feature. See &lt;a href="https://wsbctechnicalblog.github.io/share-your-toolbox-with-pipelines.html"&gt;two ways to share your toolbox with your pipelines&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on the history and a peek under the hood of the blueprints, please peruse our technical blog &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;pipelines series&lt;/a&gt; and anything that is tagged with &lt;a href="https://wsbctechnicalblog.github.io/tag/pipelines.html"&gt;pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the templates contain a &lt;code&gt;__TODO_&amp;lt;ACTION&amp;gt;_&lt;/code&gt; placeholders to hide our internal implementation but maintain the blueprint template dependencies and integrity. You will need to search for &lt;code&gt;__TODO_&lt;/code&gt; and implement these &lt;code&gt;STUBBED&lt;/code&gt; templates yourself. Contact our team using the &lt;a href="https://github.com/orgs/WorkSafeBC-Common-Engineering/discussions"&gt;Discussions&lt;/a&gt; if you have any questions.&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Fork the repositories if you intend to make changes.&lt;/li&gt;
&lt;li&gt;Create or use a common engineering Azure DevOps project.&lt;/li&gt;
&lt;li&gt;Clone the repositories to your Azure DevOps project.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;__TODO_&lt;/code&gt; placeholders in all repositories and adjust to match your Azure DevOps Project(s) and services.&lt;/li&gt;
&lt;li&gt;Remember to contribute your changes back using a pull request.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;How to contribute&lt;/h1&gt;
&lt;p&gt;As mentioned, collaborate with us using the &lt;strong&gt;Discussions&lt;/strong&gt; feature and submit your blueprints changes through &lt;strong&gt;pull requests&lt;/strong&gt; which will be considered, reviewed, integrated, and synchronized by our common engineering open source team of passionate engineers.&lt;/p&gt;
&lt;p&gt;May the &lt;strong&gt;collaboration&lt;/strong&gt;, &lt;strong&gt;fun&lt;/strong&gt;, and &lt;strong&gt;innovation&lt;/strong&gt; begin!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="automation"></category><category term="oss"></category></entry><entry><title>Test Environment Management in a hybrid world</title><link href="https://wsbctechnicalblog.github.io/test-environment-management-in-a-hybrid-world.html" rel="alternate"></link><published>2022-10-12T00:00:00-07:00</published><updated>2022-10-12T00:00:00-07:00</updated><author><name>Shay Vannery</name></author><id>tag:wsbctechnicalblog.github.io,2022-10-12:/test-environment-management-in-a-hybrid-world.html</id><summary type="html">&lt;p&gt;Test Environments are a critical component of any software development lifecycle.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Correctly configured test environments can help detect bugs, errors &amp;amp; other issues early in a controlled setting; saving the development team time, effort, money and stress. And yet, test environments are often an after-thought. &lt;/p&gt;
&lt;h1&gt;Problems with Test Environment Management&lt;/h1&gt;
&lt;p&gt;Traditional test environment management is a cumbersome and labor-intensive process. In an organization with a complex technological landscape, this means keeping track of hundreds of applications, related configurations and attributes in complex spreadsheets. &lt;/p&gt;
&lt;p&gt;As static environments are dependent upon humans for upkeep &amp;amp; maintenance, these environments become inconsistent over time leading to less reliable test results. This sometimes leads to bugs &amp;amp; errors escaping to the Production environment undetected, despite running a battery of tests. Misconfigured environments also make it difficult to troubleshoot and pinpoint the source of bugs and errors. &lt;/p&gt;
&lt;p&gt;In complex organizations like ours, test environments are a shared resource; and can become a bottleneck. As specific applications and tests may require specific environment configurations, teams sometimes have to wait for test environments to become available. This unfortunately causes delays to program delivery or to teams skipping critical SDLC stages. Shared test environments usually have access and permission gates to ensure environment sanctity, but this further slows down the delivery cadence due to the added overhead of coordination, communication &amp;amp; compliance tracking. &lt;/p&gt;
&lt;p&gt;As we continue along our Cloud journey, we are becoming less and less dependent on physical, static environments that we have to maintain and manage. It is now possible to have entirely “ephemeral” short-lived environments that are instantly generated with specific code, configuration and conditions required for a specific purpose; and destroyed once the purpose is served. &lt;/p&gt;
&lt;h1&gt;Ephemeral Environments&lt;/h1&gt;
&lt;p&gt;An ephemeral environment is just a virtual replica of an environment. Infrastructure-as-Code (IaC) makes it possible to make environment creation an automated stage in a pipeline. For instance, an environment can be created with specific configurations, and specific test-data, triggered by a pull request. This environment can be staged and shared with other stakeholders like business/ UAT teams as desired, and destroyed once the tests have run successfully. This theoretically enables teams to have an infinite number of environments running in parallel, thereby eliminating the need for manual environment coordination, tracking &amp;amp; booking. Parallel independent test environments also enable us to eliminate access gates &amp;amp; manual approvals entirely; thereby speeding up program delivery. &lt;/p&gt;
&lt;p&gt;Since environments can be configured for any purpose, separate environments can be configured for QA tests, integration tests, load and performance tests, training, staging etc. in parallel as and when needed; we have the opportunity to sharply pare down a lengthy software development life cycle that runs in series due to infrastructure limitations.&lt;/p&gt;
&lt;p&gt;Ephemeral environments can also save an organization money, as the “environments” can be “turned off” when computing resources are not being utilized.&lt;/p&gt;
&lt;h1&gt;Configuration Management Database (CMDB)&lt;/h1&gt;
&lt;p&gt;In an ephemeral world, the importance of maintaining a single-source-of-truth increases even further. A purpose driven environment is only useful if it is correctly configured with the appropriate attributes and conditions. Most configuration management databases are just glorified spreadsheets; just as reliant upon manual upkeep and intervention. They are error-prone, difficult to scale and must be reviewed for consistency and accuracy. For a CMDB to be truly effective, it necessitates constant and ideally automated updates. Modern CMDB tools enable configuration changes to be automatically discovered and tracked across on premise servers and cloud infrastructure using scheduled scans.  &lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Test Environment Management is a critical component of modern day software delivery. If leveraged properly, using a combination of modern tools and the right processes, it can make a considerable difference in the quality and efficiency of the delivery life cycle. &lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="testing"></category><category term="release"></category></entry><entry><title>Built-in Quality</title><link href="https://wsbctechnicalblog.github.io/built-in-quality.html" rel="alternate"></link><published>2022-09-30T00:00:00-07:00</published><updated>2022-09-30T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-30:/built-in-quality.html</id><summary type="html">&lt;p&gt;Ensuring that our solutions meet quality guardrails and governance from ideation to deprecation.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Post-deployment analysis, audits and inspection does not improve quality - it is usually too late, resulting in spectacular failures. While we can learn from these failures, they tend to be expensive and reputation busters - remember, first impressions last!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Crash" src="/images/built-in-quality-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Quality must be built-in from the moment a team has an idea until the feature or product is deprecated. Also, it is the responsibility of all stakeholders, such as development, operations, architecture, security, and business. It should therefore come as no surprise that built-in quality is the North Star of our EDO Common Engineering &lt;a href="https://wsbctechnicalblog.github.io/ceremony-overview.html"&gt;Center of Enablement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me explore three (3) of many parts of the &lt;strong&gt;built-in quality&lt;/strong&gt; puzzle in our common engineering system.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Pull Request&lt;/h1&gt;
&lt;p&gt;I covered many of the myths of pull requests in &lt;a href="https://wsbctechnicalblog.github.io/branching-pull-request.html"&gt;why we use pull requests with our trunk-based branching strategies&lt;/a&gt; and like &lt;a href="X"&gt;Mike Kaufman's&lt;/a&gt; definition "&lt;em&gt;the pull request integration helps you to keep your main branch clean and detect issues before merging and making the code analysis part of the review process&lt;/em&gt;", in his &lt;a href="https://www.amazon.ca/Accelerate-DevOps-GitHub-software-performance/dp/1801813353"&gt;Accelerate DevOps with GitHub&lt;/a&gt; book. Used correctly, Pull Requests validate branch policies &lt;strong&gt;automatically&lt;/strong&gt;, trigger validation builds &lt;strong&gt;automatically&lt;/strong&gt;, and even merge to master &lt;strong&gt;automatically&lt;/strong&gt; if all guardrails are met. Any change to the feature branch associated with the Pull Request &lt;strong&gt;automatically&lt;/strong&gt; re-triggers the validations, ensuring that the engineering teams have a near real-time health check of their code and a potential merge with tha &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://sec.ch9.ms/ch9/151a/ba7ad81b-ed67-4dfc-a9fb-4ebf323e151a/CONN17T184_high.mp4"&gt;Azure DevOps Pull Requests&lt;/a&gt; are one piece of our arsenal to be pro- not re-active and help us raise the quality bar through automated validations and a pair of human eyeballs, if and only if required. When we change our &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;Azure Pipeline blueprints&lt;/a&gt;, for example, stakeholders from common engineering, operations, security, and/or site reliability engineering are looped in if the change impacts their area of responsibility.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Pull Requests are autonomous stewards of our &lt;a href="TBD"&gt;Guardrails&lt;/a&gt; and complement our peer-programming, by creating awareness of our engineering efforts across differing engineering disciplines. Fosters &lt;strong&gt;resilience&lt;/strong&gt;!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Application-type CI/CD Blueprints&lt;/h1&gt;
&lt;p&gt;One of our great innovations, the &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;Azure Pipeline blueprints&lt;/a&gt;, deliver &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;standardization&lt;/strong&gt;, foster &lt;strong&gt;collaboration&lt;/strong&gt;, all of which contribute to the built-in quality. A neat side effect is that they also enable &lt;strong&gt;self-service automation&lt;/strong&gt;, removing mind-numbing and error prone processes - it is a &lt;strong&gt;win&lt;/strong&gt;:&lt;strong&gt;win&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Template" src="/images/built-in-quality-5.png"&gt;&lt;/p&gt;
&lt;p&gt;With the blueprints, made up of a collection of re-usable templates, most of our big rocks of continuous innovation, enablement, and built-in quality are ticked off in our continuous integration (CI) and delivery (CD) pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Watch this space. We will open source our blueprints on GitHub soon!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Pathfinders&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Soldier" src="/images/built-in-quality-3.png"&gt;&lt;/p&gt;
&lt;p&gt;In the armed forces pathfinders are specialized troops inserted to perform a reconnaissance to gather information, setup and operate drop zones. They share their specialized skills and gather intelligence.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Engineer" src="/images/built-in-quality-4.png"&gt;&lt;/p&gt;
&lt;p&gt;In our world, we insert our engineers to software delivery teams to share their expertise, steward Guardrails, gather information on challenges and how we can improve our common engineering ecosystem to empower all engineers.&lt;/p&gt;
&lt;p&gt;By understanding our stakeholders and sharing our learnings with the engineers, we ensure that we continuously improve the built-in quality of both our common engineering system and our products. It is another &lt;strong&gt;win&lt;/strong&gt;:&lt;strong&gt;win&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HINT&lt;/strong&gt;, &lt;strong&gt;HINT&lt;/strong&gt; ... I hope that our Quality Assurance engineers will create a follow-on post to explore how we build-in and validate quality through our quality assurance services. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Pencil" src="/images/built-in-quality-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Watch the space for more in-depth content on &lt;strong&gt;built-in quality&lt;/strong&gt; and our engineering &lt;strong&gt;practices&lt;/strong&gt;. Our software development practice lead is busy sharpening his blogging pencils q;-) &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Servant stewardship of guardrails</title><link href="https://wsbctechnicalblog.github.io/servant-stewardship-of-guardrails.html" rel="alternate"></link><published>2022-09-28T00:00:00-07:00</published><updated>2022-09-28T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-28:/servant-stewardship-of-guardrails.html</id><summary type="html">&lt;p&gt;You can chose between governance, policies, or standards, or collaborate with us through guardrails.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We covered this topic before in &lt;a href="/governance-manifestos-guardrails.html"&gt;can we enact governance through engineering-friendly manifestos and guardrails?&lt;/a&gt; ... but recent experiences emphasise the need for a quick refresher. First, let us compare the difference between governance, policies, standards, and what we refer to as guardrails.&lt;/p&gt;
&lt;p&gt;Listed from most to least formal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Governance&lt;/strong&gt; - "&lt;em&gt;Is the process of interactions through the laws, norms, power or language of an organized society over a social system (family, tribe, formal or informal organization, a territory or across territories).&lt;/em&gt;" - &lt;a href="https://en.wikipedia.org/wiki/Governance"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Policy&lt;/strong&gt; - "&lt;em&gt;Is a deliberate system of guidelines to guide decisions and achieve rational outcomes. A policy is a statement of intent and is implemented as a procedure or protocol. Policies are generally adopted by a governance body within an organization&lt;/em&gt;" - &lt;a href="https://en.wikipedia.org/wiki/Policy"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Standards&lt;/strong&gt; - "&lt;em&gt;An established norm or requirement for a repeatable technical task which is applied to a common and repeated use of rules, conditions, guidelines or characteristics for products or related processes and production methods, and related management systems practices.&lt;/em&gt;" - &lt;a href="https://en.wikipedia.org/wiki/Technical_standard"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have work with engineers, especially those with an Agile and healthy DevOps mindset, pushing the boundaries through experimentation and innovation is common. Governance, policies, and standards are frowned upon as they generally &lt;strong&gt;restrict&lt;/strong&gt; (opposite of empower) rapid innovation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What about Guardrails?&lt;/h1&gt;
&lt;p&gt;Our vision is to &lt;strong&gt;Empower engineering through consistent and standardized processes, practices, and products, within guardrails.&lt;/strong&gt; We collaborate with experts from different disciplines in our centers of enablement to identify, introduce, and support processes, engineering principles, and products and create &lt;strong&gt;guardrails&lt;/strong&gt;. We do not enforce but recommend guardrails to ensure that we reduce the risk of non-compliance and last-minute "stop the bus" decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;guardrail&lt;/strong&gt; is a less formal version of technical standards which are &lt;strong&gt;recommended&lt;/strong&gt;, not &lt;strong&gt;enforced&lt;/strong&gt;. The basic content describes the &lt;strong&gt;WHAT&lt;/strong&gt; the guardrail is about, &lt;strong&gt;WHY&lt;/strong&gt; is it important, and &lt;strong&gt;HOW&lt;/strong&gt; to apply it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I cover guardrails, I ask engineers to visualize a bridge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bridge" src="../images/servant-stewardship-of-guardrails-1.png"&gt;&lt;/p&gt;
&lt;p&gt;We are your servant stewards of guardrails to support you to cross the bridge safely and swiftly. If, however, you decide to climb on or climb over the guardrails, you are on your own. In other words, do not call us  if someone's hair is on fire, you are sitting in an infamous 2AM-call, or a failed security review stops you from deploying a mission critical release.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WS.Infrastructure?!?&lt;/h1&gt;
&lt;p&gt;I recently received an email with a request to migrate a repository named &lt;code&gt;WS.Infrastructure&lt;/code&gt; to another Azure DevOps project. Here is what went through my mind as I read the email:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hmmm, what does the TLA (two lettered acronym) &lt;strong&gt;WS&lt;/strong&gt; mean? &lt;strong&gt;W&lt;/strong&gt;illy &lt;strong&gt;S&lt;/strong&gt;chaub, &lt;strong&gt;W&lt;/strong&gt;indows &lt;strong&gt;S&lt;/strong&gt;ervice, &lt;strong&gt;W&lt;/strong&gt;ater &lt;strong&gt;S&lt;/strong&gt;tation, ...?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Let me peek into the repository and look at the &lt;strong&gt;Infrastructure&lt;/strong&gt; stuff ... but there is no typical infrastructure stuff. A platter of long-lived feature branches with NuGet packages focused on infrastructure.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Had the creator of the repository reviewed our naming guidelines and branching strategy guardrails, we would have a deployable master branch and a user-friendly repository name. For example &lt;code&gt;CrossCutting.NuGet.Infrastructure&lt;/code&gt; would be a lot more intuitive.&lt;/p&gt;
&lt;p&gt;This is a very simple example of not operating within our guardrails, which &lt;strong&gt;WASTES&lt;/strong&gt; a lot of valuable engineering time on guess-work, creates an &lt;strong&gt;ERROR-PRONE&lt;/strong&gt; bridge crossing, and does not empower engineers who have to takeover the artifacts when the creators move on to new adventures.&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Our road to OSS Blueprints - Suppress CD when pipeline runs within Pull Request</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part11.html" rel="alternate"></link><published>2022-09-21T00:00:00-07:00</published><updated>2022-09-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-21:/yaml-pipelines-part11.html</id><summary type="html">&lt;p&gt;A glimpse at our OSS progress and how we use the same pipeline in and out of pull requests.&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;Open Sourcing our Application-type CI/CD Blueprints&lt;/h2&gt;
&lt;p&gt;We are on the home stretch to open source our v2 application-type CI/CD blueprints. In fact, we only have one last optimization story enabler to complete, before we will start setting up an OSS repository in GitHub. Thank you for your patience &lt;strong&gt;Said&lt;/strong&gt; - we are close!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Using the same Application-type CI/CD Blueprints as Pull Request (PR) Validation Build&lt;/h2&gt;
&lt;h3&gt;suppressCD parameter&lt;/h3&gt;
&lt;p&gt;Why do we want to suppress the continuous delivery (CD) part of our CI/CD blueprint-based pipelines?&lt;/p&gt;
&lt;p&gt;Pipeline is triggered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By self-service automation, when the configuration is not yet configured.&lt;/li&gt;
&lt;li&gt;By development team that is not ready to deploy yet.&lt;/li&gt;
&lt;li&gt;As a validation &lt;strong&gt;build&lt;/strong&gt; within a pull request, where you only want the continuous integration (CI) to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our &lt;code&gt;*start.yml&lt;/code&gt; template we have the optional &lt;strong&gt;suppressCD&lt;/strong&gt; parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="sr"&gt;/__101__/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PORTFOLIO__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PRODUCT__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;publishFolder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_FOLDERNAME__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;engineering&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;immediate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;being&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When set to &lt;strong&gt;true&lt;/strong&gt;, this part of the &lt;em&gt;control.yml is &lt;/em&gt;&lt;em&gt;not&lt;/em&gt;* processed. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result the CD part of the pipeline will not be injected at queue time.&lt;/p&gt;
&lt;h3&gt;Suppress CD within PR&lt;/h3&gt;
&lt;p&gt;The optional parameter works well, until you are ready to deploy your solution and you set &lt;code&gt;suppressCD = false&lt;/code&gt;. In this case the validation build in a pull request would trigger both the continuous integration (CI) and continuous delivery (CD) pipeline phases. &lt;/p&gt;
&lt;p&gt;This explains this code snippet at the end of the &lt;code&gt;*-CI.yml&lt;/code&gt; template, which suppresses the CD part if the pipeline was triggered by a pull request ("merge"):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suppressed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;validation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builds&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Validation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Suppression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Alert&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="magic" src="/images/yaml-pipelines-part11.png"&gt;&lt;/p&gt;
&lt;p&gt;It goes hand-in-hand with the second half of the conditional statement after the suppressCD check, as above. The source branch name will be &lt;strong&gt;merge&lt;/strong&gt; if the build originated as a pull request merge validation build.&lt;/p&gt;
&lt;p&gt;A simple, but powerful trick!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; | Part 11 |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Accelerate DevOps with GitHub Book</title><link href="https://wsbctechnicalblog.github.io/accelerate-devops-with-github-book.html" rel="alternate"></link><published>2022-09-16T00:00:00-07:00</published><updated>2022-09-16T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-16:/accelerate-devops-with-github-book.html</id><summary type="html">&lt;p&gt;"Enhance software delivery performance with GitHub Issues, Projects, Actions, and Advanced Security" - Michael Kaufman&lt;/p&gt;</summary><content type="html">&lt;p&gt;In our book &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; I not only emphasize my support for &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan's definition of DevOps&lt;/a&gt; as the "Union of people, process, and products to enable continuous delivery of value to our end users", but also that &lt;strong&gt;products&lt;/strong&gt; represents only 5% of the DevOps pie. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Accelerate DevOps with GitHub Book&lt;/h1&gt;
&lt;p&gt;So, when I received a copy of Michael's book "Accelerate DevOps with GitHub" to review, I was skeptical. Why bother with another technical &lt;strong&gt;product&lt;/strong&gt;-based book, which would be out-of-date by the time I get to the end? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I could not have been more wrong!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although the book is based on GitHub (&lt;strong&gt;product&lt;/strong&gt; 5%), it shares experience and information that applies to the other core pieces of the DevOps pie - &lt;strong&gt;process&lt;/strong&gt; (15%), and &lt;strong&gt;people&lt;/strong&gt; (80%) in these six parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lean Management and Collaboration&lt;/li&gt;
&lt;li&gt;Engineering DevOps Practices&lt;/li&gt;
&lt;li&gt;Release with Confidence&lt;/li&gt;
&lt;li&gt;Software Architecture&lt;/li&gt;
&lt;li&gt;Lean Product Management&lt;/li&gt;
&lt;li&gt;GitHub for your Enterprise &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The book has become one of my invaluable references for topics such as &lt;em&gt;Metrics that matter&lt;/em&gt;, &lt;em&gt;OKRs&lt;/em&gt; (objectives, key, results), &lt;em&gt;YAML basics&lt;/em&gt;, &lt;em&gt;Feature Flags&lt;/em&gt;, &lt;em&gt;Trunk-based Development&lt;/em&gt;, &lt;em&gt;working with Git&lt;/em&gt;, &lt;em&gt;Code Security&lt;/em&gt;, &lt;em&gt;Testing&lt;/em&gt;, and much more. What caught my eye throughout the book is Michael's focus on &lt;strong&gt;keeping it simple&lt;/strong&gt; - love it!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Meet the author - Michael Kaufman&lt;/h1&gt;
&lt;p&gt;We are pleased to announce that Michael will join us at our &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/"&gt;DevOps Vancouver BC Canada Meetup&lt;/a&gt; at the end of November to talk about his book. For him it will be 4AM in the morning, demonstrating his passion for DevOps and commitment to share his knowledge.&lt;/p&gt;
&lt;p&gt;Here is an outline of his meetup session:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accelerate DevOps – What I learned writing a book about GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I was asked to write a book about GitHub, I first came up with an outline that had an introduction to DevOps with nearly 200 pages and then covered all GitHub Features in a logical order. “Nobody wants to read a 200-page introduction” was the phrase of my editor that made me completely rethink what I wanted to write about and how I should structure it.&lt;/p&gt;
&lt;p&gt;In this session I want to share with you my learnings and explain why I chose the new structure for my book. I will explain how you can see the book as a practical step-by-step guide to a data-driven DevOps transformation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Michael Kaufman" src="../images/book-accelerate-devops-github-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Michael Kaufmann believes that developers and engineers can be happy and productive at work. He loves DevOps, GitHub, Azure, and modern work.&lt;/p&gt;
&lt;p&gt;Microsoft has awarded him with the title Microsoft Regional Director (RD) and Microsoft Most Valuable Professional (MVP) – the latter in the category DevOps and GitHub.&lt;/p&gt;
&lt;p&gt;Michael is also the founder and CEO of Xpirit Germany. Xpirit is a Microsoft Consulting firm that helps its customers become digital leaders by building Engineering Cultures and supporting them in their Cloud &amp;amp; DevOps transformation Xpirit is part of Xebia, a full-service digital consulting company working on a worldwide ambition.&lt;/p&gt;
&lt;p&gt;Michael shares his knowledge in books, trainings, and as a frequent speaker at international conferences.&lt;/p&gt;
&lt;p&gt;Bookmark &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/"&gt;DevOps Vancouver BC Canada Meetup&lt;/a&gt; and keep an eye for the official event announcement. I will come back and update this post as soon as we have a published link to the event.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Find book here:&lt;/strong&gt;
- &lt;a href="https://www.amazon.ca/Accelerate-DevOps-GitHub-software-performance/dp/1801813353"&gt;Amazon Canada&lt;/a&gt;
- &lt;a href="https://www.amazon.com/Accelerate-DevOps-GitHub-software-performance/dp/1801813353"&gt;Amazon US&lt;/a&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="book"></category><category term="devops"></category></entry><entry><title>Positive energy goes a long way to encourage innovation</title><link href="https://wsbctechnicalblog.github.io/be-positive.html" rel="alternate"></link><published>2022-09-09T00:00:00-07:00</published><updated>2022-09-09T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-09:/be-positive.html</id><summary type="html">&lt;p&gt;"Every person in your company is a vector. Your progress is determined by the sum of all vectors." - Elon Musk&lt;/p&gt;</summary><content type="html">&lt;p&gt;After observing a lot of technical leads and mentors over the past 35+ years of bits &amp;amp; bytes adventures, as well as observing those they influence, I have compiled my short list of top and least effective qualities. Take it with a pinch of salt, read between the lines, and remember it is my list - my views.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Inspiration and leadership are based on a pull, not push model&lt;/h1&gt;
&lt;p&gt;When you approach the world with a "my way or the highway" mindset, directing, inspecting, monitoring, supervising, and in extreme cases micromanaging - the least effective level of leadership. Some common leadership anti-pattern signs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Questioning everything&lt;/strong&gt; - there is a fine line (tone) between being curious and questioning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dominating discussions&lt;/strong&gt; - not allowing your team to self-manage and have vibrant discussions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Micromanaging&lt;/strong&gt; - double and triple checking everything, creating a &lt;strong&gt;no-trust&lt;/strong&gt; environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Directing from behind&lt;/strong&gt; - aka command and control.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point triggered an interesting discussion with &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Andre&lt;/a&gt;. Leaders who subscribe to &lt;strong&gt;servant leadership&lt;/strong&gt;, are &lt;strong&gt;leading&lt;/strong&gt; from behind, putting people first, and striving to empower everyone. &lt;/p&gt;
&lt;p&gt;I witnessed true leadership in the early 80's when I served with a humble, but phenomenal leader in the military. He was always part of the team, usually observing, encouraging, and delegating at the front, at times supporting everyone at the back carrying extra equipment on long marches. His secret sauce was to empower everyone in our unit to take responsibility and make decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a huge difference between &lt;strong&gt;directing&lt;/strong&gt; and &lt;strong&gt;leading&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;You cannot &lt;strong&gt;push&lt;/strong&gt; as a leader, you have to &lt;strong&gt;lead&lt;/strong&gt;, &lt;strong&gt;encourage&lt;/strong&gt;, and &lt;strong&gt;pull&lt;/strong&gt; the team to towards a common &lt;strong&gt;goal&lt;/strong&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Negative energy sucks the life out of innovation&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Negative" src="/images/be-positive-2.png"&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Someone who is negative or continuously criticizes everything and everyone, sucks the passion and energy out of a room like a raging fire consumes oxygen. What remains is a lonely lead in a toxic environment, surrounded by uncooperative engineers, and declining support for their goals,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove &lt;strong&gt;toxic&lt;/strong&gt; influence and noise from your Twitter, LinkedIn, and other collaboration  channels today!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No matter how dire the situation, if you lead with &lt;strong&gt;passion&lt;/strong&gt; and &lt;strong&gt;commitment&lt;/strong&gt;, you will find the support you need to move forward and be successful.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;You are but a piece of the bigger puzzle - Union of PEOPLE!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;"DevOps is the union of people, process, and products to enable continuous delivery of value to our end users." = &lt;a href="https://devblogs.microsoft.com/devops/what-is-devops-donovan/"&gt;Donovan Brown&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both Elon's quote, see above, and Donovan's definition of DevOps highlights the importance of the collective, the Borg, the people, the &lt;strong&gt;team&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A true leader extends &lt;strong&gt;trust&lt;/strong&gt; and &lt;strong&gt;empowers&lt;/strong&gt; every member of the team to self-organize, self-manage, and to make decisions. This ensures that the team and its members become self-sufficient and that they do not miss the leader if absent short- or long-term.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;I am the beginning, the end, the one who is many. I am the Borg.&lt;/em&gt;", the Borg.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Lead by example&lt;/h1&gt;
&lt;p&gt;Leaders who inspire me have the following qualities (and more):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;They are &lt;strong&gt;curious&lt;/strong&gt; and &lt;strong&gt;listen&lt;/strong&gt; to their team and stakeholders to be informed on every individual, understand what can be improved, and to learn what they do not know.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They &lt;strong&gt;get their hands dirty&lt;/strong&gt; and are part of the team, especially when the infamous 2AM production incident call is received.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They &lt;strong&gt;deliver on promises&lt;/strong&gt;. Making promises and not delivering will rapidly erode the team's morale and support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They &lt;strong&gt;value people&lt;/strong&gt; and their &lt;strong&gt;work-life balance&lt;/strong&gt;. Any discussion that touches on the work-life balance or a team member's welfare takes priority above everything else.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;TRUST!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trust" src="/images/be-positive-3.png"&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a great quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Building trust and taking care of your people is a mechanism for clarity." - L. David Marquet
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Trust&lt;/strong&gt; is earned through factors such as psychological safety, transparency, understanding of each other, fairness, involvement in decision-making, and a clear vision. &lt;/p&gt;
&lt;p&gt;A few ideas to make your trust account grow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a safe space for everyone to speak up and share their feedback. &lt;/li&gt;
&lt;li&gt;Explain decisions and directives.&lt;/li&gt;
&lt;li&gt;Inspire creativity.&lt;/li&gt;
&lt;li&gt;Foster work:life balance.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Challenge your ecosystem&lt;/h1&gt;
&lt;p&gt;Last, but not least, you must challenge everyone to continuously learn, innovate, learn from failures, innovate, strive to be a tiny bit better tomorrow. Our common engineering ecosystem uses a platter of motivators and challenges to keep our engineers on their toes. &lt;/p&gt;
&lt;p&gt;For example, I just challenged all our engineers with the following:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Challenge" src="/images/be-positive-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What are your experiences and thoughts on this topic?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="learning"></category><category term="innovation"></category></entry><entry><title>Visualizing work item dependencies in Azure Boards</title><link href="https://wsbctechnicalblog.github.io/azure-devops-dependencies.html" rel="alternate"></link><published>2022-09-07T00:00:00-07:00</published><updated>2022-09-07T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-07:/azure-devops-dependencies.html</id><summary type="html">&lt;p&gt;We want to plan and manage dependencies across multiple teams areas, providing awareness of the dependencies in a simple way.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post summarizes the findings from our working group that focused on finding better, simpler, and more reliable ways to plan, manage, and track dependencies in product development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rocket" src="../images/azure-devops-dependencies-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am using a hypothetical scenario of two teams in our &lt;strong&gt;Delivery Teams&lt;/strong&gt; Azure DevOps project who have been tasked to build a rocket with two stages and boosters. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stage 1 must be built first and includes a SpaceX Raptor 1 engine. &lt;/li&gt;
&lt;li&gt;Stage 2 is built next and includes a SpaceX Raptor 2 engines for Vacuum conditions. &lt;/li&gt;
&lt;li&gt;The boosters with SpaceX Merlin engines are built last. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All engines are supplied by the &lt;strong&gt;Build Engines&lt;/strong&gt; team in another &lt;strong&gt;Common Services&lt;/strong&gt; Azure DevOps project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Team" src="../images/azure-devops-dependencies-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When creating the team backlogs, we use the &lt;strong&gt;predecessor&lt;/strong&gt; and &lt;strong&gt;successor&lt;/strong&gt; work item link types to craft the dependency tree and guide the teams through a turbulence free development phase. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Links" src="../images/azure-devops-dependencies-11.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown above, the 1-stage Feature (489406) work item has two &lt;strong&gt;successor&lt;/strong&gt; links, defining that 1-stage must be completed first. It also has a &lt;strong&gt;predecessor&lt;/strong&gt; link to the Raptor v1 engine, which must be available before the 1-stage can be completed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Refer to &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/link-type-reference?view=azure-devops"&gt;Reference guide for link types used in Azure DevOps and Azure Boards&lt;/a&gt; for details on link types. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Delivery Team 1 - Using Dependency Query&lt;/h1&gt;
&lt;p&gt;Delivery team 1 has opted to create one Story Enabler work item for the Raptor v1 engine they need from the Build Engines team and link it to the &lt;strong&gt;1-stage&lt;/strong&gt; Feature (489406), as shown above. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - The delivery team &lt;strong&gt;1&lt;/strong&gt; creates the dependency work item, collaborates with the common services &lt;strong&gt;Engines&lt;/strong&gt; team, and once the requirements are clearly defined the work item is &lt;strong&gt;pulled&lt;/strong&gt; by the common services team to their backlog. Teams only create work items on their own backlogs and never &lt;strong&gt;push&lt;/strong&gt; work items to other backlogs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog 1" src="../images/azure-devops-dependencies-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at their team backlog there is no visual evidence of the Raptor v1 engine dependency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query" src="../images/azure-devops-dependencies-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team uses a &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/wiql-syntax?view=azure-devops"&gt;WIQL Query&lt;/a&gt; to track and manage their and other team dependencies.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query Edit" src="../images/azure-devops-dependencies-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The dependency query is using the &lt;strong&gt;Work Items and direct links&lt;/strong&gt; query type and looks for &lt;strong&gt;predecessor&lt;/strong&gt; link type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;QUERY-BASED DEPENDENCY TRACKING&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their backlog and board only show what they, as team 1, are responsible to deliver.&lt;/li&gt;
&lt;li&gt;There is no noise or &lt;strong&gt;waste&lt;/strong&gt; on their Kanban board.&lt;/li&gt;
&lt;li&gt;Their dependency query has a consistent look &amp;amp; feel as their backlog view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their backlog and board show no visual cue of the Raptor v1 engine dependency. 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Delivery Team 2 - Using Dependency Work Items&lt;/h1&gt;
&lt;p&gt;Delivery team 2 has opted to create a dependency work item (489410) and a Story Enabler (489417) work item for the Raptor v2 engine they need from the Build Engines team. The dependency work item (489410) is used as a placeholder work item on the team's backlog linked to the Story Enabler (489417) which is pulled by the Engines Common Services team to their backlog. They use the same placeholder+dependency pair process to add the Booster's dependency on Merlin engines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog 2" src="../images/azure-devops-dependencies-6.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at team 2's backlog, we note the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dependency work item (489410) for v2 Raptor engine is on the backlog, linked as a child to 2-stage Feature (489407).&lt;/li&gt;
&lt;li&gt;Raptor v2 engine Story Enabler (489417) is gone - pulled to the Engine team's backlog.&lt;/li&gt;
&lt;li&gt;Dependency work item (489411) for Merlin engine is on the backlog, linked as a child to Booster Feature (489408).&lt;/li&gt;
&lt;li&gt;Merlin engine Story Enabler (489419) is still on the team 2 backlog, which implies that the common services Engine team is not able to commit to the work item yet.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board 2" src="../images/azure-devops-dependencies-7.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Switching to the &lt;strong&gt;Feature&lt;/strong&gt; board view, we have a visual cue on both the 2-stage and Booster cards that they have dependencies. Users can click on the dependencies to get more detail and to follow the dependency links.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dependency Extension" src="../images/azure-devops-dependencies-10.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team also uses the optional &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; extension to get visual information on their dependencies, timelines, and risks. The extension is not for the faint hearted but delivers phenomenal dependency details when used correctly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CARD-BASED DEPENDENCY TRACKING&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their backlog and board show what they &lt;strong&gt;and&lt;/strong&gt; common services teams are responsible to deliver.&lt;/li&gt;
&lt;li&gt;Their backlog and board show visual cues of the Raptor v2 and Merlin engine dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CONS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need a custom dependency work item type.&lt;/li&gt;
&lt;li&gt;There is noise and &lt;strong&gt;waste&lt;/strong&gt; on their Kanban board for work their team is not responsible for.&lt;/li&gt;
&lt;li&gt;While common services team are unable to commit, we have two (often confusing) cards on the backlog for each dependency.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="NOTE" src="../images/azure-devops-dependencies-13.png"&gt;&lt;/p&gt;
&lt;p&gt;Personally I prefer how team 1 deals with their dependencies. It is simple, it avoids the noise and complexity of custom and multiple dependency cards and can be combined with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; extension or the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plans&lt;/a&gt; to create visual cues.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Common Services Team - Building Rockets&lt;/h1&gt;
&lt;p&gt;Let us switch focus to the common services Azure DevOps project and the &lt;strong&gt;Engines&lt;/strong&gt; team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog" src="../images/azure-devops-dependencies-12.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at their backlog we see the two Raptor engine Story Enablers (489417, 489418) dependencies and a Spike. They could use &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/add-tags-to-work-items?view=azure-devops"&gt;Tags&lt;/a&gt; to create visual cues that two of the work items are dependencies, or they too could consider a custom Dependency work item type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query" src="../images/azure-devops-dependencies-8.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using a similar WIQL query as the delivery team 2, as above, the Engines team visualize and manage their dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Delivery Plan" src="../images/azure-devops-dependencies-9.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last, but not least the team uses a &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; to visualize their Feature and Requirement backlogs, as well as those of the teams they serve. The Delivery Plan provides an interactive visual view of multiple team backlogs and the dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - The Delivery Plan only draws a dependency line for dependencies which has both the successor and predecessor cards visually shown on the plan.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Other extensions to consider include the &lt;a href="https://marketplace.visualstudio.com/items?itemName=solidify.solidify-scale"&gt;@Scale&lt;/a&gt; extension, which delivers a program board on steroids.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Summary of recommended approach&lt;/h1&gt;
&lt;p&gt;&lt;img alt="NOTE" src="../images/azure-devops-dependencies-13.png"&gt;&lt;/p&gt;
&lt;p&gt;Personally I prefer how the &lt;strong&gt;Delivery Team 1 - Using Dependency Query&lt;/strong&gt; defines their dependencies. Here is a high-altitude overview of their process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delivery team identifies a dependency X (Merlin engine) in feature A (booster).&lt;/li&gt;
&lt;li&gt;Delivery team opens feature A and runs dependency &lt;a href="https://marketplace.visualstudio.com/items?itemName=mohitbagra.witoneclickactions"&gt;one-click&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Merlin engine is the &lt;strong&gt;predecessor&lt;/strong&gt; (must be done first)&lt;/li&gt;
&lt;li&gt;Booster is the &lt;strong&gt;successor&lt;/strong&gt; (must be done after Merlin engine)&lt;/li&gt;
&lt;li&gt;One-click creates work item X&lt;/li&gt;
&lt;li&gt;Adds &lt;strong&gt;parent-child&lt;/strong&gt; to Feature (parent) &lt;/li&gt;
&lt;li&gt;Adds &lt;strong&gt;successor/predecessor&lt;/strong&gt; link to Feature (successor)&lt;/li&gt;
&lt;li&gt;Team collaborates with common services &lt;strong&gt;Engines&lt;/strong&gt; team to define the WHAT, WHY, and WHEN in X.&lt;/li&gt;
&lt;li&gt;Actionable description.&lt;/li&gt;
&lt;li&gt;Realistic acceptance criteria.&lt;/li&gt;
&lt;li&gt;Information on WHEN and priority.&lt;/li&gt;
&lt;li&gt;When common services team is ready to commit, they pull the work item X to their backlog.&lt;/li&gt;
&lt;li&gt;Everyone should "Follow" the work item to be notified of changes.&lt;/li&gt;
&lt;li&gt;Common services optionally changes work item to be parented to one of their Features.&lt;/li&gt;
&lt;li&gt;At this time the work item X vanishes off the backlog as a work item on delivery side.&lt;/li&gt;
&lt;li&gt;Once assigned to an iteration, the work item X will appear on the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; showing the delivery and common services teams.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;SIMPLE&lt;/strong&gt; and no duplicate or confusing cards.&lt;/p&gt;
&lt;p&gt;Everyone then uses the dependency queries we covered herein, and/or &lt;a href="https://marketplace.visualstudio.com/items?itemName=solidify.solidify-scale"&gt;@Scale&lt;/a&gt;, and/or &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt;, and/or &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; to visualize extension.&lt;/p&gt;
&lt;p&gt;How are you dealing with dependencies in Azure DevOps? &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category></entry><entry><title>Trunk-based branching strategy without the bells and whistles</title><link href="https://wsbctechnicalblog.github.io/branching-trunk-based.html" rel="alternate"></link><published>2022-09-02T00:00:00-07:00</published><updated>2022-09-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-02:/branching-trunk-based.html</id><summary type="html">&lt;p&gt;Keeping it simple and avoiding the soul quenching politics&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from the &lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt; virtual chat, where we discussed &lt;a href="/pull-requests-friend.html"&gt;pull requests&lt;/a&gt; and briefly touched on trunk-based development. This article is based on a script I prepared for an upcoming innovation workshop, where we will lift the bonnet to explore our blueprints and&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Why" src="/images/branching-trunk-based-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is one of many branching strategies, our recommended strategy, and the norm with our &lt;a href="./yaml-pipelines-part10.html"&gt;application-type blueprint&lt;/a&gt;-based pipelines to enable &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Reasons" src="/images/branching-trunk-based-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By merging &lt;strong&gt;small&lt;/strong&gt; and &lt;strong&gt;frequent&lt;/strong&gt; updates (short-lived feature branches) to a core &lt;strong&gt;trunk&lt;/strong&gt;, master, or main branch, we streamline merging, integration of code, enable continuous integrations, automated tests, continuous code reviews, and automated validations. We guard the trunk to maintain a &lt;strong&gt;green&lt;/strong&gt; source of truth, ready to deploy at any commit.&lt;/p&gt;
&lt;p&gt;Trunk-based development is a proven and common practice among high-performing DevOps teams, often complemented by feature flags and/or ring-deployments to deploy continuously and release on demand – our future vision. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trunk" src="/images/branching-trunk-based-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We start with a trunk, that has a hypothetical version of MAJOR 0, MINOR 1, and PATCH 0, aka &lt;strong&gt;0.1.0&lt;/strong&gt;. At some point we create a feature branch to build a new feature and another feature branch to address a bug.&lt;/p&gt;
&lt;p&gt;When we are ready to deploy we merge our changes back to the &lt;strong&gt;stable&lt;/strong&gt; trunk. As discussed in &lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;, we are stopped by the branch policies that demand a code review by one or more reviewers, closed comments, linked work items, a clean validation build, and healthy code and security scans.&lt;/p&gt;
&lt;p&gt;We could, but we will not, argue that with trunk-based development we should be able to commit directly to the &lt;strong&gt;trunk&lt;/strong&gt;. Theoretically &lt;strong&gt;yes&lt;/strong&gt; - if we are part of a high-performance and high-trust team we can commit &lt;strong&gt;directly&lt;/strong&gt; to the trunk, however, in my 35+ years of engineering I have had the privilege of working for such a team two or three times.have a small, mature, and experienced team that &lt;strong&gt;trusts&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;When our code has been proven GREEN the changes are merged to the trunk and versioned 0.1.1, followed by the bug fix changes, versioned 0.1.2.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Release branch&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trunk+Release" src="/images/branching-trunk-based-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we are ready to deploy, we create a label and a release branch from the label, which triggers our continuous integration and delivery pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hotfix-1" src="/images/branching-trunk-based-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After we deploy to production the unthinkable happens ... we detect a bug! &lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;not&lt;/strong&gt; serious, we add it to our technical debt and to be fixed with the next feature work.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Hotfix - Option 1&lt;/h1&gt;
&lt;p&gt;If &lt;strong&gt;serious&lt;/strong&gt;, we create a HOTFIX on the trunk and merge it back to the release branch, which in turn triggers another production deploy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that you can perform the merge to trunk and the release branch with one pull request, using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=1ESLighthouseEng.pr-multi-cherry-pick"&gt;PR Multi-Cherry-Pick&lt;/a&gt; extension, developed by the Microsoft Office team. This tool allows you to use the git cherry-pick operation to apply changes to multiple branches.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Hotfix - Option 2&lt;/h1&gt;
&lt;p&gt;Another option is to apply the hotfix to the release branch and then merge it back to &lt;strong&gt;trunk&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hotfix-2" src="/images/branching-trunk-based-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which option is better? You decide and you pick your strategy!&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;trunk-based&lt;/strong&gt; branching strategy is straight-forward, well-suited for the 2-pizza sized product team, and lays a solid foundation for our quest for continuous delivery and release on demand. &lt;/p&gt;
&lt;p&gt;Remember, as with everything else, keep it &lt;strong&gt;SIMPLE&lt;/strong&gt;!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="version-control"></category></entry><entry><title>Automation and the great unknown</title><link href="https://wsbctechnicalblog.github.io/automation-task-group-learning.html" rel="alternate"></link><published>2022-08-05T00:00:00-07:00</published><updated>2022-08-05T00:00:00-07:00</updated><author><name>Daniel Broderick</name></author><id>tag:wsbctechnicalblog.github.io,2022-08-05:/automation-task-group-learning.html</id><summary type="html">&lt;p&gt;Inadvertently restricting access to thousands of pipelines with a simple automated task group insertion.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The problem: How can the security team run all the tasks like the scans they need to run? &lt;/p&gt;
&lt;p&gt;The idea was simple inject an empty security review task group into the release pipelines, the security team can update the task group whenever they please. Providing a central location for the security items. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Simple idea" src="../images/automation-task-group-learning-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Automation to the rescue&lt;/h1&gt;
&lt;p&gt;The automation was written, fired off by a YAML pipeline and the empty task group was injected. Over 3000 pipelines were updated. The injection automation runs weekly to inject the task group to any new pipelines that may be created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Automation 2 the rescue" src="../images/automation-task-group-learning-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the REST API all that had to be done was create the JSON payload and send it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
    &amp;quot;environment&amp;quot;: {},
    &amp;quot;refName&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;enabled&amp;quot;: true,
    &amp;quot;alwaysRun&amp;quot;: true,
    &amp;quot;taskId&amp;quot;: &amp;quot;$TaskGroupID&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.*&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;$TaskGroupName&amp;quot;,
    &amp;quot;continueOnError&amp;quot;: true,
    &amp;quot;timeoutInMinutes&amp;quot;: 0,
    &amp;quot;retryCountOnTaskFailure&amp;quot;: 0,
    &amp;quot;definitionType&amp;quot;: &amp;quot;metaTask&amp;quot;,
    &amp;quot;overrideInputs&amp;quot;: {},
    &amp;quot;condition&amp;quot;: &amp;quot;succeededOrFailed()&amp;quot;,
    &amp;quot;inputs&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Job done – or so it was thought.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Users cannot edit&lt;/h2&gt;
&lt;p&gt;The team got a call a few weeks later that some users could no longer edit their releases, there was an error saving due to an issue with the security review stage.&lt;/p&gt;
&lt;p&gt;How strange? Users could edit before, a quick check of the permissions yield no results as to why. &lt;/p&gt;
&lt;p&gt;After working with a user we discovered the steps that allowed editing and steps to invoke the error. &lt;/p&gt;
&lt;p&gt;What was not known at this stage was why. What was causing this? The security review task group was working, the release pipeline was working. Saving – nope.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Exporting and comparing&lt;/h2&gt;
&lt;p&gt;The pipeline JSON definition was exported before and after changes that enabled users to edit – low and behold a variable that the security team were using in one of the tasks was a parameter in the task group. This was not present when injecting the empty security task group.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;The automation was not injecting this parameter into the definition. This caused the error when certain users saved. The automation was Injecting an empty task group though this task group was no longer empty. &lt;/p&gt;
&lt;p&gt;The automation needed to reflect this. &lt;/p&gt;
&lt;p&gt;A quick edit of the automation and users are back in business.&lt;/p&gt;
&lt;p&gt;Below one can see the input field that is required when using the REST API.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;environment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;taskId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$TaskGroupID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$TaskGroupName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;refName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alwaysRun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;continueOnError&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timeoutInMinutes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;retryCountOnTaskFailure&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;definitionType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;metaTask&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;overrideInputs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;succeededOrFailed()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;inputs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;variableName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;variableValue&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Lesson learnt&lt;/strong&gt;, anytime a new variable or parameter is required the automation will have to be modified to add this input in.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Back to happy customers!!!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy Customers" src="../images/automation-task-group-learning-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This goes to show that automation and improvement is a continuous process. It would have been easy to abandon the automation and go back to what works. With any automation there will be bumps in the road however it’s important to navigate past these. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy automation" src="../images/automation-task-group-learning-4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Happy automation!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="learning"></category><category term="tips"></category><category term="azure-devops"></category></entry><entry><title>Automation Mayhem and Angst is normal</title><link href="https://wsbctechnicalblog.github.io/automation-churn-and-angst.html" rel="alternate"></link><published>2022-07-29T00:00:00-07:00</published><updated>2022-07-29T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-07-29:/automation-churn-and-angst.html</id><summary type="html">&lt;p&gt;Doing a manual and mind-numbing task twice or more? Automate!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The simplest form of automation replaces meek, rudimentary, and manual tasks with digitized processes. While automation is part of the deoxyribonucleic acid (DNA) of a healthy DevOps mindset, we should continue to “strive to innovate and improve beyond repeatable processes and frameworks” – &lt;a href="https://www.tactec.ca/devops-core-values"&gt;Core DevOps Values&lt;/a&gt;. Therefore, instead of focusing on examples of automation we have introduces to help us maintain 2000+ continuous delivery pipelines and associates services, I will focus on the emotional side of automation in this brief post. The automation samples and “gotchas” will follow soon.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Angst Chart" src="../images/automation-churn-and-angst-3.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Brace yourself for instability and churn&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Churn" src="../images/automation-churn-and-angst-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After we identify, analyze, and prioritize a manual and mind-numbing task we &lt;strong&gt;BUILD&lt;/strong&gt; our automation code, as shown in the “Automation Angst” illustration. After &lt;strong&gt;BUILD&lt;/strong&gt;, follows &lt;strong&gt;VALIDATE&lt;/strong&gt;, during which we validate the automation script, the pre- and post-automation state, and the overall outcome of the automation exercise. &lt;/p&gt;
&lt;p&gt;There is usually an initial spike of churn as the automation &lt;strong&gt;failures&lt;/strong&gt; due to unexpected outliers or when we realize that a task that is super easy for a human is a not suited for our binary machines.&lt;/p&gt;
&lt;p&gt;What follows are a few less dramatic spikes as we revise and fine &lt;strong&gt;TUNE&lt;/strong&gt; the automation. There are new feature requests, triggered by new improvement ideas, refactoring, and revisions to reduce technical debt – until we finally make the &lt;strong&gt;GO-FOR-LAUNCH&lt;/strong&gt; call.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Turn it off" src="../images/automation-churn-and-angst-3.png"&gt;&lt;/p&gt;
&lt;p&gt;This type of Microsoft Teams chat message is not uncommon as you flip the automation from dormant to active and it is tempting to disable the automation as requested. However, to be able to fine tune the automation, I urge you not to flip the switch back to dormant. Instead work with the stakeholders, especially the agitated ones, to continuously improve the automation – there is never a good time to action the automation churn! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNINGS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remain critical&lt;/strong&gt; to identify and promote the automation that add value, and to deprecate unviable automation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not despair&lt;/strong&gt; when automation takes time and effort to fine-tune and integrate into our existing processes. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;“Angst” that will never really go away&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Angst" src="../images/automation-churn-and-angst-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The major turbulence we experience while working on process automation is the “Angst” when we realize the potential of the automation on our operational environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Oops" src="../images/automation-churn-and-angst-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As highlighted in the "Automation Angst” illustration the fear of &lt;strong&gt;FAILURE&lt;/strong&gt; spikes at the start and declines gradually as we make progress with fine-tuning and continuous improvement of our automation. The Angst is normal - embrace it as your guardian of built-in quality and embrace the continuous &lt;strong&gt;FAILURES&lt;/strong&gt; to advance your automation.&lt;/p&gt;
&lt;p&gt;While I have no recipe for sleepless nights where you mull over thousands of lines of config-as-code, wake up in a sweat dreaming of scrum masters and engineers pounding on your door after breaking their pipeline, or pondering over when to click the launch button, I can reassure you that my entire team is still intact and promoting automation as a pivotal pillar. At some point you simply have to click on the &lt;strong&gt;ENTER&lt;/strong&gt; button and watch the action q-;) &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNINGS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FAILURE is an option here. If things are not failing, you are not innovating enough.&lt;/strong&gt; - Elon Musk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gradually increase the blast radius&lt;/strong&gt;. Use feature flags or other strategies to gradually increase the area of impact (blast radius) of your automation. The &lt;strong&gt;big bang&lt;/strong&gt; strategy is not only bold, but mote t minimizes your chance to continuously automate, observe, learn, and refine.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What are your automation experiences?&lt;/h1&gt;
&lt;p&gt;What are your automation stories? I am looking for the good, the bad, and the ugly 😊 Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/wpschaub/"&gt;LinkedIN&lt;/a&gt; until we enable the commenting feature below.&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="learning"></category></entry><entry><title>The WHY, HOW, and WHAT of our technical blog</title><link href="https://wsbctechnicalblog.github.io/demo-technical-blog-1.html" rel="alternate"></link><published>2022-06-22T00:00:00-07:00</published><updated>2022-06-22T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-06-22:/demo-technical-blog-1.html</id><summary type="html">&lt;p&gt;Creating a demo pull request and post for our technical blog demo.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been invited to share our insights into how we are experimenting and present our WorkSafeBC technical blog. To show how we moved from ideation to action, gather feedback, and connect with the audience I decided to create a pull request - which will be turned into an actual blog post by the time you read this. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY did we create this blog?&lt;/h1&gt;
&lt;p&gt;This blog is based on an initiative that started as an idea at our March 2021 InnoFest to explore how we can enter the open-source world, collaborate, and share our cutting-edge engineering practices, products, and innovation such as our application-type CI/CD pipeline blueprints, and show the rest of the world that WorkSafeBC is a phenomenal place for engineers to work for.&lt;/p&gt;
&lt;p&gt;We introduced the idea with the following slide (pulled from the original InnoFest 2-min pitch) ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY 1" src="../images/demo-technical-blog-1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;... and suggested that users unfamiliar with WorkSafeBC often wonder if a &lt;a href="/can-government-agencies-be-innovative.html"&gt;government agency can be innovative&lt;/a&gt;. Our innovation may as well have been hiding in a black hole - the community ( YOU ) had no insight into the exciting stuff we were dabbling with.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY 2" src="../images/demo-technical-blog-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;For example, we have shared all our insights and learnings of Azure Pipelines in the detailed &lt;a href="https://wsbctechnicalblog.github.io/tag/pipelines.html"&gt;tag:pipelines&lt;/a&gt; posts.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;HOW did we create this blog?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="How we did it" src="../images/demo-technical-blog-1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;We opted to host the project on GitHub as an open-source project using open-source tools, such as &lt;a href="https://get.foundation/"&gt;Bricks based on Zurb Foundation&lt;/a&gt; and the &lt;a href="https://bricks.stackexchange.com/users/311/sam-hocevar"&gt;Bricks by Sam Hocevar&lt;/a&gt; and &lt;/p&gt;
&lt;p&gt;The blog is based on informal-style technical content, using engineering-friendly markup language, and relying on the pull request workflow for collaboration, review, and revisions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each pull request is reviewed by at least two reviewers, typically a subject matter expert and a manager. &lt;/li&gt;
&lt;li&gt;Once reviewed, the pull request is approved, which triggers the GitHub actions to publish to the live blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is a collaboration channel that has demonstrated to the rest of the world that WorkSafeBC is an innovative and cool company to work for.  &lt;/p&gt;
&lt;p&gt;We have been mentioned in the &lt;strong&gt;Top Stories&lt;/strong&gt; by the &lt;a href="https://devblogs.microsoft.com/devops/"&gt;Microsoft DevOps&lt;/a&gt; channel a few times and have been approached by engineers from around the world through our personal Twitter and LinkedIn channels.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHAT is next?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Next steps" src="../images/demo-technical-blog-1-4.png"&gt;&lt;/p&gt;
&lt;p&gt;What the demo highlights is that what started as a simple idea, using simple tooling, requires more tender loving care and an investment to make it an attractive and successful platform. &lt;/p&gt;
&lt;p&gt;We must &lt;strong&gt;enable comments&lt;/strong&gt; to encourage collaboration and capture feedback, and &lt;strong&gt;enable telemetry&lt;/strong&gt; so that we can track overall traffic and analyze popular content.&lt;/p&gt;
&lt;p&gt;Lastly, a branding guidance and alignment tweak would not only improve your user experience but align our blog with the rest of our organization in terms of the look-and-feel.&lt;/p&gt;
&lt;p&gt;Hope you enjoyed the demo. Thank you for listening / reading.&lt;/p&gt;</content><category term="Events"></category><category term="event"></category><category term="learning"></category></entry><entry><title>Stop the email overload!</title><link href="https://wsbctechnicalblog.github.io/stop-the-email-hell.html" rel="alternate"></link><published>2022-05-27T00:00:00-07:00</published><updated>2022-05-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-05-27:/stop-the-email-hell.html</id><summary type="html">&lt;p&gt;Our quest to optimize email and associated WASTE&lt;/p&gt;</summary><content type="html">&lt;p&gt;Email was born around 1978 and has been the backbone of communication ever since. Unfortunately, when you start to &lt;a href="/optimize-and-track-emails.html"&gt;track&lt;/a&gt; your actual email volume or consider options to &lt;a href="/optimize-and-avoid-emails.html"&gt;optimize&lt;/a&gt; after a well deserved vacation, you realize that enough is enough. Similar to &lt;a href="/stop-the-meeting-hell.html"&gt;stop the meeting overload&lt;/a&gt; we will discuss strategies to optimize your use of email and reduce the amount of email and &lt;strong&gt;WASTE&lt;/strong&gt; thereof.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt;? Well, I receive an average of 154 emails per working day. I have time to read about 20%, skimming the rest as I context switch between meetings, work, and breaks. &lt;strong&gt;NOT&lt;/strong&gt; efficient!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Communication" src="../images/stop-the-email-hell-0.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;A few email anti-patterns to avoid at all costs!&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Communication" src="../images/stop-the-email-hell-1.png"&gt;&lt;/p&gt;
&lt;p&gt;As discussed in &lt;a href="TBD"&gt;Navigating DevOps through Waterfalls&lt;/a&gt;, act 4 STORM - Building a better Boat, communication complexity becomes unproductive and &lt;strong&gt;WASTE&lt;/strong&gt;ful as the number of members in the collaboration thread increases. Looking at the simple illustration above, it is evident that five or more members introduces duplication, split (separate) discussions, inherent quality issues, a flood of emails that impedes our productivity.&lt;/p&gt;
&lt;p&gt;Let us look at some email practices you should avoid to drastically reduce the amount of collaboration &lt;strong&gt;noise&lt;/strong&gt; for your colleagues.&lt;/p&gt;
&lt;h2&gt;The duplicate and split email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Duplicate and Split" src="../images/stop-the-email-hell-2.png"&gt;&lt;/p&gt;
&lt;p&gt;When you send an email to a shared mailbox, as shown above, you may inadvertently send an email to Willy in his private mailbox and an email through the shared mailbox. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Duplicate and Split Noise" src="../images/stop-the-email-hell-2b.png"&gt;&lt;/p&gt;
&lt;p&gt;A minor annoyance, but also an unfortunate opportunity to create a split in collaboration, or worse duplication of effort if the team reacts to the message in the shared mailbox and Willy to the message in his mailbox.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #1&lt;/strong&gt; - **When addressing an email to a shared mailbox, do not add individual users of the same team!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The planetary email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Planetary" src="../images/stop-the-email-hell-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Avoid sending an email to hundreds of users using broad distribution lists without discouraging reply-all.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Planetary Noise" src="../images/stop-the-email-hell-3b.png"&gt;&lt;/p&gt;
&lt;p&gt;If only a fraction of recipients "reply all" you inadvertently create a brushfire of split collaboration threads and an inbox from hell for everyone. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #2&lt;/strong&gt; - Think twice before "replying all" to an email with one or more distribution lists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The meta morphed email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Problem X" src="../images/stop-the-email-hell-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Recognize this type of email response? "&lt;em&gt;Thank you for your help. I have another question ...&lt;/em&gt;" - completely unrelated to the email subject. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Problem Y with Subject X" src="../images/stop-the-email-hell-4b.png"&gt;&lt;/p&gt;
&lt;p&gt;Not only is this confusing but creates a major headache when searching for an email with the solution to the subsequent discussions months later. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #3&lt;/strong&gt; - Stick to the subject! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The empty subject email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Empty Subject" src="../images/stop-the-email-hell-5.png"&gt;&lt;/p&gt;
&lt;p&gt;It happens to all of us, but please try not to send an email with no subject.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty Subject" src="../images/stop-the-email-hell-5b.png"&gt;&lt;/p&gt;
&lt;p&gt;Not only is it bad email etiquette, but it breaks email rules and workflow automation, forcing the recipient to read the email to get an idea of context and priority.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #4&lt;/strong&gt; - Use meaningful and actionable email subjects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The fire and forget email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Fire and forget" src="../images/stop-the-email-hell-6.png"&gt;&lt;/p&gt;
&lt;p&gt;The last example is one that I have started to intentionally deprioritize, and I urge everyone to do the same. User encounters an issue, for example, user is unable to deploy latest release, and decides to send us an email to ask for help. For good measure user also loops in management, after which user disappears (coffee break, lunch, or end-of-day).&lt;/p&gt;
&lt;p&gt;The result is a firestorm with everyone wanting to understand the issue, resolution, and status. Instead of focus on finding the root cause and a speedy remediation, we are shrouded by stress, context switching, duplication of effort, and a work:life imbalance that will taint any future vibrant collaboration.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;A few collaboration strategies that work for us&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Options" src="../images/stop-the-email-hell-7.png"&gt;&lt;/p&gt;
&lt;p&gt;As a team, we looked at three options. (1) No more email, (2) less email, and (3) using different collaboration channels. We opted for a hybrid option, generating less email, and switching to Microsoft Teams for all our team internal and immediate stakeholder collaboration. Essentially we are trying to replicate the in-person environment where we used to have a quick chat on a whiteboard, made our own notes (OneNote, Notepad, ...), and seldom used email to collaborate with stakeholders in our line of sight.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Some users love, some hate email. Some users love, some hate Teams. It is a personal preference - find the sweat spot for your &lt;strong&gt;team&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are three of our core collaboration guardrails:&lt;/p&gt;
&lt;h2&gt;Use email for broad one-way notifications&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Options" src="../images/stop-the-email-hell-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Use email for broad notifications, clearly stipulating that recipient(s) should &lt;strong&gt;not&lt;/strong&gt; reply-all.  &lt;/p&gt;
&lt;h2&gt;Use email where process dictates&lt;/h2&gt;
&lt;p&gt;Use email where an existing process dictates the use of email or is optimized for the use of emails.&lt;/p&gt;
&lt;h2&gt;Use teams collaboration for everything else&lt;/h2&gt;
&lt;p&gt;For everything else, use another collaboration channel, such as Microsoft Teams. &lt;/p&gt;
&lt;p&gt;Email promotes costly context switches. Send email, wait for response, switch context, focus on something else, response email notification, and another context switch is triggered. Interruptive, costly, and stressful!&lt;/p&gt;
&lt;p&gt;In comparison Microsoft Teams gives use a cue if you are available, busy, or out of the office. Gone are the guessing days and impatiently waiting for a reply. Instead, we can ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a chat to exchange ideas, share video to add virtual (v) face to vFace social cues, and share our desktops or a virtual whiteboard to inject visual feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Use named Team Chats and Teams Channels to focus collaboration on a specific context and improve discoverability of shared content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Easily share files, data, and knowledge, stored on SharePoint.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Share files by reference, not a copy thereof. This allows everyone part of the collaboration to revise and observe the content real-time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search for discussions and content in one place. Gone are the days of brittle and time-consuming Outlook searches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate Microsoft Teams with Microsoft PowerApps, Azure DevOps, and other 3rd party products, to create an efficient collaboration ecosystem that empower us to move forward &lt;strong&gt;together&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope you enjoyed this quick chat. Good luck optimizing your &lt;a href="/stop-the-meeting-hell.html"&gt;meetings&lt;/a&gt; and &lt;strong&gt;collaboration&lt;/strong&gt; - focus on what is important!&lt;/p&gt;
&lt;p&gt;Please share your thoughts on email, Microsoft Teams, and other collaboration solutions.&lt;/p&gt;</content><category term="Posts"></category><category term="eliminate-waste"></category></entry><entry><title>Can government agencies be innovative?</title><link href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html" rel="alternate"></link><published>2022-05-24T13:13:00-07:00</published><updated>2022-05-24T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-05-24:/can-government-agencies-be-innovative.html</id><summary type="html">&lt;p&gt;How WorkSafeBC changed my perception.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was a sunny day in July 2018, when I found myself standing on Westminster Highway, gazing at the WorkSafeBC entrance sign. &lt;/p&gt;
&lt;p&gt;&lt;img alt="WSBC" src="../images/can-government-agencies-be-innovative-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Performing the 4x4x4x4 breathing technique, I was calming myself down to be focused.  After years of working as a consultant at government agencies, including in Bahrain and Kuwait, I was at two minds whether to show up for the interview at the provincial agency. To me, government contracts smell of rigid management, mind-numbing processes, regulations, lackluster and non-innovative engineering – right?&lt;/p&gt;
&lt;p&gt;I started my career as an electrical engineer and fell in love with programming when I was introduced to debugging assembler code at the hardware level and spent my weekends tinkering with my &lt;a href="https://en.wikipedia.org/wiki/Zilog_Z80"&gt;ZX Spectrum&lt;/a&gt; at home in the early 80s. My career was a mind-blowing adventure of more processes and products that I can remember, such as Assembler, Basic  , Cobol, C++, C#, Fortran, and PL/M programming, analysis, design, research, and management, with a strong focus on being an individual contributor – an engineer at heart.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Engineering is the closest thing to magic that exists in the world." ~ Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In early 2018, after a phenomenal 9-year stint at Microsoft, I was burnt-out. My passion for technology, energy, and health were at an all-time low. I opted for a personal sabbatical and switched off all electronic devices for 6 months, focusing on my family, the stunning beauty of British Columbia, and a pile of unread books.&lt;/p&gt;
&lt;p&gt;By July, I started to get restless as my passion for bits and bytes began to reboot my systems and   working on my work:life balance. At the same time, I got a call from a local vendor, looking for an experienced Scrum Master for WorkSafeBC. I walked past the entrance sign, up the parking lot hill, walked past the concrete complex, and signed in at the main reception.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agent9" src="../images/can-government-agencies-be-innovative-2.png"&gt; &lt;/p&gt;
&lt;p&gt;The interview was not what I expected. Instead of formality, I enjoyed a behavioural and informal interview. I met Agent of Change #9 from &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; for the first time, as well as a manager that not only contradicted my perception of government organizations but pivoted from the Scrum Master role to Cloud Systems Engineering – very Agile! On my way back to the main reception I was mesmerized by a poster with WorkSafeBC’s noble vision: “&lt;em&gt;British Columbians free from workplace injury, disease, and death.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;Less than a month later, I joined the Cloud Operations team and found myself in an environment buzzing with an Agile and emerging DevOps mindset, and one that had an open ear for many of the improvement ideas I shared with engineering and management.  I became an advocate for simplicity, chiseling at complex, expensive and manual processes, expecting to be shown the main entrance door sooner than later. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Simplicity is a great virtue, but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.” – Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast forward 1.5 years and I joined the organization full-time. Other than benefits and payroll, nothing changed  . I was empowered to start the common engineering idea on the side of my desk, continuously experimenting, innovating, and collaborating across the organization   through informal working groups and communities of practice. &lt;/p&gt;
&lt;p&gt;Agile and DevOps transformations, Scaled Agile Framework (SPC), SAFe DevOps, Azure and Azure DevOps services, Visual Studio, PowerShell, continuous integration and delivery automation, shift-left, shift-right, guardrail stewardship, collaborate on manifestos, working groups, dojos, communities of practice, centers of enablement, config-as-code, pipeline-as-code, automating everything automatable, reducing waste, optimizing meetings, writing blogs, articles, and even co-authoring a book was a sprinkle of the amazing exposure to people, process, and products I enjoyed during this period.  &lt;/p&gt;
&lt;p&gt;I also had the privilege of completing the emerging leadership program. What I learned about myself during the program was both thrilling and chilling. I was flabbergasted by how others viewed me. I received lots of positive feedback, but it was the candid feedback that revealed unsettling challenges that had played a major role in my 2018 burnout - my obsession to be a perfectionist, my inability to achieve a work/life balance, and my acute allergy for command&amp;amp;control micro-managers. During the program, and especially in my final assignment, I highlighted the need for more collaboration, trust, the willingness to fail, and to create a fun working environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Failure is an option here. If things are not failing, you are not innovating enough." - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast-forward another 1.5 years, I find myself working with colleagues who are embracing Agile, continuously working on its DevOps mindset, moving from a project to a product approach, inspiring continuous learning, continuous improvement, continuous experimentation, and encouraging everyone to embrace failure as an opportunity to reflect and learn. Vibrant collaboration, forward-thinking, and innovation have become the norm. It is gratifying to see leadership   not only actioning industry trends and driving the bottom line, but actively listening to its people. &lt;/p&gt;
&lt;p&gt;Today, I am leading the now official Enterprise Development and Operations (EDO) Common Engineering team, filled with passionate, exceptionally smart, and down-to-earth engineers, collaborating with management that walks-the-talk, trusts, and supports our drive for simplicity, consistency, security, empowerment, and unrestricted collaboration to continue to build connections. Around me, I have observed     a growth in servant leaders, who appreciate the value of people and the importance of collaboration and empowering everyone to become a leader. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Bosses demand respect, delegate and hold people accountable. Leaders collaborate and hold themselves accountable.” – Willy-Peter Schaub&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are an empowered team, focused and serious when we must be, brainwashed by SpaceX and Elon’s infamous quotes (my doing), always reminding each other of our quest for a healthy work:life balance and the importance of having fun.  You can peruse Why are we a (the) place to work for? to get an insight into our team.&lt;/p&gt;
&lt;p&gt;I recently stood at the same spot, looking at the entrance sign. It dawned on me that a mere 3.5 years has passed. The phenomenal change is not only exciting but obliterates any doubts and concerns I had when I was calming myself down for my interview. I see how our innovation and technology work not only supports our overall  organizational vision but will take us places we may not have dreamt of.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“As a leader I want to serve and protect my team, and encourage and empower everyone’s creativity, passion, purpose, and strengths. I want to leave an empowered team and not be missed.” – Willy-Peter Schaub&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="journal"></category><category term="learning"></category></entry><entry><title>Improving DORA metrics</title><link href="https://wsbctechnicalblog.github.io/improving-dora-metrics.html" rel="alternate"></link><published>2022-04-29T13:13:00-07:00</published><updated>2022-04-29T13:13:00-07:00</updated><author><name>Shay Vannery</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-29:/improving-dora-metrics.html</id><summary type="html">&lt;p&gt;We would like to plan how to track and empower engineering to increase deployment frequency, and reduce lead time for change, MTTR, and change failure rates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Streamlining software delivery can seem deceptively simple. Technology consultants (like myself) are quick to tout the trending new tool or methodology that can magically solve all of an organization’s woes. Though tools, automations and practices can help to a large extent, there is no alternative to holistically and critically examining one’s own organizational practices and value streams.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;1.0 Map the value stream for each application&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;value stream&lt;/strong&gt; is the set of actions that take place to add value to a customer from the initial request through realization of value by the customer.&lt;/p&gt;
&lt;p&gt;Every organization has a somewhat unique set of actions that must occur to get a user story from the Ideation phase into the hands of the end-user. This value stream has likely been developed over many years, by several groups of people with differing priorities. It is imperative to examine said value stream periodically to ensure it is free of redundancies; and updated to better fit present-day organizational priorities and goals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Tip&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Applications come in different shapes, sizes and forms. It is worthwhile to re-examine your value streams on an application/ component level; as what works for a highly-visible, complex end-user facing application might be overkill for a simpler, back-end service or job.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;2.0 Measure baseline metrics for each application &amp;amp; set SMART goals&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;What is not measured, cannot be improved.&lt;/strong&gt; What is not improved, is always degraded.&lt;/p&gt;
&lt;p&gt;Before embarking upon an improvement journey, it is critical to examine where we currently stand. The purpose of this baselining activity is to assess current levels, and to be able to articulate where we’re headed; with real quantitative data.  Enthusiastic teams have a tendency to aspire for grandiose goals like “Zero defects in Production”. Though admirable; it is best to set goals that are Specific, Measurable, Achievable, Realistic and Time-bound at this stage.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;3.0 Analyze commonalities and patterns&lt;/h1&gt;
&lt;p&gt;Real data obtained from steps 1.0 and 2.0 above will undoubtedly reveal commonalities and patterns. Some of these may have been obvious; but now we have proof and can make decisions driven by data. This data can help identify bottlenecks and repetitive manual tasks ripe for automation. Such an approach will ensure maximum return on investment.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;4.0 Identifying barriers&lt;/h1&gt;
&lt;p&gt;Now, let’s assume that the organization has bought into the efficacy of DORA metrics; and the teams consider it a worthwhile endeavor to try and improve upon them. 
Each organization and each team must ask themselves some questions. These are just indicative examples:&lt;/p&gt;
&lt;h2&gt;4.1 Deployment Frequency&lt;/h2&gt;
&lt;p&gt;Increasing deployment frequency has its benefits. Teams deploying changes to Production frequently stand to benefit from quicker end-user feedback, quicker detection of bugs and defects, fewer conflicts, and easier recovery from unintended consequences. Reducing batch sizes is the easiest way teams can achieve more frequent deployments. However, this might not be a viable option for (say) monolithic legacy applications. Answering some of these questions could likely reveal the path to increasing deployment frequency:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are we slicing feature stories finely enough? Can we slice them finer?&lt;/li&gt;
&lt;li&gt;Are there application architecture constraints?&lt;/li&gt;
&lt;li&gt;Are there infrastructure/ test environment constraints? &lt;/li&gt;
&lt;li&gt;Are there resource/ staffing constraints?&lt;/li&gt;
&lt;li&gt;Is there a lot of rework happening? Why?&lt;/li&gt;
&lt;li&gt;Any external factors?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Deployment Frequency is by far the easiest metric to measure. This information could be gathered manually at the team level, or in an automated fashion from the deployment pipeline. Task tracking tools like JIRA or Azure Boards have effective tagging, filtering and reporting mechanisms to simplify gathering and disseminating this metric at scale. &lt;/p&gt;
&lt;h2&gt;4.2 Lead time for change&lt;/h2&gt;
&lt;p&gt;There are different ways to scope lead time for change. For the sake of this conversation; let’s assume lead time begins the moment a developer starts working on a change; and ends the moment the change is available to an end-user. Reducing lead time allows an organization to pivot quickly, and act upon changing requirements with agility. Answering some of these questions could help identify barriers to reduce lead times:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;See 4.1.2 &amp;amp; 4.1.3. (architecture/ infrastructure constraints)&lt;/li&gt;
&lt;li&gt;Is the DEV/TEST methodology conducive to quick lead times?&lt;/li&gt;
&lt;li&gt;Is the delivery pipeline automated? Are there further opportunities to automate?&lt;/li&gt;
&lt;li&gt;Are there redundancies in the pipeline?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Change Lead time can be tracked manually at the team level. It can also be broadly measured with the help of the deployment pipeline. If set up correctly, the deployment pipeline can also provide deeper and more granular insights into the lead times at various pipeline stages. &lt;/p&gt;
&lt;h2&gt;4.3 Change Failure Rate (CFR)&lt;/h2&gt;
&lt;p&gt;Change failure rate is the percentage of deployments that lead to downtime, or serious issues in a given time period. The definition of “failure” may vary from team to team. For the sake of this conversation, let’s assume a failed deployment refers to a deployment that had to be rolled back from production, or required a hotfix to resolve a high-severity incident. Though it is easy to guess root cause of failures by relying on anecdotal evidence or gut-feel, it is best to make improvements by asking questions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are testing best practices consistently followed across the SDLC?&lt;/li&gt;
&lt;li&gt;Are test cases comprehensive enough to detect issues in lower environments?&lt;/li&gt;
&lt;li&gt;Are lower environments similar enough to production to allow for reliable test results? &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on how a rollback is initiated, Change Failure Rate can potentially be tracked at the repository level. This would require each hotfix/ remediation build to be labelled as such in (say) GitHub. However, if the rollback protocol is not managed via the deployment pipeline, or if the failure is remediated using a manual hotfix; service management tools like ServiceNow can help record and measure CFR. &lt;/p&gt;
&lt;h2&gt;4.4 Mean Time To Recovery (MTTR)&lt;/h2&gt;
&lt;p&gt;Mean time to Recovery or Mean time to Resolution is the average amount of time required to recover from a failure. For the sake of continuity; let’s define failure as explained in 4.3 (CFR). If the application requires high-availability and high-resiliency, MTTR becomes the most important metric to track and improve. Answering some of these questions could help identify barriers to improving MTTR:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How are issues (errors/ defects/ outages) detected today?&lt;/li&gt;
&lt;li&gt;How are incidents routed to the appropriate resolution teams?&lt;/li&gt;
&lt;li&gt;Do development teams have expected Service Levels objectives and indicators codified?&lt;/li&gt;
&lt;li&gt;Are resolution teams aware of the mitigation protocol?&lt;/li&gt;
&lt;li&gt;Are resolution teams empowered to resolve issues and make quick decisions?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Similar to Change Failure Rate, MTTR can be complex to measure. At the risk of oversimplifying this nuanced process, teams may rely on monitoring and observability platforms to capture the start and end times of an incident. Depending on the nature of the issues; Application Insights within Azure Monitor or even PagerDuty can be leveraged to measure MTTR. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;5.0 Prioritize and eliminate barriers&lt;/h1&gt;
&lt;p&gt;As a proponent of a data-driven decision making culture, I have avoided prescriptive approaches to improving DORA metrics. It is best to contemplate the barriers on a team level, or better still, an application level; and focus on dismantling these barriers in a methodical and purposeful way guided by priority and return on investment. &lt;/p&gt;
&lt;p&gt;That said, most of the identified barriers can likely be classified into the following categories (in order of difficulty):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Skill/Knowledge constraints&lt;/li&gt;
&lt;li&gt;Process constraints&lt;/li&gt;
&lt;li&gt;Budgetary constraints&lt;/li&gt;
&lt;li&gt;Architecture/ Infrastructure limitations&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;6.0 Conclusion&lt;/h1&gt;
&lt;p&gt;It is likely that some of the barriers we encountered can be eliminated by coaching team members on existing organizational protocols and widely accepted engineering best practices around development, testing, deployment, monitoring, error detection and mitigation. Communities of Practice must make continuous learning a key priority, and time must be allocated for learning and teaching.&lt;/p&gt;
&lt;p&gt;If it emerges that changes to processes are required, these changes must be meticulously recorded, observed and measured as an experiment. The results must be peer reviewed and widely distributed within the organization, so as to foster a culture of experimentation and continuous improvement.&lt;/p&gt;
&lt;p&gt;Organizations must examine time and investment budgets and ensure there are appropriate allocations for learning, experimentation, knowledge sharing and technical debt. If required, monolithic applications must be pared down and eventually replaced with micro-services that are conducive to modern-day technological advances. It is now possible to achieve levels of uptime and resiliency that were unheard of even 5 years ago. Let’s work together to ask questions, celebrate successes and failures alike, and continue to deliver exceptional value to our end users on time, every time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Related References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/devops-sre/announcing-dora-2021-accelerate-state-of-devops-report"&gt;2021 Accelerate State of DevOps report addresses burnout, team performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/metrics-importance.html"&gt;Metrics importance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="devops"></category><category term="metrics"></category><category term="eliminate-waste"></category></entry><entry><title>Why are we a (the) place to work for?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-4.html" rel="alternate"></link><published>2022-04-22T00:00:00-07:00</published><updated>2022-04-22T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-22:/common-engineering-journal-4.html</id><summary type="html">&lt;p&gt;Safe and healthy workplaces. Compassionate and responsive service.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I could take a shortcut and refer you to the &lt;a href="https://reviews.canadastop100.com/top-employer-worksafebc"&gt;WorkSafeBC Top Employer 2022&lt;/a&gt; article. It showcases why WorkSafeBC was voted as a top employer in 2022, during the challenging Covid pandemic.&lt;/p&gt;
&lt;p&gt;Instead, I will emphasize the humbling mission that fuels me with energy every day - "&lt;em&gt;Prevent workplace injury, illness, and death, and support injured workers through fair compensation and effective rehabilitation.&lt;/em&gt;" - and introduce WorkSafeBC through the lens of our vibrant &lt;a href="/common-engineering-journal-2.html"&gt;EDO Common Engineering&lt;/a&gt; team.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Through the lens of the common engineering team&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Confused" src="../images/common-engineering-journal-4-3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WIIFM&lt;/strong&gt;? First, you will be part of a team that is curious but despises TLAs (three-lettered acronyms). We prefer the question "&lt;em&gt;what is in it for me&lt;/em&gt;" instead of "&lt;em&gt;WIIFM&lt;/em&gt;" - it is clear and avoids confusion, awkward pauses, and Google'ing. See &lt;a href="/why-i-hate-tlas.html"&gt;Why I loathe when engineers use TLAs, such as CD vs CD!&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We are a diverse family of engineers&lt;/strong&gt;, working in one or more of three functional roles. &lt;strong&gt;Pathfinders&lt;/strong&gt; are engineers that are part of shared services we rotate through software engineering teams to share their experience and bring real-world learnings back to our team. These rotations can last from hours to months, fostering &lt;strong&gt;curiosity&lt;/strong&gt; and &lt;a href="https://medium.com/making-meetup/t-shaped-engineering-on-meetup-pro-1e0a38df7f5b"&gt;T-shaped&lt;/a&gt; engineering. &lt;/p&gt;
&lt;p&gt;Benefits?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collaboration (SILO antidote)&lt;/li&gt;
&lt;li&gt;Continuous learning&lt;/li&gt;
&lt;li&gt;Faster delivery&lt;/li&gt;
&lt;li&gt;Productivity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other functional roles include the delivery of exceptional &lt;strong&gt;Operations&lt;/strong&gt; support and continuous innovation and improvement of our common engineering ecosystem by &lt;strong&gt;Platform Advancement&lt;/strong&gt;. All three functional roles are equally important - 
without a balance, we cannot continuously deliver value!&lt;/p&gt;
&lt;p&gt;&lt;img alt="EDO Ce" src="../images/common-engineering-journal-4-0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Our team is based on leadership at every level&lt;/strong&gt; of the functional role and every member of our crew, encouraged to self-organize and self-manage. We value &lt;strong&gt;autonomy&lt;/strong&gt;, &lt;strong&gt;transparency&lt;/strong&gt;, and &lt;strong&gt;simplicity.&lt;/strong&gt; For example, every engineer is empowered to question a process and experiment by removing steps that appear to add no value. One of our main pillars is &lt;strong&gt;TRUST&lt;/strong&gt; - we trust each other and what we do!&lt;/p&gt;
&lt;p&gt;Benefits?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decentralized management (Micro-management antidote)&lt;/li&gt;
&lt;li&gt;Resilience allowing team to withstand adversities, such as the Covid pandemic.&lt;/li&gt;
&lt;li&gt;Shorter lead and cycle times.&lt;/li&gt;
&lt;li&gt;Simple solutions are easier and cheaper to maintain - engineers can go home earlier and experience less annoying &lt;a href="https://opensource.com/article/18/12/blueprint-team-devops-mindset"&gt;2-AM&lt;/a&gt; calls.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Evolution" src="../images/common-engineering-journal-4-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WorkSafeBC presents a technology heaven for engineers&lt;/strong&gt;. The diverse world of &lt;strong&gt;processes&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;, ranging from the classic to bleeding edge technology, ensures that every engineer is continuously learning and pushing the boundaries of integration. &lt;/p&gt;
&lt;p&gt;Here are some of the exciting &lt;strong&gt;process&lt;/strong&gt; and &lt;strong&gt;product&lt;/strong&gt; adventures planned for 2022 as part of the common engineering ecosystem, sorted from most to least exciting (through my lens):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate everything automatable and empower with Self-Service Automation.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-ca/services/devops/"&gt;Azure DevOps&lt;/a&gt; environment that is based on self-service automation, config- and pipeline-as-code.&lt;/li&gt;
&lt;li&gt;&lt;a href="./moving-hundreds-of-pipeline-snowflakes-part10.html"&gt;Second generation Yet Another Markup Language (YAML)-based Application-Type Continuous Integration (CI)/Continuous Delivery (CD) Pipeline Blueprints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Hypothesis driven development and embrace failure as an opportunity to innovate.&lt;/li&gt;
&lt;li&gt;Embrace cloud native computing (watch this space for a related article by my colleague Sergiy), containerization and orchestration for the right workloads.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-ca/"&gt;Azure Services&lt;/a&gt; and Service Fabric Orchestrator as a development platform.&lt;/li&gt;
&lt;li&gt;More QUALITY, less WASTE!&lt;/li&gt;
&lt;li&gt;Continuous experimentation, viewing failures as an opportunity to learn.&lt;/li&gt;
&lt;li&gt;Behaviour Driven Development (BDD).&lt;/li&gt;
&lt;li&gt;Domain Driven Design (DDD).&lt;/li&gt;
&lt;li&gt;Test-driven Development (TDD).&lt;/li&gt;
&lt;li&gt;Reducing waste and &lt;a href="/stop-the-meeting-hell.html"&gt;optimizing meetings&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;SHIFT &amp;lt;&amp;lt; Left, empowering delivery teams and performing validation scans, such as security, quality, and guardrails, as early as possible.&lt;/li&gt;
&lt;li&gt;SHIFT Right &amp;gt;&amp;gt;, using configuration-as-code and committing to delivery configuration as late as possible.&lt;/li&gt;
&lt;li&gt;People first mindset.&lt;/li&gt;
&lt;li&gt;Vibrant collaboration, creating invaluable bridges and busting SILOs.&lt;/li&gt;
&lt;li&gt;Using animated whiteboard software to create crisp, informative, and fun process and product awareness videos.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Programming Interface (API), Mobile, Performance, and User Interface testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flutter-based mobile apps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Bleeding Edge" src="../images/common-engineering-journal-4-2.png"&gt;&lt;/p&gt;
&lt;p&gt;When you rotate into the role of &lt;strong&gt;Platform Advancement&lt;/strong&gt; you are not only automating everything automatable, running continuous experiments, but also spending a lot of time with &lt;strong&gt;forward&lt;/strong&gt; and &lt;strong&gt;long-term&lt;/strong&gt; thinking. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Smile" src="../images/common-engineering-journal-4-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Crafting tomorrow's world is often a daunting task - however, there is no better feeling to see your idea being launched and creating a smile on every stakeholder's face. &lt;/p&gt;
&lt;p&gt;We have an ambitious vision to empower all engineers and to practice and promote the mindset of &lt;strong&gt;continuous experimentation&lt;/strong&gt; where failure is viewed as a positive opportunity to learn and innovate.&lt;/p&gt;
&lt;p&gt;You will find this and other Elon's quotes all over our blogs, presentations, portals, and documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;Failure is an option here. If things are not failing, you are not innovating enough.&lt;/em&gt;" - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Failure" src="../images/common-engineering-journal-3-5.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Last, but not least - we have the option to work at the &lt;strong&gt;office&lt;/strong&gt;, at &lt;strong&gt;remotely&lt;/strong&gt; from home, or both. Autonomy, self-organization, self-management, and flexibility!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope that this has given you a sneak peek into our team and the world of engineering in our group at WorkSafeBC.&lt;/p&gt;
&lt;h2&gt;We are looking for flexible and passionate engineers&lt;/h2&gt;
&lt;p&gt;Interested in our world? If yes, we currently have position in our &lt;strong&gt;Platform Advancement&lt;/strong&gt; area for an &lt;strong&gt;Software Engineering Practices Lead&lt;/strong&gt; and &lt;strong&gt;Quality Assurance Lead&lt;/strong&gt;. In both cases you would enable our common engineering ecosystem, to shift across multiple disciplines to create a place where the highest standards are maintained, and provide vision, direction, and guardrails (governance). &lt;/p&gt;
&lt;p&gt;Keep an eye on my &lt;a href="https://twitter.com/wpschaub"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/wpschaub"&gt;LinkedIn&lt;/a&gt; channels for posts such as &lt;a href="https://www.linkedin.com/posts/wpschaub_azuredevops-devops-mindset-activity-6889783742718722048-xXaa"&gt;this&lt;/a&gt; for more details on the opportunity. &lt;/p&gt;
&lt;p&gt;Ping me any time - I would love to &lt;strong&gt;collaborate&lt;/strong&gt; with you!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="devops"></category><category term="journal"></category></entry><entry><title>Common Engineering - To Standardize or Not to Standardize, view from a directors point</title><link href="https://wsbctechnicalblog.github.io/standardize-or-not-to-standardize.html" rel="alternate"></link><published>2022-04-06T00:00:00-07:00</published><updated>2022-04-06T00:00:00-07:00</updated><author><name>Andre Kaminski</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-06:/standardize-or-not-to-standardize.html</id><summary type="html">&lt;p&gt;Which is better, standardization or experimentation?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have to admit that I don’t like going shopping, so I leave it mostly to my wife. If I have to go to a store, I want to finish this exercise as quickly as possible, as … I find it boring.&lt;/p&gt;
&lt;p&gt;The biggest frustration I have is when my wife sends me to a supermarket, and suddenly I realize that they changed location of aisles with specific products. This is most probably one of the very few occasions when you can hear me swearing, and where I pray for standardization. Standardization makes our lives so much easier and efficient.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="shopping" src="../images/standardize-or-not-to-standardize-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now I have to navigate through the aisles and shelves, still swearing, trying to find what I have on my list.
But guess what. Sometimes, unexpectedly I get lost in an unknown aisle and find some new ethnic produce that I have never tried. Since I am a risk taker, quite often I discover a new food that extends my cooking abilities and menu horizon (which mostly, but not always, is pleasing to my wife and kids).&lt;/p&gt;
&lt;p&gt;This is actually a great example of benefits and limitations of standardization versus experimentation.&lt;/p&gt;
&lt;p&gt;Standardization allows us to be more efficient and faster in the Cynefin framework parlor - simple or complicated processes. In this case finding a standard product that I have used in the past, and which my wife put on the list, is way easier and faster. However the cost of this efficiency is a loss of creativity. While being focused on collecting what I need, I mostly miss the discovery part.&lt;/p&gt;
&lt;p&gt;Henri Fayol and Henry Ford mastered the standardization and repeatability of processes to perfection. But again, manufacturing of widgets or cars belongs to simple (T-Model) or complicated domains (Tesla).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="manufacturing" src="../images/standardize-or-not-to-standardize-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When it comes to innovation however, this stops working. Rigidity of processes and penalizing those who try to break them, negatively impacts our ability to find new solutions to existing problems.&lt;/p&gt;
&lt;p&gt;So here are two ways to win in the market. One is to be more efficient than competitors, the other is to find a better solution but at the cost of initial speed of delivery. The problem with the former is that you can optimize the process only to certain level after which, you will plateau. You can be efficient only to a point. Although initially you might win over the competitors, eventually they are going to catch up. The optimization of the process has its limits.&lt;/p&gt;
&lt;p&gt;On the other hand, innovation brings intellectual property into the picture, that cannot be easily replicated. Yes, the competitors will eventually catch up where you are right now, but it will take them much longer (think Porter’s strategies). As a matter of fact, if you continue innovating, your competitors will always try to catch up, and will always be behind. Innovation doesn’t have limit, it doesn’t have plateau, as long as you keep inflow of new ideas.&lt;/p&gt;
&lt;p&gt;But there is another problem with innovating - it doesn’t guarantee success. As a matter of fact more that 90% of ideas are not going to work, and most probably will be waste of time. So the effectiveness disappears in a puff of smoke.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="effectiveness" src="../images/standardize-or-not-to-standardize-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, it is the 10% of those ideas that make difference, and elevate the companies to the top. This is not just linear growth, but rather exponential rocket launch pad.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="phone in hand" src="../images/standardize-or-not-to-standardize-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, both approaches have advantages and failings.&lt;/p&gt;
&lt;p&gt;Which one is better? &lt;/p&gt;
&lt;p&gt;As a consultant would say - ‘it depends’.&lt;/p&gt;
&lt;p&gt;It depends on ‘personality’ and culture of your organization, risk tolerance, desperation to succeed. This is the reason why start-ups are more innovative (they have nothing to lose), while well established companies are more cautious and focus more on efficiency and process improvement by standardization (middle management tries to limit the risks). But then many established companies survive, while 90% of startups fail.&lt;/p&gt;
&lt;p&gt;I believe that the best approach, rather than trying to standardize, is to provide guardrails. Guardrails would define when you should standardize, while still keeping open options for projects and products that are just a hypothesis. Both approaches are viable, but which side of the spectrum you want to be, will depend on what you are trying to achieve. &lt;/p&gt;
&lt;p&gt;In organization that I work - WorkSafeBC, we decided exactly to do this - find balance.
A few years back we created a Common Engineering (Ce) team whose responsibility is to enable our engineering community to collaborate and agree on best practices that then become set of guardrails for our teams. A team can select one of the standards within the portfolio, but without locking them down to a particular way of solving a problem. The teams can still come up with different, innovative solution, which could be added to our portfolio library or pattern for re-usability. Common Engineering team is a custodian of these guardrails, providing information about existing standards, and at the same time enabling teams to on-board new best practices. We use few instruments for this, that are facilitated by Ce.&lt;/p&gt;
&lt;p&gt;&lt;a href="/ceremony-center-of-enablement.html"&gt;&lt;strong&gt;Centers of Enablement (CoE)&lt;/strong&gt;&lt;/a&gt;
These are small (5-9 people), cross functional, long living groups that provide overall governance and direction to a specific function. They meet frequently, facilitating development of best practices and standards through Communities of Practice (CoPs) and Working Groups (WGs).&lt;/p&gt;
&lt;p&gt;&lt;a href="/ceremony-community-of-practice.html"&gt;&lt;strong&gt;Communities of Practice (CoP)&lt;/strong&gt;&lt;/a&gt;
CoPs are larger groups of people with common interests, but the membership is not fixed. They focus on providing feedback to practices proposed by CoEs and suggesting new solutions. Creativity and feedback through diversity of opinions and experiences.&lt;/p&gt;
&lt;p&gt;&lt;a href="/ceremony-working-group.html"&gt;&lt;strong&gt;Working Groups (WG)&lt;/strong&gt;&lt;/a&gt;
These are temporary, fixed membership groups called to solve a specific problem. They are small, focused, and as soon as problem is solved, they disband and reform with new members to address next problem in the priority backlog.&lt;/p&gt;
&lt;p&gt;If you would ask me about advice which way to go, this would be my answer.&lt;/p&gt;
&lt;p&gt;There is no right or wrong way. It is a &lt;strong&gt;spectrum&lt;/strong&gt;, as every organization is different, and different levels of standardization, consistency or innovation might be needed. I have to admit that personally I am inclined to be rather on innovation side (the discovered products in the ethnic foods stay with me for life, while my wife’s list is just once off thing, that I will forget the minute I leave the supermarket).&lt;/p&gt;
&lt;p&gt;So here is the set of questions that we should ask ourselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;are we in regulated industry and need to conform to specific audit requirements? If so, standardization and gated processes are better choice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how innovative we want to be? If innovation is our primary goal, we will want to leave as much freedom to the teams as possible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;are we working on a product that nobody did before? Again, you will want to experiment with as little constraints as possible (your company’s survival could depend on it after all)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how new the technology is that we are intending to use? If it is new, we want to experiment and innovate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how difficult it will be to maintain the product in the future? If this is our concern, we will want to standardize more&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how easy is to acquire talent with needed skills? Again, if it is difficult to find skilled resources, moving towards standardization might be the right answer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how complicated the product is going to be? The more complicated integration will be, the more we want to standardize in order to balance the speed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bottom line is that the choice is yours. As I mentioned earlier, my personal preference is to be on the innovation side, but due to the role at my organization, I need to carefully evaluate options and find balance, before providing recommendations (here comes the servant leadership part). 
I hope that the set of questions above can help with the decision. Good luck!&lt;/p&gt;
&lt;p&gt;And by the way, we always look for innovative, inspiring people who push boundaries. If you are one of them, please reach out to me.&lt;/p&gt;</content><category term="Posts"></category><category term="journal"></category><category term="innovation"></category></entry><entry><title>Why we use pull requests with our trunk-based branching strategies</title><link href="https://wsbctechnicalblog.github.io/branching-pull-request.html" rel="alternate"></link><published>2022-04-01T00:00:00-07:00</published><updated>2022-04-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-01:/branching-pull-request.html</id><summary type="html">&lt;p&gt;Busting a few process myths around branching strategies and pull-requests&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you want to ignite a debate in a pub, casually start chatting about politics. In a [virtual] room of software engineers, gently mention branching strategies and pull requests. In both scenarios you can sit back and enjoy the vibrant chain reaction of experiences, opinions, and myths. In this brief article I will share our experience, our &lt;a href="/consistency-standardization.html"&gt;standardization&lt;/a&gt; of branching strategies, our use of &lt;a href="/pull-requests-friend.html"&gt;pull requests&lt;/a&gt; and bust a few myths along the way.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Branching Strategies&lt;/h1&gt;
&lt;p&gt;There are many, such as &lt;a href="https://trunkbaseddevelopment.com/"&gt;trunk-based&lt;/a&gt;, &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"&gt;GitFlow&lt;/a&gt;, &lt;a href="https://githubflow.github.io/"&gt;GitHubFlow&lt;/a&gt;, and derivations as documented by the former &lt;a href="https://vsardata.blob.core.windows.net/projects/TFS%20Version%20Control%20Part%201%20-%20Branching%20Strategies.pdf"&gt;Microsoft ALM/DevOps Rangers&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops"&gt;Microsoft Docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We have been experimenting with GitFlow and Trunk-based branching strategies and are supporting both as part of our common engineering ecosystem and associated guardrails (aka governance). Based on a push for consistency and standardization we are recommending the &lt;a href="https://trunkbaseddevelopment.com/"&gt;trunk-based&lt;/a&gt; branching strategy, with release branches, as used by the Azure DevOps product team.&lt;/p&gt;
&lt;p&gt;WHY?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is simple.&lt;/li&gt;
&lt;li&gt;It has been adopted by our engineering teams.&lt;/li&gt;
&lt;li&gt;It fits well with our &lt;a href="/yaml-pipelines-part10.html"&gt;app-type blueprint&lt;/a&gt; initiative.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="TIP" src="../images/branching-pull-request-1.png"&gt; 
I am NOT saying that is the best strategy but based on experimentation it fits our &lt;strong&gt;people&lt;/strong&gt;, &lt;strong&gt;process&lt;/strong&gt;, and &lt;strong&gt;products&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 1 - One branching strategy is better than another!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There is no silver bullet! Avoid the debates and invest time to experiment with a few of the common branching strategies, to determine the best fit for your PEOPLE, PROCESS, and PRODUCTS.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://trunkbaseddevelopment.com/branch-for-release/"&gt;trunk-based release from branch&lt;/a&gt; for the variant that we are using, based on learning from the &lt;a href="https://medius.studios.ms/Embed/Video/THR2017?sid=THR2017"&gt;Microsoft Azure DevOps&lt;/a&gt; team. It is a strategy that works well for the 1-2 pizza sized teams, as well as product teams with hundreds to thousands of engineers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 1 - Trunk-based branching strategy is suited only for small and experienced teams!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The &lt;a href="https://medius.studios.ms/Embed/Video/THR2017?sid=THR2017"&gt;Microsoft Azure DevOps&lt;/a&gt; and &lt;a href="https://devblogs.microsoft.com/devops/improving-azure-devops-cherry-picking/"&gt;Microsoft Office&lt;/a&gt; are two very large teams that demonstrate the trunk-based branching strategy scales from small and rapid experimentation and innovation teams, to large product-based teams.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The takeaway for you is that the answer to "&lt;em&gt;what branching strategy is ideal for you?&lt;/em&gt;" is "&lt;em&gt;it depends on the outcome of your experiments!&lt;/em&gt;"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Pull Requests&lt;/h1&gt;
&lt;p&gt;Which brings us to pull requests (PRs), which enable us to change, review, and merge code. You can add policies to your PRs to enable code quality in key branches using policies, validation builds, code-quality and security scans. I trust you all want to protect key branches such as trunk/master/main, which should always be stable and deployable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 3 - Pull-requests slow down your continuous integration value stream!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A pull request takes as long as you and your process allow it to sit in a corner to gather dust. We encourage our engineers to track the lead and cycle times of pull requests using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=OneLuckiDev.prApprovalReport&amp;amp;targetId=dc216ba3-25e9-46a8-823a-fb77a81f2a9f"&gt;Pull Request Completion Report&lt;/a&gt; and to &lt;strong&gt;collaborate&lt;/strong&gt; with their peers to ensure that pull requests do not go stale.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Make sure you have a working agreement for pull requests, because &lt;strong&gt;you&lt;/strong&gt; decide how long the average lead and cycle times are for your pull requests. In our case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code-quality&lt;/strong&gt;, &lt;strong&gt;security-scans&lt;/strong&gt;, and &lt;strong&gt;validation build(s)&lt;/strong&gt; take minutes at the worst. &lt;/li&gt;
&lt;li&gt;Code review for &lt;strong&gt;learning&lt;/strong&gt; can be done in parallel without affecting the lead and cycle times, so no delays.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branch policy checks&lt;/strong&gt;, such as must be linked to work items and all comments must be addressed, is instantaneous.&lt;/li&gt;
&lt;li&gt;If feature branches are &lt;strong&gt;short-lived&lt;/strong&gt;, &lt;strong&gt;collaboration&lt;/strong&gt; is healthy, and code changes constrained to agreed feature(s), the code reviews are also in the territory of minutes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, we are talking about minutes to add immense value and ensure that the changes we commit to trunk/master/main branch are quality and will not break. If your average pull request lead time is in the hours to days, you need to map your pull request value stream and find the &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 4 - Pull-requests are manual gates&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In theory a pull request (in Azure DevOps) could be all automated, based on policies, validation builds, and other validations. It is as manual and/or automated as YOU decide to configure your policies and guardrails.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you wonder whether it is a sin to use pull requests with trunk-based branching strategies, read &lt;a href="https://trunkbaseddevelopment.com/continuous-review/"&gt;continuous code review&lt;/a&gt; and watch the &lt;a href="https://medius.studios.ms/Embed/Video/THR2017?sid=THR2017"&gt;trunk-based development&lt;/a&gt; video. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 5 - Trunk-based branching strategy and use of pull requests is a NO-NO!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"In theory" the trunk-based strategy is based on short-lived feature branches and merging changes directly with the trunk/master/main branch. Using a pull request as a pre-merge validation does not change the strategy, it merely injects a final countdown checkpoint before you commit your code changes to the "always deployable" trunk/master|main branch. It is an opportunity to move your scale of &lt;strong&gt;trust&lt;/strong&gt;, not a matter of changing the branching strategy.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;For branching strategies and the use of pull requests there is no silver bullet. Once you realize that consistency and standardization trumps personal preference and variations, you can pick the branching strategy and the use of pull-requests (or not) that empowers your engineers and organization. &lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="version-control"></category></entry><entry><title>WHY are we pushing consistency and standardization?</title><link href="https://wsbctechnicalblog.github.io/consistency-standardization.html" rel="alternate"></link><published>2022-03-28T00:00:00-07:00</published><updated>2022-03-28T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-03-28:/consistency-standardization.html</id><summary type="html">&lt;p&gt;Balancing autonomy with consistency and standardization.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt; do we keep mentioning &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt; like a broken record in &lt;a href="/common-engineering-journal-1.html"&gt;Journal 1 - What is origin of our common engineering team?&lt;/a&gt; and many other posts? &lt;/p&gt;
&lt;p&gt;Before we explore the answer, let us explore our understanding of consistency and standardization.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Consistency&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt; is coherence, a key pillar in engineering. It empowers a unified whole, such as a common engineering system or a complex solution that is maintainable and extensible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-1.png"&gt; &lt;/p&gt;
&lt;p&gt;The previous illustration shows twelve &lt;strong&gt;consistent&lt;/strong&gt; squares that have the same height, width, and colouring. A great example of consistency is &lt;a href="https://www.lego.com/"&gt;LEGO&lt;/a&gt; which offers us an assortment of consistent building blocks, with which we can follow directions or experiment in creating simple or complex objects, based on consistent building blocks.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Standardization&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Standardization&lt;/strong&gt; is another pillar of engineering. It is the process of observing guidance, guardrail, standard, or governance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Standardization" src="../images/consistency-standardization-2.png"&gt; &lt;/p&gt;
&lt;p&gt;In the illustration, above, we have defined a guardrail that the height and width of the rectangle must be equal and that all lines are straight and parallel - a recipe to create a rectangle, also known as a square.&lt;/p&gt;
&lt;p&gt;Standardization is pivotal with designs, producing &lt;strong&gt;consistent&lt;/strong&gt; interfaces, solutions, and uniformity that empowers people to be more effective.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the question ... why do we promote consistency and standardization?&lt;/h1&gt;
&lt;p&gt;Why we love consistency and standardization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency improves adoption&lt;/strong&gt; - Once we become familiar with a process or product, resistance to explore and embrace others will evaporate. For example, if you know how to use Office 365 Word, you can navigate yourself around Office 365 Excel or PowerPoint with familiarity and without friction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency reduces cost and time&lt;/strong&gt; - Usability and learnability improves with consistency, which empowers engineering to deliver value quicker and continuously. Reducing time and anomalies, reduces cost - a favourable side-effect for investors and researchers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency empowers automation&lt;/strong&gt; - We frequently say that "&lt;em&gt;if you do something twice or thrice, consider automation!&lt;/em&gt;" While this is solid guidance, automation becomes a lot easier if you have a consistent process and products at your disposal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standardization reduces cost and time&lt;/strong&gt; - By adopting industry standards we improve upgrades, maintenance, migrations, security, and scalability of our solutions. By standardizing &lt;strong&gt;processes&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;, we improve clarity and productivity, because engineers can focus on delivering value in a predefined way without the need to master a platter of variations.  As with consistency, a reduction in cost with a rise in quality, repeatability, and security is a well-received side effect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standardization promotes consistency&lt;/strong&gt; - As shown in the previous example of drawing rectangles based on a standard, we can produce consistent squares and Lego can continue to produce a treasure chest of building blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, once we have a &lt;strong&gt;standardized&lt;/strong&gt; process to produce rectangles with equal sides, aka squares, we can hand it to a machine to automate, and repeat to create &lt;strong&gt;consistent&lt;/strong&gt; squares continuously.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-3.png"&gt; &lt;/p&gt;
&lt;p&gt;The reason we want to &lt;strong&gt;automate&lt;/strong&gt; these types of mind-numbing tasks is that they are well suited for machines. If we ask a humanoid to repeat the same &lt;strong&gt;standardized&lt;/strong&gt; process we will end up with inconsistent squares, as shown.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MY 2-CENTS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Humans are not suited for mind-numbing and repetitive work. Context switching, distractions, and mental fatique will affect quality &lt;strong&gt;sooner&lt;/strong&gt; than later. &lt;/li&gt;
&lt;li&gt;Machines, on the other hands, thrive on repetitive work and deliver continuously and consistently, as long as there is power.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-4.png"&gt; &lt;/p&gt;
&lt;p&gt;Although it appears like a trivial issue, when we aggregate the process into a more complex solution that expects &lt;strong&gt;consistent&lt;/strong&gt; squares, the &lt;strong&gt;failure rate&lt;/strong&gt; for the manually created squares will be much higher than the squares created through automation. In fact, although both sets of objects look like squares, we will observe a 100% versus 25% pass rate for the automated and manual processes respectively. In this simple example, this implies a 75% WASTE!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-5.png"&gt; &lt;/p&gt;
&lt;p&gt;Last, but not least, we acknowledge that autonomy, mastery, and purpose is the secret sauce that drives information workers (See &lt;a href="https://youtu.be/u6XAPnuFjJc"&gt;Pink&lt;/a&gt; for details). It is important that we balance &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt; with &lt;strong&gt;autonomy&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MY 2 CENTS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The smaller your organization the more you can pivot to autonomy.&lt;/li&gt;
&lt;li&gt;The bigger your organization and rotation of engineers, the more you can pivot to consistency and standardization. &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We, for example, empower our engineers to contribute to our common engineering system and our supporting (not enforcing) guardrails through &lt;a href="/ceremony-overview.html"&gt;centers of enablement and associated working groups&lt;/a&gt;, to empower all engineers to do end-to-end tasks more efficiently, while nurturing their mastery and purpose. A win:win!&lt;/p&gt;</content><category term="Posts"></category><category term="eliminate-waste"></category><category term="technical-excellence"></category></entry><entry><title>Stop the meeting overload!</title><link href="https://wsbctechnicalblog.github.io/stop-the-meeting-hell.html" rel="alternate"></link><published>2022-03-09T00:00:00-08:00</published><updated>2022-03-09T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-03-09:/stop-the-meeting-hell.html</id><summary type="html">&lt;p&gt;My personal crusade to optimize meetings and associated WASTE&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thank you for the opportunity to collaborate on a very important topic, that will help us raise productivity and lower stress … as well as errors caused by excessive context switching.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Intro" src="../images/stop-the-meeting-hell-1.PNG"&gt;&lt;/p&gt;
&lt;p&gt;To start, I would like to get rid of my pet peeve of our new remote and video conferencing era. No-one with a healthy meeting etiquette would barge into the following meeting environment to ask you to join another meeting. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Meeting" src="../images/stop-the-meeting-hell-2.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Correct?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Meeting Interruption?" src="../images/stop-the-meeting-hell-3.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Then why are we using the worst Microsoft Teams feature to call a colleague who is busy in another scheduled event to join your meeting?&lt;/p&gt;
&lt;p&gt;This context switching and causes interruptions for all … be right back … Willy what do you think … Willy? … back … What did I miss? These interruptions drive me insane. &lt;/p&gt;
&lt;p&gt;For the person being teleported out of the meeting it means a context switch … and I, for example, start making mistakes and forgetting things when I battered by context switching.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Decision" src="../images/stop-the-meeting-hell-4.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Back to the actual topic … can we stop the meeting madness? So, what is the actual problem?&lt;/p&gt;
&lt;p&gt;We must choose whether we want to improve productivity and balance work:life, or continue the multi-tasking, context-switching overload. &lt;/p&gt;
&lt;p&gt;The choice is yours … my team and I are taking the right turn!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snippets of madness" src="../images/stop-the-meeting-hell-5.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Here are a few examples of OUR calendars … on a good day. &lt;/p&gt;
&lt;p&gt;Let us look at one and spot the challenges.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Core Issue" src="../images/stop-the-meeting-hell-6.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Looking at this example we will notice a few things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have back-to-back meetings. Context-switching hell, with few opportunities to take a break.&lt;/li&gt;
&lt;li&gt;Double and triple booked meetings … how many clones of me are you expecting to join your meetings?&lt;/li&gt;
&lt;li&gt;Meetings booked after working hours ... unthought of in the days of people walking out of the office to catch their last bus.&lt;/li&gt;
&lt;li&gt;Everyone is working extra hours to try to catch-up with their commitments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This person spend most of the day going from meeting to meeting without a break. That is not healthy and NOT sustainable. &lt;/p&gt;
&lt;p&gt;In our regular stress-o-meter polls the feedback clearly points to one worrying outcome of this madness, namely “STRESS”.&lt;/p&gt;
&lt;p&gt;&lt;img alt="What we are doing" src="../images/stop-the-meeting-hell-7.PNG"&gt;&lt;/p&gt;
&lt;p&gt;However, the eye of the storm is not just the number of meetings, but the quality of our meetings.&lt;/p&gt;
&lt;p&gt;As per our team working agreement, we are trying hard to …&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finish meetings 5-minutes early, instead of bleeding into other meetings.&lt;/li&gt;
&lt;li&gt;Have a meeting free Friday, by blocking our Friday and, by not scheduling meetings on a Friday.&lt;/li&gt;
&lt;li&gt;If there is no agenda, purpose, or we add or receive no value, we eject ourselves from the meeting.&lt;/li&gt;
&lt;li&gt;We expand all three lettered acronyms when speaking to ensure we create no time wasting confusion.&lt;/li&gt;
&lt;li&gt;Conclude every meeting with actionable notes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, I have asked my team to block out their lunch hours and decline double bookings to reduce the context switching and associated stress. In terms of double bookings, I am not referring to meetings we have not committed to, but keep in our calendars for reference, but instead to an ask or expectation to commit to be in two calls at the same time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="What we should all do" src="../images/stop-the-meeting-hell-8.PNG"&gt;&lt;/p&gt;
&lt;p&gt;In my humble opinion, we need an organizational working agreement, which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourages a respectful meeting etiquette that raises the quality and reduces the number of meetings&lt;/li&gt;
&lt;li&gt;Fosters collaboration&lt;/li&gt;
&lt;li&gt;Focuses on productivity&lt;/li&gt;
&lt;li&gt;Enables a healthy work:life balance&lt;/li&gt;
&lt;li&gt;Pivots our culture from ”just another meeting” to collaboration, leadership, and delivery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for listening. Thoughts? Questions?&lt;/p&gt;</content><category term="Posts"></category><category term="eliminate-waste"></category></entry><entry><title>Continuous Delivery in the enterprise</title><link href="https://wsbctechnicalblog.github.io/continuous-delivery-in-the-enterprise.html" rel="alternate"></link><published>2022-03-04T00:00:00-08:00</published><updated>2022-03-04T00:00:00-08:00</updated><author><name>Shay Vannery</name></author><id>tag:wsbctechnicalblog.github.io,2022-03-04:/continuous-delivery-in-the-enterprise.html</id><summary type="html">&lt;p&gt;Continuous Delivery is no silver bullet and requires persistence, discipline and effort.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Businesses have been adopting a Digital-first approach to interact with their customers since the advent of the internet. The global pandemic of 2019 further accelerated this trend. Today, it has become more important than ever before for a service-based organization to have a robust web presence. Customer expectations are at all-time highs; and organizations are expected to be highly-available; highly-accessible; and provide an online experience comparable to high-tech ecommerce &amp;amp; content streaming companies. This requires organizations to make quick, seamless transitions when faced with security concerns &amp;amp; changing business priorities.&lt;/p&gt;
&lt;p&gt;The answer is &lt;strong&gt;Continuous Delivery&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Continuous Delivery" src="../images/continuous-delivery-in-the-enterprise-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is Continuous Delivery anyway?&lt;/h1&gt;
&lt;p&gt;In his book on Continuous Delivery, author Martin Fowler defines Continuous Delivery as “a software development discipline where you build software in such a way that the software can be released to production at any time”.&lt;/p&gt;
&lt;p&gt;In layperson’s terms; Continuous Delivery is the ability to get changes of all types into the hands of end-users, quickly, safely &amp;amp; seamlessly; thereby making production releases routine non-events. &lt;/p&gt;
&lt;p&gt;I like to think of continuous delivery as replacing components of an airplane while it is in-flight and full of passengers. Or performing an organ transplant on an athlete while she is running a marathon. &lt;/p&gt;
&lt;p&gt;Amusing metaphors aside, Continuous Delivery makes it possible to continuously make changes to software as required by the end-user or the business.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why do WE need this?&lt;/h1&gt;
&lt;p&gt;Traditional organizations with legacy footprints often make the mistake of ignoring cutting edge software engineering methodologies; thinking of it as unnecessary or overkill. However, the benefits of Continuous Delivery can be observed &amp;amp; measured quickly in organizations of all sizes, in all industry verticals. Some of these benefits are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Minimized risk&lt;/strong&gt; – Smaller, more frequent releases reduce risk. The chances of bugs creeping into production, or features not functioning as intended are far lower. It also becomes possible to quickly identify &amp;amp; remediate any errors without outages or degraded performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Quality&lt;/strong&gt;– When cross-functional teams work together, leverage automation, test and integrate changes frequently; overall quality improves. Teams are able to avoid re-work and focus on delivering value to the customer. They can also get quicker, timely feedback and focus on building a better, more relevant product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Predictability&lt;/strong&gt; – By following a predictable &amp;amp; standardized sequence of activities (sometimes known as deployment pipeline) teams can avoid surprises caused by human error, code, integration or environmental issues. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lowered Costs&lt;/strong&gt; – Automating repeatable &amp;amp; manual tasks can lead to significant cost savings. In theory, teams can avoid working over-time after business hours. As releases become non-events, teams can move away from war-rooms, incident mitigation protocols and the massive amount of coordination effort these require. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved work-life balance&lt;/strong&gt; – Less panic, less fire-fighting, leads to a more fruitful employee experience, free of blame and unnecessary stress caused by fear of the unknown and looming deadlines. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Admittedly, Continuous Delivery is no silver bullet. Just like diet, exercise and meditation; Continuous Delivery requires persistence, discipline and effort. It is imperative for all organizations today to examine the way they perform work, where they invest time and effort, and make data-driven investments in their delivery pipeline; so they may continue to be relevant in our rapidly changing world.  &lt;/p&gt;</content><category term="Posts"></category><category term="continuous-delivery"></category><category term="delivery-on-demand"></category></entry><entry><title>DevOps Analytics Strategy</title><link href="https://wsbctechnicalblog.github.io/devops-analytics-strategy.html" rel="alternate"></link><published>2022-02-25T00:00:00-08:00</published><updated>2022-02-25T00:00:00-08:00</updated><author><name>Aditya Chourasiya</name></author><id>tag:wsbctechnicalblog.github.io,2022-02-25:/devops-analytics-strategy.html</id><summary type="html">&lt;p&gt;Objective, Method and Maturity model for business analytics across an enterprise.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a business user, I want to make sense of all the data coming from my production system and make sure my product meets business requirements. This article summarizes different maturity model and action-sequence to achieve snow-ball effect for typical organization.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vision" src="../images/vision.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let's start with Why&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;To continue DevOps and Agile development and leverage one of the DevOps principles – “to measure”&lt;/li&gt;
&lt;li&gt;To understand the current baseline and be able to measure progress&lt;/li&gt;
&lt;li&gt;To answer common question of - how close we are to 'done'?&lt;/li&gt;
&lt;li&gt;To raise awareness and instill team wide 'measure' from the very inception&lt;/li&gt;
&lt;li&gt;To give stakeholders and senior management on-demand visibility into systems dev and ops&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Objective" src="../images/objective.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To promote Business objectives of measurements and organization wide 'manifesto'&lt;/li&gt;
&lt;li&gt;To define metrics for each group of stakeholders&lt;/li&gt;
&lt;li&gt;To develop best practices for measurements&lt;/li&gt;
&lt;li&gt;To define delivery methods for metrics&lt;/li&gt;
&lt;li&gt;To define measurement and metric delivery cadence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Methods" src="../images/methods.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 1 of 4 (Awareness)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Descriptive analytics capabilities, which can help answer: “What has happened?"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release Dashboard- Showing all releases went/going to prod&lt;/li&gt;
&lt;li&gt;Teams assessment / DoD dashboard- Are teams doing well in assessment/ meeting DoD &lt;/li&gt;
&lt;li&gt;Data Stewards rollout - Identifying who is responsible for keeping data updated/correct&lt;/li&gt;
&lt;li&gt;Standard Team dashboards - Same dashboards across teams with auto login and rotation enable&lt;/li&gt;
&lt;li&gt;Analytics Strategy awareness - CoPs, Demo, micro learnings and Lunch and Learns about Analytics in DevOps&lt;/li&gt;
&lt;li&gt;CoP - PowerBI - PowerBI CoP establish and monthly meeting scheduled&lt;/li&gt;
&lt;li&gt;Team Business Objectives [PI/Sprint Goals] Dashboard - PI and Sprint goal dashboards from AzDo Enabler to experimental releases&lt;/li&gt;
&lt;li&gt;Business value dashboard requirement gathering - Need to gather requirement for business value reporting (Enabler for business value)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 2 of 4 (Desire)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Diagnostic analytics capabilities, which can help answer the question, “Why did it happen?"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Experimental release support&lt;/li&gt;
&lt;li&gt;SAFe Metrics rollout&lt;/li&gt;
&lt;li&gt;Focus on and communication of DevOps Strategy&lt;/li&gt;
&lt;li&gt;Gamification of Team's matrices&lt;/li&gt;
&lt;li&gt;Analytics as a code&lt;/li&gt;
&lt;li&gt;Business value delivery prediction&lt;/li&gt;
&lt;li&gt;Make data accessible so people can play with it freely and innovate&lt;/li&gt;
&lt;li&gt;Relevant messaging and alerts through reports&lt;/li&gt;
&lt;li&gt;ROAMing Risks and Risk Registry&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 3 of 4 (Knowledge)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Predictive Analytics capabilities, which can help answer the question, “What could happen?”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business value delivery confirmation&lt;/li&gt;
&lt;li&gt;Continuous analytics delivery through automated pipelines&lt;/li&gt;
&lt;li&gt;DevOps Program Risk (ROAM) analytics&lt;/li&gt;
&lt;li&gt;Building people skills for digital transformation based on Risk area&lt;/li&gt;
&lt;li&gt;Establish Standards and Practices for Analytics&lt;/li&gt;
&lt;li&gt;Skill requirement based recruitment&lt;/li&gt;
&lt;li&gt;Big Data integration for better analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 4 of 4 (Ability)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Prescriptive Analytics capabilities, which can help advise on possible outcomes and answer: “What should we do?”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Skill based resource movement&lt;/li&gt;
&lt;li&gt;Machine learning integration to other then business value delivery&lt;/li&gt;
&lt;li&gt;Analytics Governance body&lt;/li&gt;
&lt;li&gt;Business requirement generation through analytics&lt;/li&gt;
&lt;li&gt;Measure how analytics is changing business&lt;/li&gt;
&lt;li&gt;Strategic decision making through automation&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Summary and invite&lt;/h1&gt;
&lt;p&gt;This article was intended to be written in &lt;a href="https://www.salesforce.com/blog/how-to-create-alignment-within-your-company/"&gt;V2MoM&lt;/a&gt; format, however due to different organizational structure and needs, it will vary a lot. Based on my experience in different government and non-government organizations, the above holds true. Please feel free to submit a pull request to suggest any changes. Thank you for reading.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="metrics"></category><category term="devops"></category></entry><entry><title>Understanding key metrics for a healthy DevOps mindset</title><link href="https://wsbctechnicalblog.github.io/metrics-importance.html" rel="alternate"></link><published>2022-02-18T00:00:00-08:00</published><updated>2022-02-18T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-02-18:/metrics-importance.html</id><summary type="html">&lt;p&gt;Without real-time evidence, OODA never comes to life.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/John_Boyd_(military_strategist)"&gt;John Boyd&lt;/a&gt; argued that the key to victory is the ability to create situations in which one can make appropriate decisions more quickly than one's opponent. &lt;strong&gt;O&lt;/strong&gt;bserve the environment, &lt;strong&gt;O&lt;/strong&gt;rient to be in a good position, &lt;strong&gt;D&lt;/strong&gt;ecide what to do next, and &lt;strong&gt;A&lt;/strong&gt;ct accordingly. His OODA state machine is based on real-time feedback, gathered while observing the environment.&lt;/p&gt;
&lt;p&gt;Similarly, hypothesis-driven development (HDD) relies on feedback to be in a position to evaluate the experiment, decide if it is a FAIL or PASS, and learn from it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="HDD" src="../images/ooda-loop-and-devops-3.png"&gt; &lt;/p&gt;
&lt;p&gt;Both &lt;strong&gt;OODA&lt;/strong&gt; and &lt;strong&gt;HDD&lt;/strong&gt; become worthless black holes if we remove the &lt;strong&gt;feedback&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Clueless" src="../images/metrics-importance-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Your dream to fail-fast, continuously learn and improve evaporates before your very eyes. Stuck in a nebulous cloud, you will embark on a nightmare journey, without clues, insight, or early-warnings. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Feedback is fuel for your DevOps mindset&lt;/h1&gt;
&lt;p&gt;To compete in an ever-changing industry, we must find ways to be more effective, deliver quicker, and further delight our customers continuously. This requires us to understand the health of our ecosystem, value we deliver, and detect smoke before we are dealing with a raging fire. &lt;/p&gt;
&lt;p&gt;Use a blend of market research, production telemetry, surveys, unsolicited feedback, customer visits, and when possible the invaluable &lt;a href="https://kanbanize.com/lean-management/improvement/gemba-walk"&gt;Gemba walk&lt;/a&gt; to gather and measure everything that is measurable ... and meaningful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;The art of fine-tuning what and how you measure data without inundating everyone with reports and notifications is an art and a necessity for a healthy DevOps mindset.&lt;/em&gt;" - &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Metrics" src="../images/metrics-importance-2.png"&gt;&lt;/p&gt;
&lt;p&gt;As recommended by the &lt;a href="https://www.tactec.ca/devops-core-values"&gt;Core DevOps Values&lt;/a&gt; should not get engrossed with our solution, but instead use &lt;strong&gt;Systems Thinking&lt;/strong&gt; to "&lt;em&gt;define metrics for measuring performance, accountability and effectiveness, using application of outcomes and shared learnings&lt;/em&gt;" across our organization.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Systems Thinking" src="../images/metrics-importance-5.png"&gt;&lt;/p&gt;
&lt;p&gt;In other words, take a holistic approach to focus on, measure, and improve your organization (planet), not just a few, or worse, one of your solutions (countries).&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Metrics we are observing in our common engineering ecosystem&lt;/h1&gt;
&lt;p&gt;We now understand that we must view and understand the haystack, before we start looking for the needle. It is time to identify metrics to measure impact and continuous improvement of teams, engineering practices, and our common engineering ecosystem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FAILURE EXAMPLE&lt;/strong&gt; - When we developed our generic pipeline blueprints, we included logging in the continuous integration pipeline. We have been logging verbose details to Application Insights for each and every Azure Pipeline that triggered since. However, the only time the metrics has been viewed, was for the demo of the telemetry. A &lt;strong&gt;WASTE&lt;/strong&gt; of resources and I am convinced that no-one would notice if we turn off the logging.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Big Bang" src="../images/metrics-importance-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Instead of the "big bang" approach to measure everything measurable, we opted to focus on three buckets of data to measure our common engineering ecosystem - DevOps, Guardrails, and Engineering Practices. We also use weather symbols instead of referring to low, medium, high, and elite performers, as is common practice in the DevOps reports.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BUCKET&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th&gt;METRIC&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th&gt;WHY? VALUE?&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Storm" src="../images/metrics-importance-storm.png"&gt;&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Rain" src="../images/metrics-importance-rain.png"&gt;&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Overcast" src="../images/metrics-importance-overcast.png"&gt;&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Sun" src="../images/metrics-importance-sun.png"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Deployment frequency&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Deployments that are more frequent allow earlier introduction of new value.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; once/6-months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Once/month – once/6-months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Once/week - once/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;On-demand&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Lead time for changes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Shorter lead times enable faster feedback and the ability for us to respond to outages more effectively.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt; 6 months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;1 month – 6 months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;1-7 days&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; 1 hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Time to restore services&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Faster time to mitigate failures gives our users higher availability.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt; 6 months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;1-7 days&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; 1 day&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; 1 hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Change failure rate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;More successful changes cut rework and allow us to focus on new value.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;30%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;30%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;16-30%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0-15%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guardrails&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Repo S/R failures&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Solid repositories enable consistency and standardization, reducing GIGO and WASTE.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;=20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;10% failures /month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0 failures/month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guardrails&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Pipeline S/R  failures&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Solid pipelines enable consistency and standardization, reducing value stream total lead time.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;=20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;10% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0 failures/month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Duplicate code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Code duplication is identified in the industry as one of the reasons teams tend to author bugs. Reducing/eliminating duplicate code removes the opportunity to introduce bugs when adding/modifying/removing code.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;30%+ of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 20% and 29% of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 10% and 19% of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Less than 5% of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Cyclomatic Complexity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Complex code is hard to read, hard to understand, hard to reason about, and hard to modify. Such complexity is identified as one of the main reasons teams tend to introduce bugs when modifying code. Reducing/eliminating cyclomatic complexity removes the opportunity to introduce bugs when adding/modifying/removing code.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;40+ cyclomatic complexity identified in methods&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 20 and 40 cyclomatic complexity identified in methods&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 10 and 20 cyclomatic complexity identified in methods&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Less than 10 cyclomatic complexity identified in methods&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Percentage of surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Just because all tests pass doesn’t mean that the implemented code is tested. Mutation testing uncovers areas of code which, even if covered by tests, haven’t been assessed for meeting or failing the expectations. That omission indicates shoddy software design. Minimizing/eliminating surviving mutants is the only way to ensure correct implementation.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;20+% surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 10% and 19% surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 5% and 9% surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Less than 5% surviving mutants&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Maintainability index&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Once written, code needs to be maintained. The ease/difficulty of maintaining the code determines the quality of the system.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0 to 9 indicates low ability to easily perform maintenance&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;10 to 19 indicates modest ability to perform maintenance&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;20 to 49 indicates moderate ability to perform maintenance&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;50 to 100 indicates good ability to perform maintenance&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; The table below was out first baseline recommendation and has likely evolved since we published this blog. Fine-tune your metrics continuously to ensure you focus on actionable outcomes, not vanity data.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Weather" src="../images/metrics-importance-4.png"&gt;&lt;/p&gt;
&lt;p&gt;We are currently capturing and fine-tuning these buckets manually, in parallel to developing automated gathering and display processes. Our view is set at the common engineering ecosystem level, but we allow groups and teams to drill-down to analyse and improve their own health.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Avoid focusing on teams and/or individuals to avoid the misuse of the metrics to influence performance reviews. We succeed or fail as one!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What are your views on metrics?&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="metrics"></category><category term="devops"></category></entry><entry><title>Having a sound Technology Adoption Process is pivotal to innovation</title><link href="https://wsbctechnicalblog.github.io/technology-adoption-program.html" rel="alternate"></link><published>2022-02-15T13:13:00-08:00</published><updated>2022-02-15T13:13:00-08:00</updated><author><name>Laurent Blain</name></author><id>tag:wsbctechnicalblog.github.io,2022-02-15:/technology-adoption-program.html</id><summary type="html">&lt;p&gt;Selecting a new process or product without surprising or blindsiding anyone.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Co-author: &lt;a href="https://wsbctechnicalblog.github.io/author/willy-peter-schaub.html"&gt;Willy-Peter Schaub&lt;/a&gt;, from Common Engineering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Autonomous&lt;/strong&gt; teams have organizational latitude to establish their own internal goals and work practices. Combined with &lt;strong&gt;Master&lt;/strong&gt; and &lt;strong&gt;Purpose&lt;/strong&gt; these teams can be very effective, as outlined by Daniel Pink in &lt;a href="https://www.bing.com/videos/search?q=Drive%3a+The+Surprising+Truth+About+What+Motivates+Us"&gt;What Motivates Us&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 1 - The wrong way!
&lt;img alt="Waste" src="../images/technology-adoption-program-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Typical, but not recommended way for an autonomous team to acquire new processes and products:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assume the right of self-organization and self-management.&lt;/li&gt;
&lt;li&gt;Acquire processes or products in isolation.&lt;/li&gt;
&lt;li&gt;Release the solution, using products unknown to the rest of the organization - a Unicorn.&lt;/li&gt;
&lt;li&gt;The solution fails during deployment, or worse in production impacting end-users.&lt;/li&gt;
&lt;li&gt;Operations are alerted, but ill-equipped to assist, as they are caught completely off-guard by the new technology used.&lt;/li&gt;
&lt;li&gt;Infamous 2AM call is triggered, focused on determining and remediating the root cause, maintaining a customer-focus and value-first mindset.&lt;/li&gt;
&lt;li&gt;Due to the isolated way the autonomous team operated, and the mystical Unicorn detected (too) late in the continuous delivery phase, the collaboration between development, operation, and other stakeholders becomes unproductive and toxic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Do you recognize this practice?&lt;/strong&gt; If yes, you are familiar with &lt;strong&gt;WASTE&lt;/strong&gt;ful deployment delays, unexpected costs, and a frequent loss of &lt;strong&gt;TRUST&lt;/strong&gt; between engineering teams.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why we need to do better!&lt;/h1&gt;
&lt;p&gt;To ensure that we can continuously deliver value to delighted end-users, we must find a better way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 2 - The right way!
&lt;img alt="Value" src="../images/technology-adoption-program-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Assume the right of self-organization and self-management but operate within organizational guardrails.&lt;/li&gt;
&lt;li&gt;Acquire processes or products in collaboration with all stakeholders, such as architecture, operations, site reliability engineering, and &lt;a href="https://wsbctechnicalblog.github.io/common-engineering-journal-2.html"&gt;common engineering&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Release the solution, using known processes and products, operating within guardrails that ensure consistency, standardization, security, and simplicity.&lt;/li&gt;
&lt;li&gt;Instead of dealing with 2AM calls, engineering can raise the awareness of the new processes and products, sharing the value with the rest of the organization through &lt;a href="https://wsbctechnicalblog.github.io/dojo-events.html"&gt;dojos&lt;/a&gt; and &lt;a href="https://wsbctechnicalblog.github.io/ceremony-community-of-practice.html"&gt;communities of practice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Likewise, &lt;a href="https://wsbctechnicalblog.github.io/ceremony-working-group.html"&gt;working groups&lt;/a&gt; can be productive and preemptive, empowering engineering with re-usable blueprints to make the adoption of new processes and products simple.&lt;/li&gt;
&lt;li&gt;Collaboration becomes vibrant, based on &lt;strong&gt;TRUST&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The core difference between the two ways of adopting new processes and products boils down to collaboration, trust, and guardrails that guide, not limit innovation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Technology Adoption Program (TAP)&lt;/h1&gt;
&lt;p&gt;Enterprise Architecture introduced the Technology Adoption Program (TAP), as shown below, which guides us to adopt, assess, approve, and embrace new technology (processes and products). Instead of re-inventing the wheel, our Common Engineering Center of Enablement decided to base our process and product adoption program on the existing Technology Adoption Program (TAP) - &lt;strong&gt;re-use&lt;/strong&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 3 - Technology Adoption Program (flow)
&lt;img alt="Value" src="../images/technology-adoption-program-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The TAP lights up when combined with our common engineering ecosystem, in which the &lt;a href="https://wsbctechnicalblog.github.io/ceremony-center-of-enablement.html"&gt;centres of enablement&lt;/a&gt; (CoE) provide thought leadership, vision, direction, guardrails, and sponsor vibrant and laser focused working groups to &lt;strong&gt;ASSESS&lt;/strong&gt;, &lt;strong&gt;TRIAL&lt;/strong&gt;, and &lt;strong&gt;ADOPT&lt;/strong&gt; new technologies. Both the CoE and sponsored Working Groups are based on people from different disciplines, encouraging vibrant collaboration and awareness amongst all stakeholders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;COLLABORATION FROM THE START&lt;/strong&gt; - we can ensure that new technology is supported by the innovation programs, such as pipeline blueprints and self-service, once organizational approval is received. This ensures that we can empower engineering to “hit the ground running” with new technologies.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the time a process or product is approved, it is neither unknown, nor a mystical Unicorn. Instead, awareness and self-service automation programs are aware and supportive of the new technology, which not only enables and empowers engineering, but reduces &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;How do you balance autonomy and standardization in your organization?&lt;/p&gt;</content><category term="Posts"></category><category term="architecture"></category><category term="devops"></category><category term="technical-excellence"></category></entry><entry><title>Journal 3 - Explore the trajectory of our Common Engineering (Ce) ecosystem</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-3.html" rel="alternate"></link><published>2022-01-28T13:13:00-08:00</published><updated>2022-01-28T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-28:/common-engineering-journal-3.html</id><summary type="html">&lt;p&gt;Looking at our common engineering team through the management (leader) lens&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is an informal journal to share our &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vancouver Meetup&lt;/a&gt; session, titled &lt;em&gt;"Explore the trajectory of our Common Engineering ecosystem"&lt;/em&gt;, in which I spoke about my experience in setting up our new common engineering system team, which are related to the previous &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093"&gt;Common Engineering System at WorkSafeBC&lt;/a&gt; and &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555"&gt;Why we should (not) care about Pipelines!?!&lt;/a&gt; meetup talks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Overview" src="../images/common-engineering-journal-3-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Roadmap&lt;/h1&gt;
&lt;p&gt;It was a real pleasure to share an update on our efforts to establish a common engineering system to empower our engineering teams and strive for consistency, standardization, security, and continuous innovation at WorkSafeBC. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Roadmap" src="../images/common-engineering-journal-3-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, we have an ambitious vision to empower every engineer by standardizing our engineering practices and tools and enable continuous delivery of value to delight end-users. &lt;/p&gt;
&lt;p&gt;From early 2019 we operated like the Rebel Alliance on the ice planet Hoth, focusing on creating manifestos and guardrails that enabled engineering to build consistent, secure, and simple solutions. We innovated our continuous integration and delivery pipelines, as discussed at the meetup in &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555"&gt;June 2021&lt;/a&gt;, and released our &lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;WorkSafeBC Technical blog&lt;/a&gt; allowing us to share all our failures, learnings, and innovation with the community.  &lt;/p&gt;
&lt;p&gt;Everything changed in September 2021 when I got the opportunity to launch an official common engineering team, with a leadership mandate to empower every engineer by standardizing practices and products, and stewarding guardrails to promote engineering consistency, enablement, security, and simplicity.&lt;/p&gt;
&lt;p&gt;For the first 90-days we focused on establishing an efficient system of highways that enable both our business and engineering and ensure that our common engineering ecosystem has a common and sound vision, vibrant collaboration, and an atmosphere that encourages failure, learning, and continuous innovation. We achieved three major milestones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Self-service automation&lt;/strong&gt;, often referred to as the “walking skeleton”, which creates an Azure Repo, injects an app-type sample, configures, and injects a YAML-based Azure Pipeline, and queues the pipeline as a final validation of the setup … in less than 10 seconds!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working agreements&lt;/strong&gt; to guide how to work together to create positive, productive processes.&lt;/li&gt;
&lt;li&gt;Started a war on &lt;strong&gt;WASTE&lt;/strong&gt; and &lt;strong&gt;Silos&lt;/strong&gt;, by fostering collaboration through centers of enablement, working groups, dojos, and community of practices. See our technical blog for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the next 90-days we plan to switch to implementation mode. We will:
- Enable, foster, steward &lt;strong&gt;guardrails&lt;/strong&gt; and &lt;strong&gt;collaboration&lt;/strong&gt;
- Monitor and learn from &lt;strong&gt;baseline metrics&lt;/strong&gt;
- &lt;strong&gt;Open-source&lt;/strong&gt; our application-type YAML-based pipeline blueprints
- &lt;strong&gt;Automate&lt;/strong&gt; everything automatable.&lt;/p&gt;
&lt;p&gt;Thereafter let your imagination soar, for example &lt;strong&gt;chaos engineering&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;No more silos! Collaborate!&lt;/h1&gt;
&lt;p&gt;Here is a snapshot of the extend of collaboration we achieved during the first 90-days. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Collaboration" src="../images/common-engineering-journal-3-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The variety of teams, the vibrance of collaboration, and the focus on outcomes give me reassurance that we are on the right track and hope that we can achieve the unthinkable as an organization.&lt;/p&gt;
&lt;p&gt;Erasing the silos, avoiding them to regrow like weeds, establishing &lt;strong&gt;TRUST&lt;/strong&gt;, and getting all the stakeholders to collaborate was one of the big tests to date. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Challenges&lt;/h1&gt;
&lt;p&gt;Which brings me to the challenge of launching such a team, especially when you are, like I, a software engineer at heart and want to remain involved “hands-on” with the continuous experimentation, learning, and innovation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Challenges" src="../images/common-engineering-journal-3-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apart from the people management, dealing with rigid and time-consuming processes, a lack of resources in the local market … our team has existing operational support, and quality assurance responsibilities. Balancing these with our quest for bold change and continuous innovation, has challenging. Creating a harmonious team, where everyone takes responsibility for their actions, where we have a work:life balance, and where everyone is a leader is not ea walk in the park.&lt;/p&gt;
&lt;p&gt;Another anomaly that keeps me awake at night, is how to ensure that everyone has an innovation mindset, the time, and the grit to take a chance. I find that many engineers can spend hours talking about a problem, but often have no time to make changes. Hopefully you can give me guidance here.&lt;/p&gt;
&lt;p&gt;My personal mission statement, which I stare at every morning, is to “&lt;strong&gt;encourage everyone’s creativity, passion, purpose, and strengths&lt;/strong&gt;.”&lt;/p&gt;
&lt;p&gt;I am experimenting with a variety of guidance from David Marquet, carrying around his book – Turn the ship around – wherever I go.&lt;/p&gt;
&lt;p&gt;I always remind myself to foster autonomy, mastery, and purpose, as discussed by Daniel Pink.&lt;/p&gt;
&lt;p&gt;Inspired by Elon Musk and SpaceX’s phenomenal innovation, I encourage my team to simplify everything, automate everything automatable, and question all processes, often provoking colleagues when I ask the five WHYs and rip parts out of an inefficient process.&lt;/p&gt;
&lt;p&gt;Last, but not least, I remember everyone to have FUN to combat today’s stressful days of isolated and remote engineering, and to remind us of the need to balance work and life. A reason our most recent quarterly update looked more like a newspaper than a formal report.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;FAILURE is good!&lt;/h1&gt;
&lt;p&gt;I work hard to create a mindset to continuously experiment, embrace FAILURE as an opportunity to learn, and innovate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Challenges" src="../images/common-engineering-journal-3-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will soon see the round red sticker appearing on our laptops to encourage everyone else to follow suit.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Dream Team&lt;/h1&gt;
&lt;p&gt;To be successful you need a DREAM TEAM …&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dream Team" src="../images/common-engineering-journal-3-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;... a self-organizing, self-managing, and cohesive team!&lt;/p&gt;
&lt;p&gt;In my humble opinion the secret sauce is &lt;strong&gt;TRUST&lt;/strong&gt;. You must trust each other, your leadership, your stakeholders, your end-users, and vice versa! No &lt;strong&gt;TRUST&lt;/strong&gt;, no dream!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Working Agreement&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="EDO Ce" src="../images/common-engineering-journal-3-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We live and breathe by our &lt;a href="https://wsbctechnicalblog.github.io/dream-team-working-agreement-poster.html"&gt;working agreement&lt;/a&gt;, with an emphasis on optimizing meetings … another Elon Musk inspiration … and inspire an Agile, Kanban, and DevOps mindset, as well as DevOps core values.
Our working agreement has triggered a range of other working agreements, such as starting a center of enablement or rotating through our common engineering team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;THANK YOU&lt;/h1&gt;
&lt;p&gt;... for reading (listening)!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="EDO Ce" src="../images/common-engineering-journal-3-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Catch me on &lt;a href="https://www.twitter.com/wpschaub"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/wpschaub"&gt;LinkedIn&lt;/a&gt; to discuss the session.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;REFERENCES&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/ceremony-overview.html"&gt;Collaboration - Centers of Enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ttps://www.tactec.ca/devops-core-values"&gt;DevOps Core Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/283168484/"&gt;DevOps Vancouver Meetup - January 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="X"&gt;DevOps Vancouver Meetup - January 2022 Recording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnbc.com/2018/04/18/elon-musks-productivity-rules-according-to-tesla-email.html"&gt;Elon Musk’s 6 productivity rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093"&gt;Meetup - Common Engineering System at WorkSafeBC&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555"&gt;Meetup - Why we should (not) care about Pipelines!?!&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.ca/Around-Story-Turning-Followers-Leaders/dp/1591846404"&gt;Turn the Ship Around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/devops/what-is-devops-donovan"&gt;What is DevOps?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/wpschaub"&gt;Willy-Peter Schaub LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/pulse/summary-some-my-publications-willy-peter-schaub"&gt;Willy-Peter Schaub Publications&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitter.com/wpschaub"&gt;Willy-Peter Schaub Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;WSBC Technical Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category><category term="event"></category></entry><entry><title>When should we automate tests</title><link href="https://wsbctechnicalblog.github.io/when-should-we-automate-tests.html" rel="alternate"></link><published>2022-01-26T00:00:00-08:00</published><updated>2022-01-26T00:00:00-08:00</updated><author><name>Aditya Chourasiya</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-26:/when-should-we-automate-tests.html</id><summary type="html">&lt;p&gt;This article is gist of brainstorming session among Quality Assurance (QA) team.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Automation is advised when tests are &lt;strong&gt;prone to human error&lt;/strong&gt; or &lt;strong&gt;complex&lt;/strong&gt; or if they need &lt;strong&gt;repeating&lt;/strong&gt;, &lt;strong&gt;reporting&lt;/strong&gt; , &lt;strong&gt;execution speed&lt;/strong&gt; and off course fetch good &lt;strong&gt;return on investment&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;On the contrary, test cases for aesthetics, accessibility, one-time, urgent non-regression(hotfixes), exploratory, with unpredictable results and/or with less return on investment,  should not be automated. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Navigating the Future" src="../images/chapline-automation.gif"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let's dive in reasons and examples&lt;/h1&gt;
&lt;p&gt;These are few reasons to automate (not in order)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repeating&lt;/strong&gt; - Apart from typical regression suite this will include running large number of tests, multi platform, multi browser, performance tests, overnight tests or tests with big set of data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Critical path&lt;/strong&gt; - If the user action sequence / path or application function is critical to your business, it's recommended to automate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prone to human error&lt;/strong&gt; - large number of data fields, complex technical steps like Database test, Security tests should be automated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reporting&lt;/strong&gt; - Legal, audit, low confidence or high stake tests should be automated for reporting and logs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execution speed&lt;/strong&gt; - parallel and automated execution can help run all sort of test much faster, however planning, automation, triage may take more time depending on type of tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Return on investment&lt;/strong&gt; - While there is no exact number, as a rule of thumb anytime you're saving more money with automation, you should.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are few reasons not to automate (not in order)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aesthetics&lt;/strong&gt; - User experience , look and feel, colour and images verification require complex human context and interpretation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt; - Similar to aesthetics, accessibility, usability, language, grammar, etc should be verified manually&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-time&lt;/strong&gt; - Urgent non-regression hotfix, non-critical, or very small changes can/may be manually verified  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unpredictable results&lt;/strong&gt; - Exploratory, time delay tests, random tests can/will rely on manual execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inadequate return on investment&lt;/strong&gt; - Automated test for short lived products, small scale development, duplicate tests should be avoided &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Summary and invite&lt;/h1&gt;
&lt;p&gt;While ability and enthusiasm to automate is important, it is more important to know when to automate and avoid &lt;a href="https://en.wikipedia.org/wiki/Gold_plating_(project_management)"&gt;gold plating&lt;/a&gt;. I will link the video for discussion in next commit. Thank you for reading. Please feel free to submit a pull request to suggest any changes.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="testing"></category><category term="devops"></category></entry><entry><title>Work-about-work</title><link href="https://wsbctechnicalblog.github.io/work-about-work.html" rel="alternate"></link><published>2022-01-25T00:00:00-08:00</published><updated>2022-01-25T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-25:/work-about-work.html</id><summary type="html">&lt;p&gt;Avoid the overhead of work-about-work and adopt real time collaboration&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Work" src="../images/hard-work-pays-off-meme.jpg"&gt;&lt;/p&gt;
&lt;p&gt;When running a business, we must rely on some resources. Those resources are not free. We keep paying for the office space, the hydro and other utility bills, internet connectivity, office supplies, plus the payroll and other expenses. It is easy to calculate precisely how much is one hour of operations costing us. The money keeps flowing out the door as we’re staying in business. It is not enough to rake in hefty revenue – we need to stay on top of our expenses too. Only that way can we not only break even, but also turn a little bit of profit on top.&lt;/p&gt;
&lt;p&gt;Since we are paying all those bills anyway, there is a tendency to maximize the utilization of resources that are at our disposal. But that could be a slippery slope. In this article I’ll try to explain some of the potential pitfalls that may await when we strive to maximize the utilization of our resources.&lt;/p&gt;
&lt;h2&gt;Divvy up the workload&lt;/h2&gt;
&lt;p&gt;Whenever there is task to be done, the first thing that comes to mind tends to be: is there a way to divvy up the workload and spread it around? We are hoping to fully utilize the workforce we are paying for. Instead of giving the task to one staff member to work on, the thinking is that giving parts of the task to multiple members will enable them to work in parallel. That in turn will result in the task getting done much sooner. If it takes one person five days to complete the task, divvying it up to five people will take one day to complete the task.&lt;/p&gt;
&lt;p&gt;The above way of thinking is what we sometimes call false math. Why? We call it false math because it willfully ignores newly emerged tasks that get created by divvying up the original task. If we have given the task to a single staff member, they would focus on finishing it on time. No other activities around that task would be necessary.
However, the moment we start gunning for the work-in-parallel, we are creating brand new activities on top of the original task. Which activities? Activities we call work-about-work.&lt;/p&gt;
&lt;h2&gt;What is work-about-work?&lt;/h2&gt;
&lt;p&gt;When a single staff member starts working on a task, the situation is very clear. The worker is now focused on the task at hand, and there isn’t anything else vying for their attention. But when multiple people start working on parts of the task, they cannot afford to only focus on their chunk of work. They need to every now and then sync up with other workers to make sure their work fits properly into the overall goal. Furthermore, the team working on different parts in parallel suddenly demand an oversight. A considerable and significant effort toward coordination, synchronization, and potential corrective actions must be put in place. That means hiring additional staff who will act as supervisors, managers, foremen on the site.&lt;/p&gt;
&lt;p&gt;The false math kicks in, and we quickly learn that maximizing resource utilization turns into fool’s gold. Instead of completing the task in one fifth of the time, we end up spending twice as much time as we would’ve spent if we were to leave a single worker with their task.&lt;/p&gt;
&lt;p&gt;So, we see that work-about-work can be exorbitantly costly.&lt;/p&gt;
&lt;p&gt;On the other hand, the conundrum remains: how do we keep all our staff occupied, if not by divvying up the workload? We cannot agree to ask them to work sequentially. We do not want to have some team members idling for days on end while they wait on some other busy members to finish their tasks.&lt;/p&gt;
&lt;h2&gt;Collaboration over communication&lt;/h2&gt;
&lt;p&gt;When we examine work-about-work, we find that it’s all about communication. Communicating where are we at in the project trajectory, communicating where are other members at, then communicating on what kind of additional work is needed to synchronize various pieces of the task, and so on. Communication is the most expensive way to work. It eats up a lot of cycles while at the same time never produces anything deliverable to the customer. As such, it should be viewed as waste.&lt;/p&gt;
&lt;p&gt;Collaboration, on the other hand, is much superior when compared to communication. While communication is asynchronous (usually via emails, memos, wikis, reports, chats, pull requests, code reviews, change management reviews, etc.), collaboration is synchronous. Collaboration can only happen in real time, face to face.&lt;/p&gt;
&lt;p&gt;When working in real time, face to face, there is no need for spending time on doing extra communication chores. Everything that needs to be explained or clarified is right there, in front of the team doing the work. Once the team finishes the work, there is no need to spend time reviewing the work. The team knows what shape the work is in, and no one other than the team itself is more qualified to make that judgment call.&lt;/p&gt;
&lt;p&gt;It is for that reason that we should strive to minimize work-about-work, minimize time spent on asynchronous communication, and maximize collaboration.&lt;/p&gt;</content><category term="Posts"></category><category term="collaboration"></category><category term="team-building"></category></entry><entry><title>Selling technical excellence is the most challenging job</title><link href="https://wsbctechnicalblog.github.io/selling-technical-excellence.html" rel="alternate"></link><published>2022-01-24T00:00:00-08:00</published><updated>2022-01-24T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-24:/selling-technical-excellence.html</id><summary type="html">&lt;p&gt;Technical excellence is best practiced by collaborating in real time&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Life insurance" src="../images/lifeinsurance.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;I’ve joined WorkSafeBC DevOps department in February 2019 (almost three years ago). My mandate was to introduce and cultivate technical excellence by acting as the Software Development Practice Lead. In my mind, it reads as a sales job – try to sell the need for raising the bar on technical excellence. I knew it was going to be a challenging job.
Fast forward to today, and looking back, I can gather some of my observations and impressions. How did the sales job go?&lt;/p&gt;
&lt;h2&gt;Some misconceptions about the resistance to technical excellence&lt;/h2&gt;
&lt;p&gt;Whenever I discuss the challenges of selling the need for technical excellence, I keep hearing incorrect opinions regarding why it is such an uphill battle. Basically, many people seem to think that the pushback is solely coming from the non-technical areas of the company. In my experience, nothing could be farther from the truth. During my tenure at WorkSafeBC (and in many of my previous jobs), executives, upper management, middle management, product owners, and Scrum Masters have always been in full support of introducing and cultivating technical excellence. I’ve never experienced anyone from those roles ever asking me to abandon my attempts to introduce and cultivate technical excellence.&lt;/p&gt;
&lt;h2&gt;Where is the resistance to technical excellence coming from?&lt;/h2&gt;
&lt;p&gt;Whenever we talk about introducing new principles, processes, and practices in support of cultivating heightened technical excellence, those new practices only affect teams who are creating and releasing software. It is not surprising that oftentimes the biggest push is coming from those departments.&lt;/p&gt;
&lt;p&gt;Non-technical departments are never affected by the new practices dedicated to technical excellence; therefore, it doesn’t make much sense for those areas to push back on it. But because teams that are responsible for creating and releasing software are directly affected by the introduction of practices that pursue technical excellence, it is to be expected that they will raise all kinds of concerns.&lt;/p&gt;
&lt;p&gt;What are some of those concerns?&lt;/p&gt;
&lt;h2&gt;Sticking to the winning strategy&lt;/h2&gt;
&lt;p&gt;There is a saying that if it ain’t broke, don’t fix it. Oftentimes we see teams that are delivering on a cadence and staying in the game. To some, that’s a good enough proof that there is no need to change the winning team. The fact that team members continue getting a paycheck and keep their position, to them means that insisting on introducing technical excellence is nothing but an academic exercise.&lt;/p&gt;
&lt;h2&gt;Change is perceived as a threat&lt;/h2&gt;
&lt;p&gt;Introducing change is often viewed as being potentially risky. There are always a few worrisome questions that people keep getting in the back of their head. Such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What if it turns out I cannot acquire the new skill as quickly as my peers?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I invest time in learning new skills but then there is a reorganization, so all that time ends up being a waste?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I agree to learn the new skill, but then I end up not having the time to do it?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to fix the stalemate?&lt;/h2&gt;
&lt;p&gt;In my experience, the best way to make a breakthrough and avoid the above-described stalemate is to promote real time collaboration. The main advantage of real time collaboration is in the shifting of the focus from measuring and tracking individual team members performance, to focusing on the team performance as the smallest unit of measure. When the team is working together on preparing and delivering value, individual contributions meld into a more holistic way of working. That way, many of the above concerns simply melt away and disappear. Working together in real time is also the best opportunity for acquiring new knowledge and new skills. Simply by attending collaboration sessions, each team member upgrades their level of expertise, and it feels like fun doing so.&lt;/p&gt;
&lt;p&gt;It is therefore highly recommended to provide the context and the conditions for full collaboration in real time. Doing that will enable teams to embrace and fully cultivate technical excellence without being concerned about any negative consequences.&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category></entry><entry><title>Make your pipeline badges more compact and meaningful</title><link href="https://wsbctechnicalblog.github.io/pipelines-badges.html" rel="alternate"></link><published>2022-01-17T00:00:00-08:00</published><updated>2022-01-17T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-17:/pipelines-badges.html</id><summary type="html">&lt;p&gt;Tired of cluttering your dashboards with duplicated waste?&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have dashboards with multiple pipeline badges to keep an eye on our Azure DevOps pipelines. I often wondered why we cannot change the "Azure Pipelines" label to reduce the duplication (WASTE) and make our dashboards more compact.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipeline-badges-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Well, if you change ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//dev.azure.com/demo-org/demo-proj/_apis/build/status/Reporting/Azure%20Pipelines%20Totals?branchName=master)](https://dev.azure.com/demo-org/demo-proj/_build/latest?definitionId=1818)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;... to ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//dev.azure.com/demo-org/demo-proj/_apis/build/status/Reporting/Azure%20Pipelines%20Totals?branchName=master&amp;amp;label=PIPELINE%20TOTALS)](https://dev.azure.com/demo-org/demo-proj/_build/latest?definitionId=1818)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;... by adding &lt;code&gt;&amp;amp;label=&amp;lt;TEXT&amp;gt;&lt;/code&gt;, you can enjoy a more compact version of your dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SpaceX" src="../images/pipeline-badges-2.png"&gt;&lt;/p&gt;
&lt;p&gt;I stumbled over this tweak in a recent Azure DevOps community chat and realized that I must read the Azure DevOps REST API documentation a bit more carefully. See &lt;strong&gt;URI Parameters&lt;/strong&gt; in &lt;a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/build/status/get?view=azure-devops-rest-6.0"&gt;Status Get&lt;/a&gt; and notice "&lt;em&gt;Replaces the default text on the left side of the badge.&lt;/em&gt;"&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>The problem with big batches</title><link href="https://wsbctechnicalblog.github.io/the-problem-with-big-batches.html" rel="alternate"></link><published>2022-01-11T00:00:00-08:00</published><updated>2022-01-11T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-11:/the-problem-with-big-batches.html</id><summary type="html">&lt;p&gt;Improve the predictability of delivering business value by reducing the utilization rates&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Big batch" src="../images/batch.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article is largely a summary of the &lt;a href="https://twitter.com/d_stepanovic/status/1480941814895063045"&gt;brilliant thread&lt;/a&gt; by &lt;a href="https://twitter.com/d_stepanovic"&gt;Dragan Stepanovic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are learning how to transform organizational culture from focusing on measuring and tracking &lt;strong&gt;outputs&lt;/strong&gt; to focusing on measuring and tracking &lt;strong&gt;outcomes&lt;/strong&gt;. Immature practices tend to focus on measuring and tracking outputs for the simple reason that outputs are much easier to measure and track. Traveling along the trajectory of the least resistance, our need to &lt;strong&gt;reduce uncertainties&lt;/strong&gt; and &lt;strong&gt;increase predictability&lt;/strong&gt; is leading us to latch onto whatever is immediately available for measuring and tracking.&lt;/p&gt;
&lt;p&gt;However, we slowly but surely learn that outputs almost never correlate to or map on to outcomes. For example, if we are measuring and tracking number of lines of code that a software development team produces in a unit of time, we will have hard time proving that the more lines of code the team produces, the better the outcomes.&lt;/p&gt;
&lt;p&gt;Similar reasoning applies to measuring and tracking number of work items completed, number of user story points delivered, number of stories closed, number of features shipped, and so on.&lt;/p&gt;
&lt;p&gt;If we agree that outcomes matter far more than outputs, we are faced with the challenge: how do we measure outcomes?&lt;/p&gt;
&lt;h2&gt;Business value&lt;/h2&gt;
&lt;p&gt;A useful &lt;strong&gt;Key Performance Indicator (KPI)&lt;/strong&gt; for measuring the outcomes is often referred to as &lt;strong&gt;business value&lt;/strong&gt;. What is business value?&lt;/p&gt;
&lt;p&gt;Maybe it’s easier to say what business value is not. For example, it is clearly obvious that number of lines of code produced in the unit of time cannot by any stretch of imagination be viewed as being business value. Same goes for number of work items completed, number of user story points completed, and so on.&lt;/p&gt;
&lt;p&gt;Business value needs to be associated or correlated with measurable impacts. Such as, for example, improved customer satisfaction. Or increased revenue stream. Or improved profit margins. Or reduced cost of doing business. Or enhanced reputation on the market.&lt;/p&gt;
&lt;h2&gt;Delivery of Business Value&lt;/h2&gt;
&lt;p&gt;Once we set our sights on delivering business value, we naturally strive to maximize the throughput of said value. If a little bit of business value is desirable, then naturally more business value is much more desirable.&lt;/p&gt;
&lt;p&gt;Now, that way of thinking could turn into a slippery slope. And it all has to do with &lt;strong&gt;batch sizes&lt;/strong&gt;. Humour me for a few moments.&lt;/p&gt;
&lt;p&gt;Sizeable business value immediately suggests a big chunk of work. A big chunk of work immediately suggests big risk. But since we’re talking value, the risk may be worth taking, after all.&lt;/p&gt;
&lt;p&gt;And so, we go back to the problem of increasing predictability. Predictability is tightly coupled with the uncertainty of “when will desired business value be delivered?” No one has the crystal ball, and since we live in the world riddled with &lt;strong&gt;V&lt;/strong&gt;olatility, &lt;strong&gt;U&lt;/strong&gt;ncertainty, &lt;strong&gt;C&lt;/strong&gt;omplexity, and &lt;strong&gt;A&lt;/strong&gt;mbiguity (&lt;strong&gt;VUCA&lt;/strong&gt;), we know that predictability is a tricky proposition.&lt;/p&gt;
&lt;p&gt;Knowing that, how do we commence work needed to deliver business value? We tend to &lt;strong&gt;maximize resource utilization&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Where is the problem in that? The problem is potentially twofold.&lt;/p&gt;
&lt;h2&gt;Are big batches chockful of value?&lt;/h2&gt;
&lt;p&gt;One assumption when maximizing the business value is that loading up various features and functionality into a single batch means that we’re expecting customers to find everything we deliver in a big batch valuable.&lt;/p&gt;
&lt;p&gt;That is a risky assumption. Without receiving customer feedback, we cannot be sure if the functionalities and features we delivered are being perceived as valuable by the customers.&lt;/p&gt;
&lt;p&gt;And because customers will get presented with a big batch of changes, it will be difficult at that point to collect much needed, precise feedback. The change is overwhelming.&lt;/p&gt;
&lt;p&gt;More likely than not, some of the features and functionality delivered in the big batch will not make any impact (some sources quote that around 60% of big batches contain dubious value, on average). Which, in the final analysis, reads as waste.&lt;/p&gt;
&lt;p&gt;Not everything shipped in the big batch is going to be valuable to the customers. That being the case, why bother cramming so much assumed value in?&lt;/p&gt;
&lt;p&gt;We may spend some time in our office daydreaming about the features and functionalities our customers may find valuable. But without shipping those hypothetical features and functionality into customers’ hands and collecting feedback from them, we have no way of knowing.&lt;/p&gt;
&lt;h2&gt;Is high utilization rate the quickest way to deliver value?&lt;/h2&gt;
&lt;p&gt;It may make sense to organize the system in such a way that all resources at our disposal are utilized to the maximum. Never a dull moment may appear as the most prudent way to go. After all, we are employing top shelf experts and products, tools, and platforms. Why not take advantage of that phenomenal potential, and go full bore when creating business value?&lt;/p&gt;
&lt;p&gt;That approach, as common-sense as it appears to be, poses certain challenges. The nature of work in a fully loaded organization is such that it results in a lot of &lt;strong&gt;wait time&lt;/strong&gt;, instead of resulting in a lot of &lt;strong&gt;work time&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is for that reason that it is not recommended to strive toward a fully loaded organization.&lt;/p&gt;
&lt;p&gt;Value stream delivery crews quickly recognize this problem (too much idling time in a fully loaded organization). It is not difficult to spot long wait times. To deliver almost any change, the requesting teams are instructed to “take a number” and patiently wait for their number to be called.&lt;/p&gt;
&lt;p&gt;Another problem with that arrangement is related to measuring and tracking. Most tools and practices are geared toward only measuring the &lt;strong&gt;work time&lt;/strong&gt;. None of the existing processes seem keen on capturing and tracking &lt;strong&gt;wait times&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That bias gives a skewed perspective on how the work is progressing. In the end, the entire operation gets perceived as being &lt;strong&gt;extremely unpredictable&lt;/strong&gt;, because wait times don’t prominently figure in the tracking reports. Everyone’s eyes seem to be glued to tracking the time spent working, not tracking time spent waiting.&lt;/p&gt;
&lt;p&gt;We see that high utilization rates create a lot of speed bumps in the process (everyone is fully loaded; requests need to wait for their turn). Those speed bumps contribute to the unpredictability of the delivery. High utilization rates are not the best way for the quickest delivery of desired value.&lt;/p&gt;
&lt;h2&gt;Dealing with unpredictability&lt;/h2&gt;
&lt;p&gt;Unpredictability of delivery is highly undesirable. How do we deal with that?&lt;/p&gt;
&lt;p&gt;We ask people who work in a fully loaded system to give us &lt;strong&gt;estimates&lt;/strong&gt;. The thinking is that precise estimates will enable us to better predict when will the desired business value be shipped to the customers.&lt;/p&gt;
&lt;p&gt;When we ask for estimates, what we mean is estimates of &lt;strong&gt;effort&lt;/strong&gt;, not of the wait time. However, seeing how unpredictable wait times are in a fully loaded system, estimates of effort cannot deliver any reasonable degree of predictability. We often hear “your guess is as good as mine” when asking some team to tell us when will the value be delivered. The team is not being difficult when they reply in that fashion; they are merely signaling the undeniable fact that wait times in a fully loaded system are grossly unpredictable.&lt;/p&gt;
&lt;p&gt;And if we switch the focus and ask the teams to estimate the wait times instead of estimating the effort, that would be a losing proposition, because no one can estimate that with any degree of accuracy.&lt;/p&gt;
&lt;p&gt;This impasse creates problems. We expect teams to provide estimates and in that way, we put them between the rock and the hard place. Teams know that, due to the nature of working in a fully loaded system, whatever estimate they come up with, will be incorrect. That knowledge damages psychological safety and erodes the trust in the organization.&lt;/p&gt;
&lt;p&gt;Estimating the effort needed to deliver business value in a fully loaded system is therefore poor person’s attempt to achieve predictability and minimize/eliminate uncertainty. As such, it always delivers poor results.&lt;/p&gt;
&lt;h2&gt;What’s the solution?&lt;/h2&gt;
&lt;p&gt;The only leverage point for reducing uncertainty and increasing predictability lies in &lt;strong&gt;reducing the utilization rates&lt;/strong&gt; in the system.&lt;/p&gt;
&lt;p&gt;What is achieved by reducing the utilization rates (i.e., by avoiding setting up a fully loaded system)? Reduction in the utilization rates increases the &lt;strong&gt;flow through the system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How do we reduce the utilization rates? By reducing the batch sizes!&lt;/p&gt;
&lt;p&gt;Instead of daydreaming of building and delivering a big splash product that will woo the market, it is advisable to switch focus on very small hypotheses. Each small hypothesis proposes hypothetical value that we can swiftly deliver, probe, and test on the market.&lt;/p&gt;
&lt;p&gt;By following that model, we preempt the unpleasant question “when will it be done?” If we are releasing in very short bursts (almost daily), no one will have the time to stop and ask for estimates. Why? Because we’re too busy working, delivering value.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="eliminate-waste"></category><category term="agile"></category><category term="devops"></category><category term="no-estimates"></category></entry><entry><title>Make yourself interruptible</title><link href="https://wsbctechnicalblog.github.io/make-yourself-interruptible.html" rel="alternate"></link><published>2022-01-05T00:00:00-08:00</published><updated>2022-01-05T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-05:/make-yourself-interruptible.html</id><summary type="html">&lt;p&gt;Adopt humble approach when creating software products by making yourself open to interruptions&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Interrupt" src="../images/Interrupt.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's take one simple example: suppose I'm a programmer writing code and I use Notepad to do it. I can lock myself in my office and keep writing code in the Notepad for hours without being interrupted. I'm a professional programmer and I know what I'm doing, right?&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade from Notepad to a sophisticated code editor. If I continue writing code the way I used to do with Notepad, I will start getting interrupted. Why? Because sophisticated code editors are opinionated and will push back if I attempt to write syntactically incorrect code. Notepad, on the other hand, couldn't care less if the code I wrote is correct or not.&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade to an even more sophisticated code editor that on every diff runs all tests in the background. The moment any test fails, the editor interrupts my coding session and demands that I fix the failing test.&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade to an even more sophisticated code editor that on every diff runs all tests in the background, and when all tests pass it runs mutation testing. If there are any surviving mutants, it interrupts my coding session and demands that I kill all surviving mutants before I could continue writing code.&lt;/p&gt;
&lt;p&gt;All those interruptions are extremely desirable if we care at all about the quality of our work.&lt;/p&gt;
&lt;h2&gt;Are interruptions slowing us down?&lt;/h2&gt;
&lt;p&gt;Common sense thinking is prone to viewing interruptions as a speed bump. If I know exactly what I’m doing, what’s the point in me being interrupted? My flow will slow down, and the delivery will inevitably suffer.&lt;/p&gt;
&lt;p&gt;Few years ago, I went to IKEA and purchased a large bookshelf. Brought it home, unpacked it, and studied the instruction sheet. Since I’m an engineer by training, I was confident that I completely understood the prescribed process of assembling the shelf.&lt;/p&gt;
&lt;p&gt;I jumped into action and spent a few hours working on the big shelf without any interruptions. When I was finished and stood the shelf up, I realized that I have assembled it incorrectly – it looked the way a normal shelf would look when viewed in a mirror! Obviously, the shelf was not safe to use in such botched shape, so I had to disassemble it and then reassemble it following the instruction sheet very carefully.&lt;/p&gt;
&lt;p&gt;So, what was happening now that I realized the importance of respecting and following the instruction sheet to the letter? I started getting many, many interruptions while I was working on it. Those interruptions were slowing down the flow of work. I had to stop my work, put down the tools and the parts of the shelf I was holding in my hands, bring the instruction sheet up to my attention, and study it carefully before making the next decision. That took some extra time.&lt;/p&gt;
&lt;p&gt;However, overall, I finished the shelf in less than half the time it took me originally to assemble it, realize it was botched, disassemble it, and then waste time on few expletives.&lt;/p&gt;
&lt;p&gt;I now apply the same approach to creating software. I welcome interruptions. Any time I make a change to the code, I invite the system to run and let me know if my change broke anything. If it did, I reset the system to its previous working state, and try again. If it didn’t break anything, I continue confidently, knowing that the software I’m creating is always in its fully functional state.&lt;/p&gt;
&lt;p&gt;And that, in my experience, is the fastest way to work and release software.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="TDD"></category><category term="eliminate-waste"></category><category term="agile"></category><category term="devops"></category></entry><entry><title>DevOps value proposition</title><link href="https://wsbctechnicalblog.github.io/devops-value-proposition.html" rel="alternate"></link><published>2021-12-30T00:00:00-08:00</published><updated>2021-12-30T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-30:/devops-value-proposition.html</id><summary type="html">&lt;p&gt;DevOps introduces simultaneous focus on expectations, architecture, design, testing, building, releasing, and running the system&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="DevOps Yoda" src="../images/DevOps.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Software engineering consists of four distinct activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Envisioning software&lt;/li&gt;
&lt;li&gt;Creating software&lt;/li&gt;
&lt;li&gt;Releasing software&lt;/li&gt;
&lt;li&gt;Running software&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Traditionally, those four activities were compartmentalized into four distinct divisions/departments/teams. There are departments and teams that work on envisioning/hypothesizing and gathering the requirements. There is a hand-off from those upstream departments to the downstream software creation departments (consisting of software architects, modelers, designers, coders, and testers).&lt;/p&gt;
&lt;p&gt;There is a hand-off from those upstream software creation departments to downstream software release departments. Those departments consist of release engineers who are concerned with mitigating risks via proper change control processes.&lt;/p&gt;
&lt;p&gt;There is a hand-off from those upstream software release departments to downstream sustainment and reliability departments. Those teams are responsible for running the released software and keeping the lights on.&lt;/p&gt;
&lt;p&gt;The above arrangement has proven inefficient when it comes to competing on the mainstream market. Any change necessary for improving the quality of the service takes way too long, due to the gated phases and asynchronous “take a number” approach to attending to the process. Value stream delivery tends to be very choppy and unpredictable following the traditional software engineering model.&lt;/p&gt;
&lt;h2&gt;There is room for improvement&lt;/h2&gt;
&lt;p&gt;The proposed improvement arrived in the form of Extreme Programming, Agile Manifesto, and DevOps. In a nutshell, the proposed change starts with the suggestion to remove the above four silos and to combine all four distinct activities (envisioning, creating, releasing, and running) into a single activity. DevOps is a discipline that is based on doing all those four activities simultaneously. DevOps teams engage in envisioning, creating, releasing, and running software as part of their daily activities.&lt;/p&gt;
&lt;p&gt;What would be the advantages of this newfangled approach? The constraints of being expected to perform all four activities at once forces organizations to focus on reducing the average batch sizes and limiting the number of items being worked on at the same time (limited Work in Progress).&lt;/p&gt;
&lt;p&gt;As a result, it gets easier to ensure technical excellence and overall quality of the value delivered to the paying customers, because issues and errors caught tend to be small, with a very limited blast radius.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="eliminate-waste"></category><category term="devops"></category></entry><entry><title>How to tame your vacation email traffic</title><link href="https://wsbctechnicalblog.github.io/optimize-and-avoid-emails.md.html" rel="alternate"></link><published>2021-12-24T00:00:00-08:00</published><updated>2021-12-24T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-24:/optimize-and-avoid-emails.md.html</id><summary type="html">&lt;p&gt;How to ensure you are not confronted by hundreds of emails when you are back-to-work.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pick up from the &lt;a href="/optimize-and-track-emails.html"&gt;How to track (and optimize) your email traffic&lt;/a&gt; post, where we have discussed the tsunami wave of emails we receive and process every day. I would like to focus on avoiding the &lt;strong&gt;WASTE&lt;/strong&gt;ful first day back at work, when we spend hours processing hundreds of emails we received while we were away on a well-deserved vacation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why should we avoid the return-to-work flood of emails?&lt;/h1&gt;
&lt;p&gt;We have all had the terrifying welcome back to work experience, when we opened our favourite email client and stared at hundreds of emails seeking our attention. After hours of reading dated and often redundant emails, we have a brief sense of achievement when the inbox is finally empty - similar to sorting bottle tops into respective colours.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Emails" src="../images/optimize-and-avoid-emails-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, we just wasted hours of precious time we could have used for more productive work and often find ourselves behind schedule and stressed out after the first day of work. What is important to realize is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email that has been sitting in your inbox for days or weeks is most likely &lt;strong&gt;outdated&lt;/strong&gt; by the time you read it.&lt;/li&gt;
&lt;li&gt;Many emails are fire-and-forget type communication and will be &lt;strong&gt;rotting&lt;/strong&gt; by the time you read them.&lt;/li&gt;
&lt;li&gt;Users will automatically loop other users into their email thread if they realise you are out of office or touch base with you again when you return.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Every second you spend on outdated email is &lt;strong&gt;WASTE&lt;/strong&gt;!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Create a vacation rule&lt;/h1&gt;
&lt;p&gt;I recommend you create a vacation rule which automatically moves all inbound email to a bucket you can reference, not process, in future.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Rule" src="../images/optimize-and-avoid-emails-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This ensures that you can hit the ground running when you return to work, rather than sorting through a pile of junk for hours first.&lt;/p&gt;
&lt;p&gt;More importantly, it discourages you from "quickly" checking your email during precious family time in order to avoid the inbox from hell. To achieve a &lt;strong&gt;work-life balance&lt;/strong&gt; you must &lt;strong&gt;STOP&lt;/strong&gt; mixing the two!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Set the expectations in your out of office message&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Rule" src="../images/optimize-and-avoid-emails-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I go away for a longer period, I enable both the &lt;strong&gt;Archive OOO&lt;/strong&gt; email rule and create an out of office message. You will notice in the red text, that I set a clear expectation with senders that I will &lt;strong&gt;not&lt;/strong&gt; process their email.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Last, but not least, your phone is a phone!&lt;/h1&gt;
&lt;p&gt;Oh, how I hate my mobile device at times. It started as a handy text + phone device with a short-lived and huge battery in the 90's but evolved into an ever-lasting digital device that follows you to the end of the world, interrupts your precious family time, and encourages you to keep track of email.&lt;/p&gt;
&lt;p&gt;Please note that I have uninstalled business email, business collaboration, and social channels such as Facebook from my mobile "phone".&lt;/p&gt;
&lt;p&gt;Worst case you can drag your business phone and laptop with you on vacation, but intentionally leave your chargers at home. That gives you a few hours of distraction at worst.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;With that, I wish everyone a safe, warm, and festive holiday season, as well as a jump into a successful new year!&lt;/p&gt;
&lt;p&gt;C (see) U (you) in 2022!&lt;/p&gt;</content><category term="Posts"></category><category term="tips"></category></entry><entry><title>How to minimize queueing</title><link href="https://wsbctechnicalblog.github.io/how-to-minimize-queueing.html" rel="alternate"></link><published>2021-12-23T00:00:00-08:00</published><updated>2021-12-23T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-23:/how-to-minimize-queueing.html</id><summary type="html">&lt;p&gt;Adopt the humble approach to only work in smallest possible batches with limited work-in-progress&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Queue" src="../images/queue.png"&gt;&lt;/p&gt;
&lt;p&gt;In my previous post &lt;a href="https://wsbctechnicalblog.github.io/flow-of-work.html"&gt;Systems thinking and the flow of work&lt;/a&gt;, I tried to describe the sluggish/unpredictable software delivery caused by queueing and looping. Adding speed bumps introduces unwanted wait time that is exacerbated by frequent requests for retries. A gated phase, a quality inspection gate, often finds fault with proposed changes and asks the authoring team to try again. Those retries add significant amount of waste to the process.&lt;/p&gt;
&lt;p&gt;How to avoid such unwanted delays? There are a few ideas that may help:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Insist on getting clear expectations&lt;/li&gt;
&lt;li&gt;Insist on vertically slicing the expected delivery&lt;/li&gt;
&lt;li&gt;Insisting on starting together, working together, finishing together&lt;/li&gt;
&lt;li&gt;Insist on smallest possible batches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s examine these ideas.&lt;/p&gt;
&lt;h2&gt;Insist on getting clear expectations&lt;/h2&gt;
&lt;p&gt;While it may seem obvious that clear expectations are needed, every now and then we receive expectations that are somewhat muddled. By muddled I mean not carefully thought through. The rationale is that it is quicker to start building the hypothesized solution than it is to spend extra time hammering out the expectation.&lt;/p&gt;
&lt;p&gt;The problem is that oftentimes it is a false math to assume so. Rushing to implement a half-baked expectation tends to result in bloat. We will see later in this article why is bloat extremely wasteful.&lt;/p&gt;
&lt;p&gt;Another problem is that muddled expectation may send us off on a wild geese chase. I will use an example from my career to illustrate that pattern (names will be withheld to protect the innocent):&lt;/p&gt;
&lt;p&gt;I was once consulting for a large organization whose Credit department was experiencing series of issues. To cut the long story short, that department somehow could not properly balance their books. The ledger was for some reason always off, and that was causing a lot of churn.&lt;/p&gt;
&lt;p&gt;I did initial interview with stakeholders and was informed that the reason the processing in their department was often so wrong boiled down to inadequate software system they were using at that time, as well as down to staff errors – ‘fat fingers’ data entry mistakes and so on. They would like me to help them design better software solution that would preclude human data entry errors and also set the books straight.&lt;/p&gt;
&lt;p&gt;Makes sense. So, I started drilling deeper into the business domain, to understand business policy rules and document the expectations with regards to various use cases.&lt;/p&gt;
&lt;p&gt;That’s where the muddled expectations started entering the picture. I was getting several half-baked, imprecise use cases. Such muddled use cases could not be tested, and as such could not be automated.&lt;/p&gt;
&lt;p&gt;Naturally, I pressed upon the stakeholders to provide me with clearer expectations. To which I started receiving annoyed responses, such as “I don’t know; you are the software developer, you figure it out!”&lt;/p&gt;
&lt;p&gt;It was clear to me, at that point, that the entire project was a no go, and I gracefully bowed out.&lt;/p&gt;
&lt;p&gt;Moral of the story – insisting on crisp and clear expectations is necessary. Without it, we cannot even know if it makes sense to continue being engaged on the project.&lt;/p&gt;
&lt;h2&gt;Insist on vertically slicing the expected delivery&lt;/h2&gt;
&lt;p&gt;Once the expectation is clearly stated, it is important to abstain from overbidding. Instead of knee-jerk agreeing to implement the expectation as it is stated, it is more prudent to investigate the possibility of vertically slicing it. Commit to delivering the solution iteratively, rather than in one big fell swoop. Explain to the stakeholders that the intention is to engage them in swift and frequent delivery. Such approach is needed to gather quick and valuable feedback from them.&lt;/p&gt;
&lt;p&gt;In my experience, stakeholders tend to appreciate such transparency and such proactive engagement. The upside is that it will give the delivery team much better chances of attaining predictive delivery of value.&lt;/p&gt;
&lt;h2&gt;Insisting on starting together, working together, finishing together&lt;/h2&gt;
&lt;p&gt;Once the expectation has been vertically sliced, abstain from assigning individual tasks to individual team members and asking them to scatter and work in parallel, in isolation. Instead, attempt to start as a whole team. Look into the vertically sliced expectation, decide which aspect of the implementation is of the highest priority, then get together and start working on it as a team. Every member who has the so-called ‘skin in the game’ should be present from the get-go. This is important so that every member has a full understanding and a complete grasp of what is going on in the process of building.&lt;/p&gt;
&lt;p&gt;Continue working in such fashion. The ideal model is synchronous collaboration, sometimes called ‘keyboardless programming’. In this mode of collaboration, decisions regarding the design of the system are made by team members who are &lt;strong&gt;not&lt;/strong&gt; sitting at the keyboard. The implementation of those decisions is performed by the so-called “driver”. Another important aspect of such mode of working is &lt;strong&gt;continuous rotation&lt;/strong&gt;; every 5 minutes or so, the driver gets up and joins the navigators, while someone else steps in and becomes the driver.&lt;/p&gt;
&lt;p&gt;Eventually, the mob programming session described above reaches the stage where all team members agree that the solution has reached the “shippable state”. At that point, they finish together and move on to working on the next slice.&lt;/p&gt;
&lt;h2&gt;Insist on smallest possible batches&lt;/h2&gt;
&lt;p&gt;The secret sauce to avoiding queuing and retries is in the art of crafting small batches. Let’s first define what is meant by ‘batch’:&lt;/p&gt;
&lt;p&gt;A batch is defined as a group of items that move together from one step to the next step in the process.&lt;/p&gt;
&lt;p&gt;What is meant by ‘item’? Typically, an item denotes a unit of change that affects the system. It could be a code diff or a configuration diff.&lt;/p&gt;
&lt;p&gt;The more of these items (i.e., diffs) we bundle up and push into the integration and delivery workflow, the larger the batch we must deal with.&lt;/p&gt;
&lt;p&gt;Consider a smallest possible batch: a single item comprising a single diff (such as, for example, a one-line correction in the code syntax). When such batch arrives for inspection, it is so light-footed and innocuous that it will be a breeze to approve.&lt;/p&gt;
&lt;p&gt;Compare that with a large batch that contains hundreds of items, each item consisting of dozens or even hundreds of diffs. Obviously, when such bloated batch arrives at the inspection gate, it will cause a lot of consternation. And rightly so. Alarm bells go off, red flags are raised, and the inspection crew now need to roll up their sleeves and pour over the minutia of that batch. They now have their work cut out for them, and it may take days, even weeks, until the batch either gets cleared (“good to go to the next gated phase”) or gets sent back for a retry (“better luck next time!”).&lt;/p&gt;
&lt;p&gt;And of course, such large batch necessitates long wait queuing times. While the inspection crew is heads down examining the bloated batch, nothing else is moving in the queue. We now have a serious bottleneck.&lt;/p&gt;
&lt;h2&gt;Benefits of small batches&lt;/h2&gt;
&lt;p&gt;There are numerous benefits of working in small batches. Here I will quickly list some of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduction in errors&lt;/li&gt;
&lt;li&gt;Faster feedback&lt;/li&gt;
&lt;li&gt;Reduction in deployment risk&lt;/li&gt;
&lt;li&gt;Increase in frequency of delivering customer value&lt;/li&gt;
&lt;li&gt;Reduction in mean time to recover in case of defects&lt;/li&gt;
&lt;li&gt;Improvement in psychological safety
​​​​​​​&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small batches introduce small, localized changes. That approach reduces the risk of damaging the system operations, as the small change is contained, and the blast radius is quite limited.&lt;/p&gt;
&lt;p&gt;Customers also benefit as they get to enjoy the value sooner than they would if the teams worked with large batches.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="eliminate-waste"></category><category term="estimates"></category></entry><entry><title>Exploring the concept of mob-ownership</title><link href="https://wsbctechnicalblog.github.io/mob-ownership.html" rel="alternate"></link><published>2021-12-23T00:00:00-08:00</published><updated>2021-12-23T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-23:/mob-ownership.html</id><summary type="html">&lt;p&gt;We succeed or fail as a team (mob), not as individuals!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mob-programming, which is the art of an entire team working on the same thing, at the same time, in the same space, and at the same keyboard/monitor, has been on our radar for a while. My colleague &lt;a href="https://wsbctechnicalblog.github.io/author/alex-bunardzic.html"&gt;AlexB&lt;/a&gt; has been driving the software development approach with vigour, demonstrating a drop in &lt;strong&gt;WASTE&lt;/strong&gt; and surge of &lt;strong&gt;shared learning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mob programming" src="../images/mob-ownership-1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What about Mob-ownership?&lt;/h1&gt;
&lt;p&gt;You will find several posts on this blog that emphasize my loathing for &lt;a href="https://wsbctechnicalblog.github.io/tag/eliminate-waste.html"&gt;&lt;strong&gt;WASTE&lt;/strong&gt;&lt;/a&gt;, promotion for continuous learning, improvement, and experimentation, ownership of features from ideation to deprecation, and the courage to &lt;a href="/ooda-one-of-the-devops-genomes.html"&gt;&lt;strong&gt;FAIL&lt;/strong&gt;&lt;/a&gt; as one of the genomes of our healthy DevOps mindset.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Toxic" src="../images/mob-ownership-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The one thing we have not discussed yet, but makes me boil on a regular basis, is the art of toxic “finger pointing.” In other words: “&lt;em&gt;this is not my problem, it must have been caused by [X], in team (silo) [Y].&lt;/em&gt;” &lt;/p&gt;
&lt;p&gt;&lt;img alt="Finger-Point and Waste" src="../images/mob-ownership-2.png"&gt;&lt;/p&gt;
&lt;p&gt;It is another form of &lt;strong&gt;WASTE&lt;/strong&gt; and is extremely &lt;strong&gt;TOXIC&lt;/strong&gt; for things we value, such as collaboration, improvement, learning, and team-work.&lt;/p&gt;
&lt;p&gt;I therefore would like to propose &lt;strong&gt;mob-ownership&lt;/strong&gt;, which extends the concept of &lt;strong&gt;mob-programming&lt;/strong&gt; for people to collaborate to own, analyze, remediate, and learn from one challenge at a time. The challenge could be an experiment, proof-of-concept, program bug, a live site incident, an anomaly in telemetry, or a disagreement in guardrails that protect us from violation company policies or governance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Change “&lt;em&gt;this is not my problem, it must have been caused by [X], in silo [Y]&lt;/em&gt;" to "&lt;em&gt;this is our problem as a team, let us analyse and remediate.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By sharing and collaborating within a joint(mob)-ownership, we not only solve communication problems, enable decision making, avoid toxic politics and harmful context switching, but more importantly accept shared responsibility for every adventure. The “them and us” and associated “finger-pointing” fades away as we grow as a team, fueled by delighted end-users.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mob programming" src="../images/mob-ownership-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="quality"></category><category term="eliminate-waste"></category></entry><entry><title>Journal 2 - Why do we need our common engineering team?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-2.html" rel="alternate"></link><published>2021-12-20T13:13:00-08:00</published><updated>2021-12-20T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-20:/common-engineering-journal-2.html</id><summary type="html">&lt;p&gt;Introducing the voice of reason and stewards of guardrails&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are T+74 calendar days into the journey of our EDO Common Engineering team and it is time to share and update our team journal, post 2. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changing the culture and mindset of engineers and business stakeholders of an organization based on stringent security policies, processes, and segregation of duties takes grit, tenacity, a thick skin, and lots of patience. It often feels like trying to change course of a massive oil-tanker travelling through heavy seas at full speed. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our EDO Common Engineering Team?&lt;/h1&gt;
&lt;p&gt;We want everyone to embrace a healthy DevOps mindset to empower development and operations collaboration and enable us, as an organization, to “delight our end-users”, most importantly our BC employers and workers, our WorkSafeBC workers, and IT engineers. It is important we shift the focus from creating technological marvels and snowflakes, to reducing waste, automate everything automable, and delivering value to our end-users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you boarded your last cross-Atlantic flight, were you interested in how the plane was assembled and which processes or products were used? I believe your response is "NO". What you cared about was the outcome, landing safe and on time at your destination.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, our goal is not just automation and enabling technology, but to deliver &lt;strong&gt;value&lt;/strong&gt;. Any innovation, transformation, or measured value is worthless, unless we can continuously deliver value to our end-users. It is important to understand that DevOps is not a silver bullet, nor is it a product we can buy and install. It is a mindset that enables people to &lt;strong&gt;collaborate&lt;/strong&gt; and follow a known &lt;strong&gt;process&lt;/strong&gt; enabled by &lt;strong&gt;products&lt;/strong&gt; to deliver &lt;strong&gt;value&lt;/strong&gt; to our end users.&lt;/p&gt;
&lt;p&gt;Also, instead of starting with a focus on our burning platform, our team agreed to focus on establishing an efficient system of highways, roads and railroads that enable both our business and engineering teams to focus on outcomes that delight our end-users. Automated circuit-breakers and smoke detectors monitor the health of our ecosystem, while we continuously improving outcomes.&lt;/p&gt;
&lt;p&gt;We need to empower engineers and products to integrate and shift-left security, create quality governance guardrails and documentation, leverage the Azure cloud to its fullest potential, encourage experimentation, and a tolerance for failure to fuel innovation.&lt;/p&gt;
&lt;p&gt;Noble goals, but back to our core question: "&lt;em&gt;WHY do we need the EDO Common Engineering team?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;As mentioned in &lt;a href="https://wsbctechnicalblog.github.io/common-engineering-journal-1.html"&gt;"what is origin of our common engineering team"&lt;/a&gt; we are the catalyst to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourage and enable everyone’s creativity, passion, purpose, and strengths!&lt;/li&gt;
&lt;li&gt;Empower all stakeholders to continuously deliver quality &lt;strong&gt;value&lt;/strong&gt; to our &lt;strong&gt;delighted end-users&lt;/strong&gt;, while stewarding our guardrails to promote &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;standardization&lt;/strong&gt;, and &lt;strong&gt;security&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Declare war on WASTE, such as cycle time, excessive meetings, complexity, and manual processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;WHAT is the goal of our 90-day Roadmap?&lt;/h1&gt;
&lt;p&gt;When we lit the candle of our team's first stage, our goal for the first 90-days after launch was to lay the foundations and ensure that we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A common and sound &lt;strong&gt;vision&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Vibrant &lt;strong&gt;collaboration&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An atmosphere encouraging &lt;strong&gt;failure&lt;/strong&gt;, &lt;strong&gt;learning&lt;/strong&gt;, and continuous &lt;strong&gt;innovation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A healthy &lt;strong&gt;DevOps&lt;/strong&gt; mindset - "&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users&lt;/em&gt;", by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we have a foundation, we plan to enable, foster, and steward &lt;strong&gt;COLLABORATION&lt;/strong&gt;, engineering &lt;strong&gt;PRACTICES&lt;/strong&gt;, and &lt;strong&gt;QUALITY&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;HOW have we fared after 74 days?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Falcon Heavy" src="../images/common-engineering-journal-2-5.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team took off like a &lt;a href="https://www.spacex.com/vehicles/falcon-heavy/"&gt;SpaceX Falcon Heavy&lt;/a&gt; and it is extremely difficult to cherry-pick from our running list of achievements linked to our backlog of &lt;strong&gt;culture&lt;/strong&gt;, &lt;strong&gt;collaboration&lt;/strong&gt;, &lt;strong&gt;innovation&lt;/strong&gt;, &lt;strong&gt;practices&lt;/strong&gt;, and &lt;strong&gt;kaizen&lt;/strong&gt; work. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BURNOUT!&lt;/strong&gt; - Although everyone loves to watch teams take off and perform at maximum capacity, we must ensure that we throttle back to avoid inevitable &lt;strong&gt;stress&lt;/strong&gt; and &lt;strong&gt;burnout&lt;/strong&gt; which will impact &lt;strong&gt;quality&lt;/strong&gt; and &lt;strong&gt;health&lt;/strong&gt; negatively.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will pick the top 3 on my personal favourites list and invite my colleagues to add another journal entry with their favourites.&lt;/p&gt;
&lt;h2&gt;LITE Self-Service Automation&lt;/h2&gt;
&lt;p&gt;The first preview of our self-service automation prototype which creates an Azure Repo, inserts an application-type specific sample, an Azure Pipeline based on an application-type CI|CD YAML-based blueprint, and queues the pipeline ... in a mere 8 seconds! &lt;/p&gt;
&lt;h2&gt;EDO Ce Common Engineering Center of Enablement&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We launched the collaboration program to dog|cat-food our working agreements, checklists, and ceremony portal for the &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies.&lt;/p&gt;
&lt;p&gt;The EDO Ce Center of Enablement triggers the &lt;strong&gt;Common Language&lt;/strong&gt;, &lt;strong&gt;Containerization&lt;/strong&gt;, and &lt;strong&gt;Crank-it-up-board v2&lt;/strong&gt; working groups, with a few more such as &lt;strong&gt;Healthy mindset for continuous delivery and release on demand&lt;/strong&gt;, &lt;strong&gt;Automate everything automatable for Azure DevOps governance printing&lt;/strong&gt; using &lt;a href="https://github.com/vinijmoura/Azure-DevOps"&gt;vinijmoura/Azure-DevOps&lt;/a&gt;, and &lt;strong&gt;Application-type CICD blueprint&lt;/strong&gt; rolling onto the launch pad.&lt;/p&gt;
&lt;h2&gt;WAR on Silos!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we started with the common engineering system in 2019, we experienced turbulence created by our siloed culture and stringent processes. The latter will raise its head again when we discuss how we &lt;strong&gt;improve our value streams&lt;/strong&gt; and &lt;strong&gt;innovate&lt;/strong&gt; supporting processes and products in future. &lt;/p&gt;
&lt;p&gt;Organizational silos exist for a number of reasons, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating &lt;strong&gt;isolated&lt;/strong&gt; groups with common interests and experiences.&lt;/li&gt;
&lt;li&gt;Creating working relationships, based on personal experiences - we typically favour working with colleagues with whom we have had positive experiences and &lt;strong&gt;isolate&lt;/strong&gt; ourselves from those that are associated with turbulence.&lt;/li&gt;
&lt;li&gt;Reorganizations that create a churn in the organizational culture - we often go "heads down" and focus on our work as the organization changes, &lt;strong&gt;isolating&lt;/strong&gt; ourselves from the noise and fallout.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For us to &lt;strong&gt;innovate&lt;/strong&gt; and be &lt;strong&gt;productive&lt;/strong&gt; we must eradicate &lt;strong&gt;isolation&lt;/strong&gt; and foster a culture based on &lt;strong&gt;trust&lt;/strong&gt;, &lt;strong&gt;exchange of ideas&lt;/strong&gt; and &lt;strong&gt;collaboration&lt;/strong&gt;. The reason I am smiling from ear to ear, is that our EDO Ce Center of Enablement and associated EDO Working Groups is enabling and demonstrating &lt;strong&gt;vibrant collaboration&lt;/strong&gt; with (in no specific order) Enterprise Architecture, Solution Architecture, Sustainment, Site Reliability Engineering, DevSecOps, Development, Cloud Operations, Innovation, Release Management, and EDO Common Engineering.&lt;/p&gt;
&lt;p&gt;The appetite and interest in continuous &lt;strong&gt;innovation&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Standardization&lt;/strong&gt;, and the removal of &lt;strong&gt;waste&lt;/strong&gt; and associated &lt;strong&gt;snowflakes / accidental complexity&lt;/strong&gt; is both exciting and refreshing! &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Feedback from my colleagues&lt;/h2&gt;
&lt;p&gt;Alex's favourite part and I quote: &lt;em&gt;"My favourite part of our first 90 days journey (which hasn't ended yet) is formulating clear expectations coming from the stakeholders. That creates clarity in my mind, which is very important to me."&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That is it for today. Ping me on &lt;a href="https://www.twitter.com/wpschaub"&gt;twitter&lt;/a&gt; if you have any questions. &lt;/p&gt;
&lt;p&gt;See you next journal update!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category></entry><entry><title>Why can I not just create a working group?</title><link href="https://wsbctechnicalblog.github.io/ceremony-focus-single-source.html" rel="alternate"></link><published>2021-12-17T13:13:00-08:00</published><updated>2021-12-17T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-17:/ceremony-focus-single-source.html</id><summary type="html">&lt;p&gt;It all depends on the context - [CoE] Working Group&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we launched our &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies, we triggered vibrant collaboration (which is good) and created confusion (which is bad) with working groups. In the &lt;a href="/ceremony-overview.html"&gt;An overview of our key collaboration ceremonies&lt;/a&gt; we described the difference between the ceremonies, the importance of the terms of reference (why are we here), and the process of creating one or more of the ceremonies.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is the difference between a working group and a CoE Working group?&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;working group&lt;/strong&gt; is a group of people working together to collaborate and achieve specified goals. The lifespan of a working group can last anywhere between minutes to years, although we strongly recommend &lt;strong&gt;the shorter the better&lt;/strong&gt; mindset. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are referring to this generic type of working group, you can spin one up whenever you need to.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;CoE working group&lt;/strong&gt; is sponsored by one or more Centers of Enablement, its terms of reference (vision, goals, hypothesis) a subset of and supporting the CoE terms of reference. In other words, there is a strong dependency between a sponsoring and other collaborating CoEs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are referring to the CoE working group, you need a CoE to spin up a short-lived CoE Working Group.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="F1" src="../images/ceremony-focus-single-source-0.png"&gt; &lt;/p&gt;
&lt;p&gt;Think of the CoE as the Ferrari racing team (long-lived) and the CoE Working Group  as the team that performs one of the pit stops (short-lived). The CoE cannot succeed without the CoE Working Group and relies heavily on their feedback to improve.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let us look at the CoE flow of value&lt;/h1&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-focus-single-source-1.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; - A Centre of Enablement (CoE) is created to assemble people from different disciplines to collaborate and enable our organization to shift across multiple disciplines to create a place where the highest standards are maintained. Every CoE is a coalition for change, made of these pillars: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide thought leadership, vision, and direction.&lt;/li&gt;
&lt;li&gt;Provide good practice and guardrails (aka governance).&lt;/li&gt;
&lt;li&gt;Establish collaboration with key stakeholders and other CoEs to abolish silos.&lt;/li&gt;
&lt;li&gt;Trigger working groups, dojos, and community of practices to implement research, education, and outcomes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; - All CoE synchronize on a regular basis to exchange learnings, failures, and ensure that as a whole, the CoEs bubble up to a common vision for the organization.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Group" src="../images/ceremony-focus-single-source-2.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; and &lt;strong&gt;(4)&lt;/strong&gt; - The CoE triggers one or more CoE working groups, each focused on a subset of the CoE goals, their backlogs linked to he CoE backlog, and their vision supporting the CoE's vision. Every CoE working group is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short-lived!&lt;/strong&gt; - The working group's lifetime is limited to the CoE's lifetime and a maximum of 2 program increments (10 weeks). See FAQ for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Laser focused!&lt;/strong&gt; - Focus on experiments, (dis)prove hypothesis, make recommendations, and minimal viable products.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A slice!&lt;/strong&gt; - Take baby steps, focus on a vertical slice, and do &lt;strong&gt;not&lt;/strong&gt; try to solve the world's problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Flow" src="../images/ceremony-focus-single-source-3.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5)&lt;/strong&gt; and &lt;strong&gt;(6)&lt;/strong&gt; - Information flows from the CoE Working Group back to the CoE, where it is vetted and consolidated into the CoE knowledgebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(7)&lt;/strong&gt; - Each CoE will synchronize and exchange the learnings from the working groups during the Co&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;What happens when a CoE is terminated?&lt;/h2&gt;
&lt;p&gt;When we terminate a CoE, all associated CoE Working Groups, CoE Dojos, and CoE Community of Practices are terminated as well. All learnings, failures, etc. are maintained for future reference.&lt;/p&gt;
&lt;h2&gt;What happens when a CoE Working Group's lifetime expires?&lt;/h2&gt;
&lt;p&gt;We terminate the working group, perform a retrospective, and &lt;strong&gt;optionally&lt;/strong&gt; spin up a new working group to complete the work, if and only if it still deemed valuable. THe intentionally limit the lifetime of working groups to keep them focused and energized.&lt;/p&gt;
&lt;h2&gt;What happens at a +1 Townhall?&lt;/h2&gt;
&lt;p&gt;We present the overall health of our collaboration, experimentation, and innovation ecosystem, as well as an update and optional demos by each active CoE.&lt;/p&gt;
&lt;p&gt;Any other questions?&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category></entry><entry><title>Systems thinking and the flow of work</title><link href="https://wsbctechnicalblog.github.io/flow-of-work.html" rel="alternate"></link><published>2021-12-15T00:00:00-08:00</published><updated>2021-12-15T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-15:/flow-of-work.html</id><summary type="html">&lt;p&gt;Speeding up software development may not speed up the delivery&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Yoda" src="../images/yoda.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everyone is busy and yet few things are ever finished.&lt;/em&gt; -Anonymous&lt;/p&gt;
&lt;p&gt;Delivery of the planned workload often appears unpredictable. Let’s examine what processes contribute to that lack of reliable predictability.&lt;/p&gt;
&lt;h2&gt;How reliable are the estimates?&lt;/h2&gt;
&lt;p&gt;If the expected delivery fails to materialize, usually the first suspect is poor estimates. If the team bids on a certain feature and estimates it at one timeboxed cycle (i.e., one iteration), but the feature gets delivered after three or four iterations, the team’s ability to accurately estimate is placed under suspicion.&lt;/p&gt;
&lt;p&gt;However, the team is only one component of a larger system, and the delivery workflow travels throughout the entire system. A team cannot reliably predict how will the workflow get processed throughout the system.&lt;/p&gt;
&lt;p&gt;A larger, more holistic system view is needed if we are to understand the overall delivery process. Without gaining such insights, we will continue to be somewhat mystified why is our workflow slow and unpredictable.&lt;/p&gt;
&lt;h2&gt;Ask developers to work faster&lt;/h2&gt;
&lt;p&gt;Because of the lack of the insight into the overall working of the entire system, the bottlenecks may get wrongly identified. What we see typically happen is development gets erroneously perceived as the bottleneck. The slowness of delivery gets attributed to the pace of software development. Management attempts to address these ‘bottlenecks’ by either hiring more staff, or by purchasing more advanced tools, or by retraining the staff, or the combination thereof.&lt;/p&gt;
&lt;p&gt;What that amounts to is basically asking software development staff to work faster. The thinking is that if the developers were to pick up the speed by certain level of magnitude (say, by 50%), then the value delivery will improve in speed by 50%.&lt;/p&gt;
&lt;p&gt;A good time to take a closer look into this line of reasoning.&lt;/p&gt;
&lt;h2&gt;Software delivery queues&lt;/h2&gt;
&lt;p&gt;Software development is always done in isolation. The reason is that changes done to the software code are always assumed to be somewhat faulty. It is much more likely that a change made to the source code is less than optimal. Because of that, we instigate processes in the form of delivery queues. These queues/quality gates are created to make sure software does not get released without inspection.&lt;/p&gt;
&lt;p&gt;Queues are, by their very nature, speed bumps. Their only job is to slow down the delivery.&lt;/p&gt;
&lt;p&gt;Why the need to slow down? As mentioned, we don’t trust raw changes to the software, and thus enforce points of inspection.&lt;/p&gt;
&lt;h2&gt;Software delivery loops&lt;/h2&gt;
&lt;p&gt;Putting speed bumps on the road to releasing software improves our chances of delivering quality products. However, to blindly assume a happy path and smooth sailing, where all changes get carefully inspected and vetted by the gatekeepers, would be overly optimistic and naïve. More likely than not, the inspection will catch some issues with the proposed changes. When that happens, the proposed change gets sent back to authors. This sendoff then creates a loop.&lt;/p&gt;
&lt;p&gt;It would also be overly optimistic to assume that it’s always a single loop. Not every request for a fix gets done to the gatekeepers’ satisfaction. We often see the loop (i.e., back to the authors) occur more than once. Try again!&lt;/p&gt;
&lt;h2&gt;Queues and loops eat up the cycles&lt;/h2&gt;
&lt;p&gt;The inspection process is never instantaneous. When the requested change arrives at the inspection queue, it is extremely unlikely that the gatekeepers responsible for inspecting the change are immediately available to look at it. They’re busy servicing other requests. The newly arrived change request must “take a number” and then wait in the queue for the number to be called.&lt;/p&gt;
&lt;p&gt;How long will the wait be? There is no definitive, precise answer to that question. It depends on many things, most of them completely unpredictable.&lt;/p&gt;
&lt;p&gt;The team who is planning to release their changes is now forced to leave their changes alone; they then either start idling (which causes the management to frown – low utilization rates), or they get to work on something else. The wait time spent in the queue is wasting precious cycles. Not only are the teams waiting, but customers are also waiting for the new functionality/feature/fix.&lt;/p&gt;
&lt;p&gt;What happens when the gatekeepers finally get to work on the request? They will spend some time examining it, and that time could be substantial. The outcome could be positive (i.e., everything a-okay, go to the next gated phase), or negative (i.e., “we found a defect, sending it back to the team who authored it and now need to fix it”).&lt;/p&gt;
&lt;p&gt;Now we have a loop. The team who authored the defect receives the request for fixing it, and places it on their queue (“take a number”). Since they are busy working on something else, the request needs to wait for the team to free up their time and attend to it.&lt;/p&gt;
&lt;p&gt;How long is that wait time going to be? There is no definitive, precise answer. It depends on many things, many of those things also unpredictable.&lt;/p&gt;
&lt;h2&gt;Will speeding up the development make a significant impact?&lt;/h2&gt;
&lt;p&gt;If we were to trace the time spent on handoffs (i.e., idling in the queue, waiting for the next available inspectors, reassigning the team to work on something else while they’re waiting) as well as trace the time spent on examining/inspecting the change, plus the time spent on looping back with requests to fix the discovered issues, we will notice that it tends to be of a higher order of magnitude larger compared to the time spent developing software.&lt;/p&gt;
&lt;p&gt;Since any time spent waiting in the queue is unproductive time, we should go ahead and label it as waste (waste of time). Waste is to be avoided, however in the current model of software development process, such waste seems unavoidable. Our challenge then is to try to reduce it. Reduce the unproductive time.&lt;/p&gt;
&lt;p&gt;The added stress caused by this mode of working causes another waste – cognitive dissonance that arises from the frequent context switching. The flow of the work gets interrupted, teams get frustrated, customers place additional pressure by complaining about the sluggish speed of delivery.&lt;/p&gt;
&lt;p&gt;Is it possible to speed up the development process? Definitely – there is always room for improvement. But is that going to make a significant dent in the overall speed of delivery? Probably not.&lt;/p&gt;
&lt;p&gt;The real improvement will happen when we focus on reducing the unproductive idling. Instead of investing time and effort in finding ways to speed up the development, it may be better to work on reducing the queue wait time, eliminating the loops, and minimizing the context switching stress.&lt;/p&gt;
&lt;p&gt;Once we remedy the queuing, inspecting, and looping time waste, speeding up the development process will start showing significant improvements. But not before the remedial intervention.&lt;/p&gt;
&lt;h2&gt;Would more precise estimating help?&lt;/h2&gt;
&lt;p&gt;The assumption that every development task can be precisely estimated still leaves the problem of unpredictable idling time caused by queues and loops. As we’ve seen, the grand total time spent on making the change and then seeing that change in production is quite unpredictable. It doesn’t really help knowing how long predictable activities will take if we have no way of knowing how long unpredictable activities will take.&lt;/p&gt;
&lt;h2&gt;What is the solution?&lt;/h2&gt;
&lt;p&gt;The only plausible solution to this challenge is to strive to reduce, minimize, or even eliminate queues and loops. If we get to the point where we do not need handoffs, there would be no need for queues caused by asynchronous inspection. Once that happens, estimating individual software development tasks will make more sense, as it will offer closer approximation of the delivery time.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="estimates"></category></entry><entry><title>How to track (and optimize) your email traffic</title><link href="https://wsbctechnicalblog.github.io/optimize-and-track-emails.md.html" rel="alternate"></link><published>2021-12-13T00:00:00-08:00</published><updated>2021-12-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-13:/optimize-and-track-emails.md.html</id><summary type="html">&lt;p&gt;How to stop the insane volume of emails and WASTE!&lt;/p&gt;</summary><content type="html">&lt;p&gt;As mentioned in &lt;a href="/common-engineering-journal-1.html"&gt;What is origin of our common engineering team&lt;/a&gt; we have declared war on &lt;em&gt;WASTE&lt;/em&gt; and are fighting that battle on multiple fronts. On the meeting frontline we are reducing the number of meetings, dropping off meetings when our presence adds no value or we add no value to the meeting, avoiding repetitive meetings, and enjoying a meeting free Friday. I recommend you try to optimize your meetings - it is extremely liberating q;-) &lt;/p&gt;
&lt;p&gt;But, I am drifting, because in this email I want to focus on the tsunami wave of emails we receive and process every day. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my case I receive an average of &lt;strong&gt;149 emails per day&lt;/strong&gt; - too much to process to remain productive! &lt;/li&gt;
&lt;li&gt;In response I send an average of &lt;strong&gt;21 emails per day&lt;/strong&gt; - time I could invest more productively!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what are we doing to combat the email &lt;strong&gt;WASTE&lt;/strong&gt;?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Prioritize (and ignore) incoming emails&lt;/h1&gt;
&lt;p&gt;I am using Outlook rules to separate and prioritize incoming email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Emails" src="../images/optimize-and-track-emails-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I process emails from most important to least important, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox&lt;/strong&gt; contains email sent directly to me (I am on the &lt;strong&gt;To&lt;/strong&gt; list).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inbox Mentions&lt;/strong&gt; contains email notifications generated by Azure DevOps where I am @ mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Mentions" src="../images/optimize-and-track-emails-2b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox PR&lt;/strong&gt; contains incoming email notifications generated by Azure DevOps where I need to review a Pull Request (PR).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="PR" src="../images/optimize-and-track-emails-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox AzDO&lt;/strong&gt; contains all the other email notifications generated by Azure DevOps services.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Mentions" src="../images/optimize-and-track-emails-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox CC&lt;/strong&gt; contains email sent to me indirectly (I am on the &lt;strong&gt;Cc&lt;/strong&gt; list).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="CC" src="../images/optimize-and-track-emails-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I focus on the first three when I have time to check my emails. The &lt;strong&gt;Inbox CC&lt;/strong&gt; seldom makes it onto my radar as I "assume" CC == FYI only.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Noise" src="../images/optimize-and-track-emails-0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emails I regards as noise:&lt;/strong&gt;
- Any email is sent to me as a &lt;strong&gt;Cc&lt;/strong&gt; - I assume it is for my information only.
- Any Azure DevOps work item notification where I am not explicitly @ mentioned - I assume it is for my information only.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Defer outgoing email&lt;/h1&gt;
&lt;p&gt;Ever sent an email and regretted it 10 seconds later? Well, I defer all emails I send that are not priority for 13 minutes. It give me time to tweak the content and reconsider sending it in the first place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="13min" src="../images/optimize-and-track-emails-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Qualifiers&lt;/h1&gt;
&lt;p&gt;Something we used in the ALM/DevOps Ranger era and which I have noticed making a comeback in our group the use of qualifiers in the email subject.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[INFO] This is an information-only email sample email subject&lt;/li&gt;
&lt;li&gt;[NOTIFICATION] This is an important notification email sample email subject&lt;/li&gt;
&lt;li&gt;[ALERT] Someone's hair is on fire sample email subject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a &lt;strong&gt;consistent&lt;/strong&gt; list of qualifiers, users can create email rules and take action on emails, based on their qualifier tag.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use more productive collaboration channels&lt;/h1&gt;
&lt;p&gt;Instead of email, consider using Microsoft Teams, Slack, or some other collaboration service that allows you to collaborate with your peers and stakeholders far more effectively. It avoids the misunderstandings and the frustrating and often time consuming conversations that split and drift from the conversation topic.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;25% email reduction challenge&lt;/h1&gt;
&lt;p&gt;I just challenged my team to reduce the email we send as individuals and as a team by 25% in 2022. We will track the challenge using a Search Folders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Challenge" src="../images/optimize-and-track-emails-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Email Sent by me in 2021 shows the total number of emails&lt;/strong&gt; I sent in 2021.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email Send by me in 2022 tracks the number of emails&lt;/strong&gt; I sent in 2022.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us walk through the process of creating one of these search folders.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right click on &lt;strong&gt;Search Folders&lt;/strong&gt;, scroll to bottom of list, and a choose &lt;strong&gt;Create a new search folder&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Custom Search" src="../images/optimize-and-track-emails-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Criteria&lt;/strong&gt; and set &lt;strong&gt;Sent To&lt;/strong&gt; to your email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sent To" src="../images/optimize-and-track-emails-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Advanced&lt;/strong&gt; tab and add two &lt;strong&gt;Sent&lt;/strong&gt; date filters to limit search folder to 2002.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dates" src="../images/optimize-and-track-emails-10.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click OK a few times to save all the changes you have made to the search folder.&lt;/li&gt;
&lt;li&gt;Right Click on the search folder, select &lt;strong&gt;Properties&lt;/strong&gt;, and change view to &lt;strong&gt;Show total number of items.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Count of items" src="../images/optimize-and-track-emails-11.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Simple! Now you can track the emails sent in 2021 and 2022.&lt;/p&gt;
&lt;p&gt;My hypothesis for the challenge is: "&lt;em&gt;I believe that by sending 25% less email the EDO Ce team will achieve a drastic reduction in incoming email and associated WASTE created as a bi-product of replies and split email conversations.&lt;/em&gt;" &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="2023" src="../images/optimize-and-track-emails-12.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C U in 2023 to disprove or prove my hypothesis q;-)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Anything else that helps you to manage your emails?&lt;/p&gt;</content><category term="Posts"></category><category term="tips"></category></entry><entry><title>Replace road maps with sea charts</title><link href="https://wsbctechnicalblog.github.io/replace-roadmaps-with-seacharts.html" rel="alternate"></link><published>2021-12-10T00:00:00-08:00</published><updated>2021-12-10T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-10:/replace-roadmaps-with-seacharts.html</id><summary type="html">&lt;p&gt;Adopt more modest planning strategy by treating the journey as if sailing trecherous waters&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/seachart.png"&gt;&lt;/p&gt;
&lt;p&gt;Roadmaps are a familiar way to represent a strategic vision. We start from our current position, we then pinpoint our strategic goal/destination, and then map our projected journey by placing strategic milestones to be hit along the way.&lt;/p&gt;
&lt;p&gt;Roadmaps are very useful in situations that are predictable and free of hazards. However, we live in the world that is not so predictable. The challenges are manifold, including global challenges such as the unpredictable pandemics, climate changes, economic turmoil, and so on. As our world is becoming more global and the blast radius of various changes keeps attaining ever wider reach, we are starting to recognize and acknowledge that we live in the so-called &lt;strong&gt;VUCA&lt;/strong&gt; world.&lt;/p&gt;
&lt;h2&gt;What is &lt;strong&gt;VUCA&lt;/strong&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Volatility%2c_uncertainty%2c_complexity_and_ambiguity"&gt;&lt;strong&gt;VUCA&lt;/strong&gt;&lt;/a&gt; is an acronym first used in 1987; it stands for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;olatility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U&lt;/strong&gt;ncertainty&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;omplexity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;mbiguity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we recognize and acknowledge that we operate inside such environment, we begin to realize that roadmaps are not that useful. For example, two years ago we may have mapped an ambitious roadmap which then got completely invalidated when the pandemic hit in March 2020. Less than a year ago we may have projected another roadmap that got perturbed by the unexpected regulation to provide paid sick leave for employees affected by COVID-19. And so on; examples of volatility and uncertainty abound.&lt;/p&gt;
&lt;h2&gt;Why do roadmaps tend to be imprecise?&lt;/h2&gt;
&lt;p&gt;Roadmaps assume that all factors affecting the desired outcome are understood and managed. If we chart the direction, from our current position, to the desired destination, we feel we can draw a road leading from here to there. We also feel that the road is well paved, smooth, with clearly mapped pit stops, landmarks, and milestones.&lt;/p&gt;
&lt;p&gt;In reality (as we’ve seen), &lt;strong&gt;VUCA&lt;/strong&gt; interferes without asking for our opinion or for our permission. It doesn’t even give us the slightest hint of warning. Volatility seems to appear randomly, creating uncertainty, complexity, and ambiguity.&lt;/p&gt;
&lt;p&gt;And because we’ve invested a lot of energy into producing the roadmap, the temptation to stick to it persists. We’d often rather ignore the warning signals around us than agree to cut our losses and ditch the precious roadmap.&lt;/p&gt;
&lt;p&gt;That bias leads to imprecision. By continuing on the now invalidated roadmap, we run the risk of not hitting our desired destination, and instead finding ourselves in an unfamiliar territory.&lt;/p&gt;
&lt;p&gt;When that happens, we need to act carefully. Here is an analogy: if we buy a car and sit down and drive around, after a while we may park somewhere, get out, and look around. If, at that point, we realize that we do not like the place where we’ve arrived, we should not invest in buying a new car. Instead, we should invest in making better plans that get us to the desired destination.&lt;/p&gt;
&lt;h2&gt;Why are sea charts more realistic?&lt;/h2&gt;
&lt;p&gt;When sailing a boat across the sea, we are not restricted by the rails or by the paved roads. We are not even restricted by the dirt roads. The sea is wide open for exploring.&lt;/p&gt;
&lt;p&gt;But the flexibility comes at a cost. Our sailing will be smooth if we catch the tail wind. But if we are counting and betting on the continuous presence of the tail wind, we’d be in for an unpleasant surprise. Because the weather conditions are volatile and unpredictable, we may experience head winds. Those types of winds are highly undesirable because they impede our progress by slowing us down and even pushing us off the planned course.&lt;/p&gt;
&lt;p&gt;Knowing that, we are better equipped to deal with the &lt;strong&gt;VUCA&lt;/strong&gt; situation. Yes, by agreeing to avoid charging ahead in the straight line we may appear to be losing track of our goals, but in reality we are rolling with the punches and making sure we persist in our efforts to reach our destination. That way, we never sacrifice the precision of our plans.&lt;/p&gt;</content><category term="Posts"></category><category term="strategy"></category><category term="planning"></category></entry><entry><title>Journal 1 - What is origin of our common engineering team?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-1.html" rel="alternate"></link><published>2021-12-06T13:13:00-08:00</published><updated>2021-12-06T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-06:/common-engineering-journal-1.html</id><summary type="html">&lt;p&gt;Learning about the genesis of our EDO Common Engineering (EDO Ce) team&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I joined the Cloud Operations and Infrastructure team in 2018, I explored the variety of snowflakes decorating continuous integration and delivery pipelines, engineering practices, repositories, and solution architectures. While I agree with &lt;a href="https://en.wikipedia.org/wiki/Drive:_The_Surprising_Truth_About_What_Motivates_Us"&gt;Daniel Pink&lt;/a&gt; that knowledge workers have a need for autonomy to self-direct and manage their own lives, it must thrive within the context of engineering guardrails and organizational governance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Daniel Pink" src="../images/common-engineering-journal-1-2.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Autonomy&lt;/strong&gt; - Works exceptionally well in an environment where an engineers owns a feature from ideation to deprecation. Healthy DevOps mindset!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RED FLAG&lt;/strong&gt; - When ownership of a feature is transferred to a sustainment, maintenance, site reliability, or any other team it is pivotal to balance autonomy with consistency and standarization. NOT a healthy DevOps mindset!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I began to poke the hornet's nest in our architecture, development, operations, and security teams, which inspired guidance I contributed to the &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; book. I highlighted the risk of &lt;strong&gt;autonomy without guardrails&lt;/strong&gt;, especially in an environment plagued by organizational silos that stifle collaboration and where ownership is transferred from team to team. We will be reflecting on this in future journals, as our common engineering team is promoting for engineers to own a feature from ideation to deprecation.  &lt;/p&gt;
&lt;p&gt;On the 21st October 2019 I chose to consolidate the guidance, frequently asked questions and answers, knowledgebase, manifestos, and guardrails in an open wiki. The contents of the wiki is based on knowledge I gathered during collaboration, troubleshooting, breakfast and lunches, and informal meetups with fellow engineers in our atrium. &lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS" src="../images/common-engineering-journal-1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;To this date, the wiki remains to be our &lt;strong&gt;go-to&lt;/strong&gt; place for engineering processes, security, standardization, collaboration, as well as the manifestos that started it all.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS" src="../images/common-engineering-journal-1-4.png"&gt;&lt;/p&gt;
&lt;p&gt;A few months ago I became aware that there were plans to promote our informal common engineering system, to a more strategic common engineering team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;CeS Journal, entry #1&lt;/h1&gt;
&lt;p&gt;For our journal, let us fast-forward to 6th December 2021, which marks the 67th day of our EDO Ce team, which emerged from the informal and rebellious common engineering system like a mythical Phoenix.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Journal Countdown" src="../images/common-engineering-journal-1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;The EDO Ce team was launched with a leadership mandate to empower every engineer by standardizing practices and products, and stewarding guardrails to promote engineering consistency, enablement, security, and simplicity. &lt;/p&gt;
&lt;p&gt;We agreed that our formal goals are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable collaboration through active working groups, community of practices, and workshops.&lt;/li&gt;
&lt;li&gt;Steward guardrails (lightweight governance) to foster consistency, maintainability, security, and simplicity.&lt;/li&gt;
&lt;li&gt;Nurture the courage to experiment and fail, and breed a culture of continuous learning and innovation, and transparency.&lt;/li&gt;
&lt;li&gt;Empower engineering to embrace high DevOps performance.&lt;/li&gt;
&lt;li&gt;Foster the courage to tackle the status quo!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My personal leadership vision is to: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourage and enable everyone’s creativity, passion, purpose, and strengths!&lt;/li&gt;
&lt;li&gt;Declare war on WASTE, such as cycle time, excessive meetings, complexity, and manual processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While we are all inspired by the phenomenal pace of innovation with &lt;a href="https://www.spacex.com/"&gt;SpaceX&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Elon_Musk"&gt;Elon Musk's&lt;/a&gt; mantra to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make requirements less dumb&lt;/li&gt;
&lt;li&gt;Try to delete part of the process&lt;/li&gt;
&lt;li&gt;Simplify or optimize&lt;/li&gt;
&lt;li&gt;Accelerate cycle time&lt;/li&gt;
&lt;li&gt;Automate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next journal update, I will explore &lt;em&gt;"why we need the common engineering team?"&lt;/em&gt; and how we navigate the endless friction between the demand by engineering for full autonomy and the quest to create a common (common == all of ours) engineering mindset.&lt;/p&gt;
&lt;p&gt;See you next time!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category></entry><entry><title>Don’t debug; do TDD instead</title><link href="https://wsbctechnicalblog.github.io/dont-debug.html" rel="alternate"></link><published>2021-12-02T00:00:00-08:00</published><updated>2021-12-02T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-02:/dont-debug.html</id><summary type="html">&lt;p&gt;Avoid wasteful debugging activities by creating automated tests using TDD technique&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/debug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;When creating software, we often realize that the solution we’ve created does not behave the way we expect it to behave. We move into creating software with certain intentions (I call those intentions expectations). We materialize those expectations by writing code. If we are not careful when writing code, the code we wrote may end up having a few bugs. Hopefully, those bugs get identified before we release our changes to the customers. Unfortunately, that’s not always the case and sometime bugs get discovered in production, by the end users.&lt;/p&gt;
&lt;p&gt;Now we need to fix the bugs. And how do we do that? We debug. The debugging process is a technique for identifying bugs in the code.&lt;/p&gt;
&lt;p&gt;There are three different ways we debug code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We debug the code we wrote&lt;/li&gt;
&lt;li&gt;We debug the code someone else wrote and we have the source code&lt;/li&gt;
&lt;li&gt;We debug the code we wrote that uses the code someone else wrote but we don’t have their source code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In each of the above three cases, we aim at &lt;em&gt;slowing down&lt;/em&gt; the program execution. If we are not debugging, we activate the code by running the app (the program) and observing how the app behaves. If the app crashes, we have a serious defect somewhere. If the app doesn’t crash but behaves erratically (for example, displays incorrect information or takes us to an incorrect part of the app, or sends incorrect information to some other systems), we have detected that there is a bug somewhere (but we don’t know where). Now’s the time to hunt for that bug (or bugs). We typically hunt for it by slowing down the execution of the program.&lt;/p&gt;
&lt;p&gt;How do we slow down the execution? There are basically two ways to do that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We add new lines of code that print some values to the output (a console, or a printer)&lt;/li&gt;
&lt;li&gt;We add a breakpoint at some line of the code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Either of these tricks are intrusive; they make the cut into the body of the code so that the troubleshooting engineers could pry into the innards of the system.&lt;/p&gt;
&lt;p&gt;Furthermore, not only are debugging activities intrusive, but they are also wasteful. Nothing useful gets produced after spending some time debugging. The best we can hope for after a successful debugging session is to gain a better understanding of how the system works. But that understanding was achievable even without debugging, by simply reading the source code carefully.&lt;/p&gt;
&lt;p&gt;The worst part of any debugging activity is that it is 100% manual. We manually add new lines of code that output some values, or we manually add breakpoints to the code. When the program execution reaches the breakpoint, we then manually step through the code and manually inspect the produced values. Extremely tedious and error prone.&lt;/p&gt;
&lt;p&gt;As if that activity was not inefficient enough, an even worse part is that we cannot record the debugging session and reuse it later. If sometimes later the same or very similar bug returns, we need to repeat the same tedious manual process of debugging. Very wasteful, to say the least. Add to that the fact that it is literally impossible to estimate how long will any debugging session last (we are fishing for results, basically), and we get an extremely non-productive way of working (I’ve seen situations where teams sometimes waste days debugging).&lt;/p&gt;
&lt;h2&gt;How to avoid wasting time with debugging activities?&lt;/h2&gt;
&lt;p&gt;Any time we discover a bug, we realize that our expectation hasn’t been met but the running code. Rather than rolling up our sleeves and wasting time by getting immersed in tedious debugging activities (as described above), we should strive to work smarter, not harder.&lt;/p&gt;
&lt;p&gt;A much more productive approach to removing any bugs is to first formulate our expectation. If we do not take the time to formulate our expectation, we analyze program’s execution while keeping our expectation in our heads. It is of very little use being kept there. Instead, we should always insist to write our expectation down.&lt;/p&gt;
&lt;p&gt;When creating software, the best way to write our expectation down is to craft a test. A test is much simpler and easier to write than the implementation code. If done properly, a written test cannot contain any bugs (by ‘properly’ I mean the test must never contain any processing logic).&lt;/p&gt;
&lt;p&gt;Because we know exactly what we expect from the code when it runs, the test we wrote will fail (the bug in the implemented code will cause the program to fail to satisfy the expectation written in the test, which makes the test fail). Now we have the evidence that something is broken. And now is the time to work on fixing the breakage.&lt;/p&gt;
&lt;h2&gt;Why is this approach better than debugging?&lt;/h2&gt;
&lt;p&gt;To begin, notice how we did not have to make any incision into the implemented code. No need to add any output statements, nor do we have to enforce any breakpoints in the code.&lt;/p&gt;
&lt;p&gt;Secondly, we have explicitly expressed our expectation. This is useful not only in guiding our own thinking, but also facilitates successful teamwork. We can interrupt our programming session and let other team members pick up the slack and continue exactly from where we stopped, because they will be guided by the test we wrote.&lt;/p&gt;
&lt;p&gt;Thirdly, we did not have to slow the program execution down. We did not interrupt the flow. The test runs and executes the program and does not expect the program to run slower so that the automated test could examine it. That is a huge time saver and a big productivity boost.&lt;/p&gt;
&lt;p&gt;And lastly, our tests are recorded, and are repeatable to our hearts content. If later the same or a similar bug reenters the system, we don’t have to start from square one. We just let tests detect the breakage (fail early) and then use the tests to guide the process of fixing it. That way, we are safeguarded from allowing the breakage to bleed through into production.&lt;/p&gt;
&lt;p&gt;Writing tests to replace any debugging time wasters is the best strategy to safely grow our products. Everything we write must be fully testable. That way, bugs will be prevented from ever entering our codebase.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category></entry></feed>