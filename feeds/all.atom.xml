<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2021-08-05T00:00:00-07:00</updated><entry><title>Cultivate rapid spreading of knowledge</title><link href="https://wsbctechnicalblog.github.io/cultivate-rapid-spreading-of-knowledge.html" rel="alternate"></link><published>2021-08-05T00:00:00-07:00</published><updated>2021-08-05T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-08-05:/cultivate-rapid-spreading-of-knowledge.html</id><summary type="html">&lt;p&gt;Knowledge must be shared rapidly to enable teams to continuously deliver desired values&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;“In a beginner's mind there are many possibilities, but in the expert’s, there are few.” -Shunryu Suzuki&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Numerous studies have shown that people working in isolation prefer to enter the state known as the Flow. That state is the one of intense focus. Thanks to that intense focus, the entire problem and the solution spaces are loaded into a person’s head.&lt;/p&gt;
&lt;p&gt;It goes without saying that entering such intense state of clear focus cannot happen easily. On average, some studies claim that it takes approximately 20 minutes before a person could settle in the state of the Flow. That is in a way like sailing – before the sail is set properly and the wind picks up and the boat is effortlessly gliding, the crew needs to invest serious time to set everything up properly.
Reaching the state of the Flow is an expensive endeavor.&lt;/p&gt;
&lt;p&gt;Is the price worth paying? Perhaps. But before we jump to any conclusions, let’s also review the flip side of the coin: once in the state of the Flow, how easy is it to break it?&lt;/p&gt;
&lt;p&gt;As it turns out, nothing is easier than interrupting the state of the Flow. Any little disturbance in the environment is enough to destroy that state. A phone rings, an email notification chimes, someone coughs, etc. When that happens, we’re back to square one – another 20 or so minutes of messing around, trying to set everything up properly.&lt;/p&gt;
&lt;p&gt;We see that the state of the Flow is extremely brittle. Is the price worth paying?&lt;/p&gt;
&lt;h2&gt;Skills and Competencies&lt;/h2&gt;
&lt;p&gt;Skills and competencies aren’t interchangeable. There exist considerable differences between these two capabilities.&lt;/p&gt;
&lt;p&gt;What are the differences? In short, people can usually learn skills in a matter of months (sometimes even weeks); on the other hand, it is impossible to learn competencies in less than several years, minimum. We haven’t been able to identify any capabilities that would fall in the gap between skills and competencies.&lt;/p&gt;
&lt;p&gt;When we talk about qualifications, we must clearly specify whether we’re looking for skills or for competencies.&lt;/p&gt;
&lt;p&gt;Skills are easily shareable. Competencies aren’t. Often, competencies could even be mutually exclusive. There could be a person who is competent in following a process, but we cannot expect that person to also be competent in being creative.&lt;/p&gt;
&lt;p&gt;As a matter of fact, competencies are unique to an individual. As such, building a team around certain competencies might end up being a very challenging task.&lt;/p&gt;
&lt;h2&gt;Importance of teamwork&lt;/h2&gt;
&lt;p&gt;Software development is a social activity. It takes a team to continuously deliver software. But in every team, we find disparate levels of knowledge. There are seasoned professionals with many years of proven track record and there are junior members who are just starting in their career, and then there are also intermediate members. And as we know, a chain is as strong as its weakest link. In this case, the team may end up being only as strong as its weakest, least knowledgeable member. Or a team will be as fast as its slowest member.&lt;/p&gt;
&lt;p&gt;Every team lives or dies by their products/services (to put things a bit dramatically), which is why there is a natural push to set aside the time to onramp the slowest/weakest member(s). However, any time set aside to upgrade the skills in an asynchronous fashion robs the team of the bandwidth needed to continue delivering quality software. And yet if the weakest members are not trained properly, their inexperience will eat up a lot of the precious bandwidth.&lt;/p&gt;
&lt;p&gt;How to solve this conundrum?&lt;/p&gt;
&lt;p&gt;Embrace collective code ownership and synchronous collaboration!&lt;/p&gt;
&lt;h2&gt;Knowledge transfer&lt;/h2&gt;
&lt;p&gt;There is mounting body of evidence that shows how working in a team in real time (synchronously) is the fastest way to achieve much needed knowledge transfer.&lt;/p&gt;
&lt;p&gt;The typical objection to working in a team environment in real time is that it is literally impossible to get into the much-coveted state of Flow. Interruptions in the team environment abound, especially with novices asking all kinds of questions that seem so obvious to more experienced members. And even if the state of Flow is achieved, it is only good for getting things done, not good for transferring knowledge.&lt;/p&gt;
&lt;p&gt;That’s a valid objection and is seemingly unresolvable. Such situation is forcing us to find a different way of working synchronously in a team.&lt;/p&gt;
&lt;p&gt;The solution to the impossibility to get into and stay in the state of Flow is to abandon the focus on the Flow and to instead turn our attention to the Beginner’s Mind.&lt;/p&gt;
&lt;p&gt;How does knowledge transfer work when relying on the Beginner’s Mind (and, what is Beginner’s Mind)?&lt;/p&gt;
&lt;p&gt;Beginner’s Mind refers to an attitude of openness and the ability to see things as fresh and new. Beginner’s Mind includes both doubt and possibility. Because of that, a person with the Beginner’s Mind is open to change, eager to change, eager to try something new.&lt;/p&gt;
&lt;p&gt;When a person who is working is unsure of their boundaries, that person enters the Beginner’s Mind. That uncertainty leads the person to thoroughly test their environment. That state routinely happens whenever we find ourselves in a situation outside but near the limits of our comfort zone.&lt;/p&gt;
&lt;p&gt;For example, if I’m otherwise comfortable with my environment but I don’t understand one thing, I will tend to try stuff until I figure that one thing I don’t understand. My state of Beginner’s Mind leads me to try more approaches, and try them rapidly, therefore I am more likely to succeed at a task than a person who thinks they know how it works.&lt;/p&gt;
&lt;p&gt;The frustration brought about my insecurity of not understanding something creates a high energy cognitive state. If we now widen the scope and involve the team in the situation where everything is comfortable except on unsolved thing, the team is likely to hit the collective Beginner’s Mind. If the competence prevails over skills, one competent team member could drag the high energy cognitive state down to the lower energy state. When that happens, knowledge transfer is not possible.&lt;/p&gt;
&lt;p&gt;We see from the above that the best way to transfer knowledge in the group situation is to focus on skills and allow the team to rise to the Beginner’s Mind state.&lt;/p&gt;
&lt;h2&gt;Embrace instability (change)&lt;/h2&gt;
&lt;p&gt;Unlike the state of Flow, which depends on stability, Beginner’s Mind depends on instability. When working in a group arrangement (for example, a team doing mob programming), instability gets created by encountering a problem and instead of falling back on the competence of the more experienced team members/team leads, intentionally open the mindshare to embrace the Beginner’s Mind which allows the team to try out various approaches in rapid fire succession. We say that the team is surfing the edge of chaos.&lt;/p&gt;
&lt;p&gt;It is important to maintain the instability that leads to experimentation. How do we maintain instability in the group setting? Easy. Introduce the ‘musical chairs’ rotation. Don’t let anyone’s exploration turn into hardened competence. Rotate team members who are solving the problem; that way, knowledge transfer spreads like a forest fire and much more gets accomplished in a given timeframe.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="xp"></category></entry><entry><title>Sensei Alex "fakes it until he makes it" in our Test-driven Development (TDD) dojo</title><link href="https://wsbctechnicalblog.github.io/dojo-tdd-getting-started-demo.html" rel="alternate"></link><published>2021-07-31T00:00:00-07:00</published><updated>2021-07-31T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-31:/dojo-tdd-getting-started-demo.html</id><summary type="html">&lt;p&gt;Exploring the advantages of Test-driven Development and the concept of self-healing code&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a recent TDD Dojo, our Sensei &lt;a href="https://twitter.com/alexbunardzic"&gt;Alex&lt;/a&gt; reiterated the main advantages of embracing Test-driven Development (TDD), such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating an up-to-date armour of automated tests your or your pipeline friends can rerun at will.&lt;/li&gt;
&lt;li&gt;Fine-tuned code that is functional, maintainable, and plagued by fewer bugs.&lt;/li&gt;
&lt;li&gt;Less need for and time spent debugging code.&lt;/li&gt;
&lt;li&gt;Less friction and hesitance to make code changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also known as "Test First Development", TDD is a continuous loop of writing tests, adding, and refactoring code, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="TDD" src="../images/dojo-tdd-getting-started-demo-1.png"&gt; &lt;/p&gt;
&lt;p&gt;What followed in the Dojo seemed trivial but made my head spin for a while. Alex introduced the concept of "fake it until you make it" and self-healing code, which literally erased code changes that break the test(s). &lt;/p&gt;
&lt;p&gt;&lt;img alt="Self-Healing" src="../images/dojo-tdd-getting-started-demo-2.png"&gt; &lt;/p&gt;
&lt;p&gt;Self-healing code is definitely not for the faint hearted and will take nerves of steel to adopt. However, it forces you to continuously make and test small autonomous code changes.&lt;/p&gt;
&lt;p&gt;Seeing is believing. Enjoy the following Dojo demo recording and share your thoughts with me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/AQq-HwBzQtQ"&gt;&lt;img alt="TDD Video" src="../images/dojo-tdd-getting-started-demo-3.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Events"></category><category term="code"></category><category term="quality"></category><category term="testing"></category><category term="tdd"></category><category term="events"></category></entry><entry><title>First International TDD Conference</title><link href="https://wsbctechnicalblog.github.io/first-international-tdd-conference.html" rel="alternate"></link><published>2021-07-27T00:00:00-07:00</published><updated>2021-07-27T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-27:/first-international-tdd-conference.html</id><summary type="html">&lt;p&gt;First International TDD Conference generated a lot of good interest and traction&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="TDD Conference" src="../images/TDDconf.png"&gt; &lt;/p&gt;
&lt;p&gt;Although &lt;a href="http://agiledata.org/essays/tdd.html"&gt;Test-Driven Development (TDD)&lt;/a&gt; practice is already more than a quarter century old, it is still treated as the unloved foster child of software engineering. And while there is abundance of amazing international tech conferences on pretty much any other important software engineering practice, TDD remains ignored.&lt;/p&gt;
&lt;p&gt;As an avid TDD advocate and practitioner, I felt the urge to remedy that oversight and back in April 2021 got the idea to organize the &lt;strong&gt;First International TDD Conference&lt;/strong&gt;. My intention was to expose the usefulness of TDD practice to the wider audience in the hopes of achieving greater legitimacy of this vitally important software engineering practice.&lt;/p&gt;
&lt;p&gt;I was also impressed with the progress we are making here at &lt;strong&gt;WorkSafeBC&lt;/strong&gt; with TDD Dojos that were introduced by &lt;a href="https://www.linkedin.com/in/andrekaminski/?originalSubdomain=ca"&gt;Andre Kaminski, Director of IT&lt;/a&gt;. I thought, hey, why don’t we try to move the needle in the wider community by gathering TDD experts to present their teachings?
How to organize a tech conference?&lt;/p&gt;
&lt;p&gt;Of course, organizing an international tech conference seems like a daunting task, but in this situation, with the pandemic still going strong, it turned out that is was super simple to set everything up. The conference was held remotely, with participants joining from all over the world. The biggest challenge was to ensure quality content, but I was fortunate to have already built a strong network of TDD experts. It was a breeze to get everyone excited about the conference. It took only a few days for the talk proposals to start coming in, and in the end, we managed to organize a conference committee who selected 14 most exciting talks.&lt;/p&gt;
&lt;p&gt;Moral of the story – it is important to reach out and collaborate with our colleagues and peers, because that way we all rapidly grow.&lt;/p&gt;
&lt;h2&gt;Conference logistics&lt;/h2&gt;
&lt;p&gt;Having 14 conference talks in the can, we now turned out attention to the timing. Knowing that we have enrolled the speakers from all over the world (from Asia, Europe, South America, and North America), timing became an issue. I have originally announced that the conference starts at 9:00 am Pacific Time, but that arrangement would have put Asian and European speakers (10 of them in total) at a huge disadvantage. After some deliberation we agreed to push the conference starting time at 7:00 am Pacific Time (which meant I’d have to get up at 5:00 am to make sure everything is set up).&lt;/p&gt;
&lt;p&gt;In the end, we managed to deliver the conference in one solid block lasting over 11 hours straight!&lt;/p&gt;
&lt;h2&gt;About the conference&lt;/h2&gt;
&lt;p&gt;It came as quite a surprise to me that TDD conference would attract so much traction. Yes, admission was free, but TDD is still such marginal concept that I wasn’t expecting a lot of people to register. However, once the free registration was open, we started seeing hundreds of people registering, and quickly the total number of registrants climbed into thousands! Perhaps the reason for such brisk interest partially lies in the carefully planned schedule (the conference was scheduled on Saturday, July 10, which means people did not have to plan to take a workday off)? Also, having &lt;a href="https://wingman-sw.com/about"&gt;James Grenning&lt;/a&gt; (one of the original signatories of the Agile Manifesto) open the conference with a keynote talk must have helped a lot.&lt;/p&gt;
&lt;p&gt;I have built the conference web site in one weekend (leveraging prior experience with building WorkSafeBC technical blog; many tricks and techniques got reused, making the building of the web site a breeze). Here is the conference site:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tddconf.com"&gt;First International TDD Conference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The way the conference was organized was to direct registered participants to the TDD Conference YouTube channel, where the talks were streamed live. One of the most impressive features of the conference was the intensity and the quality of the live chats that were happening during the talks. If you watch the &lt;a href="https://www.youtube.com/watch?v=-_noEVCR__I&amp;amp;t=175s"&gt;recorded talks&lt;/a&gt;, you will see the accompanying comments, which are for the most part almost as interesting as the conference presentations!&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;In my estimation, TDD conference was a success. We received a lot of positive feedback and even today, more than two weeks later, we keep receiving thanks from all over the world. TDD community is growing, which is an auspicious sign for the quality of software delivery!&lt;/p&gt;
&lt;p&gt;In my view, the conference was overly technical and code centric. I wish I was able to attract more speakers from the executive leadership area who would give us their view on the value of TDD (Andre was interested in giving the opening keynote but then got pulled into more pressing matters; hopefully, the next conference will see Andre give us his views on TDD).&lt;/p&gt;
&lt;p&gt;Another impression was the importance of speaking directly to the audience. For example, &lt;a href="https://blog.devgenius.io/tdd-conference-2021-tdd-misconceptions-olena-borzenko-a69ce302a3e8"&gt;Olena Borzenko&lt;/a&gt; gave a great talk in which she started by looking straight at the camera and addressing the audience. That approach created a lot of positive energy until someone stepped in and warned Olena that she is not sharing her slides. She apologized and started sharing her slides, at which point the energy level dropped. To me, that was a clear sign that slides must be secondary when presenting; people came to hear and watch us deliver a talk, they may not be interested in watching us read off our slides (because people can read for themselves).&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="tdd"></category></entry><entry><title>Pipelines - Meet our second-generation app-type blueprints</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html" rel="alternate"></link><published>2021-07-24T00:00:00-07:00</published><updated>2021-07-24T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-24:/yaml-pipelines-part10.html</id><summary type="html">&lt;p&gt;Our quest for continuous improvement, simplicity, consistency, enablement, and automation has taken us into a realm of Azure Pipelines that amaze even our most critical engineers.&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;In &lt;a href="/yaml-pipelines-part9.html"&gt;Self-service automation - A dream turns into reality&lt;/a&gt; we explored the nifty automation script we used to demonstrate our application-type blueprints to our engineering teams. The feedback was positive, as shown by the session score and the net performance score (NPS) for our common engineering system and sets high expectations for future innovation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stars" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-1.png"&gt; &lt;img alt="NPS" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us review the latest blueprints, we refer to as our second-generation app-type blueprints, and a checklist we use to build new ones.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;2nd Generation app-type blueprint&lt;/h1&gt;
&lt;p&gt;The diagram looks intimidating at first, but the power and simplicity will become evident as we unpack the pieces. If you have been following our adventure from the days of the generic blueprints, you will appreciate the improvement and simplicity - 18 lines of YAML and less than a handful of tokens to update that engineers must worry about.&lt;/p&gt;
&lt;p&gt;Although &lt;a href="/yaml-pipelines-part9.html"&gt;Self-service automation - A dream turns into reality&lt;/a&gt; sets up &lt;strong&gt;everything&lt;/strong&gt; for our engineers, it helps to know about all the ingredients and how they are mixed to create magic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;app-type blueprint architecture&lt;/p&gt;
&lt;p&gt;&lt;img alt="blueprints" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;( 1 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;start&lt;/strong&gt;.yml template, where * is a placeholder for azure-pipeline. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;azure-pipeline-azure-function-&lt;strong&gt;start&lt;/strong&gt;.yml template example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WorkSafeBC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Multi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Design&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Practice&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;See&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DevOps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;documentation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HOW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;USE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pipelines/azure-pipelines-&amp;lt;portfolio&amp;gt;-&amp;lt;program&amp;gt;-start.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Look&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fine&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tune&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;needed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;trigger&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;every&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Trigger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CeSTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Common-Engineering-System/AzureDevOps.Automation.Pipeline.Templates&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="nv"&gt;@CeSTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;parameters&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;netCoreVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3.1.x&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PORTFOLIO__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PRODUCT__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;azFuncProjectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_AZURE_FUNCTION_PROJECT_NAME__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CeS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AzureFunction&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eng&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;( 2 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;control&lt;/strong&gt;.yml template, our new wheelhouse, and &lt;strong&gt;extends&lt;/strong&gt; the app-type &lt;em&gt;-start.yml template above. As implied by the name, the template is the app-type cookbook. It pulls the configuration from the ( 3 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;/em&gt;&lt;em&gt;config&lt;/em&gt;*.yml template, injects the continuous integration pipeline, and then the continuous deployment template.&lt;/p&gt;
&lt;p&gt;( 4 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;ci&lt;/strong&gt;.yml template, defines the continuous integration steps and injects the ( 5 ) &lt;strong&gt;boot-strap&lt;/strong&gt;.yml template, which is covered in &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt;. It is where the builds and tests are run, followed by automated scans to verify the latest codebase before opening the deployment gates. "Trust but verify" as Kevin would say.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;COFFEE BREAK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Our DevSecOps team recently decided to suspend one of the security scans, SonarQube, to rebuild their server and create a new database from scratch. Our engineers supporting our classic unified Azure Pipelines, as mentioned in &lt;a href="/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options&lt;/a&gt;, are faces with the mammoth task of updating more than 1000 pipelines. Our pipeline working group only had to update one YAML template, submit, review, and complete a pull-request ... and voila 200+ blueprint-based pipelines no longer ran the SonarQube task. Minutes versus a mind-numbing waste of time.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;( 6 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;cd&lt;/strong&gt;.yml template, defines the continuous deployment steps to validate with automated tests and deploy to one or more environments. As shown in the diagram above, the template includes the ( 7 ) &lt;strong&gt;security-scans&lt;/strong&gt;.yml template, and the ( 8 ) azure-pipeline-&amp;lt; app-type &amp;gt;-cd-&lt;strong&gt;stage&lt;/strong&gt;.yml template. The latter includes the actual recipe for deployment and assumes that all environments are the same. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHAT IF ENVIRONENTS ARE DIFFERENT?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The start and control templates support the concept of injecting custom templates for the continuous integration and deployment steps. In future we will use the same concept to support default and custom QA templates. See code snippet below.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# START OF PIPELINE&lt;/span&gt;
&lt;span class="c1"&gt;# If user overrides the customCITemplate with a custom template&lt;/span&gt;
&lt;span class="c1"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCITemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blueprint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Custom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCITemplate&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;ciParameter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCIParameter&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCITemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blueprint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeSTemplates&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;azFuncProjectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;azFuncProjectName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;forceToolbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceToolbox&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;loadDVTBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadDVTBox&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;( 9 ) Our &lt;strong&gt;standardisation&lt;/strong&gt;.yml line, which separates the pipeline instance, and the shared templates. Engineering is accountable for the former and the common engineering system for the latter.&lt;/p&gt;
&lt;p&gt;( 10 ) &lt;strong&gt;extends&lt;/strong&gt;, the hidden gem that empower our consistency and security guardrails. We use the &lt;a href="https://github.com/MicrosoftDocs/azure-devops-docs/blob/master/docs/pipelines/security/templates.md#set-required-templates"&gt;set required templates&lt;/a&gt; feature to verify and enforce that all our production pipelines extend from one of the &lt;em&gt;-control.yml templates stored in our AzureDevOps.Automation.Pipeline.&lt;/em&gt;&lt;em&gt;Templates&lt;/em&gt;* repo.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Building a new blueprint&lt;/h1&gt;
&lt;p&gt;&lt;img alt="blueprints" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Now that we know the ingredients of our gourmet template stew, let us conclude with a checklist how our engineers create a new blueprint. &lt;/p&gt;
&lt;h2&gt;Cook a new blueprint&lt;/h2&gt;
&lt;p&gt;Create a new ...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Feature branch in our AzureDevOps.Automation.Pipeline.Templates repository and a DRAFT pull request to start &lt;strong&gt;collaborating&lt;/strong&gt; with the pipeline working group. It is important to use the latest and greatest ingredients and consider shared templates where possible to avoid &lt;strong&gt;waste&lt;/strong&gt;. Also use a friendly &amp;lt; app-type &amp;gt; name when creating the unique blueprint folder in our repository.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;start&lt;/strong&gt;.yml template ( feel free to copy-paste from an existing template).&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;control&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;config&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;ci&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;cd&lt;/strong&gt;.yml and an associated azure-pipeline-&amp;lt; app-type &amp;gt;-cd-&lt;strong&gt;stage&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;Publish the pull request to trigger validation build(s), validate policies, and invite operations, security, and working group reviewers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Taste the automation&lt;/h2&gt;
&lt;p&gt;Take a few more steps further to enable automation ...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a AzureDevOps.Automation.Pipeline.Sample.&amp;lt; app-type &amp;gt; repository with a sample app-type specific sample.&lt;/li&gt;
&lt;li&gt;If you have custom tokens that need to be updated by the automation script:&lt;ul&gt;
&lt;li&gt;Create a feature branch in AzureDevOps.Automation.Scripts repository&lt;/li&gt;
&lt;li&gt;Update the /azure-devops-pipelines/demo-blueprints/drop-the-mic.ps1 script&lt;/li&gt;
&lt;li&gt;Submit a pull request.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the automation script, as covered in &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9: Self-service automation - A dream turns into reality&lt;/a&gt; to verify that the following magic happens:&lt;ul&gt;
&lt;li&gt;New repo is created in the specified Azure DevOps.&lt;/li&gt;
&lt;li&gt;New pipeline is created in the new repo.&lt;/li&gt;
&lt;li&gt;New config template is added to the Automation.Pipeline.Templates repo in the /Operations/Config folder.&lt;/li&gt;
&lt;li&gt;The sample from the AzureDevOps.Automation.Pipeline.Sample.&amp;lt; app-type  is copied to the new repository.&lt;/li&gt;
&lt;li&gt;Run new pipeline to validate the continuous integration part of the new pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simple, no?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We continue to create new blueprints to cover all our existing application-types, which include good old Cobol, and new application-types emerging from our architecture runway. &lt;/p&gt;
&lt;p&gt;Watch this space for more exciting news.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | Part 10 |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Refactoring saves time and increases quality</title><link href="https://wsbctechnicalblog.github.io/refactoring-saves-time-and-increases-quaity.html" rel="alternate"></link><published>2021-07-22T00:00:00-07:00</published><updated>2021-07-22T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-22:/refactoring-saves-time-and-increases-quaity.html</id><summary type="html">&lt;p&gt;Design is not a static construct, it evolves by refactoring as we keep changing the code&lt;/p&gt;</summary><content type="html">&lt;p&gt;When creating an application, we feel a strong urge to envision a perfect design of the system we intend to build. After all, we have many decades of collective experience in designing systems, and why not leverage that vast body of knowledge?&lt;/p&gt;
&lt;p&gt;That line of reasoning would work perfectly if the systems we’re building were confectionary products that are standardized and normalized. However, years of experience teach us that pretty much each and every system we’re building is somehow unique. Despite many attempts to standardize and normalize software applications, we haven’t seen much useful advances in that area.&lt;/p&gt;
&lt;p&gt;It is for that reason that we cannot blindly apply previously successful designs to a new system we are building. It is more prudent to work on the design that emerges as we are creating software.
This is not to say that the initially envisioned ‘perfect’ design is a waste; it is a good guidepost, something to inform and guide our initial reasoning. But as we proceed with the building activities, we discover that the initial design quickly becomes obsolete.&lt;/p&gt;
&lt;h2&gt;Why redesign?&lt;/h2&gt;
&lt;p&gt;Consider an example from nature: a caterpillar is perfectly designed to devour vast amounts of foliage. So, given such perfect design, why go for a redesign?&lt;/p&gt;
&lt;p&gt;Well, eating vast amounts of foliage is sufficient for survival, but not sufficient for reproduction. There is a design flaw that got discovered in the ‘perfect’ design of a caterpillar.&lt;/p&gt;
&lt;p&gt;To reproduce, a caterpillar must find a mate. And the only way a caterpillar could find a mate is if he refactors himself into a butterfly. A butterfly is designed to search the sky for others of his own species.&lt;/p&gt;
&lt;p&gt;Any design, no matter how perfect it may appear to be, sooner or later must be redesigned. Technical term for that redesign in software is refactoring.&lt;/p&gt;
&lt;h2&gt;What if we don’t refactor?&lt;/h2&gt;
&lt;p&gt;Teams often feel disdain toward refactoring because it eats up precious cycles. Wouldn’t it be more desirable to spend scarce time on building new useful features?&lt;/p&gt;
&lt;p&gt;But that line of reasoning is false economy. Churning new features as if we’re following a construction/manufacturing model and producing widgets on an assembly line doesn’t work well in software development. We are better advised to follow knowledge/service ecology models. And those models differ significantly from the manufacturing model where once established patterns are reliably repeatable. In knowledge/service ecology models, experimentation is the key and reliably repeatable patterns are a rare exception, rather than a rule.&lt;/p&gt;
&lt;p&gt;If we choose not to refactor, we quickly accumulate bad design. It doesn’t take long on a brand-new software development project to start noticing rapidly mounting redundancy. Code duplication is rampant, and that anti-pattern is a surefire signal that we are heading into a defect-and-malfunctioning territory. Before we know it, the precious time we have carved up for building new features gets completely eaten up by the time teams spend fighting fires. Not a good position to be in.&lt;/p&gt;
&lt;p&gt;So, how to fight it? There is no other way to fight treacherous redundancy but by merciless refactoring.
Another bad smell on the rapidly advancing project is unused functionality. Seemingly innocuous, this ‘deadwood code’ is actually very dangerous because it slows teams down. Makes it difficult to separate signal from the noise. Refactoring is the only way to keep mounting deadwood code from sticking around. Getting rid of the unused code is one of the most important aspects of refactoring.&lt;/p&gt;
&lt;p&gt;Designs quickly become obsolete under the pressure of newly discovered details that were unknown during the times the design was formulated. Any design, no matter how fit for purpose it may be, need to be constantly reviewed and rejuvenated.&lt;/p&gt;
&lt;p&gt;Avoid needless clutter and complexity. Make sure that everything is expressed once and only once. It is not possible to ensure that principle if we’re not refactoring.&lt;/p&gt;
&lt;p&gt;Refactoring is time well spent. Never postpone refactoring activities. Never project refactoring tasks for some time into the future. The time is now!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="code"></category><category term="devops"></category><category term="learning"></category><category term="quality"></category><category term="eliminate-waste"></category></entry><entry><title>OODA Loop and DevOps</title><link href="https://wsbctechnicalblog.github.io/ooda-loop-and-devops.html" rel="alternate"></link><published>2021-07-13T00:00:00-07:00</published><updated>2021-07-13T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-13:/ooda-loop-and-devops.html</id><summary type="html">&lt;p&gt;What is the relationship between Observe-Orient-Decide-Act Loop and DevOps.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our July 8, 2021 Navigating the Future ceremony was focused on learning, with &lt;strong&gt;Andre Kaminski&lt;/strong&gt;, &lt;strong&gt;Joo Choon&lt;/strong&gt; and &lt;strong&gt;Todd Yule&lt;/strong&gt; opening talks emphasizing the vital importance of keeping up with the accelerating changes in the world.&lt;/p&gt;
&lt;p&gt;We were fortunate to be able to invite a featured guest speaker, &lt;strong&gt;Ben Ford&lt;/strong&gt;, who specializes in applying strategic and tactical thinking for the purpose of increasing our learning potential. Ben’s amazing talk was sponsored and endorsed by the executive leadership, which is another strong message that fortifies the importance of &lt;em&gt;continuous learning&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Navigating the Future" src="../images/navigating-the-future-ben-ford.png"&gt; &lt;/p&gt;
&lt;p&gt;The title of Ben’s talk was &lt;strong&gt;“OODA (Observe-Orient-Act-Decide) Loop, the Algorithm of Adaptation”&lt;/strong&gt;. 
Ben's talk gave us a lot of food for thought and here I’d like to riff off some of Ben’s observations to elucidate how those may apply to our current problem at hand.&lt;/p&gt;
&lt;h2&gt;DevOps is not about the solution&lt;/h2&gt;
&lt;p&gt;Before DevOps entered the mainstream practice, all software delivery teams have already been delivering solutions. DevOps wouldn’t be as successful as it is today if it was yet another “me too” solution provider.&lt;/p&gt;
&lt;p&gt;DevOps is a revolutionary improvement because it is all about &lt;em&gt;changing the solution&lt;/em&gt;. No solution, regardless of how brilliant it may be, stays valid for very long. Change is inevitable, and what used to fit the bill perfectly just a few months ago, suddenly turns from being an asset to being a liability.&lt;/p&gt;
&lt;p&gt;Many organizations find themselves stuck in that land of obsolescence, where the solutions they’ve settled on a few years back have now turned into a straitjacket that is severely limiting their mobility. The solution suddenly turns into a new problem.&lt;/p&gt;
&lt;p&gt;DevOps shines in such situations. Because DevOps embraces change at the very outset by aggressively shifting left, the inevitable onslaught of changes transforms from being a stress-inducing obstacle to becoming an anti-fragile advantage. Accepting the change gladly and rolling with the punches, DevOps enables business and organizations to grow ever stronger with each potentially traumatic change.&lt;/p&gt;
&lt;h2&gt;DevOps embraces the OODA Loop&lt;/h2&gt;
&lt;p&gt;DevOps is based on Lean and on Extreme Programming (XP). Both Lean and XP are strictly empirical disciplines that eschew any Big Plan Upfront and instead focus on working in extremely small batches. DevOps is, in essence, based on rapid iterating.&lt;/p&gt;
&lt;p&gt;And so is OODA Loop. The goal of OODA/DevOps is to increase frequency of feedback. Any time we react to the circumstances and then must wait until we receive feedback, we are working in complete darkness. DevOps is an attempt to remove that scary working in darkness situation by shining the light of feedback as soon as possible. Hence the jist of the practice – shift left. Shifting left means we receive feedback the moment we make any change. We don’t wait until the change we made propagates throughout various layers of organization until we eventually get the feedback. Did the change work? Did it not work? Learning the outcome of the change late in the game is stressful, traumatic, demoralizing, sometimes even debilitating.&lt;/p&gt;
&lt;p&gt;Being empirical, DevOps insists on continuous and careful observation (the first O in the OODA Loop). Don’t assume anything, rather observe the situation as it unfolds. Once we notice something of significance, don’t act on it in a knee jerk fashion. Instead, consciously move into the orientation phase (the second O in the OODA LOOP). Orientation is the most critical phase in the OODA Loop. Again, abandon preconceived notions and assumptions. This is the phase where prior experience quickly turns from being an asset to becoming a liability. Instead of grabbing the first familiar ‘solution’ that pops to mind, we should keep our minds open. Seek fresh perspective. Cultivate the Beginner’s Mind because that’s where the highest quality solution may emerge from.&lt;/p&gt;
&lt;p&gt;A slight pause associated with the Orient phase may seem counterproductive, but it’s worth slowing down at that point because we increase our chances of finding a better solution.&lt;/p&gt;
&lt;p&gt;Once a better solution emerges, decide to do it, then act on it, and commit to our actions.&lt;/p&gt;
&lt;p&gt;Our actions create a stir and that stir is now observable, which takes us back to the beginning of the cycle – Observe. The cycle thus repeats continuously, giving the DevOps practice a long, sustainable presence.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category></entry><entry><title>Stop the context switching, reduce waste, and focus on value</title><link href="https://wsbctechnicalblog.github.io/context-switching-no-more.html" rel="alternate"></link><published>2021-07-11T00:00:00-07:00</published><updated>2021-07-11T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-11:/context-switching-no-more.html</id><summary type="html">&lt;p&gt;A work-life balance is important, however, I believe that stopping waste and focusing on value is just as pivotal!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I start working on an automation script. It has a purpose, I am starting to master my PowerShell skills, and my brain is thriving on autonomy. A pop-up on Microsoft Teams catches my attention, as three more email notifications pop-up. The phone rings ... someone's hair is on fire. I remember that I promised my colleague to send a summary of the recent 90-days of telemetry, just as I get pulled into an ad-hoc meeting without any context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Stress" src="/images/context-switching-no-more-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Can you visualize yourself in this situation? Do you realise that there were six (6) context switches in the previous relatively short example?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each context switch = loss of &lt;strong&gt;focus&lt;/strong&gt;, &lt;strong&gt;quality&lt;/strong&gt;, and &lt;strong&gt;mastery&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this brief post I will share a few recipes I am evaluating myself to stop the madness.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Context Switch&lt;/h1&gt;
&lt;p&gt;But first, let us understand what a context switch is all about. If you know the basic processor architecture and have a knowledge of assembler, you will appreciate that a context switch is not trivial. The processor is interrupted, currently executing process registers, program counters, and operating system data are saved, a new process is scheduled, and execution in a different context begins. '&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pseudocode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;movel: copy arguments from stack to memory&lt;/li&gt;
&lt;li&gt;pushl: Save registers (edp, ebc, esi, edi, ...)&lt;/li&gt;
&lt;li&gt;movel: Switch stacks&lt;/li&gt;
&lt;li&gt;popl: load new registers&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The switch saves the state of the currently executing process, so that when it is rescheduled, the state can be restored. Our digital companions have mastered the art of consistent and high-speed context switching. When the binary dust settles in my world, it often takes time to reset my mental state and energy, stress levels rise dangerously, and things of value are often omitted (forgotten). &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Stop Waste, focus on Value&lt;/h1&gt;
&lt;p&gt;I live by two leadership maxims I crafted over the past year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable and encourage everyone's creativity, passion, purpose, and strengths.&lt;/li&gt;
&lt;li&gt;Stop waste, focus on value!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a few supportive recommendations:&lt;/p&gt;
&lt;h2&gt;Email Recommendations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Email" src="/images/context-switching-no-more-3.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Close your favourite mail software when focusing. No-one will send an email if the world ends!&lt;/li&gt;
&lt;li&gt;Setup rules for incoming and outcoming emails, as per screen snippet below&lt;/li&gt;
&lt;li&gt;I delay all outgoing emails by 13min, allowing me to mull over content.&lt;/li&gt;
&lt;li&gt;Any emails where I am CC'd go into a &lt;strong&gt;Inbox CC&lt;/strong&gt;, FYI-only, and read last bucket.&lt;/li&gt;
&lt;li&gt;Any emails that may be important, such as reacting to pull request (PR) notifications, are filtered into a folder that I review after clearing my inbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Stress" src="/images/context-switching-no-more-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Phone Recommendations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Email" src="/images/context-switching-no-more-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Silence your phone and annoying "ding, ding, ding, ... " notifications when you are focusing. If urgent, users will call again, and most phones allow you to configure that 3+ repetitive calls break through the silence barrier - at least my old Pixel "1" does.&lt;/p&gt;
&lt;h2&gt;Meeting Recommendations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Meeting" src="/images/context-switching-no-more-5.png"&gt;&lt;/p&gt;
&lt;p&gt;I refined these recommendations during the Covid pandemic when most of us started working from home full-time. I stared at multiple days of end-to-end virtual calls, and dwindling opportunities to focus, innovate, or enjoy a quick break.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decline&lt;/strong&gt; all meetings that are scheduled without an agenda or context. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decline&lt;/strong&gt; regularly recurring meetings if they or my presence does not add value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decline&lt;/strong&gt; back-to-back meetings, or worse, overlapping meetings.&lt;/li&gt;
&lt;li&gt;Recommend finishing 5 minutes early for short meetings and 10 minutes for long meetings to allow attendees to &lt;strong&gt;relax&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Recommend 1-2 meeting-free days, for example Friday, so that engineers can use the day to &lt;strong&gt;focus&lt;/strong&gt; on delivering value with no interruptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we return to the office environment full- or part-time, I suggest adding another rule to host large (&amp;gt; 6 interactive attendees) meetings, such as the Program Increment Planning, in-person.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Another experiment I am running is removing Twitter, LinkedIN, Signal, News, and other applications that thrive on notifications from my (smart?!?) phone. Instead of sitting at the Fraser feverishly clicking through all the channels, I am now sitting with my feet in the water and enjoying the tranquil beauty that mother nature is spoiling us with.&lt;/p&gt;
&lt;p&gt;I hope this post gives your food for thought. &lt;/p&gt;
&lt;p&gt;Life is precious and protecting your work/life balance is important. When you take charge of &lt;strong&gt;your&lt;/strong&gt; day and realise that not every storm in someone's tea cup is an emergency, you will start to dream again, delivering innovative and quality solutions previously thwarted by context switching.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dream" src="/images/context-switching-no-more-6.jpg"&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="tips"></category></entry><entry><title>Gotchas when sharing variables with Azure DevOps stages and jobs</title><link href="https://wsbctechnicalblog.github.io/sharing-variables-with-stages-and-jobs.html" rel="alternate"></link><published>2021-07-08T00:00:00-07:00</published><updated>2021-07-08T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-08:/sharing-variables-with-stages-and-jobs.html</id><summary type="html">&lt;p&gt;Understanding and avoiding gotchas that may keep you up at 2AM, troubleshooting YAML-based Azure Pipelines&lt;/p&gt;</summary><content type="html">&lt;p&gt;I assume that you have read our &lt;a href="/sharing-variables-with-stages-and-jobs.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt;, which shared a few turbulent moments we experienced while troubleshooting this feature earlier this year. With this post we continue our troubleshooting excursion to highlight a few gotchas that have caused lots of head scratching.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Core Syntax&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Syntax" src="/images/sharing-variables-with-stages-and-jobs-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are two reminders to tattoo on your forearm, when referencing variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Within a stage, map variables as: &lt;code&gt;dependencies.&amp;lt;stage&amp;gt;.&amp;lt;job&amp;gt;.outputs['&amp;lt;step&amp;gt;.&amp;lt;name&amp;gt;']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Across stages, map variables as: &lt;code&gt;stageDependencies.&amp;lt;stage&amp;gt;.&amp;lt;job&amp;gt;.outputs['&amp;lt;step&amp;gt;.&amp;lt;name&amp;gt;']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us lift the pipeline bonnet and explore.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;STEP 1: Define a variable to be shared&lt;/h1&gt;
&lt;p&gt;We define three variables, named secretValue1, secretValue2, and secretValue3 in our job called StageOneJobOne. Note that we explicitly name two of the steps and leave one as default. Sounds simple, but this will bite is later on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue1;isOutput=true]BINGO-1!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue2;isOutput=true]BINGO-2!&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue3;isOutput=true]BINGO-3!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable3&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last task, replaces the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dutchworkz.DisplayAllVariables"&gt;Display all variables&lt;/a&gt; extension, I commonly used to dump all variables. A bonus is that unlike the extension, the bash task runs on any agent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from task log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="c"&gt;BASH_SECRETVALUE2: BINGO-2!&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="c"&gt;SETVARIABLE1_SECRETVALUE1: BINGO-1!&lt;/span&gt;
&lt;span class="c"&gt;SETVARIABLE3_SECRETVALUE3: BINGO-3!&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you cannot resolve a variable, add this task to determine if and in which shape it is included. As you may have noted our three variables are mapped slightly differently. The two generated  by the explicitly names step have inherited the step names &lt;code&gt;SetVariable1&lt;/code&gt; and &lt;code&gt;SetVariable3&lt;/code&gt;, whereas the other assumed the default task name, &lt;code&gt;Bash&lt;/code&gt;. Assumptions one of the evil roots of the infamous 2AM-calls!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;STEP 2: Reference variable in another job with the same stage&lt;/h1&gt;
&lt;p&gt;Next we reference  the variables in another job and echo their values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;# Gotcha #1&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secretValue2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking at the stage log, we immediately notice that our first &lt;code&gt;var1&lt;/code&gt; variable has been resolved as expected, the second &lt;code&gt;var2&lt;/code&gt; variable is blank?!?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Gotcha1" src="/images/sharing-variables-with-stages-and-jobs-1.png"&gt;
If you refer to your forearm and look at the tattoo for mapping a variable within the stage, you realise we are missing the step name. It is fairly easy to pinpoint this GOTCHA when you use the tools at your disposal, such as the &lt;code&gt;- bash: 'env | sort'&lt;/code&gt; task and the trustworthy log files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;STEP 3: Reference variable in another job in a different stage&lt;/h1&gt;
&lt;p&gt;Next we reference the variables in another job from another stage and echo the value. The sample shows the use of a stage and a job variable and highlights the importance of using your second tattoo, which uses &lt;strong&gt;stageDependencies...&lt;/strong&gt; instead of &lt;strong&gt;dependencies...&lt;/strong&gt; we used before. In fact, the sample intentionally uses both, to welcome GOTCHA #2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwo&lt;/span&gt;
  &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOne&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwoJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking at the job's log file, we immediately notice the GOTCHA.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Gotcha2" src="/images/sharing-variables-with-stages-and-jobs-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Troubleshooting Checklist&lt;/h1&gt;
&lt;p&gt;When things go belly up with your variables, I recommend that you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Look at the job logs and check if variables have been prepared correctly.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;- bash: 'env | sort'&lt;/code&gt; to display all variables.&lt;/li&gt;
&lt;li&gt;Check that your steps creating the variables have a &lt;strong&gt;name&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Check that your steps referencing the variables use the correct &lt;strong&gt;mapping&lt;/strong&gt; as per the mapping tattoo.&lt;/li&gt;
&lt;li&gt;Use the new YAML-pipeline editor and highlight the stage, job, task, and variable names. It highlights reoccurrences very nicely. Saved me a lot of time today when the highlighting, or lack thereof, made me realise that job was named job&lt;strong&gt;e&lt;/strong&gt; ... easily missed when embedded in mapping hierarchies.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Last, but not least, here is the complete sample code for the pipeline we experimented with. Enjoy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# STAGE ONE&lt;/span&gt;
&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOne&lt;/span&gt;
  &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 1&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue1;isOutput=true]BINGO-1!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue2;isOutput=true]BINGO-2!&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue3;isOutput=true]BINGO-3!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable3&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;

  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 2&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;# Gotcha #1&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secretValue2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_1&lt;/span&gt;

  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 3&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobThree&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BINGO-1!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;macOS-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 4&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobFour&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# STAGE TWO&lt;/span&gt;
&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwo&lt;/span&gt;
  &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOne&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwoJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Self-service automation - A dream turns into reality</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part9.html" rel="alternate"></link><published>2021-07-05T00:00:00-07:00</published><updated>2021-07-05T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-05:/yaml-pipelines-part9.html</id><summary type="html">&lt;p&gt;Automate a “hello world in less than 1min”, also referred to as our “walking skeleton”.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of pipeline wizardry. We are changing gears from the nuts and bolts, to the automation we can achieve using the blueprint-based pipelines. Fasten your seat belts!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The dream&lt;/h1&gt;
&lt;p&gt;Our automation working group had a vision to build an engineering process that could generate a “Hello world in less than 1min”, aka walking skeleton, to decimate engineering process lead lines and enable our engineering teams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Option 1 - Manual and humanoid driven engineering process&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our engineering process is not unique. It starts with an idea. Engineering creates a new repository for the code artifacts, and a continuous integration and deployment pipeline. As engineers require elevated permissions to generate the repo and pipeline artifacts, other engineers and departments get engaged as part of the process to ensure consistency, security, and alignment with guardrails (governance). &lt;/p&gt;
&lt;p&gt;As frustrating as it may sound, it can take &lt;strong&gt;hours to days&lt;/strong&gt;, until the engineering team can finally start adding and building their code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Option 2 - Automated and humanoid enabled engineering process&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our envisaged engineering process is radically different. Engineering visits a self-service portal, captures data to describe what they need, and the &lt;strong&gt;click a button&lt;/strong&gt;. The engineering process should be created through automation, the repo should contain an application-type sample, and by the time the engineering team blinks, the pipelines should be running to validate the setup using the sample code. &lt;/p&gt;
&lt;p&gt;Machines (automation) can do repetitive tasks much better and faster than we can, they stick to the instructions to ensure that we do not have to validate consistency and guardrail alignment.&lt;/p&gt;
&lt;p&gt;Our dream, as mentioned, is to enable the engineering team within 1 minute. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Community View&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Option 2 - Automated and humanoid enabled engineering process&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We polled the twitter and LinkedIn community and realized that we are not alone. An average of &lt;strong&gt;33&lt;/strong&gt;% of users tolerate hours and &lt;strong&gt;36&lt;/strong&gt;% of users days to get a basic project environment assembled. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That is unacceptable!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Our drop-the-mic demo&lt;/h1&gt;
&lt;p&gt;We demonstrated the following engineering process using a recipe of Git, Azure DevOps REST API, and a PowerShell automation script, developed and mob-reviewed by our automation working group:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Query Azure DevOps Project information&lt;/li&gt;
&lt;li&gt;Create an Azure Repo (Git)&lt;/li&gt;
&lt;li&gt;Clone our AzureDevOps.Automation.Pipeline.Templates and the app-type specific AzureDevOps.Automation.Pipeline.Sample.* repository&lt;/li&gt;
&lt;li&gt;Clone the newly created repository&lt;/li&gt;
&lt;li&gt;Add the app-type *-start.yml template to the new repo&lt;/li&gt;
&lt;li&gt;Add the app-type sample code to the new repo&lt;/li&gt;
&lt;li&gt;Push local changes to the Azure Repo&lt;/li&gt;
&lt;li&gt;Create a new pipeline, linked to the *-start.yml template in the new repo&lt;/li&gt;
&lt;li&gt;Run the new pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we shared a recording of the demo with engineering, there were a few gob-smacked faces when the penny dropped that our "less 1min dream" could evolve into a "less than 20 seconds engineering process".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello world automation demo&lt;/p&gt;
&lt;p&gt;&lt;img alt="Demo" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is our automation script we used for the demo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;CATEGORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipelines&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;LAUNCHED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CmdletBinding()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;patToken&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TIME&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Security&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;{0}:{1}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;patToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Text.Encoding&lt;/span&gt;&lt;span class="o"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Convert&lt;/span&gt;&lt;span class="o"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;ToBase64String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@{&lt;/span&gt;&lt;span class="k"&gt;Authorization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Basic {0}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameTemplates&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AzureDevOps.Automation.Pipeline.Templates&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoTemplates&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;lt;SOURCE-ORG&amp;gt;@dev.azure.com/&amp;lt;SOURCE-ORG&amp;gt;/&amp;lt;SOURCE-PROJECT&amp;gt;/_git/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameSamples&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AzureDevOps.Automation.Pipeline.Sample.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoSamples&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;lt;SOURCE-ORG&amp;gt;@dev.azure.com/&amp;lt;SOURCE-ORG&amp;gt;/&amp;lt;SOURCE-PROJECT&amp;gt;/_git/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameSamples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_git/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSamples&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameSamples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderSourceSample&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSamples&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\src&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSourceSample&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderSourceSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderTargetSample&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\src&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderPipeline&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\pipelines&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-start&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-pipeline-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeSource&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\Blueprints\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\azure-pipeline-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-start.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\pipelines\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameConfigFile&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-config.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigSource&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\Blueprints\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\azure-pipeline-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-config.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigTarget&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\Operations\Config\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameConfigFile&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenPortfolio&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PORTFOLIO__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenProduct&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PRODUCT__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.1 - Get ID for project: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetProject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/projects/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?api-version=6.0&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projResult&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetProject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 1.1 &amp;lt;GET PROJECT ID&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AzDO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.2 - Create New Repository: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreateRepo&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/git/repositories?api-version=6.1-preview.1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreateRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;project&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;id&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;  }&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreateRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreateRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Create Repo Result: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 1.2 &amp;lt;CREATE REPO&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.1 Clone repo &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoTemplates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; to local path&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.2 Clone repo &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoSamples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; to local path&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoSamples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSamples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.3 Clone repo &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; to local path&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3.1 Add app-type start template to new repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderPipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ItemType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3.2 Add config template to templates repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ItemType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Force&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigTarget&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4.1 Add src folder and sample solution&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderTargetSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ItemType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSourceSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderTargetSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4.2 Replace tokens with variables&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;rawFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step1File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;rawFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenPortfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step2File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step1File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenProduct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step2File&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5.1 Push all new changes to new repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Automation: Sample source &amp;amp; app-type blueprint pipeline.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5.2 Push all new changes to new repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Automation: Add new product configuration.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;6.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;committed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;6.1 Query repo ID&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/git/repositories/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?api-version=6.0&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 6.1 &amp;lt;GET REPO ID&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;6.2 Create new pipeline&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/pipelines?api-version=6.0-preview.1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;quot;folder&amp;quot; : &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;quot;configuration&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;type&amp;quot; : &amp;quot;yaml&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;path&amp;quot; : &amp;quot;/pipelines/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;repository&amp;quot; : {&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;id&amp;quot; : &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;name&amp;quot; : &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;type&amp;quot; : &amp;quot;azureReposGit&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 6.2 &amp;lt;LINK PIPELINE&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pipelines&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;7.1 Run pipeline&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/pipelines/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/runs?api-version=6.0-preview.1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{ &amp;quot;variables&amp;quot;: {      &lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;customVariable&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;span class="s1"&gt;    },&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;process&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;yamlFilename&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;type&amp;quot;:  2&lt;/span&gt;
&lt;span class="s1"&gt;     },&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;repository&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;id&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;type&amp;quot;: &amp;quot;TfsGit&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;defaultBranch&amp;quot;: &amp;quot;refs/heads/master&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;clean&amp;quot;:  null,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;checkoutSubmodules&amp;quot;:  false&lt;/span&gt;
&lt;span class="s1"&gt;    },&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;path&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;type&amp;quot;: &amp;quot;build&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;queueStatus&amp;quot;: &amp;quot;enabled&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;project&amp;quot;:  {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;id&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 6.2 &amp;lt;LINK PIPELINE&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OH, OH - FATAL ERROR! &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TIME&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;micTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Timespan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;TotalSeconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From zero to hello world in &amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;micTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TotalSeconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;lt; seconds q;)&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;COPY-PASTE and REUSE at your own risk. This was a demo script and will be going through extensive mob-reviews and mob-programming to turn it into a production-ready automation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Gob-smacked?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;gob-smacked (excited) yet?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gobsmacked" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We need to expand our library of application-type blueprints and in parallel expand the automation script to support the new app-types. In parallel we need to move the automation script to be run by Azure Pipelines to support queueing, and add a user-friendly service portal to "click the button."&lt;/p&gt;
&lt;p&gt;Watch this space for more exiting progress.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | Part 9 | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Our quest to share our knowledge with the world, keeping it interesting and informal</title><link href="https://wsbctechnicalblog.github.io/blog-post-101.html" rel="alternate"></link><published>2021-07-02T00:00:00-07:00</published><updated>2021-07-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-02:/blog-post-101.html</id><summary type="html">&lt;p&gt;Understand how to navigate and create content for our technical blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As an engineer I expect that everyone has the genetic building blocks to (want to) continuously and relentlessly improve, innovate, experiment, and collaborate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Engineer" src="../images/blog-post-101-1.png"&gt; &lt;/p&gt;
&lt;p&gt;Collaboration is essential as two or more brains are better than one, exchange ideas, knowledge, experience, and to come up with better ideas and ways of solving problems for today and tomorrow.&lt;/p&gt;
&lt;p&gt;All of the above, without letting your ego get in the way, being scared to fail or ask a question, not afraid of seeking candid feedback. &lt;/p&gt;
&lt;p&gt;Our WorkSafeBC technical blog is one of many channels (or hammer) that helps us collaborate and share our experiences and knowledge with everyone. In this short post, I will focus on how to find content relevant to you, and if you are a WorkSafeBC engineer, to create your first post. &lt;/p&gt;
&lt;h1&gt;What do our categories and tags mean?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-2.png"&gt; &lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;tag&lt;/strong&gt; our technical blog posts to allow you, the reader, to find and focus on content that is relevant and valuable to you. It is important to focus on what is valuable to you and skip the "bile".&lt;/p&gt;
&lt;p&gt;Here is a list of tags we use when creating new content:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TAG&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;FOCUS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;agile&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Agile, Kanban, SAFe, and other frameworks to plan, track, and collaborate across teams.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;architecture&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Software architecture.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Automate repetitive tasks and processes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azure&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft &lt;a href="https://azure.microsoft.com"&gt;Azure&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azure-devops&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft &lt;a href="https://azure.microsoft.com/en-us/services/devops/"&gt;Azure DevOps&lt;/a&gt; services.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Software coding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devops&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The union of people, process, and products to enable continuous delivery of value to our end users. - &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brian&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;engineering&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Software engineering.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Meetup, training, workshop, and other event gatherings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feature-flags&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Separating deploy from release through feature toggles / flags.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;learning&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Continuous learning.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pipelines&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Continuous integration, deployment, delivery, YAML, and other interesting topics to build, test, and deploy our software solutions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;posters&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Quick reference posters and cheat sheets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quality&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Technical excellence and quality of engineering solutions to add value, not complexity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;security&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;"Trust, but verify " to avoid and function under malicious attacks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tdd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Test-driven Development.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;testing&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Test to raise the quality bar and deploy with confidence.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tips&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Tips and tricks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version-control&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Secure, version, and collaborate to build better code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;workflow&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Streamline repetitive tasks and processes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Extreme programming ( XP) software development methodology.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The list is reviewed as we review new content. Although we are open for change, for example adding new tags or renaming existing tags, we want to keep the churn and number of tags to an absolute minimum.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Category" src="../images/blog-post-101-4.png"&gt; &lt;/p&gt;
&lt;p&gt;We are starting to also &lt;strong&gt;categorise&lt;/strong&gt; our content to add a different lens for you to use to find relevant content. Here is a list of categories we use:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CATEGORY&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;MEANING&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Events&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Specific updates covering events, such as meetups and workshops.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Posts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Updates by our engineers and other interesting individuals, sharing their knowledge with the world.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thoughts? How can we improve our tags and categories? Please ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; and help us improve our content.&lt;/p&gt;
&lt;h1&gt;Create your first post&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-3.png"&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hanselman.com/blog/blog-interesting-32-ways-to-keep-your-blog-from-sucking"&gt;Blog Interesting - 32 Ways to Keep Your Blog from Sucking&lt;/a&gt;, by Scott Hanselman!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are working with or you are a WorkSafeBC engineer, you have invaluable technical knowledge and experience to share! Here is a 7-step checklist to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand &lt;a href="https://www.markdownguide.org/"&gt;markdown&lt;/a&gt;. Our blog posts, such as this one, are developed using the simple and easy-to-use markup language.&lt;/li&gt;
&lt;li&gt;Collaborate with the &lt;strong&gt;WSBC Technical Blog Content Discussion&lt;/strong&gt; working group, which you can locate in Microsoft Teams.&lt;/li&gt;
&lt;li&gt;Clone our &lt;a href="https://github.com/wsbctechnicalblog/wsbctechnicalblog.github.io"&gt;wsbctechnicalblog-wsbctechnicalblog.github.io&lt;/a&gt; repository.&lt;/li&gt;
&lt;li&gt;Create a feature branch &lt;code&gt;&amp;lt;yourname&amp;gt;/&amp;lt;title&amp;gt;&lt;/code&gt;, for example willys/blog-post-101. Do not use your primary, 2, or 5-ID!&lt;/li&gt;
&lt;li&gt;Create a new markdown file in the &lt;code&gt;/content&lt;/code&gt;, for example &lt;code&gt;/content/blog-post-101.md&lt;/code&gt; and add the metadata header at the start, which will be used when your gem is converted to a live HTML page.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;Title: &amp;lt;catchy title&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;Date: YYYY-MM-DD&lt;/span&gt;
&lt;span class="c"&gt;Category: &amp;lt;Events|Posts&amp;gt;, as above mentioned &lt;/span&gt;
&lt;span class="c"&gt;Tags: &amp;lt;Tags&amp;gt; comma separated, as above mentioned&lt;/span&gt;
&lt;span class="c"&gt;Slug: Your &amp;lt;file-name&amp;gt; without the .md&lt;/span&gt;
&lt;span class="c"&gt;Author: &amp;lt;FirstName&amp;gt; &amp;lt;LastName&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;Summary: &amp;lt;Quick summary of what post is about&amp;gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...and finally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create your content using the editor of your choice - mine is Visual Studio Code.&lt;/li&gt;
&lt;li&gt;Create a pull request and submit your changes for review and collaboration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-5.png"&gt; &lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h1&gt;One, two, or more authors?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-6.png"&gt; &lt;/p&gt;
&lt;p&gt;Unfortunately, we can only define one author in the metadata, however, you can co-author a post with a colleague or with a member from our &lt;strong&gt;WSBC Technical Blog Content Discussion&lt;/strong&gt; working group. We are more than happy and keen to assist you, even as an unknown ghost writer. &lt;/p&gt;
&lt;p&gt;Just collaborate with us, ask questions (&lt;em&gt;the only one that is bad is the one you never ask&lt;/em&gt;), and do not hesitate to ask for help.&lt;/p&gt;
&lt;h1&gt;To conclude&lt;/h1&gt;
&lt;p&gt;Are you a reader of our technical blog post? Please do not hesitate to give us candid feedback to help us improve our content!&lt;/p&gt;
&lt;p&gt;Are a WorkSafeBC'tonian? Hopefully this post will serve as an inspiration for you to start and to keep on blogging. We are waiting for your call and/or your pull request!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-7.png"&gt; &lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category></entry><entry><title>Why we should (not) care about Pipelines!?!</title><link href="https://wsbctechnicalblog.github.io/meetup-devops-meetup-wsbc-pipeline-story.html" rel="alternate"></link><published>2021-06-21T00:00:00-07:00</published><updated>2021-06-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-06-21:/meetup-devops-meetup-wsbc-pipeline-story.html</id><summary type="html">&lt;p&gt;Enabling engineering to continuously build, validate, and deploy secure solutions to delight our customers&lt;/p&gt;</summary><content type="html">&lt;p&gt;On Tuesday, &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555/"&gt;June 15th 2021&lt;/a&gt;, we picked-up where we left off with the “Common Engineering System at WorkSafeBC“ session, on the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093/"&gt;April 2020&lt;/a&gt; meetup.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="INTRO" src="/images/meetup-devops-meetup-wsbc-pipeline-story-intro-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We shared our insight into our ambitious journey to consolidate hundreds of inconsistent continuous delivery pipeline snowflakes into state-of-the-art pipeline-as-code, based on YAML and re-usable templates. Here is our story!&lt;/p&gt;
&lt;h1&gt;WHY?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHY" src="/images/meetup-devops-meetup-wsbc-pipeline-story-why-2a.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt; defines DevOps as the “the union of PEOPLE, PROCESS and PRODUCTS to enable the &lt;strong&gt;continuous&lt;/strong&gt; delivery of value to our CUSTOMERS”. The word &lt;strong&gt;continuous&lt;/strong&gt; in Donovan's statement implies that we &lt;strong&gt;automate everything automatable&lt;/strong&gt;, move repetitive tasks to machines, and enable engineering to focus on delighting our customers with features. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHY" src="/images/meetup-devops-meetup-wsbc-pipeline-story-why-2b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In addition, the &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;agents of chaos&lt;/a&gt; created guardrails defined by five essential values for the DevOps mindset. One of the values encourages us to innovate and improve beyond repeatable processes by &lt;strong&gt;reducing waste&lt;/strong&gt; and not doing things with no value or purpose.&lt;/p&gt;
&lt;p&gt;As alluded to by the checklist we built up during the session, we are not talking about pipelines to carry oil, but an enabler to automate continuous integration and delivery tasks. We embraced the Azure Pipelines years ago and standardized on what we refer to as the unified pipeline guardrail. It helped us build once, deploy the same build artifact to different environments, and streamline our manual approvals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHY" src="/images/meetup-devops-meetup-wsbc-pipeline-story-why-2c.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We were in technology heaven, until our automated weekly pipeline reports unearthed a scary and unnerving reality. Over 3000 pipeline definitions, growing at an alarming rate, and creating a pile of costly technical debt. Autonomy inspired a variety of snowflakes, some of which introduced vulnerabilities, and more recently, a growing number of release rejections due to security review failures.&lt;/p&gt;
&lt;p&gt;We also picked up that Microsoft began referring to the user interface based Azure Pipelines as &lt;strong&gt;classic&lt;/strong&gt; and stopped investing in the technology. As the classic and deprecated rot was setting in, we started to experiment with YAML-based Azure Pipelines in two consecutive hackathon events. We did not catch the attention of business and won no prize but embarked on an exciting pipeline journey with ambitious goals: alignment, consistency, simplicity, security, flexibility, and transparency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read &lt;a href="/yaml-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;WHAT?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHAT.1" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3a.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We fell in love with the potential of new YAML-based Azure Pipelines, based on a mature and human readable data serialization, originally proposed by Clark Evans in 2001. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YAML is often referred to as “yet another markup language” and “YAML ain’t markup language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Azure DevOps YAML pipelines are structurally YAML. Microsoft introduced no deviation or snowflake and forked the Azure DevOps pipeline repository to build their GitHub pipelines. Like applying a protective anti-rust coating on our Azure DevOps pipelines and opening exciting coexistence and future migration opportunities.&lt;/p&gt;
&lt;p&gt;Our pipeline working group switched their focus on &lt;strong&gt;pipeline as code&lt;/strong&gt;, a term introduced by &lt;a href="https://www.jenkins.io/doc/book/pipeline-as-code/"&gt;Jenkins&lt;/a&gt;. It is a technique that treats the pipeline configuration as code, placed under version control, packaged in reusable components, and automated deployment and testing. Comparable to infrastructure as code and the golden fleece for our pipeline adventure.&lt;/p&gt;
&lt;p&gt;Pipeline as code enables us in many ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All pipeline artifacts are placed in source control repositories, which can be viewed by all our engineers. There are no secrets! &lt;/li&gt;
&lt;li&gt;Tick off one of our goals, &lt;strong&gt;transparency&lt;/strong&gt;, a core ingredient to Agile and Lean development, as well as a healthy DevOps mindset. It fosters &lt;strong&gt;TRUST&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Allow our engineers to contribute to our common engineering system by submitting pipeline changes and innovations through the pull request workflow. We are &lt;strong&gt;centralizing&lt;/strong&gt;, not standardizing, and enable engineers by injecting re-usable templates.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHAT.1" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During the hackathons and subsequent proof-of-concepts we highlighted not only the &lt;strong&gt;risk&lt;/strong&gt; of rotting technology, but engineering distractions and focus on waste, instead of &lt;strong&gt;value&lt;/strong&gt;. For example, a typical YAML-based CI pipeline for an Azure Function requires 300 lines of code. With 927 continuous integration build pipelines, this amounts to a mere 278,100 lines of code that engineering need to craft. More than Photoshop 1.0 and just less than the Quake 3 engine. In my humble opinion, a huge pile of &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Our first-generation generic blueprint-based pipelines reduced this to 113,094 lines of CI code and to 25,956 lines of CI/CD code using our second-generation app-type blueprint-based pipelines. Read parts &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt;, &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4: Pipelines - Magic of queue time assembly&lt;/a&gt;, &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;, and &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt; of our pipeline series on our technical WorkSafeBC blog for more information.&lt;/p&gt;
&lt;p&gt;Templates allow us to define reusable CI and CD tasks, keeping our main pipeline definitions razor focused. They enable us to script and assemble pipelines at “queue” time. And most important, instead of editing hundreds of classic pipelines in a GUI editor, which can be mind numbing and error prone, we edit one template to make a change such changing guardrails. Once the template is saved, the change is automatically injected into all pipelines queued thereafter. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MAGIC!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For details on our 1st generation blueprints, read &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a software developer, do I want to own, for example create and maintain, the pipelines to build and deploy my application? &lt;/p&gt;
&lt;p&gt;After more than 36 years of engineering software solutions, my answer is &lt;strong&gt;NO&lt;/strong&gt;. I will be glad to let another team take that responsibility while I focus on creating value for the business by delivering quality software. I just want access to the build pipeline templates and an ability to suggest changes, so that I can &lt;strong&gt;learn&lt;/strong&gt;, &lt;strong&gt;innovate&lt;/strong&gt;, and &lt;strong&gt;troubleshoot&lt;/strong&gt; issues, if any.&lt;/p&gt;
&lt;p&gt;The 1st generation app-type blueprints introduced re-usable application type continuous integration blueprints, which typically required me to update 2-3 lines of configuration and I am done with my pipeline.&lt;/p&gt;
&lt;p&gt;Some of the fairy dust is the &lt;strong&gt;extend template&lt;/strong&gt; feature in the YAML-based Azure Pipelines. It allows us to verify that a pipeline is based on a known and trusted template. If not, it is automatically rejected by service connections and/or environment checkpoints - at run time, with zero humanoid intervention.&lt;/p&gt;
&lt;p&gt;But, you guessed it, there is more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHAT.2" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3c.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you read &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8: Pipelines - Pipelines - From CI to CD and beyond in one pipeline&lt;/a&gt; of pipeline series, on our technical WorkSafeBC blog, you will be amazed with our 2nd generation app-type blueprints, which are in &lt;strong&gt;early preview&lt;/strong&gt; in two of our engineering environments.&lt;/p&gt;
&lt;p&gt;The 2nd generation adds the same magic we discussed for continuous integration, to the continuous deployment. Thanks to pipeline as code and the way we have structured our pipelines and template repository, all engineers can review all templates, and submit improvements via a pull request. If the proposed change is within our guardrails the pipeline working group &lt;strong&gt;innovates&lt;/strong&gt;. If not, we collaborate with engineering and DevSecOps, occasionally terminating the pull request with “Kevin said so.” More about that in a minute.&lt;/p&gt;
&lt;p&gt;We have not realized our dream for &lt;strong&gt;self-service automation&lt;/strong&gt; yet. However, we have reached a stage where our blueprint-based pipelines are automation enablers, consistent, and simple. Furthermore, our pipeline working group is collaborating with the automation working group to realise our“Hello world in less than 1min”, aka walking skeleton, goal. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Would you prefer working in a manual humanoid driven world, or in an automated humanoid enabled world?&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHAT.2" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3d.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at the quick poll results (slide 21) from Twitter and LinkedIN I am astounded at the percentage of engineers who tolerate hours to days to get a "walking skeleton" created for them. When I combine the two polls, an average of 33% are experiencing &lt;strong&gt;hours&lt;/strong&gt; and another 36% &lt;strong&gt;days&lt;/strong&gt;. That adds up to &lt;strong&gt;69%&lt;/strong&gt; ... I am gob smacked and shocked! I hope that we can come back to continue this session to share the success stories from our automation working group.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;HOW&lt;/h1&gt;
&lt;p&gt;HOW we managed, and at times battled, to grok the intricacies of YAML, evolve the emerging application-type blueprint-based pipelines, and enable automation was beyond the scope of this session and we deferred the &lt;strong&gt;HOW&lt;/strong&gt; for another day. Instead we shifted our focus to get a view through a software development engineer's and security engineer's lens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="HOW" src="/images/meetup-devops-meetup-wsbc-pipeline-story-how-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;A peek through a Software Development Engineers' Lens&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Said Akram" src="/images/Said-mug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Said delivered a great demo of our 2nd Generation App-type CI/CD blueprint, which we are previewing in two engineering environments. It was such a great demo, that I completely forgot to take screenshots.&lt;/p&gt;
&lt;p&gt;Watch the recording on &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555/"&gt;DevOps Vancouver Meetup: June 2021&lt;/a&gt;, once it is published, and auto-forward to Said's demo. You will be mesmerized!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We also asked Kevin, why pipelines are so important to security and why he has been smiling from ear to ear, ever since the blueprints emerged from the pipeline working group.&lt;/p&gt;
&lt;h2&gt;A peek through a Security Engineer's Lens&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Kevin Schwantje" src="/images/Kevin-mug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Time to invite our security lifeline. Kevin answered two of my questions and much more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can you give us an insight into your world and explain why are the pipelines so important to security? &lt;/li&gt;
&lt;li&gt;Could you enlighten us, why you been smiling from ear to ear, ever since the blueprints emerged from the pipeline working group?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="DEVSECOPS.1" src="/images/meetup-devsecops-meetup-wsbc-pipeline-story-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="DEVSECOPS.2" src="/images/meetup-devsecops-meetup-wsbc-pipeline-story-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Hopefully, we will return to the meetup with the automation success stories soon. We will demonstrate that it takes seconds, not minutes, hours to days, to create a new repository, add sample code, 2nd generation app-type blueprint-based CI/CD pipeline, tie everything together, and queue a continuous integration build for the newly created environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/devops-meetup-wsbc-pipeline-story.pdf"&gt;devops-meetup-wsbc-pipeline-story deck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/devsecops-pipeline-presentation.pdf"&gt;devsecops-pipeline-presentation.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have any question or feedback, please ping us on twitter &lt;a href="https://twitter.com/saidakram007"&gt;@saidakram007&lt;/a&gt;, &lt;a href="https://twitter.com/604kev"&gt;@604kev&lt;/a&gt;, and &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Feedback from the peanut gallery&lt;/h1&gt;
&lt;p&gt;I had a good fortune to attend the DevOps Meetup session that Willy described above. As an innocent bystander, I'd only like to add a couple of observations:&lt;/p&gt;
&lt;p&gt;Willy's explanation regarding minimizing waste is spot on. We do not want to spin off hundreds or thousands unique infrastructure solutions. Computing infrastructure is a commodity (i.e. dime-a-dozen) and it is therefore truly wateful to burn precious engineering cycles in re-inventing the wheel, so to speak. Willy and the crew are working hard on commoditizing all aspects of the infrastructure-as-code so that the engineers could sharpen their focus on making changes that are not available elsewhere (i.e. not commoditized on the market).&lt;/p&gt;
&lt;p&gt;Willy did, however, point out the fact that innovation is crucial, and that engineers are empowered (and advised) to work on improving the offered commodities. That's the true value stream delivery -- work smarter, not harder.&lt;/p&gt;
&lt;p&gt;Finally, the strongest takeaway from the session (for me, at least) was the conclusion that security concerns must become top of the mind for every engineer. Before making any changes to the system, the first thing we should ask ourselves is: "Is this change secure? Is it testable by running automated tests?" Only after we prove it to ourselves and to our coworkers that the change is secure and fully testable, should we continue making the desired change.&lt;/p&gt;
&lt;p&gt;Overall, this was a fantastic session; looking forward to part 2! (Alex Bunardzic)&lt;/p&gt;</content><category term="Events"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="devops"></category></entry><entry><title>Quick Reference Sheet for Pipeline Terminology</title><link href="https://wsbctechnicalblog.github.io/moving-hundreds-of-pipeline-snowflakes-qr-3.html" rel="alternate"></link><published>2021-06-13T00:00:00-07:00</published><updated>2021-06-13T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-06-13:/moving-hundreds-of-pipeline-snowflakes-qr-3.html</id><summary type="html">&lt;p&gt;Summarising the core terminology and lifetime of our pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Is my pipeline supported and aligned with our naming guidelines? This poster aims to answer these questions for you briefly. &lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Application Pipeline Terminology&lt;/p&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-3-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The four lifetime quadrants:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Circle of life" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-3-2.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Deprecated&lt;/strong&gt; - Deprecated and retired technologies that are no longer supported in our production environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sunset&lt;/strong&gt; - Technologies that are being sunset and on the verge of moving into the unsupported deprecated quadrant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production&lt;/strong&gt; - Production contains a platter of technologies that are supported in production. Make sure you consider the options recommended by the common engineering system first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emerging&lt;/strong&gt; - The working groups are always looking forward to complementing the common engineering system with emerging technologies. Emerging technologies have limited early preview support. It is imperative that you validate the limitations, prerequisites, and guidelines by DevSecOps and Common Engineering System before using any emerging technology in a production environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While we should all hover in the production quadrant, it is important to consider the &lt;strong&gt;emerging&lt;/strong&gt; technologies, experiment, familiarise yourself, and give candid feedback to the working groups.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/multi-stage-blueprint-based-pipeline-terminlogy.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enjoy and remember that we crave candid feedback to sprinkle value over these artifacts!&lt;/p&gt;
&lt;p&gt;| &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-1.html"&gt;POSTER 1&lt;/a&gt; | &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-3.html"&gt;POSTER 2&lt;/a&gt; | POSTER 3 (this) |&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="posters"></category><category term="x-as-code"></category></entry><entry><title>Manage your Azure DevOps User Access Levels through automation</title><link href="https://wsbctechnicalblog.github.io/azuredevop-automation-stakeholders.html" rel="alternate"></link><published>2021-06-02T00:00:00-07:00</published><updated>2021-06-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-06-02:/azuredevop-automation-stakeholders.html</id><summary type="html">&lt;p&gt;Quick overview how our Azure DevOps access level audits and management automation using PowerShell, REST APIs, and Richard's WIKI Updater task.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Three of my top irritations in software engineering are &lt;strong&gt;complexity&lt;/strong&gt;, &lt;strong&gt;inconsistency&lt;/strong&gt;, and &lt;strong&gt;waste&lt;/strong&gt;. They lead to engineering rot, the infamous 2AM calls, and rapid evaporation of funds that could have beeen re-invested in innovation and learning.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agent 13" src="../images/azuredevop-automation-stakeholders-13.png"&gt;&lt;/p&gt;
&lt;p&gt;As Agent #13, I made this declaration in &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To remain competitive and respond to rapidly changing business and 
technology trends, as well as regulatory and compliance 
requirements, you must find ways to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ship value! – Increase the delivery of value to customers. &lt;/li&gt;
&lt;li&gt;Ship value faster! – Shorten the delivery cycle. &lt;/li&gt;
&lt;li&gt;Ship the right value faster! – Monitor, learn, adapt, and pivot. &lt;/li&gt;
&lt;li&gt;Ship the right and better value faster! – Improve quality! &lt;/li&gt;
&lt;li&gt;Ship the right and better value faster while reducing cost and efficiency! – Reduce cost and simplify through automation.”
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Context&lt;/h1&gt;
&lt;p&gt;As part of our common engineering system we performed regular user audits to identify &lt;strong&gt;inactive&lt;/strong&gt; users, assigned with &lt;strong&gt;Basic&lt;/strong&gt; and the expensive &lt;strong&gt;Basic + Test&lt;/strong&gt; access levels. You can find details on the Azure DevOps access levels &lt;a href="https://docs.microsoft.com/en-us/azure/devops/organizations/security/access-levels?view=azure-devops"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify inactive users and downgrade them to free stakeholder access level&lt;/li&gt;
&lt;li&gt;Downgrade helps us &lt;strong&gt;reduce unnecessary costs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Downgrade supports &lt;strong&gt;security&lt;/strong&gt; by reducing access and limiting features&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;The "ding" moment&lt;/h1&gt;
&lt;p&gt;After doing the painstaking and mind-numbing manual audit a few times, a faithful background thread triggered at the back of my head: "&lt;em&gt;you have followed the boring audit checklist more than twice - automate!&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;&lt;img alt="Idea" src="../images/azuredevop-automation-stakeholders-3.png"&gt;&lt;/p&gt;
&lt;p&gt;What followed was collaboration with the community, such as the former ALM/DevOps Rangers and our automation guru, aka Rodney. We agreed to the following automation requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate the manual audit using PowerShell Core&lt;/li&gt;
&lt;li&gt;Schedule the audit weekly using Azure Pipelines&lt;/li&gt;
&lt;li&gt;Identify users who have been inactive for X months and based on parameters:&lt;/li&gt;
&lt;li&gt;Only report the inactive users&lt;/li&gt;
&lt;li&gt;Downgrade the inactive users to stakeholder access level&lt;/li&gt;
&lt;li&gt;Inactive users are defined as:&lt;/li&gt;
&lt;li&gt;Users who have logged on to Azure DevOps, but have not used any of its services for X months&lt;/li&gt;
&lt;li&gt;Users who have been assigned an access level, but have never logged on to Azure DevOps for X months&lt;/li&gt;
&lt;li&gt;Write the weekly report to our knowledgebase wiki&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Automation solution&lt;/h1&gt;
&lt;p&gt;And voila, here is the PowerShell script that has been running weekly for more than a year.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[CmdletBinding()]&lt;/span&gt;
&lt;span class="na"&gt;param(&lt;/span&gt;
  &lt;span class="na"&gt;[string]   $orgName&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;experimentation-sandbox&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;  [int]      $months        = &amp;quot;-2&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;  [int]      $actionSet     = 0,&lt;/span&gt;
&lt;span class="s"&gt;  [int]      $purgeUnknown  = 0,&lt;/span&gt;
&lt;span class="s"&gt;  [string]   $patToken      = &amp;quot;&amp;lt;PAT&amp;gt;,&lt;/span&gt;
&lt;span class="s"&gt;  [string]   $outputfile    = &amp;quot;Reset-Idle-Users-To-Stakeholders.md&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;)&lt;/span&gt;

&lt;span class="na"&gt;Write-Host &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;Write-Host &amp;quot;&amp;gt;&amp;gt;&amp;gt; QUERY MEMBER ENTITLEMENTS&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;Write-Host &amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Initialise outputfile&lt;/span&gt;
&lt;span class="c1"&gt;#$logFile = (&amp;quot;{0}-{1}&amp;quot; -f [DateTime]::Now.ToString(&amp;quot;yyyyMMdd&amp;quot;), $outputfile)&lt;/span&gt;
&lt;span class="na"&gt;$logFile&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$outputfile;&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot;|{0}|{1}|{2}|&amp;quot; -f &amp;quot;Organsation&amp;quot;, &amp;quot;Months&amp;quot;, &amp;quot;Actionset&amp;quot; | add-content -path $logFile&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot;|---|:-:|:-:|&amp;quot;                                         | add-content -path $logFile&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot;|{0}|{1}|{2}|&amp;quot; -f $orgName, $months, $actionSet        | add-content -path $logFile&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot;---&amp;quot;                                                   | add-content -path $logFile&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot;|{0}|{1}|{2}|{3}|{4}|&amp;quot; -f &amp;quot;Name&amp;quot;, &amp;quot;Last Access&amp;quot;, &amp;quot;License&amp;quot;, &amp;quot;License Name&amp;quot;, &amp;quot;Action&amp;quot; | add-content -path $logFile&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot;|---|---|---|---|---|&amp;quot;                                 | add-content -path $logFile&lt;/span&gt;

&lt;span class="c1"&gt;# Authentication header&lt;/span&gt;
&lt;span class="na"&gt;$basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;(&amp;quot;{0}:{1}&amp;quot; -f &amp;quot;&amp;quot;,$patToken)&lt;/span&gt;
&lt;span class="na"&gt;$basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[System.Text.Encoding]::UTF8.GetBytes($basicAuth)&lt;/span&gt;
&lt;span class="na"&gt;$basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[System.Convert]::ToBase64String($basicAuth)&lt;/span&gt;
&lt;span class="na"&gt;$headers&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@{Authorization=(&amp;quot;Basic {0}&amp;quot; -f $basicAuth)}&lt;/span&gt;

&lt;span class="c1"&gt;# Requests&lt;/span&gt;
&lt;span class="na"&gt;$request_GetEntitlements&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://vsaex.dev.azure.com/&amp;quot; + $orgName + &amp;quot;/_apis/userentitlements?top=10000&amp;amp;api-version=5.1-preview.2&amp;quot;;&lt;/span&gt;
&lt;span class="na"&gt;$request_UpdateEntitlementsPre&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://vsaex.dev.azure.com/&amp;quot; + $orgName + &amp;quot;/_apis/userentitlements/&amp;quot;;&lt;/span&gt;
&lt;span class="na"&gt;$request_UpdateEntitlementsPost&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;?api-version=5.1-preview.2&amp;quot;;&lt;/span&gt;
&lt;span class="na"&gt;$json&lt;/span&gt;                            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;[{&amp;quot;from&amp;quot;: &amp;quot;&amp;quot;,&amp;quot;op&amp;quot;: &amp;quot;replace&amp;quot;,&amp;quot;path&amp;quot;: &amp;quot;/accessLevel&amp;quot;,&amp;quot;value&amp;quot;: {&amp;quot;accountLicenseType&amp;quot;: &amp;quot;stakeholder&amp;quot;,&amp;quot;licensingSource&amp;quot;: &amp;quot;account&amp;quot;}}]&amp;#39;;&lt;/span&gt;

&lt;span class="c1"&gt;# Data&lt;/span&gt;
&lt;span class="na"&gt;$members&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;New-Object System.Collections.ArrayList&lt;/span&gt;
&lt;span class="na"&gt;[int] $count&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0;&lt;/span&gt;
&lt;span class="na"&gt;[string] $basic&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Basic&amp;quot;;&lt;/span&gt;
&lt;span class="na"&gt;[string] $basicTest&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Basic + Test Plans&amp;quot;;&lt;/span&gt;
&lt;span class="na"&gt;[string] $stakeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Stakeholder&amp;quot;; &lt;/span&gt;

&lt;span class="c1"&gt;# Get Entitlements&lt;/span&gt;
&lt;span class="na"&gt;$response&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Invoke-RestMethod -Uri $request_GetEntitlements -headers $headers -Method Get&lt;/span&gt;
&lt;span class="na"&gt;$response.items | ForEach-Object { $members.add($_.id) | out-null }&lt;/span&gt;

&lt;span class="c1"&gt;# List Members &lt;/span&gt;
&lt;span class="na"&gt;Write-Host &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;Write-Host &amp;quot;&amp;gt;&amp;gt;&amp;gt; LIST ENTITLEMENTS &amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;Write-Host &amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="na"&gt;$response.items | ForEach-Object {&lt;/span&gt;
  &lt;span class="na"&gt;$name&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[string]$_.user.displayName;&lt;/span&gt;
&lt;span class="s"&gt;  $date    = [DateTime]$_.lastAccessedDate;&lt;/span&gt;
&lt;span class="s"&gt;  $expired = Get-Date;&lt;/span&gt;
&lt;span class="s"&gt;  $expired = $expired.AddMonths($months);&lt;/span&gt;
&lt;span class="s"&gt;  $license = [string]$_.accessLevel.AccountLicenseType;&lt;/span&gt;
&lt;span class="s"&gt;  $licenseName = [string]$_.accessLevel.LicenseDisplayName;&lt;/span&gt;
&lt;span class="s"&gt;  $count++;&lt;/span&gt;

  &lt;span class="c1"&gt;# Forcefully remove never activated users&lt;/span&gt;
  &lt;span class="na"&gt;if ( $purgeUnknown -eq 1 )&lt;/span&gt;
  &lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;if ( $date.Year -eq 1 ) {&lt;/span&gt;
      &lt;span class="na"&gt;$date&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[DateTime]$_.dateCreated;&lt;/span&gt;
&lt;span class="s"&gt;    }&lt;/span&gt;
&lt;span class="s"&gt;  }&lt;/span&gt;

  &lt;span class="na"&gt;if ( $expired -gt $date ) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Prepare request for the expired user&lt;/span&gt;
    &lt;span class="na"&gt;$request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$request_UpdateEntitlementsPre + $_.id + $request_UpdateEntitlementsPost;&lt;/span&gt;

    &lt;span class="c1"&gt;# NEVER ACTIVATED&lt;/span&gt;
    &lt;span class="na"&gt;if ( $date.Year -eq 1 )&lt;/span&gt;
    &lt;span class="na"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;if ( $licenseName -ne $stakeholder ) {&lt;/span&gt;
        &lt;span class="na"&gt;Write-Host &amp;quot; ** IGNORE NEVER ACCESSED - ** &amp;quot; &amp;quot; Name: &amp;quot; $name &amp;quot; Date Created: &amp;quot; $_.dateCreated &amp;quot; Last Access: &amp;quot; $date &amp;quot;License: &amp;quot; $license &amp;quot; - &amp;quot; $licenseName&lt;/span&gt;
      &lt;span class="na"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;# BASIC&lt;/span&gt;
    &lt;span class="na"&gt;elseif ( $licenseName -eq $basic ) {&lt;/span&gt;
      &lt;span class="na"&gt;if ( $actionSet -ne 0 ) {&lt;/span&gt;
        &lt;span class="na"&gt;try {&lt;/span&gt;
            &lt;span class="na"&gt;Write-Host &amp;quot; ** RESET TO STAKEHOLDER - ** &amp;quot; &amp;quot; Name: &amp;quot; $name &amp;quot; Last Access: &amp;quot; $date &amp;quot;License: &amp;quot; $license &amp;quot; - &amp;quot; $licenseName&lt;/span&gt;
            &lt;span class="na"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Invoke-RestMethod -Uri $request -headers $headers -Method Patch -Body $json -ContentType &amp;#39;application/json-patch+json&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;            &amp;quot;|{0}|{1}|{2}|{3}|{4}|&amp;quot; -f $name, $date, $license, $licenseName, &amp;quot;Reset to Stakeholder&amp;quot; | add-content -path $logFile&lt;/span&gt;
&lt;span class="s"&gt;        }&lt;/span&gt;
&lt;span class="s"&gt;        catch {&lt;/span&gt;
&lt;span class="s"&gt;          Write-Host Error updating entitlements&lt;/span&gt;
&lt;span class="s"&gt;          Write-Host $_.Exception|format-list -force&lt;/span&gt;
&lt;span class="s"&gt;        }&lt;/span&gt;
&lt;span class="s"&gt;      }&lt;/span&gt;
&lt;span class="s"&gt;      else {&lt;/span&gt;
&lt;span class="s"&gt;        Write-Host &amp;quot; ** EXPIRED ** &amp;quot; &amp;quot; Name: &amp;quot; $name &amp;quot; Last Access: &amp;quot; $date &amp;quot;License: &amp;quot; $license &amp;quot; - &amp;quot; $licenseName&lt;/span&gt;
&lt;span class="s"&gt;        &amp;quot;|{0}|{1}|{2}|{3}|{4}|&amp;quot; -f $name, $date, $license, $licenseName, &amp;quot;Expired&amp;quot; | add-content -path $logFile&lt;/span&gt;
&lt;span class="s"&gt;      }&lt;/span&gt;
&lt;span class="s"&gt;    }&lt;/span&gt;
&lt;span class="s"&gt;    # BASIC + TEST&lt;/span&gt;
&lt;span class="s"&gt;    elseif ( $licenseName -eq $basicTest ) {&lt;/span&gt;
&lt;span class="s"&gt;      if ( $actionSet -ne 0 ) {&lt;/span&gt;
&lt;span class="s"&gt;        try {&lt;/span&gt;
&lt;span class="s"&gt;            Write-Host &amp;quot; ** RESET TO STAKEHOLDER - ** &amp;quot; &amp;quot; Name: &amp;quot; $name &amp;quot; Last Access: &amp;quot; $date &amp;quot;License: &amp;quot; $license &amp;quot; - &amp;quot; $licenseName&lt;/span&gt;
&lt;span class="s"&gt;            $response = Invoke-RestMethod -Uri $request -headers $headers -Method Patch -Body $json -ContentType &amp;#39;application/json-patch+json&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;            &amp;quot;|{0}|{1}|{2}|{3}|{4}|&amp;quot; -f $name, $date, $license, $licenseName, &amp;quot;Reset to Stakeholder&amp;quot; | add-content -path $logFile&lt;/span&gt;
&lt;span class="s"&gt;        }&lt;/span&gt;
&lt;span class="s"&gt;        catch {&lt;/span&gt;
&lt;span class="s"&gt;          Write-Host Error updating entitlements&lt;/span&gt;
&lt;span class="s"&gt;          Write-Host $_.Exception|format-list -force&lt;/span&gt;
&lt;span class="s"&gt;        }&lt;/span&gt;
&lt;span class="s"&gt;      }&lt;/span&gt;
&lt;span class="s"&gt;      else {&lt;/span&gt;
&lt;span class="s"&gt;        Write-Host &amp;quot; ** EXPIRED ** &amp;quot; &amp;quot; Name: &amp;quot; $name &amp;quot; Last Access: &amp;quot; $date &amp;quot;License: &amp;quot; $license &amp;quot; - &amp;quot; $licenseName&lt;/span&gt;
&lt;span class="s"&gt;        &amp;quot;|{0}|{1}|{2}|{3}|{4}|&amp;quot; -f $name, $date, $license, $licenseName, &amp;quot;Expired&amp;quot; | add-content -path $logFile&lt;/span&gt;
&lt;span class="s"&gt;      }&lt;/span&gt;
&lt;span class="s"&gt;    }&lt;/span&gt;
&lt;span class="s"&gt;  }&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;REFERENCE INFORMATION&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-6.1"&gt;Azure DevOps Services REST API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=richardfennellBM.BM-VSTS-WIKIUpdater-Tasks"&gt;WIKI Updater Tasks&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Azure DevOps Pipeline&lt;/h1&gt;
&lt;p&gt;And here is the Azure Pipeline definition, whereby I replace our organization and project with &lt;ORG&gt; and &lt;PROJECT&gt; placeholders:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;schedules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nl"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;
  &lt;span class="nl"&gt;always&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;Rev&lt;/span&gt;&lt;span class="p"&gt;:.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Weekly_Audit&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt; &lt;span class="n"&gt;Weekly&lt;/span&gt; &lt;span class="n"&gt;Audit&lt;/span&gt;
  &lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AGENT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="nl"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="nl"&gt;persistCredentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;

  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AzureKeyVault&lt;/span&gt;&lt;span class="mi"&gt;@1&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="nl"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RROJECT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;ConnectedServiceName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nl"&gt;KeyVaultName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PROJECT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;

  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="n"&gt;Entitlement&lt;/span&gt; &lt;span class="n"&gt;Management&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Idle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Stakeholders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;
      &lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;patToken&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PAT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MemberEntitlementManagement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;ORG&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;months&lt;/span&gt; &lt;span class="mi"&gt;-3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;actionSet&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;outputFile&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArtifactStagingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Idle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Stakeholders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
      &lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
      &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;

  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WikiUpdaterTask&lt;/span&gt;&lt;span class="mi"&gt;@1&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;WIKI&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ORG&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visualstudio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PROJECT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;_git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Common&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Engineering&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wiki&lt;/span&gt;
      &lt;span class="nl"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PROJECT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;Knowledgebase&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Logs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;InactiveUsers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wcbbc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_Reset_Idle_User_Licenses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
      &lt;span class="nl"&gt;dataIsFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
      &lt;span class="nl"&gt;sourceFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArtifactStagingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Idle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Stakeholders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
      &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Automated&lt;/span&gt; &lt;span class="n"&gt;Idle&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="n"&gt;Report&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt;
      &lt;span class="nl"&gt;gitname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedBy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nl"&gt;gitemail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedBy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nl"&gt;useAgentToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Positive ending&lt;/h1&gt;
&lt;p&gt;The audit is now performed weekly (not ad-hoc), in minutes (not hours), and consistently (not flawed by boredom or context switching). In fact, I completely forgot about the automation until my colleague, Dennis, asked me whether we can run the same automation in another organization. Response was an easy one, "&lt;em&gt;yes we can and already have been for the past X months. Checkout the weekly reports in our knowledgebase wiki.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;&lt;img alt="Robots" src="../images/azuredevop-automation-stakeholders-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Hope you will join us on our quest to &lt;strong&gt;automate everything automatable&lt;/strong&gt; to move the repetitive, mind-numbing, and therefore error-prone tasks that our digital colleagues can perform consistently and efficiently. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Humanoids" src="../images/azuredevop-automation-stakeholders-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Do not see it as the world of robotics taking over humanity, but as robotic colleagues enabling us to focus on other responsibilities, such as ensuring we continuously ship value to our &lt;strong&gt;delighted customers&lt;/strong&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="azure-devops"></category></entry><entry><title>Client-side expressiveness and security</title><link href="https://wsbctechnicalblog.github.io/client-expressiveness-and-security.html" rel="alternate"></link><published>2021-05-28T00:00:00-07:00</published><updated>2021-05-28T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-28:/client-expressiveness-and-security.html</id><summary type="html">&lt;p&gt;The importance of properly securing client-side applications has never been more urgent!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“In the beginning was the hyperlink, and the hyperlink was with the web, and the hyperlink was the web. And it was good.” -Anonymous&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modern web development demands heavy client-side processing logic. The days of simple HTML forms with the Submit button are long gone; nowadays, end-users expect feature-rich functionality available in their browsers.&lt;/p&gt;
&lt;p&gt;Sounds great, right? Yes, but what about that pesky little browser? It’s a well-known fact that all browsers are notorious for being &lt;strong&gt;untrusted computing environments&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;What do we mean by ‘untrusted computing environment’?&lt;/h2&gt;
&lt;p&gt;If we are to enable client-side expressiveness (i.e. enable front-end developers to implement sophisticated and elaborate processing of business policy rules), we must give developers advanced, powerful tools. So, what’s wrong with that? Giving sophisticated, powerful tools to developers sound like a great way to improve quality and productivity.&lt;/p&gt;
&lt;p&gt;True, however the problem is that giving those tools to our developers also means we are giving the same tools to potentially hostile end-users.&lt;/p&gt;
&lt;p&gt;How is that possible? Well, the inherently untrusted computing environment, such as a web browser, opens the possibility of easily hacking into our system and exploiting various loopholes. Web browser is a very permissive application which allows anyone to inspect and examine what is going on under the hood.&lt;/p&gt;
&lt;h2&gt;How does client-side processing logic work?&lt;/h2&gt;
&lt;p&gt;Front-end applications need to request values that are stored on the back end. Then, once the requested values are delivered in the response, the front-end app displays the values to the end user and awaits further action initiated by the user. The user can make some modifications to the displayed values and then request that those modifications be processed and stored on the back end. The front-end app accomplishes that by sending the request back to the server.&lt;/p&gt;
&lt;p&gt;In the early days of web apps, the above described processing logic on the client was implemented using plain vanilla HTML. Soon after the e-commerce revolution picked up, it became obvious that such static, pedestrian way of processing business policy rules was woefully insufficient and inadequate. The client-side apps had to be enhanced by some custom processing logic. Enter JavaScript in the browser.&lt;/p&gt;
&lt;p&gt;With JavaScript running in the browser, suddenly the sophistication levels of the front-end apps exploded. The old thin client/fat server model got turned on its head and we started building elaborate fat client/thin server models. A &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single Page Application (SPA)&lt;/a&gt; was born. Endless scrolling. Desktop-like user experience in the browser.&lt;/p&gt;
&lt;h2&gt;Where is the problem?&lt;/h2&gt;
&lt;p&gt;Unlike desktop apps, which execute the processing logic using compiled, binary code that is not publicly available, web apps (SPAs) execute the processing logic using the scripted code that is publicly available. Being publicly available, it becomes exploitable. Security therefore gets easily compromised.&lt;/p&gt;
&lt;p&gt;For example, let’s examine the situation where front-end developers are collaborating with back-end developers who are building APIs. Front-end dev notices: “This page needs &lt;em&gt;customer id&lt;/em&gt; and &lt;em&gt;full name&lt;/em&gt;; could you please create an API end-point with the response format &lt;code&gt;{first_name; last_name}&lt;/code&gt;, given the value of &lt;em&gt;customer_id&lt;/em&gt;?”&lt;/p&gt;
&lt;p&gt;The API developers oblige and enable the client to send the query that specifies &lt;em&gt;customer id&lt;/em&gt; and returns customers &lt;em&gt;full name&lt;/em&gt;. Like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;customer(id:&lt;/span&gt; &lt;span class="err"&gt;123456789)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;first_name,&lt;/span&gt;
        &lt;span class="err"&gt;last_name&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This expressive power given to the front-end developer is also the expressive power given to the end-users who may be keen on exploring those powers. Some of those end-users could potentially be hostile users. It is difficult to imagine a computing environment that could be less secure than a web browser. Which means that expressive front-end development platforms produce a field day for malicious/hostile end-users.&lt;/p&gt;
&lt;p&gt;This creates a huge problem: almost anything our front-end developer can do hostile users can do as well. A hostile user can easily figure out the API by inspecting HTTP Requests (in general, a very easy task not requiring advanced reverse engineering skills). Once the API has been grasped, hostile user can doctor the above query as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;customer(id:&lt;/span&gt; &lt;span class="err"&gt;123456789)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;first_name,&lt;/span&gt;
        &lt;span class="err"&gt;last_name,&lt;/span&gt;
        &lt;span class="err"&gt;credit_card_number&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ouch! Even if the end-user is not hostile (could be merely curious), the properly secured system should never allow such query to be successfully executed.&lt;/p&gt;
&lt;p&gt;But what if it becomes a legitimate query? What if the business policy rule changes and is now allowing for the query to return the credit card number? How does the system prevent users from prying into other users’ credit card numbers?&lt;/p&gt;
&lt;p&gt;The only way to assure proper security is to implement client-side processing logic that is sensitive to the field-level security. The system processing the query must know who is sending the query and what exactly is being asked. May sound simple at first but knowing how typically even a regular business rule may involve a lot of data elements/fields, things quickly mushroom and become exceedingly complicated. Before we know it, we have produced breeding ground for bugs.&lt;/p&gt;
&lt;h2&gt;Increasing client-side expressiveness is risky&lt;/h2&gt;
&lt;p&gt;The more power is given to the client-side UI developers, the more security headaches get produced to worry about. New developments in the client-side technology (&lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;, &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt;, etc.) offer amazing expressive powers to front-end developers. But with that power comes huger risk as well as huge responsibility. The power tools modern front-end developers have at their disposal are a veritable double-edged sword. That sword cuts both ways – enables developers to build amazing client-side apps while those power tools at the same time open a can of security worms.&lt;/p&gt;
&lt;p&gt;One way to gain insight into the dangers of having such power tools running inside the browser is to compare it to the situation where users could send SQL queries direct to the back-end database from the browser. We have extremely valid reason to make such technology illegal on the browser, so how come we don’t have the same or similar concerns with &lt;strong&gt;GraphQL&lt;/strong&gt;, &lt;strong&gt;gRPC&lt;/strong&gt;, and other similar power tools?&lt;/p&gt;
&lt;h2&gt;Enter DevSecOps&lt;/h2&gt;
&lt;p&gt;The DevOps revolution happened over 10 years ago and nowadays we are seeing regular DevOps teams rapidly evolving to the new levels of maturity -- DevSecOps and CloudOps. This higher level of maturity demands upgrading our engineering skills. One of the absolutely critical skill upgrades must happen in the area of security. The reason for that was, I hope, clearly presented in this article.&lt;/p&gt;
&lt;p&gt;It is therefore paramount that front-end development efforts be closely aligned with the DevSecOps practices. Otherwise organizations are running huge risks of getting compromised by unethical hacking.&lt;/p&gt;</content><category term="Posts"></category><category term="architecture"></category><category term="code"></category><category term="devops"></category><category term="security"></category></entry><entry><title>TDD for Non-Techies</title><link href="https://wsbctechnicalblog.github.io/tdd-for-nontechies.html" rel="alternate"></link><published>2021-05-26T00:00:00-07:00</published><updated>2021-05-26T00:00:00-07:00</updated><author><name>Alex Bunardzic; Christine Ozeroff</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-26:/tdd-for-nontechies.html</id><summary type="html">&lt;p&gt;TDD explained to non programmers by using the example of writing a short story&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuous learning is the essential prerequisite for staying competitive in the market. The competitive edge is oftentimes won by innovating. At WorkSafeBC, we take continuous education very seriously. On top of our regular training sessions, coding Dojos, ad hoc coding bootcamps, weekly micro learning episodes, regular blog posts on WorkSafeBC Technical Blog, etc., we also deliver regular Lunch &amp;amp; Learn sessions.
Last month, Christine Ozeroff (our Manager of Innovation &amp;amp; Technology Learning) organized an experimental Lunch &amp;amp; Learn session to teach Test Driven Development (TDD) to non-technical staff. It was a daring experiment (we don’t know of anyone else ever attempting to do something like that), and the stakes were high – will the session prove to be useful, or will we merely manage to confuse the attendees?&lt;/p&gt;
&lt;p&gt;We’re happy to report that the outcome of the session exceeded our expectations. Participants were pulled into the presentation and encouraged to interrupt the proceedings by asking very valuable and useful questions. At the end of the session, the overall sense was that the group learned something valuable.&lt;/p&gt;
&lt;h2&gt;How it all began&lt;/h2&gt;
&lt;p&gt;About two years ago the DevOps department introduced the practice of Test Driven Development (TDD). We started with training sessions then moved into regular TDD Dojos with kata exams. Today, all developers have reached at least the TDD yellow belt level, some are already at the orange belt level and moving on to take the green belt katas.&lt;/p&gt;
&lt;p&gt;That success created a bit of a stir as other departments began hearing the term TDD being thrown around. The curiosity started rising, so the time was opportune to consider having a session that would introduce and demystify the TDD practice.&lt;/p&gt;
&lt;h2&gt;How we went about organizing the session&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wsbctechnicalblog.github.io/author/alex-bunardzic.html"&gt;Alex Bunardzic&lt;/a&gt; proposed to deliver a hands-on exercise that would illustrate the TDD practice to staff that never performed any computer programming. Naturally, the hands-on exercise would not be in any way related to solving a computer programming challenge (because that would be counter-productive). After giving it some thought, Alex decided to use the familiar process of writing a short story. Everyone has at one point in their schooling written a short story or a short essay. The challenge now became: how do we write a short story/essay using the TDD approach?&lt;/p&gt;
&lt;p&gt;To enable the actual hands-on exercise, Alex had to quickly innovate and create, from scratch, a testing framework that would enable writers to first express an expectation before actually putting the pen on paper (or, in this case, before starting to type the content of their short story).&lt;/p&gt;
&lt;p&gt;The session was conducted using Alex’s newfangled testing framework. We were a bit concerned whether this experimental approach would make any sense to non-programmers, but as the session began unfolding, our anxieties were quickly appeased.&lt;/p&gt;
&lt;h2&gt;How did the session unfold?&lt;/h2&gt;
&lt;p&gt;Unfortunately, on the day we held the session Christine was out of the office; in her place, we had Chloe Ernst act as the MC. Chloe did a fantastic job setting up the stage, breaking the ice and explaining to the staff in attendance what the session is all about and what to expect.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lunch and learn" src="/images/Lunchnlearn.png"&gt;&lt;/p&gt;
&lt;p&gt;Once Chloe handed the control over to Alex, attendees were treated to a brief introduction to TDD, as it is practiced in software development. Shortly after the presentation began the questions started to come in. The frequency of interesting questions increased as the session moved to the hands-on exercise.
Alex took the time to address each question to the best of his ability. What was noteworthy was that the questions, coming from non-programmers, were very insightful and went straight into the very essence of the test-first approach to developing anything (be it a short story, a computer program/app, or anything else).&lt;/p&gt;
&lt;p&gt;At the end of the session, most of the questions were addressed and the feeling was the attendees left the presentation with a better understanding of the value that TDD practices bring to the quality of delivery.&lt;/p&gt;
&lt;h2&gt;Some interesting interactions with the participants&lt;/h2&gt;
&lt;p&gt;Let’s investigate some interesting details that unfolded during the hands-on session. Alex set the stage for the hands-on demonstration by explaining that we always start our work by formulating expectations. In the case of writing a short story, the first expectation is that the story should have a title.
The test-driven approach requires automatic verifications that confirm whether our expectations have been met. Alex demonstrated the framework he built specifically to write textual documents (please see the Appendix for more on this framework). The only way a system will automatically verify if the exceptions are met or not met is if we provide and prescribe formal rules to follow.&lt;/p&gt;
&lt;p&gt;In this case, we are working with a system that has two moving parts: one moving part is the story document (where by ‘moving’ we mean the content of the document keeps changing), the other moving part is a separate document that contains formalized expectations (we call that document 'tests').&lt;/p&gt;
&lt;p&gt;Because the rule of the test-driven development game is that we must always specify expectations before we make changes to the content, the first thing we do is declare the expectation that the short story document must contain a title.&lt;/p&gt;
&lt;p&gt;When we run the testing framework we see that it finds our story writing system in a broken state. To begin with, the testing framework was expecting to find a short story document and failed. Once we created the expected document, the testing framework checked to see if the short story contains the title. It could not find the title, so it failed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="TDD screenshot" src="/images/tddscreenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;From that moment on, the hands-on session continued to alternate between adding the expectation, seeing it fail, and then making changes to the document to fulfill the failed expectation. Rinse, repeat, until we get to the point where we feel that the first draft of the short story is ready for review.&lt;/p&gt;
&lt;h3&gt;Few questions emerged during the session:&lt;/h3&gt;
&lt;p&gt;Sangeeta Ben asked, “Is the testing framework case sensitive?” Alex answered by making the change to one of the tests by replacing the word starting with the upper-case with the same lower-case letter, saved the change and re-ran the tests. The test failed, which gives a clear answer that the tests are case sensitive.&lt;/p&gt;
&lt;p&gt;Boris Nester asked: “What happens when we learn that there is a new compliance regulation that implies that the business policy rule has changed? Do we then write a new test?” Alex attempted to answer by changing one of the existing tests and re-running all tests. The changed test failed because the implemented document did not meet the new expectations. The important takeaway point from this example is that change to the system must never be implemented at the document level. It must always be first made to the specification (i.e. the tests that declare the expectations). Once the change to the tests has been made, we need to run the tests to see that the implementation is causing one or more tests to fail. We then go back and make modifications to the implementation (i.e. we &lt;em&gt;refactor&lt;/em&gt;) until the modified expectations to the test cease to cause the tests to fail.&lt;/p&gt;
&lt;p&gt;Steven Tate asked: “Who writes the tests? I’m assuming it’s the creators of the content, in the case of software development it’s the developers. Is that correct?” Alex answered: “Not necessarily. There may be a new business policy rule that people who are developing software may not know about. Tests could be written by the team comprising not only developers but also other subject matter experts.”&lt;/p&gt;
&lt;h2&gt;Attendee’s feedback&lt;/h2&gt;
&lt;p&gt;Attendees provided their insight on their experience and what they learned during this Lunch and Learn session.  Alex’s efforts to make this session an engaging and relaxed environment for everyone to ask questions came through, as several comments reflected on how attendees like Sangeeta Ben “&lt;em&gt;felt comfortable attending...knowing the session was for non-techies&lt;/em&gt;”. &lt;/p&gt;
&lt;p&gt;Pindy wrote “&lt;em&gt;Alex made it easy to understand that TDD helps with producing simple designs…, and clean and meaningful code&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Boris Nester sums his insights of TDD as it’s “&lt;em&gt;all about shortening the feedback loop to enable quicker product evolution while maintaining quality and not impacting other parts of the application&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Thank-you to everyone for making this session a success!&lt;/p&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;p&gt;Necessity is the mother of invention, and once Christine and Alex agreed that teaching TDD by doing the hands-on demo on how to write a short story would be a good approach, the work on creating a testing framework began. Alex decided to build a simple, no bells-and-whistles framework.&lt;/p&gt;
&lt;p&gt;The short story testing framework is based on a couple of simple assumptions: there will be a document located on the local disk and that document will have a name and an &lt;em&gt;md&lt;/em&gt; extension (&lt;em&gt;md&lt;/em&gt; for markdown language). In addition to that there will be another document called &lt;em&gt;tests.txt&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Each time the tests run, the framework will attempt to locate and open the &lt;em&gt;.md&lt;/em&gt; file. If it fails, it will report an error in the console. If it finds and opens the document, it will read it line-by-line to see if the content in the document satisfies the expectations declared in the &lt;em&gt;tests.txt&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The testing framework is expecting several syntactical formulations that start at each non-blank line in the &lt;em&gt;tests.txt&lt;/em&gt; file. For example, one formalized rule is &lt;em&gt;Must contain:&lt;/em&gt;. This rule grabs the specified content to the right of the &lt;em&gt;Must contain:&lt;/em&gt; statement and then tries to find that content in the &lt;em&gt;.md&lt;/em&gt; document. The simplest implementation of that rule would be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Must contain: Title&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Any content could be specified to the right of the &lt;em&gt;Must contain:&lt;/em&gt; rule. The testing framework will examine the short story document to see if the specified expectation has been met.&lt;/p&gt;
&lt;p&gt;It is also possible to specify the expectation that the short story document must consist of a certain structure. That expectation can be encoded in the &lt;em&gt;test.txt&lt;/em&gt; by using the &lt;em&gt;Minimum number of subtitles:&lt;/em&gt; formalized expectation.&lt;/p&gt;
&lt;p&gt;Of course, the testing framework can check for minimum number of words, maximum number of words, minimum number of paragraphs, maximum number of paragraphs, minimum length in characters, maximum lenght, and so on.&lt;/p&gt;
&lt;p&gt;Using this primitive testing framework, it is possible to specify a lot of expecations that are then driving the story writing process.&lt;/p&gt;</content><category term="Events"></category><category term="agile"></category><category term="code"></category><category term="devops"></category><category term="leaning"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Can we enact governance through engineering-friendly manifestos and guardrails?</title><link href="https://wsbctechnicalblog.github.io/governance-manifestos-guardrails.html" rel="alternate"></link><published>2021-05-18T00:00:00-07:00</published><updated>2021-05-18T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-18:/governance-manifestos-guardrails.html</id><summary type="html">&lt;p&gt;The best way to create an engineering revolt is to enforce governance with the big stick.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of many challenges of pursuing a healthy DevOps mindset is finding harmony between the need for organizational governance and autonomous engineering teams. Merriam-Webster defines &lt;strong&gt;Governance&lt;/strong&gt; as “&lt;em&gt;the act or process of governing or overseeing the control and direction of something&lt;/em&gt;”. It comes in many forms such as architecture, infrastructure, development, security, operations, bureaucracy, and legislation. A healthy portion of governance raises quality and trust but tends to stifle autonomy and innovation. Rules are rules!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Governance" src="../images/governance-manifestos-guardrails-5.png"&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, if we have minimal or no governance, we can experience an engineering revolt which introduces a variety of engineering snowflakes, duplication of effort, and technical debt that grows like a vicious virus. For example, when we ask engineering why we have hundred of applications and thousands of CI/CD pipelines, we get a shrug of shoulders and everyone moves on. Everyone but the operations and site reliability engineering teams, because they inherit an endless variety of technical solutions, code rot, complexity, and declining return on investments. So, which way should we pivot the scale?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Revolt" src="../images/governance-manifestos-guardrails-6.png"&gt;&lt;/p&gt;
&lt;p&gt;You guessed it, we must nurture a balance between governance and autonomy. It fuels innovation, risk taking, and passion. Easier said than done!&lt;/p&gt;
&lt;p&gt;&lt;img alt="YingYang" src="../images/governance-manifestos-guardrails-7.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Quest for balance&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Hat" src="../images/governance-manifestos-guardrails-4.png"&gt;&lt;/p&gt;
&lt;p&gt;When I put on my engineering hat, the word &lt;strong&gt;governance&lt;/strong&gt; triggers tension and at times even an urge to revolt.&lt;/p&gt;
&lt;p&gt;For that reason, we prefer using engineering friendlier language such as &lt;strong&gt;manifestos&lt;/strong&gt; and &lt;strong&gt;guardrails&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manifesto&lt;/strong&gt; – “&lt;em&gt;a written statement declaring publicly the intentions, motives, or views of its issuer&lt;/em&gt;” (Merriam-Webster), such as &lt;a href="https://agilemanifesto.org/"&gt;Manifesto for Agile Software Development&lt;/a&gt; and &lt;a href="https://www.tactec.ca/devops-core-values/"&gt;DevOps Core Values&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Agile" src="../images/governance-manifestos-guardrails-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="DevOps" src="../images/governance-manifestos-guardrails-2.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guardrails&lt;/strong&gt; – “&lt;em&gt;a railing guarding usually against danger&lt;/em&gt;” (Merriam-Webster), such as the sides of a bridge, 200m above a raging George, or naming guidance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For our common engineering system, we have collaborated with security and operations to define a library of guardrails, such as:&lt;/p&gt;
&lt;p&gt;&lt;img alt="DevOps" src="../images/governance-manifestos-guardrails-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is an extract from our naming guidelines guardrail, with recommendations (not policies, rules, or standards) for Active Directory group names. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Active&lt;/span&gt; &lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="k"&gt;Group&lt;/span&gt; &lt;span class="k"&gt;Names&lt;/span&gt;

&lt;span class="n"&gt;Review&lt;/span&gt; &lt;span class="n"&gt;AD&lt;/span&gt; &lt;span class="n"&gt;AAD&lt;/span&gt; &lt;span class="k"&gt;Security&lt;/span&gt; &lt;span class="n"&gt;Groups&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;organizational&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;team&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Guidelines&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;AzureDevOps_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Team&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Role&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Avoid&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;underscore&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;Prefix&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;rdParty&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;artifacts&lt;/span&gt; &lt;span class="n"&gt;containing&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;party&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Examples&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;AzureDevOps_IT_CeS_ProjectAdministrators&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;AzureDevOps_Training_AgilePlanning_ReleaseApprovers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So now that we have autonomous engineering teams and are all using ~~politically~~ correct engineering language, we should all be focused on continuously delivering value and delighting our end-users. No?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Manifestos and guardrails are wolves in sheep skins&lt;/h1&gt;
&lt;p&gt;Yes, we should focus on continuously delivering value and delighting our end-users. I have seen it time and time again that engineering rallies behind &lt;strong&gt;manifestos&lt;/strong&gt; and &lt;strong&gt;guardrails&lt;/strong&gt;, only to pivot back to doing things the way they have been done for decades, leaving a wake of rotting guidance, knowledge, and learnings. There are several reasons that even the most effective and groomed guidance, best practices, manifestos, guardrails, or whatever fancy name you may use, are forgotten, ignored, or abandoned all together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hard to discover them in a pile of sites, wikis, and documentation&lt;/li&gt;
&lt;li&gt;Hard to keep them up-to-date and relevant for engineering&lt;/li&gt;
&lt;li&gt;Eventually referred to and perceived as &lt;strong&gt;rules&lt;/strong&gt; and equated to governance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Failure" src="../images/governance-manifestos-guardrails-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Once the &lt;strong&gt;manifestos&lt;/strong&gt; and &lt;strong&gt;guardrails&lt;/strong&gt; meander into the perceived &lt;strong&gt;them&lt;/strong&gt; (enforcers, wolves) and &lt;strong&gt;us&lt;/strong&gt; (engineers, sheep) territory, their value, advocates, and everyone's trust will evaporate like hot coffee in the arctic. You may as well shred them and walk away.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why not embrace Manifesto and Guardrail Mobbing?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Failure" src="../images/governance-manifestos-guardrails-10.png"&gt;&lt;/p&gt;
&lt;p&gt;I have been observing our test-driven development (TDD) and, in particular, our mob programming dojos for some time. Mob programming is a special process in which an entire team works on the same issue or feature at the same time, in the same environment, and rotating through one and the same computer. It scales up pair programming and inspires a high degree of collaboration, learning, and quality deliverables. It creates trust, enables consistency, and stewards of doing things the right way.&lt;/p&gt;
&lt;p&gt;In fact, many of the bi-products of mob programming, such as collaboration, mind-sharing, and trust, are those we lack with governance, guidance, and guardrails. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which makes me think ... what if we learn from mob programming and embrace mob guardrailing? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By involving engineering (the mob) in the refinement of our guardrails, we nurture engagement, promote collaboration, and enable advocates to rise from the deep routed cynicism for governance. I propose the following hypotheses to our working groups:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hypothesis" src="../images/governance-manifestos-guardrails-11.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Hypothesis 1: Engineers being engaged in the formulation of guardrails leads to better &lt;strong&gt;adoption&lt;/strong&gt; of the guardrails.&lt;/li&gt;
&lt;li&gt;Hypothesis 2: Engineers being engaged in the formulation of guardrails creates champions who will &lt;strong&gt;advocate&lt;/strong&gt; the guardrails. &lt;/li&gt;
&lt;li&gt;Hypothesis 3: Involving engineers in the formulation of guardrails promotes guardrails &lt;strong&gt;mobbing&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;To summarize a long story, if we can prove these hypotheses, we can enact the organizational governance through engineering friendly and trusted manifestos and guardrails!&lt;/p&gt;
&lt;p&gt;What do YOU think?&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category></entry><entry><title>Extreme Programming (XP) provides options</title><link href="https://wsbctechnicalblog.github.io/xp-options.html" rel="alternate"></link><published>2021-05-12T00:00:00-07:00</published><updated>2021-05-12T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-12:/xp-options.html</id><summary type="html">&lt;p&gt;What does 'extreme' in Extreme Programming stand for? It stands for extreme interruptability and extreme steerability&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the issues with traditional waterfall method is that once the project starts rolling, there are no options other than to rush toward the product launch (i.e. the pre-established deadline). Prior to the roll out of the project, the opportunity has been identified and selected for implementation, the budget has been secured, teams have been formed, timelines have been established and now’s the time to execute on the plan. That’s why we’re here, that’s what we get paid to do.&lt;/p&gt;
&lt;p&gt;Sounds reasonable, no? So why consider changing the above approach? In other words, why consider options once we’re holding a firm project plan in our hands?&lt;/p&gt;
&lt;h2&gt;Best laid plans…&lt;/h2&gt;
&lt;p&gt;The reason why many of the waterfall-based software development projects tend to overpromise and underdeliver lies in the fact that such projects usually take sizeable chunks of time to deliver. It is exceedingly rare that a waterfall project gets done in a matter of few days/weeks. More likely, such projects typically take many months, sometime even years. They consume not only large periods of time but also large amounts of money, and naturally carry with them large levels of risk.&lt;/p&gt;
&lt;p&gt;Why is that a problem? Well, we live in a very dynamic world where market, regulatory, climate, health and other pressures rule the roster. And because reliable crystal ball hasn’t been invented yet, the upcoming unavoidable shifts in various pressures seem devilishly difficult to predict. And since they are difficult (read: almost impossible) to predict, it goes without saying that those unplanned shifts are impossible to control.&lt;/p&gt;
&lt;h2&gt;What is the alternative?&lt;/h2&gt;
&lt;p&gt;Once we realize that even the best laid plans are susceptible to being invalidated by unpredictable shifts, we are forced to start looking for plan B. What are our alternatives? We don’t want to be caught in the situation where we allocate and burn a lot of funds, time, and resources only to realize it was all in vain.&lt;/p&gt;
&lt;p&gt;One alternative that was proposed some 25 years ago is &lt;a href="https://en.wikipedia.org/wiki/Extreme_programming"&gt;Extreme Programming (XP)&lt;/a&gt;. Unlike many other methods that have been introduced over the years proposing to improve the delivery of software products, XP has proven to have strong staying power. Its staying power is especially corroborated by the fact that, unlike most other methods which gave undergone numerous revisions, XP today is pretty much the same as it was 25 years ago.&lt;/p&gt;
&lt;p&gt;This absence of any significant revisions fortifies the conviction that we are dealing with a truly robust, effective method for delivering quality software.&lt;/p&gt;
&lt;h2&gt;What options does XP offer?&lt;/h2&gt;
&lt;p&gt;When it comes to dealing with unplanned/unpredictable changes that affect the project that is underway, XP offers several important options:&lt;/p&gt;
&lt;h3&gt;Option to wait (defer investment)&lt;/h3&gt;
&lt;p&gt;Conventional wisdom teaches that we should always build in capabilities early, even if it’s not clear yet whether those capabilities will be needed later. XP explicitly acknowledges that it is better to wait. Premature optimization is the root of all evil, therefore it is better to abstain from rushing in. The sobering fact remains that the projected value of making that early investment may not materialize, so it is potentially wasteful.&lt;/p&gt;
&lt;p&gt;XP method explicitly recognizes the value of our option to wait.&lt;/p&gt;
&lt;h3&gt;Option to switch&lt;/h3&gt;
&lt;p&gt;XP is based on tightening the feedback loops caused by making a change in the system we are building. Rather than assuming that we have considered all possibilities upfront while we were formulating our plan, XP insists that we should check and re-check our starting assumptions every step of the way.&lt;/p&gt;
&lt;p&gt;That posture makes us extremely interruptible. If things for whatever reason start going south, instead of blindly sticking to the original plan, we should utilize the XP method by leveraging the early opportunity to switch.&lt;/p&gt;
&lt;p&gt;XP makes us extremely interruptible and steerable.&lt;/p&gt;
&lt;h3&gt;Option to abandon&lt;/h3&gt;
&lt;p&gt;This option is a corollary to Option to switch, but in a more drastic fashion. When doing XP, we make ourselves interruptible, so we may discover at some point that the business value we’re pursuing has diminished. It is at that point (or around that point) that we may consider abandoning the pursuit. Ouch!&lt;/p&gt;
&lt;p&gt;Good news is that XP provides an explicit abandonment step. Abandonment value is increased by the virtue of having developed and used core skills. Even after we abandon the pursuit, those skills get retained. We learn something from the experience.&lt;/p&gt;
&lt;p&gt;In XP, the glass is half-full. And because we have abstained from charging blindly toward the deadline, ignoring any and all signs warning us to abandon the ship, we leave the abandoned initiative with a positive attitude (unlike in other methods where abandonment is viewed as a failure or a disaster).&lt;/p&gt;
&lt;h2&gt;What are the values of these options?&lt;/h2&gt;
&lt;p&gt;When evaluating options, we must consider several factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cost associated with obtaining an option&lt;/li&gt;
&lt;li&gt;The payback that the investment in an option brings&lt;/li&gt;
&lt;li&gt;Time lag between obtaining an option and being able to make a contingent decision&lt;/li&gt;
&lt;li&gt;The uncertainty offset&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Various options come with various investment strategies and promise various paybacks. In general, the biggest potential for considerable payback is with offsetting the uncertainty. In cases where the future is stable and predictable, the value of XP options is negligible. But as soon as the future becomes uncertain, investing in those options becomes very valuable.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="code"></category><category term="devops"></category><category term="xp"></category></entry><entry><title>Start together work together finish together</title><link href="https://wsbctechnicalblog.github.io/start-together-work-together-finish-together.html" rel="alternate"></link><published>2021-05-07T23:59:00-07:00</published><updated>2021-05-07T23:59:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-07:/start-together-work-together-finish-together.html</id><summary type="html">&lt;p&gt;Speed up the delivery process by avoiding queuing and needless looping&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This article was inspired by the amazing research &lt;a href="https://blog.amplitude.com/author/john-cutler"&gt;John Cutler&lt;/a&gt; keeps doing&lt;/p&gt;
&lt;p&gt;Every organization starts any software development initiative by examining the opportunities and then selecting the highest priority ones. Once that selection happens, teams move on to work on formulating the expectations. What is the proposed system supposed to offer to the paying customers/end users?&lt;/p&gt;
&lt;p&gt;Formulated expectations get formalized as user stories, which in turn get vertically sliced and worked on in a typical combination of iterative/incremental fashion. Once fully tested, the expectations get released and the system runs in production environment. Rinse, repeat.&lt;/p&gt;
&lt;h2&gt;Traditional waterfall approach&lt;/h2&gt;
&lt;p&gt;In the familiar waterfall scenario, each of the above described phases get done in strict isolation following the incremental model. At each gated phase, proposed changes get formulated, reviewed, signed off and then frozen. Change management insists that once frozen, expectations cannot be revisited. We move forward in strictly incremental fashion (i.e. we only possibly iterate at the stages 4 and 5). The gated phases typically happen in the following order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Opportunity selection&lt;/strong&gt; (once selected and signed off, the opportunity gets slated for implementation of the solution which will harvest its potential)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formulating the expectations&lt;/strong&gt; (typically, the expectations get formulated as a laundry list of features); once formulated, the workload gets planned and then the expectations get handed off to the design team&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design the solution&lt;/strong&gt;; teams take careful approach to design the system which will meet all the signed off and frozen expectations; once the design is finished and reviewed, it gets signed off and frozen – change management precludes any further changes to the signed off design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The build team gets the design blueprints and commences the build activities&lt;/strong&gt;; since no changes to the design nor to the expectations are permitted at that stage, the only team that is busy is the team building the solution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Once the build team reaches the ‘code complete’ stage, the built solution is handed off to the testing team&lt;/strong&gt;; the process waits while the testers examine the solution and if any defects or malfunctioning that are deemed as show-stoppers are found, the built solution is pushed into the queue, looping it back to the build team to fix the issues&lt;/li&gt;
&lt;li&gt;Finally, after obtaining the clearance from the testers and other stakeholders, &lt;strong&gt;the operations team releases the solution to production&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Once in production, the &lt;strong&gt;SRE specialists take over and are running the system&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Why abandon/revise the waterfall model?&lt;/h2&gt;
&lt;p&gt;Software development industry at large seems to lean aggressively toward abandoning the above described waterfall model. What are the reasons for such abandonment?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Slow in the making&lt;/strong&gt;: waterfall increments take time. Significant effort is needed at each stage of the game. Long stretches of time needed to complete each stage create large overheads necessary to coordinate, synchronize and manage the teams.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meagre utilization&lt;/strong&gt;: each gated phase takes significant time to complete while blocking all other teams from working on the solution. While teams responsible for opportunity selection are working hard on identifying and prioritizing useful opportunities, business analysts, architects, designers, coders, testers, sysadmins, security specialists, SREs etc. are idling. As the process moves from one gated phase to another, upstream and downstream teams remain underutilized, waiting for their turn to do something useful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unrealistic expectations&lt;/strong&gt;: time waits for no one, and while initially it may have seemed that identified opportunities have the potential to strengthen company’s position on the market, if the organization runs on sluggish processes the shift in the market and political climate is at danger of going unnoticed. By the time the organization finally releases the solution, chances are that it lags and the company may discover that the solution is inadequate, sometimes even harmful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insufficient quality&lt;/strong&gt;: betting the future on formulating the Big Plan Upfront means that the engineers claim they have all the knowledge necessary to correctly architect, design, implement and test the proposed solution. That is rarely the case and waiting until the very last moment to test the already built solution is not the optimal way to ensure technical excellence.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What are the alternatives to the waterfall model?&lt;/h2&gt;
&lt;p&gt;A stock answer is agile processes, but there are several stages of maturity in agile:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Simplest (or classic) agile&lt;/strong&gt;: combine the build and test gated phases into a single phase, run by a single team. Testers/security experts are not waiting on coders to get to the ‘code complete’ stage but are instead working side-by-side with the coders, helping with testing every diff.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile that removes the release silo&lt;/strong&gt;: combine the build, test, and release gated phases into a single phase run by a single team. Testers working side-by-side with coders while release specialists move into continuously releasing the tested diffs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile that includes designers as team members&lt;/strong&gt;: all the above specialists (coders, testers, release engineers) work together while also including designers into the team. That way, designers get to respond to the issues discovered by the coders and testers during the process of building and verifying.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile as DevOps&lt;/strong&gt;: the above team, consisting of designers, coders, testers, and release engineers, adds SREs and other operations specialists to the team. They all work together on issues discovered along the way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile as Feature Factory&lt;/strong&gt;: the above team begins tight collaboration with business engineers who work on creating and modifying the expectations. As the team moves forward and discovers issues with the current state of design, technical excellence etc., the team feeds the details back into the business engineers who adjust the expectations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile as Product Team with “mini CEO”&lt;/strong&gt;: The last remaining gated phase silo (&lt;strong&gt;Opportunity selection&lt;/strong&gt;) gets removed and the “mini CEO” becomes involved in the process of building the system. Selected opportunities are not cast in stone anymore but remain open to be examined by the “mini CEO” and reviewed to accommodate discovered market pressures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Product Team&lt;/strong&gt;: the entire team (i.e. the Whole Team) collaborates in real time on continually adding value to the organization. The team is actively engaged in seeking valuable opportunities and solving problems that arrive while attempting to provide automated systems that harvest identified opportunities.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ideally, the best results and the most optimal utilizations are achieved when the whole team starts together, works together, and finishes together.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="code"></category><category term="xp"></category></entry><entry><title>Lunch &amp; Learn - Revisiting Feature Flags</title><link href="https://wsbctechnicalblog.github.io/lunch-learn-revisiting-feature-flags.html" rel="alternate"></link><published>2021-05-07T00:00:00-07:00</published><updated>2021-05-07T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-07:/lunch-learn-revisiting-feature-flags.html</id><summary type="html">&lt;p&gt;Manage your blast radius through progressive exposure with feature flags&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have all been there. Minutes after releasing a new application feature, our support phone lines are flooded with calls from frustrated customers. Deploying new features to production can be risky business, especially when our goal is to always have delighted customers.&lt;/p&gt;
&lt;p&gt;What if we could progressively test and validate new features in production, with a small and focused group of early adopters? Would it not be phenomenal to fine-tune the customer’s experience of our product in production, or better, let our customer determine how and when to experience new features? Have we not wished we could revert our release with a flip of a switch as soon as we detect smoke?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="L&amp;amp;L" src="/images/lunch-learn-revisiting-feature-flags-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We believe in &lt;strong&gt;continuous learning&lt;/strong&gt;. Last week we hosted an Azure Pipeline workshop, attracting 74 humanoids from engineering, and this week Christine Ozeroff, Anthony Foli, and I hosted an interactive lunch &amp;amp; learn, to share experiences with Feature Flags, share the pros and cons, and unintentional misuse of feature flags.&lt;/p&gt;
&lt;p&gt;This is a crisp summary of the session.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Core theme&lt;/h1&gt;
&lt;h2&gt;WHY&lt;/h2&gt;
&lt;p&gt;With feature flags we have an option to continuously conduct experiments, progressively expose, test, enable and disable features, and pivot on the feedback … all in production. More importantly, we can separate deployments from releases, and release on demand. &lt;/p&gt;
&lt;p&gt;We have one of many ingredients that support a healthy DevOps mindset.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;DevOps is the union of PEOPLE, PROCESS and PRODUCTS to enable the continuous delivery of value to our CUSTOMERS.&lt;/em&gt;” - &lt;a href="https://donovanbrown.com/post/what-is-dev"&gt;Donovan Brown&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, Feature flags are one option to decouple feature  deployment from release, and fine-tune feature exposure, down to the individual user.&lt;/p&gt;
&lt;p&gt;When we look at Microsoft Edge and Azure DevOps, we notice another invaluable strategy. Preview features are deployed continuously and hidden by default. Users, like you and I, can  toggle the preview feature flags ourselves and manage our experience of the products. It empowers me, as the end-user, and delivers invaluable metrics to the engineering team. For example, which features are popular &lt;CR&gt; , and which are looked at, but &lt;CR&gt; reverted immediately.&lt;/p&gt;
&lt;h2&gt;WHAT&lt;/h2&gt;
&lt;p&gt;For Product Owners feature flags are an ON OFF switch. For Developers they are an IF ELSE programming construct.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WHAT are feature flags?&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHAT" src="/images/lunch-learn-revisiting-feature-flags-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;HOW&lt;/h2&gt;
&lt;p&gt;I urge everyone to pause, before jumping into the deep end and introducing feature flags in your solution. 
You need an understanding of feature flags, governance around usage, maintenance, and ownership.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt;? Because progressive exposure (aka feature flags) comes at a cost!&lt;/p&gt;
&lt;p&gt;By adding flags, we are adding technical debt to our code, increasing code and test paths as shown. We must steward a feature code path for the ON state and another for the OFF state, and a unit test for both. &lt;/p&gt;
&lt;p&gt;Make sure you understand the implications of flipping a feature flag, so that you can avoid the scars I have from previous feature flag implementations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/bharry/a-rough-patch/"&gt;A Rough Patch | Brian Harry's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/archive/blogs/visualstudioalmrangers/how-we-checked-and-fixed-the-503-error-and-performance-issue-in-our-azure-function"&gt;How we checked and fixed the 503 error and Performance issue in our Azure Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Protect your infrastructure from such unexpected processing surges, by using retry patterns, throttling patterns, and circuit breakers. See &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OUR FEATURE FLAG MANIFESTO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All feature flags must support the kill switch.&lt;/li&gt;
&lt;li&gt;Feature Flags are managed by Business, Security, &amp;amp; Quality Assurance … not development.&lt;/li&gt;
&lt;li&gt;Feature Flags are used to protect only production ready code.&lt;/li&gt;
&lt;li&gt;We favour software as a service over custom code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;To summarise the &lt;strong&gt;VALUE&lt;/strong&gt; of using feature flags …&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can ship code when you are ready.&lt;/li&gt;
&lt;li&gt;You can test your code in production.&lt;/li&gt;
&lt;li&gt;In case of an emergency, you can disable a feature.&lt;/li&gt;
&lt;li&gt;You can control your user’s experience or empower users to control their experience.&lt;/li&gt;
&lt;li&gt;And most importantly, you can experiment, learn, and adapt in production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you commit to feature flags, please ask yourself at least FIVE times, “WHY do we need feature flags?”&lt;/p&gt;
&lt;p&gt;Also, ensure you have an owner for your feature flag solution and associated feature flag configuration. Especially if it is a custom solution! &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember, feature flags are not free!&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Q&amp;amp;A&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Question" src="/images/lunch-learn-revisiting-feature-flags-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Here are a few of the questions we got during the lunch &amp;amp; learn, shared "as-is" in italic. Plus, the answer and/or my personal thoughts.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;QUESTION&lt;/th&gt;
&lt;th&gt;ANSWER / THOUGHT(S)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Feature flags should be short-lived?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Once a feature is released, the associated feature flag should be deprecated and removed from the system. Similarly, once we have completed an experiment and the associated hypothesis has been proven or disproven, the associated feature flag should be retired. &lt;br/&gt; &lt;br/&gt; I recommend the following: &lt;br/&gt; 1. If you do not need feature flags, do not use them! &lt;br/&gt; 2. If you use them, ensure they are short-lived! &lt;br/&gt; 3. Remove all traces of the feature flags from codebase as soon as possible!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;What is the development overhead for building feature flags? If i want to compare with the release overhead ..? I do understand Feature flags offer more flexibility. But the governance is very important.&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Adding feature flags and toggling feature flags is trivial. Managing feature flags and understanding dependencies is complex, yet pivotal to a healthy solution. It is difficult to quantify the overhead without more context, other than confirming that the overhead is a lot higher and complex, when building your own custom solution. You should not just ask what the overhead is when developing or using feature flag, but also what the overhead is when we release without feature flags to manage the blast radius of new features.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Should specific feature flags be deprecated later down the road if they are a permanent feature?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Feature Flags that represent a short- or long-term feature, should be deprecated as soon as possible. Feature Flags should not create a long-term bond with the feature(s) they represent. The longer you allow feature flags to camp in your code, the less likely it will be that engineering can remove them without risk, raising the likelihood that they will remain permanently, compounding your technical debt.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;So sounds like we would need to understand the feature flag configuration for any prod incidents, in case it was a factor in the incident? And then reproduce this config in test environments if we need to reproduce the problem for troubleshooting?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;This is part of the challenge of using feature flags. We need to know the exact state of all feature flags during an incident. It is vital evidence for a speedy remediation and root cause analysis during the infamous 2AM call we mention a couple of times in the &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; journey.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Could you give a brief example of how a circuit breaker would function if the need arose - ie. things go wrong after a FF switch is flipped?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;As discussed in &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; the hypothesis of the circuit breaker pattern is that the failed service call is likely to succeed if (and only if) it is automatically retried after a significant delay. If we flip a feature flag and our backend services are experience unexpected load, for example Active Directory is inundated with authentication requests, the circuit breaker can break the circuit (network connection), shield, and allow the backend services to recover.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;I think the worst case scenario is if a particular FF config creates a non-trivial data corruption issue which isn’t detected immediately?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Any data corruption is serious. If the act of flipping a feature flag results in data corruption, the kill switch is unlikely to bring any relief. Yes, this is a nightmare scenario, but not limited to feature flags.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;I am assuming no code should be sunset to the SRE group with any feature flags in it?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Feature Flags should be short-term, focused on preview features. They are not relevant when a solution enters sustainment, maintenance, or sunset mode. In my opinion, the site reliability engineers (SRE) should &lt;strong&gt;not&lt;/strong&gt; accepts a solution that harbours technical debt and stale feature flag logic. &lt;br/&gt; &lt;br/&gt; The only exception are long-lived operations and security feature flags, but only as an exception!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Why do you favour a SaaS solution?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;In 2005 I, and many other Microsoft MVPs, had immense fun installing the first versions of Team Foundation Server. It was a painstaking and mind-boggling experience, a drain on engineering resources, and an unrecoverable expense ... but it was fun, for a while. Yes, we had to understand every nut and bolt of the solution and quickly became TFS experts, which resulted in a few of us joining Microsoft. A win for TFS, but a loss for the engineering teams we left behind. Then came Azure DevOps, formerly known as VSO and VSTS, which opened our eyes to the value of Software as a Service (SaaS). No more installations, no more maintenance of hardware, no more patching, and automatic update of features every 3-weeks, &lt;br/&gt; &lt;br/&gt; The above-mentioned experience convinced me of the value of SaaS solutions. In the context of feature flags, it means we do not have to invest precious development and operational resources to build and maintain a solution that will grow with us - basic feature flag management, A/B testing, stale and dependency flag detection and management, metrics, reliability, scalability, ... the list goes on.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Session presentation thumbnails&lt;/p&gt;
&lt;p&gt;&lt;img alt="Thumbnails" src="/images/lunch-learn-revisiting-feature-flags-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Download" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/Revisiting-Feature-Flags-2021.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/bharry/a-rough-patch/"&gt;A Rough Patch | Brian Harry's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/archive/blogs/visualstudioalmrangers/how-we-checked-and-fixed-the-503-error-and-performance-issue-in-our-azure-function"&gt;How we checked and fixed the 503 error and Performance issue in our Azure Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/19/6/why-hypothesis-driven-development-devops"&gt;Why hypothesis-driven development is key to DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;What's the cost of feature flags?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;Summary of my publications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Events"></category><category term="devops"></category><category term="events"></category><category term="feature-flags"></category><category term="learning"></category></entry><entry><title>Enable Agile, Kanban, Scrum, or SAFe with Azure DevOps</title><link href="https://wsbctechnicalblog.github.io/agile-planning-choice.html" rel="alternate"></link><published>2021-05-05T13:13:00-07:00</published><updated>2021-05-05T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-05:/agile-planning-choice.html</id><summary type="html">&lt;p&gt;Use Azure Boards to visualise a variety of &lt;strong&gt;processes&lt;/strong&gt; using the &lt;strong&gt;Agile&lt;/strong&gt; process in a single Azure DevOps project.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you create an Azure DevOps project you must select Basic, Agile, Scrum, or CMMI as the process that all teams within the process will be working with. If you peruse the documentation you will read that Basic is the most lightweight, Scrum is the next most light-weight, Agile supports many Agile method terms, and Capability Maturity Model Integration (CMMI) supports formality. Give CMMI a miss and select &lt;strong&gt;Agile&lt;/strong&gt; as your process!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The choice is yours!&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigate DevOps through Waterfalls&lt;/a&gt; the agents of chaos (AoC) promote a healthy DevOps mindset, which is based on a set of &lt;a href="https://www.tactec.ca/devops-core-values/"&gt;core value&lt;/a&gt;, the script definition "&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.&lt;/em&gt;", by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;, and a strong push against talking about Agile DevOps.&lt;/p&gt;
&lt;p&gt;I am one of the agents of chaos, #13, and strongly believe that DevOps is a mindset, not dependent on Agile, not just about automation, and strengthened by people following a process. In this post, I would like to focus on the latter, process, and demonstrate that you can use whatever process or processes that enable your team(s), using &lt;a href="https://docs.microsoft.com/en-us/azure/devops"&gt;Azure DevOps&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let us compare the non-CMMI processes&lt;/h1&gt;
&lt;p&gt;Let us have a quick peek at these processes, within the scope of Azure DevOps (AzDO).&lt;/p&gt;
&lt;h3&gt;Basic&lt;/h3&gt;
&lt;p&gt;Choose Basic when your team wants the simplest model supported by AzDO. It uses a limited set of work item types, such as &lt;strong&gt;Issues&lt;/strong&gt;, &lt;strong&gt;Tasks&lt;/strong&gt;, and &lt;strong&gt;Epics&lt;/strong&gt; to track work and suits teams looking for a simple process or if you are focused on other AzDO services.&lt;/p&gt;
&lt;h3&gt;Scrum&lt;/h3&gt;
&lt;p&gt;Suitable for teams practicing Scrum, as defined by the &lt;a href="https://www.scrum.org/"&gt;Scrum organization&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Agile&lt;/h3&gt;
&lt;p&gt;Suitable for teams with an Agile planning mindset inspired by the &lt;a href="https://www.agilealliance.org/"&gt;Agile Alliance&lt;/a&gt;], increasing the set of work items to &lt;strong&gt;Epics&lt;/strong&gt;, &lt;strong&gt;Features&lt;/strong&gt;, &lt;strong&gt;User Stories&lt;/strong&gt;, &lt;strong&gt;Bugs&lt;/strong&gt;, &lt;strong&gt;Tasks&lt;/strong&gt;, and &lt;strong&gt;Issues&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Agile Planning" src="/images/agile-planning-choice-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What about Kanban and SAFe?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Kanban&lt;/strong&gt;, which stands for signboard or billboard in Japanese), is based on a scheduling system for lean manufacturing, just-in-time manufacturing (JIT), and suitable for teams focused on operations. There is no out-of-the-box process for Kanban. Depending on the work item types you are looking for, you can use either the Basic, Scrum, or Agile AzDO process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SAFe&lt;/strong&gt;, aka Scaled Agile Framework, comes in a variety of flavours, such as Essential, Large Solution, Portfolio, and Full. As with Kanban, there is no out-of-the-box process, but you can use the Agile process, with a few work item type customisation, and extensions such as &lt;a href="https://solidify.dev/products/scaleX"&gt;@Scale&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Setting up a demo environment&lt;/h1&gt;
&lt;p&gt;We opted to create a demo environment on Azure DevOps, to help us with Agile planning workshops and to demonstrate the support for Agile, Kanban, and SAFe. Let us know if you are interested in the customisations we made to the Agile process, as I will focus on visualisation in this post.&lt;/p&gt;
&lt;h2&gt;Iterations&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Iterations&lt;/strong&gt; project configuration is the magic dust that allows us to create &lt;strong&gt;one&lt;/strong&gt; AzDO project to demonstrate an  &lt;strong&gt;Agile&lt;/strong&gt;, &lt;strong&gt;Kanban&lt;/strong&gt;, and &lt;strong&gt;SAFe&lt;/strong&gt; experience.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each program increments (PI) is made up of five two-week iterations&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agile Planning" src="/images/agile-planning-choice-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Kanban Board&lt;/h2&gt;
&lt;p&gt;I will start with Kanban, which is close my heart, and helps us visualise our work, limit work in progress, focus on flow, and continuously improve our process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kanban Board&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agile Planning" src="/images/agile-planning-choice-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, the Kanban Board, aka View as Board, is available in all projects and their teams, irrespective of which process was chosen when creating the AzDO project.&lt;/p&gt;
&lt;p&gt;You will notice that we are using &lt;strong&gt;FIRE&lt;/strong&gt;, &lt;strong&gt;FiXED&lt;/strong&gt;, and &lt;strong&gt;STANDARD&lt;/strong&gt; swimlanes to track different type of work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FIRE&lt;/strong&gt; tracks work where someone's hair is on fire and the issue(s) needs a root cause analysis and resolution posthaste.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FiXED&lt;/strong&gt; tracks work which must be completed during a predefined iteration or completed by a specific date, based on business, compliance, or other team plans. Although we are a team with a Kanban mindset, we support other mindsets and dependencies. You guessed right; we use program increments, iterations, and tags to track the WHEN.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STANDARD&lt;/strong&gt; tracks our standard work, with a focus on finishing and getting things done with quality.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice the Kanban, Scrum, Agile, and SAFe DNA in the way we track our work?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Plan View a la Agile&lt;/h2&gt;
&lt;p&gt;For Agile I would like to showcase two views, starting with the &lt;strong&gt;Portfolio View&lt;/strong&gt; useful to visualise a top-down view of your backlog and associated work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Portfolio Plan&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agile Planning" src="/images/agile-planning-choice-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The other view is &lt;strong&gt;Plans&lt;/strong&gt;, which is currently in Preview. It allows you to visualise work for multiple work item types and teams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plans&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agile Plans" src="/images/agile-planning-choice-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also has handy visual cues when work items have &lt;strong&gt;unhealthy&lt;/strong&gt; dependencies, as in this example where the successor must be completed before the predecessor ... back to the future?!?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plans with unhealthy dependencies&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pland Unhealthy Liks" src="/images/agile-planning-choice-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also allows you to click on cards with dependencies to see visual lines of the actual dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plans with dependency links&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plans Dependency Links" src="/images/agile-planning-choice-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is missing at the time of this writing, hint hint Microsoft, are visual cues of which cards have &lt;strong&gt;healthy&lt;/strong&gt; dependencies, so that we do not have to click through dozens of cards to find them!&lt;/p&gt;
&lt;h2&gt;Plan View a la SAFe&lt;/h2&gt;
&lt;p&gt;OK, we demonstrated that we could use the same team to host teams with a Kanban and an Agile mindset and visualise their work. What about SAFe?&lt;/p&gt;
&lt;p&gt;Let us use another illustration to speak a few words for us.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plans showing portfolio, program, and team levels&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plans SAFe" src="/images/agile-planning-choice-8.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the same Plans view, we can visualise the portfolio, program, and team backlogs, using three teams. The Portfolio team is not mapped to any increments, the Program team is mapped to the program increments, and the Teams are mapped to iterations, allowing us to visualise the entire backlog in three different sub-views.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope this quick glimpse into our Azure DevOps based demo project, demonstrates that you can use the &lt;strong&gt;product&lt;/strong&gt; to visualise a variety of &lt;strong&gt;processes&lt;/strong&gt; using the &lt;strong&gt;Agile&lt;/strong&gt; process in a single AzDO project. There are a number of views we have not covered, such as the backlog view, taskboard, Feature timeline, and Epic Roadmap. Explore &lt;a href="https://azure.microsoft.com/en-us/services/devops/boards/"&gt;Azure Boards&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;For the sceptics, I will conclude with the complete backlog with the test data, from the one and only backlog within the AzDO project, which we viewed through different team/area path lenses.&lt;/p&gt;
&lt;p&gt;Thanks for listening.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Above mentioned TEST DATA (CSV) - FYI&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Work&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Assigned&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Area&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="mi"&gt;267244&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;Advertising&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;267245&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Digital&lt;/span&gt; &lt;span class="n"&gt;Marketing&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;267246&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Television&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Radio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;267248&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Winter&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Spring&lt;/span&gt; &lt;span class="n"&gt;Direct&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;267249&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Spring&lt;/span&gt; &lt;span class="n"&gt;Brochures&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;267250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Flyers&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268503&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Authentication&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268504&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Profiling&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268505&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Matches&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268506&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt; &lt;span class="n"&gt;Tracking&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268508&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Successful&lt;/span&gt; &lt;span class="n"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268509&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt; &lt;span class="n"&gt;Sign&lt;/span&gt; &lt;span class="n"&gt;On&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268510&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Registration&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;Uploading&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268513&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt; &lt;span class="n"&gt;Resume&lt;/span&gt; &lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268514&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Manage&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268515&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;External&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268517&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Match&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Positions&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268518&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Positions&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268519&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Apply&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268520&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Manage&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268522&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Manage&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268524&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MOBILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;268527&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;share&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;trying&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;sign&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;268548&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Verify&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;DEPENDENCY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;268605&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Verify&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Phone&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;268606&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;
&lt;span class="mi"&gt;268607&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="nb"&gt;sign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;sign&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;
&lt;span class="mi"&gt;268608&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Facebook&lt;/span&gt; &lt;span class="nb"&gt;sign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;sign&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;
&lt;span class="mi"&gt;268609&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="nb"&gt;sign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;sign&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;
&lt;span class="mi"&gt;268741&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="n"&gt;successfully&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
&lt;span class="mi"&gt;268746&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;intimated&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="n"&gt;Expires&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;BLOCKER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt;
&lt;span class="mi"&gt;268760&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;PRIORITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;
&lt;span class="mi"&gt;268761&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;wants&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Upload&lt;/span&gt; &lt;span class="n"&gt;PDF&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;
&lt;span class="mi"&gt;268762&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;wants&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Upload&lt;/span&gt; &lt;span class="n"&gt;Docx&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;
&lt;span class="mi"&gt;268770&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Employment&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt;
&lt;span class="mi"&gt;268775&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Education&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
&lt;span class="mi"&gt;268929&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Spring&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Summer&lt;/span&gt; &lt;span class="n"&gt;Issues&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Magazines&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268930&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Winter&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Spring&lt;/span&gt; &lt;span class="n"&gt;Newsletters&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268931&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Winter&lt;/span&gt; &lt;span class="n"&gt;Social&lt;/span&gt; &lt;span class="n"&gt;Media&lt;/span&gt; &lt;span class="n"&gt;Marketing&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268932&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Winter&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="n"&gt;Marketing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;online&lt;/span&gt; &lt;span class="n"&gt;newsletters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268933&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt; &lt;span class="n"&gt;Optimization&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268934&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt; &lt;span class="n"&gt;Marketing&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268936&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Television&lt;/span&gt; &lt;span class="n"&gt;Ad&lt;/span&gt; &lt;span class="n"&gt;Campaign&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Spring&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Summer&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268937&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Radio&lt;/span&gt; &lt;span class="n"&gt;Ad&lt;/span&gt; &lt;span class="n"&gt;Campaigns&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Spring&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Summer&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268939&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Shortlist&lt;/span&gt; &lt;span class="n"&gt;Postal&lt;/span&gt; &lt;span class="n"&gt;Codes&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt; &lt;span class="n"&gt;marketing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268940&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Communicate&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;align&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Canada&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;coordinate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;mails&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;respective&lt;/span&gt; &lt;span class="n"&gt;postal&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Resolved&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268941&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Decide&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;monthly&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268942&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Design&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268943&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268944&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;monthly&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Canada&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;distribution&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268945&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Decide&lt;/span&gt; &lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Posts&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Facebook&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;weeks&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268946&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Analyze&lt;/span&gt; &lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;Audience&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268959&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Check&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="n"&gt;Algorithm&lt;/span&gt; &lt;span class="n"&gt;Update&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268960&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Track&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt; &lt;span class="n"&gt;Ranking&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268961&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Keywords&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;adWords&lt;/span&gt; &lt;span class="n"&gt;Campaign&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268963&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Change&lt;/span&gt; &lt;span class="n"&gt;Social&lt;/span&gt; &lt;span class="n"&gt;Media&lt;/span&gt; &lt;span class="n"&gt;Cover&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268964&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;Monthly&lt;/span&gt; &lt;span class="n"&gt;Newsletter&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;XXX&lt;/span&gt; &lt;span class="mi"&gt;202&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268965&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s new Features,,New,,zDemo_Agile_Planning\Agile Kanban,zDemo_Agile_Planning\PI 20\Iteration 98&lt;/span&gt;
&lt;span class="mi"&gt;268967&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Try&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268968&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="n"&gt;Plan&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;TV&lt;/span&gt; &lt;span class="n"&gt;Campaign&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;summer&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268969&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="n"&gt;Errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Kanban&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268972&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;268975&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Deploy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Prod&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;269262&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Flights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;269263&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt; &lt;span class="n"&gt;Tickets&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;269264&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Manage&lt;/span&gt; &lt;span class="n"&gt;Upgrades&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;269265&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Check&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;flights&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;269266&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Improve&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;269275&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Promotion&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Rewards&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;269918&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;Skill&lt;/span&gt; &lt;span class="n"&gt;sets&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
&lt;span class="mi"&gt;272948&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;272965&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;LinkedIn&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;272966&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Indeed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;272977&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;Automatically&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; (latest) profiles ,,New,,zDemo_Agile_Planning\Agile Standard,zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;272978&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;Automatically&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;specific&lt;/span&gt; &lt;span class="n"&gt;criteria&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;272982&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Industry&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;272983&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;employer&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;272988&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;273016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;intimate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;employer&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;273019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;confirmation&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;applicant&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;applied&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;273022&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;employer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;shortlist&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;various&lt;/span&gt; &lt;span class="n"&gt;applications&lt;/span&gt; &lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;273030&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Employer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;invite&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;interview&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;273033&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;employer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;hired&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;necessary&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;273035&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Job Search Portal would like the employer to be able to Reject a Job application, as necessary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;273036&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Job Search Portal would like the employer to be able to save a Job application for later, as necessary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;
&lt;span class="mi"&gt;274602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;Criteria&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;274603&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;UX&lt;/span&gt; &lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274604&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Resolved&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;274605&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Resolved&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MOBILE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;WEB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="mi"&gt;274606&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Price&lt;/span&gt; &lt;span class="n"&gt;Change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Resolved&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;DEPENDENCY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274607&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;Change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Resolved&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274608&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Change&lt;/span&gt; &lt;span class="n"&gt;Connecting&lt;/span&gt; &lt;span class="n"&gt;Flights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274609&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;BLOCKER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274610&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Review&lt;/span&gt; &lt;span class="n"&gt;Flight&lt;/span&gt; &lt;span class="n"&gt;Details&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;274611&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Registration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274612&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274613&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Authentication&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Check&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274614&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Communication&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274616&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Newsletters&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274617&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Airline&lt;/span&gt; &lt;span class="n"&gt;Miles&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274618&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Membership&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274619&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;Care&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="mi"&gt;274620&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feedback&lt;/span&gt; &lt;span class="n"&gt;Mechanisms&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="mi"&gt;274621&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cancellations&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Refund&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274622&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Analytics&lt;/span&gt; &lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274853&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I want to be able to search any flight from a particular city to another for a date range&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="mi"&gt;274854&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I want to be able to choose either one way or Return (two way) flights&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274855&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As I user, I want to be able to search flights for multiple passengers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;274887&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a User, I should be able to filter the flights by time of departure and time of arrival at the destination &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;274891&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I want to see the search results page with filters so that I can easily choose my desired flight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;274892&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to see a clean landing page/homescreen where I can easily add details of my travel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;274893&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I want the site to be simple and intuitive, without overcrowding the screen with unnecessary information&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Resolved&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;BLOCKER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274894&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to view the flights in order of lowest to highest fares&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274895&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to order the flights that are direct on the top and then with the increasing number of connecting flights &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;
&lt;span class="mi"&gt;274897&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to be informed of cheapest fares 2 days before and after my travel date, so that I can alter my plan if needed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Resolved&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
&lt;span class="mi"&gt;274898&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to be notified if the current lowest fare changes so that I can always be informed of price changes &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;274899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to be informed if I have a chance to get a free upgrade to a higher class &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;DISCUSSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
&lt;span class="mi"&gt;274900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to be notified if there are discounts or offers running for class upgrades &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;
&lt;span class="mi"&gt;274902&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to be notified if my connecting flight on a booked itinerary changes &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;274903&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to be able to add a connecting flight from my arrival destination &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;
&lt;span class="mi"&gt;274910&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to be able to change the connecting flight to a different stop, with necessary price changes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;
&lt;span class="mi"&gt;274930&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like the option of continuing to make a booking in &amp;quot;&amp;quot;Guest Mode&amp;quot;&amp;quot; so that I can book a ticket without signing in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt;
&lt;span class="mi"&gt;274931&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a user, I would like to sign in with my credentials so I can maintain a history of my travel bookings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;
&lt;span class="mi"&gt;274933&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a Stakeholder, we would like to collect passenger booking details through &amp;quot;&amp;quot;Guest Mode&amp;quot;&amp;quot; so we can establish contact with them in the future&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
&lt;span class="mi"&gt;274982&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a User, I would like to be able to select the flight option that I see in the Search List &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;
&lt;span class="mi"&gt;274983&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a User, I would like to review the flight details before proceeding to payment &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;
&lt;span class="mi"&gt;274984&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a User, I would like to view baggage and any policies with respect to my selection in my &amp;#39;cart&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
&lt;span class="mi"&gt;274987&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a User I would like to have a smooth and easy way of making an online payment, so that I can get through my transaction without hassles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;274989&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a User, I would like to have multiple payment choices like Credit/Debit card, Paypal etc. to make my payment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;
&lt;span class="mi"&gt;274990&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;As a User, I should be given the option of saving my card details for easy payments in future&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Teams&lt;/span&gt;\&lt;span class="n"&gt;Team&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;
&lt;span class="mi"&gt;275014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;275015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Phone&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;275016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;sending&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;275017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;Fields&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;275018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;Backend&lt;/span&gt; &lt;span class="n"&gt;Tables&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;recording&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;Closed&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;Agile&lt;/span&gt; &lt;span class="n"&gt;Standard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="mi"&gt;275020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;recognize&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s credentials,,Closed,,zDemo_Agile_Planning\Agile Standard,zDemo_Agile_Planning\PI 20\Iteration 99&lt;/span&gt;
&lt;span class="mi"&gt;277681&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Epic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Airline&lt;/span&gt; &lt;span class="n"&gt;Vendor&lt;/span&gt; &lt;span class="n"&gt;Management&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="n"&gt;SAFe&lt;/span&gt;\&lt;span class="n"&gt;Portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zDemo_Agile_Planning&lt;/span&gt;\&lt;span class="bp"&gt;PI&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;\&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category></entry><entry><title>Quick Reference Sheet for Application-type Blueprint-based Pipelines</title><link href="https://wsbctechnicalblog.github.io/moving-hundreds-of-pipeline-snowflakes-qr-2.html" rel="alternate"></link><published>2021-04-30T00:00:00-07:00</published><updated>2021-04-30T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-30:/moving-hundreds-of-pipeline-snowflakes-qr-2.html</id><summary type="html">&lt;p&gt;Summarising the main points of our 2nd generation app-type blueprint-based pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quick Reference Posters help us foster collaboration, visualise and get across key points for specific topics. They also serve as handy cheat sheets :)&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;YAML Application-type Blueprint-based Pipeline Quick Reference&lt;/p&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-2-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The quick reference poster introduces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Left-hand side, introduces our app-type specific starter template, which is the only part engineers have to copy-paste into their application repository to get started, as well as a list of optional parameters we can pass to the extended template.&lt;/li&gt;
&lt;li&gt;In the centre of the poster, is an extract from our universal artifact app-type specific continuous integration (CI) / build template, which optionally includes the continuous deployment (CD) template once done.&lt;/li&gt;
&lt;li&gt;On the right-hand side, is an extract from our universal artifact app-type specific continuous deployment (CD) / release template. Note the flow variable, which is a strategy we covered in &lt;a href="/sharing-variables-amongst-agents.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/multi-stage-blueprint-based-2nd-gen-pipelines-poster.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enjoy and remember that we crave candid feedback to sprinkle value over these artifacts!&lt;/p&gt;
&lt;p&gt;| &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-1.html"&gt;POSTER 1&lt;/a&gt; | POSTER 2 (this ) |&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="posters"></category><category term="x-as-code"></category></entry><entry><title>Introducing the Automation Working Group</title><link href="https://wsbctechnicalblog.github.io/automation-working-group.html" rel="alternate"></link><published>2021-04-29T00:00:00-07:00</published><updated>2021-04-29T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-29:/automation-working-group.html</id><summary type="html">&lt;p&gt;Any system operation we can perform manually can be fully automated by writing scripts&lt;/p&gt;</summary><content type="html">&lt;p&gt;The only reason we make changes to the software is to be able to test the hypothesis. No one makes any changes to software just because they’re bored, or to show signs of inane activity. Changing the software behaviour/functionality is a very risky business, and we must have a very good reason for doing so.&lt;/p&gt;
&lt;p&gt;Once the behaviour of the software has changed, it cannot be tested for usefulness unless it gets deployed to production. Without deploying changed software to production, our jobs would be meaningless.&lt;/p&gt;
&lt;p&gt;Knowing that, we furthermore realize that the true measure of software quality is frequency of deployments. The more frequently we deploy changed software to production, the better the chances that we will improve the quality of software.&lt;/p&gt;
&lt;h2&gt;How to expedite frequency of deployment?&lt;/h2&gt;
&lt;p&gt;The accidental complexity of modern computing platforms is nothing short of staggering. To develop, configure and deploy fully functional software products to the cloud requires many intricate steps. Each of those steps requires high level of expertise.&lt;/p&gt;
&lt;p&gt;It is therefore a small wonder that the process of deployment could get so involved and convoluted that it takes a lot of time from the moment changed software gets approved to the moment when we see approved changes in production. And the longer it takes to deploy changed software to production, the worse off we are in terms of value delivery.&lt;/p&gt;
&lt;h2&gt;Is there a way to expedite this process?&lt;/h2&gt;
&lt;p&gt;In a word – yes. The tried and tested way is to focus on &lt;strong&gt;automation&lt;/strong&gt;. There are many manual tasks, steps and chores that can be reliably automated. With such automation we not only shorten the time it takes to deploy to production; we also increase the quality by reducing the chances of human errors.&lt;/p&gt;
&lt;p&gt;In addition, we remove waste by increasing the testability of the automated process. It’s a win-win situation where tedious and error-prone manual chores get replaced by air-tight automated scripts, leaving human operators with more time to devote to improving processes that cannot possibly be automated.&lt;/p&gt;
&lt;h2&gt;How to automate repetitive tasks?&lt;/h2&gt;
&lt;p&gt;In the olden days, when most of software developers worked in isolation, we had a specialized role called sysadmin. I remember in my younger days chatting with sysadmins and enquiring about their work. One sysadmin colleague told me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Have you experienced times when you were forced to perform a long, arduous and complex task on the command line and couldn’t wait to get to the end of job?”&lt;/p&gt;
&lt;p&gt;To which I replied:&lt;/p&gt;
&lt;p&gt;“Yes, for sure, I think everyone went through that, one time or another. Those are extremely unpleasant situations where I feel like I’m walking on eggshells which makes me very apprehensive of every step I make.”&lt;/p&gt;
&lt;p&gt;“There you go.” replied my colleague. “You have just described what my job is. My job is to make sure you never again go through such a trying experience. What I do is I write scripts that automate all the steps you were taking so gingerly. My goal is to make sure you never ever have to go through the same unpleasant and unnerving experience.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One lesson I learned from my sysadmin coworkers is that almost everything we need to do on a computer will need to be done again. Maybe later the same day, maybe the next day, maybe the next month, but for sure sometime in the future. There are no one-off operations on the computer.&lt;/p&gt;
&lt;p&gt;That lesson stuck with me. And helped me fully understand the importance of automation.&lt;/p&gt;
&lt;p&gt;So, when it comes to automation, the most common way to automate manual tasks we do on a computer is to write scripts.&lt;/p&gt;
&lt;p&gt;Of course, the first thing a trained computer programmer will ask is: why use scripts when we can automate by writing computer programs? A canned answer to that question is: we need a way to tell computers what we want them to do, and in that regard scripts (be it PowerShell scripts or Bash scripts etc.) are no different than compiled binary code.&lt;/p&gt;
&lt;h2&gt;Why is the ability to write scripts essential?&lt;/h2&gt;
&lt;p&gt;We all use computers daily, and we operate them either by mousing around the GUI or by typing commands on the command line. As mentioned above, pretty much none of those tasks we do are ever one-off tasks. We will have to repeat those tasks later in our daily work. Such repetition is not only counter-productive, it is risky as it brings with it the inevitable human error (oftentimes referred to as the ‘fat fingers errors’).&lt;/p&gt;
&lt;p&gt;It is therefore very desirable to gain skills in automating repetitive, tedious tasks by declaring them in a script.&lt;/p&gt;
&lt;p&gt;Today, as we’ve progressed from the old-fashioned siloed separation of programmers from system operations, we are enjoying the benefits of the DevOps culture and the DevOps mindset. There are no more demarcation lines drawn between teams that develop software and teams that deliver and operate that software. In addition to knowing how to develop software, we must learn how to operate it by automating everything that is possibly automatable. We cannot rely anymore on the expertise of sysadmins, for the simple reason – we are now sysadmins!&lt;/p&gt;
&lt;h2&gt;WSBC Automation Working Group&lt;/h2&gt;
&lt;p&gt;Seeing how crucially important the ability to automate repetitive and error-prone tasks is to our organization, I have decided to form a task force that will focus on raising the bar when it comes to automating critical processes. The working group is presently in the process of formation and early discussions around formulating the charter and the agenda.&lt;/p&gt;
&lt;p&gt;In addition to focusing on finding the biggest bang for the buck/lowest hanging fruit to be tackled for automation, the Automation Working Group will also make plans for hands-on workshops. We are planning to learn the ins and outs of shell scripting by engaging in mob programming sessions.&lt;/p&gt;
&lt;p&gt;I am excited about this initiative, as I think it can truly help us move the needle and speed up our delivery.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="automation"></category><category term="code"></category><category term="devops"></category><category term="learning"></category><category term="workflow"></category></entry><entry><title>Azure DevOps Experimentation - YAML Conditionals, Parameters, and Triggers</title><link href="https://wsbctechnicalblog.github.io/experiment-yaml-1.html" rel="alternate"></link><published>2021-04-28T13:13:00-07:00</published><updated>2021-04-28T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-28:/experiment-yaml-1.html</id><summary type="html">&lt;p&gt;Snippets of common questions and issues from Azure Pipeline workshops and support calls. Today's snippet includes conditionals, parameters, and triggers.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you are an avid user of the YAML-based Azure Pipelines, you will be aware that the language can be very pedantic when it comes to too many or too few spaces. In fact, we have been mulling over a broken pipeline for (what felt like) hours, only to realise that we were misaligned by &lt;strong&gt;one&lt;/strong&gt; space. Fortunately, both the YAML editor in both Azure DevOps and Visual Studio Code, as well as the &lt;strong&gt;Validate&lt;/strong&gt; features are continuously improving.&lt;/p&gt;
&lt;p&gt;Let us park the spaces topic and focus on conditionals, parameters, and triggers, using this simple sample code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Experimentation Sample Code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt;

&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Branch Name&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;
  &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rElEaSe&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ReLeAsE&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;master&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;

&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bingo!&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;keyFinal&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyTest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Welcome&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Referencing&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyTest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;

&lt;span class="c1"&gt;# Run-time Parameters&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="c1"&gt;# Lower&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;release&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Bingo&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="c1"&gt;# Release only&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Triggers&lt;/h1&gt;
&lt;p&gt;You can configure a trigger to fire &lt;strong&gt;manually&lt;/strong&gt;, &lt;strong&gt;never&lt;/strong&gt;, or as &lt;strong&gt;changes&lt;/strong&gt; are made to selected branches, tags, and folders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Learning" src="/images/experiment-yaml-1-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;If you remove the trigger all together, the pipeline will be triggered if &lt;strong&gt;any&lt;/strong&gt; change is made to any &lt;strong&gt;folder&lt;/strong&gt; or &lt;strong&gt;branch&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;If you want to have a &lt;strong&gt;manually&lt;/strong&gt; triggered pipeline, you must configure &lt;code&gt;- none&lt;/code&gt;, as in today's sample code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema#triggers"&gt;Triggers&lt;/a&gt; for details.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Parameters&lt;/h1&gt;
&lt;p&gt;You can use parameters in templates and pipelines, as visualised on our &lt;a href="https://wsbctechnicalblog.github.io/moving-hundreds-of-pipeline-snowflakes-qr-1.html"&gt;YAML Generic Blueprint-based Pipeline Quick Reference&lt;/a&gt; and documented in detail in the &lt;a href="https://aka.ms/YAML"&gt;YAML Schema&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Learning" src="/images/experiment-yaml-1-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Parameter key:value pairs are evaluated at &lt;strong&gt;queue&lt;/strong&gt; time.&lt;/li&gt;
&lt;li&gt;You can define a pipeline parameter, as in the sample code above.&lt;/li&gt;
&lt;li&gt;When you run the sample pipeline, you can select from the available values, as shown:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Run pipeline" src="/images/experiment-yaml-1-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema#parameters"&gt;Parameters&lt;/a&gt; for details.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Variables&lt;/h1&gt;
&lt;p&gt;You can add static values, reference variable groups, or insert  variable templates into your pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Learning" src="/images/experiment-yaml-1-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Variable key:value pairs are evaluated at &lt;strong&gt;run&lt;/strong&gt; time.&lt;/li&gt;
&lt;li&gt;Echo 1 is boring, but we must say hello!&lt;/li&gt;
&lt;li&gt;Echo 2 displays the value of &lt;strong&gt;keyTest&lt;/strong&gt;, which was set to the same value as &lt;strong&gt;keyRef&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;Output:&lt;strong&gt;keyFinal&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Echo 3 is the one that is a bit more interesting. It is changed to $(keyFinal) at queue time, which demonstrates a rudimentary use of &lt;strong&gt;reference&lt;/strong&gt; values. I had to write and run the sample to get my head around the code - try it yourself! &lt;blockquote&gt;
&lt;p&gt;Output: &lt;strong&gt;Bingo!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema#variables"&gt;Variables&lt;/a&gt; for details.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Conditionals&lt;/h1&gt;
&lt;p&gt;Lastly, conditions can be used to determine whether tasks should execute or if code or entire template are injected into the pipeline at queue time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Learning" src="/images/experiment-yaml-1-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# Lower&lt;/code&gt; demonstrates how to include tasks if certain conditions are met. In our sample, we check if the selected &lt;code&gt;parameters.branch&lt;/code&gt; is equal to 'release'. If yes, Bingo!&lt;/li&gt;
&lt;li&gt;Note how we convert the parameter to lowercase before doing the comparison, so that any combination of casing for &lt;code&gt;release&lt;/code&gt; will meet the condition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release only&lt;/code&gt; demonstrates how to include tasks if and only if the origin source branch matches &lt;code&gt;refs/heads/release&lt;/code&gt; or starts with &lt;code&gt;refs/heads/release/&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We make extensive use of conditions in our blueprints and re-usable toolkit templates. &lt;/p&gt;
&lt;p&gt;See &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions"&gt;Expressions&lt;/a&gt; for details.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We are done for today. &lt;/p&gt;
&lt;p&gt;Hope these snippets are adding value and looking forward to your candid feedback. See you in the next experiment.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>How to share variables amongst Azure Pipeline agents</title><link href="https://wsbctechnicalblog.github.io/sharing-variables-amongst-agents.html" rel="alternate"></link><published>2021-04-26T00:00:00-07:00</published><updated>2021-04-26T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-26:/sharing-variables-amongst-agents.html</id><summary type="html">&lt;p&gt;As per documentation, output variables can be used across stages in an Azure YAML-based pipeline. I will share a few turbulent moments we experienced while troubleshooting this feature in one of our pipeline blueprints.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Azure Pipelines have evolved at a blistering pace during the past 2-3 years. Features we dreamt of, like passing variables between &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/stages?view=azure-devops&amp;amp;tabs=yaml"&gt;stages&lt;/a&gt;, was a big NO-NO in 2019. We had to use convoluted workarounds to save variables to storage and reloading them in the upstream stages. Not supportive of our goal for simplicity. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Opportunity leads to requirement&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Breaking News" src="/images/sharing-variables-amongst-agents-2.png"&gt;
In May 2020, the following release notes created excitement: "&lt;em&gt;Output variables may now be used across stages in a YAML-based pipeline.&lt;/em&gt;"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This opened exciting opportunities for us, such as retrieving the solution's semantic version using the &lt;a href="https://github.com/GitTools"&gt;GitTools&lt;/a&gt;, and sharing it with upstream stages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our git-tools-git-version.yml template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;versionSpec&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;useConfigFile&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;boolean&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;configFilePath&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;boolean&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;updateAssemblyInfoFilename&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;useConfigFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useConfigFile&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;configFilePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;               &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configFilePath&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;updateAssemblyInfoFilename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfoFilename&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a visual of our hypothetical pipeline. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Core issue - pass versionToolkit variable from CI to CD stages&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline ownership" src="/images/sharing-variables-amongst-agents-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We retrieve the semantic version using the git-tools-git-version.yml template in our &lt;strong&gt;ContinuousIntegration&lt;/strong&gt; (CI) stage. Now that we can share the version with our continuous deployment (CD) pipeline stages, we have a requirement to pass the version for tasks, such as updating a Universal Artifact, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Publish Universal Artifact using the version&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;          &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Toolkit&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
              &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Create_DV_Universal_Package&lt;/span&gt;
              &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
                &lt;span class="nl"&gt;publishDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;
                &lt;span class="nl"&gt;feedsToUsePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
                &lt;span class="nl"&gt;vstsFeedPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageFeedPublish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nl"&gt;vstsFeedPackagePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStagePackagePublish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nl"&gt;versionOption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
                &lt;span class="nl"&gt;versionPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;versionToolbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Setting the versionToolbox Variable&lt;/h1&gt;
&lt;p&gt;After retrieving the semantic version, we run an inline PowerShell Core script to create an output variable, called &lt;strong&gt;versionToolkit&lt;/strong&gt;, in the &lt;strong&gt;ContinuousIntegration&lt;/strong&gt; stage.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create Development stage-specific versionToolkit version&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
      &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setToolkitVersion&lt;/span&gt;
      &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set Toolkit Version&amp;quot;&lt;/span&gt;
      &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=versionToolkit;isOutput=true]$(GitVersion.MajorMinorPatch)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we move to the &lt;strong&gt;Development&lt;/strong&gt; stage and create a stage variable, which is set to the value of versionToolkit calculated in the &lt;strong&gt;ContinuousIntegration&lt;/strong&gt; stage.&lt;/p&gt;
&lt;p&gt;As per documentation, the output variables are produced by steps inside of jobs and the format of the dependency variable is: &lt;strong&gt;stageDependencies.\&amp;lt;stageName&gt;.\&amp;lt;jobName&gt;.outputs['\&amp;lt;stepName&gt;.\&amp;lt;variableName&gt;']&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create &lt;strong&gt;Development&lt;/strong&gt; stage-specific versionToolkit version&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;Development&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;versionToolkit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setToolkitVersion.toolkitVersion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In our case the originating stage and job share the same name &lt;strong&gt;ContinuousIntegration&lt;/strong&gt;, hence the ...ContinuousIntegration.ContinuousIntegration... repetition.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;versionToolkit&lt;/strong&gt; version is then passed to the deployment steps, such as the Universal Artifact update task mentioned earlier on. &lt;/p&gt;
&lt;p&gt;The relatively simple solution works like a charm :)&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Frustration reigns&lt;/h1&gt;
&lt;p&gt;Next we move to the &lt;strong&gt;Production&lt;/strong&gt; stage and implement the same (identical) logic.&lt;/p&gt;
&lt;p&gt;Unfortunately, we get an empty &lt;strong&gt;versionToolkit&lt;/strong&gt; variable. &lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY" src="/images/sharing-variables-amongst-agents-3.png"&gt;
Why is the version not flowing, as expected?&lt;/p&gt;
&lt;p&gt;I dabbled with several options, such as passing the variable from stage to stage. While some worked with normal jobs, they crumbled with the use of &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/deployment-jobs?view=azure-devops"&gt;Deployment Jobs&lt;/a&gt;, and failed our simplicity rule. A few trying stories for another day.&lt;/p&gt;
&lt;p&gt;Back to our &lt;strong&gt;production&lt;/strong&gt; stage.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Production&lt;/strong&gt; Stage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;Production&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;SecurityScans&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;SecurityReview&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;versionToolbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setToolkitVersion.versionToolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productionStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;Production&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Can you spot the issue?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;After rain comes sunshine&lt;/h1&gt;
&lt;p&gt;I was pacing up and down our marina, sipping a hot chocolate, when a background thread triggered. “&lt;em&gt;How does the pipeline know that Production stage has a dependency on ContinuousIntegration stage?&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;I tried the following change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;Production&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;SecurityScans&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;SecurityReview&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;versionToolbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setToolkitVersion.versionToolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productionStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;BINGO!&lt;/strong&gt; Adding line 3, &lt;code&gt;- ContinuousIntegration&lt;/code&gt;, fixed the stageDependency and the &lt;strong&gt;versionToolbox&lt;/strong&gt; was set to the version set in the &lt;strong&gt;ContinuousIntegration&lt;/strong&gt; stage.&lt;/p&gt;
&lt;p&gt;To conclude, here is my complete experimentation pipeline I used to try random ideas and validate assumptions, such as the above-mentioned change.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Experimentation sample&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;
    &lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="n"&gt;Check&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
    &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
        &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;
        &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nl"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
        &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;

      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GitVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SemVer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
        &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;
        &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Collect Application Version ID&amp;quot;&lt;/span&gt;
        &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
          &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=curProjVersion;isOutput=true]$(GitVersion.SemVer)&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;
  &lt;span class="nl"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;
  &lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curProjVersion&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy&lt;/span&gt;
     &lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
     &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
        &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;
        &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Collect Application Version ID&amp;quot;&lt;/span&gt;
        &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
          &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=curProjVersion;isOutput=true]$(curProjVersion1)&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
        &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
          &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Parallel&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Parallel&lt;/span&gt;
  &lt;span class="nl"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;
  &lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curProjVersion&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy2&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy2&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;
  &lt;span class="nl"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Deploy&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Parallel&lt;/span&gt;
  &lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Deploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Deploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curProjVersion&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nl"&gt;curProjVersion2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curProjVersion&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="cp"&gt;# next variable is empty as dependsOn is missing  - Build.&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curProjVersion2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy3&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy3&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;
  &lt;span class="nl"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Deploy&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Parallel&lt;/span&gt;
  &lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Deploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Deploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curProjVersion&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nl"&gt;curProjVersion2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;setCurProjVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curProjVersion&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curProjVersion1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curProjVersion2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Have fun passing variables!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Reference information
- &lt;a href="https://docs.microsoft.com/en-us/azure/devops/release-notes/2020/sprint-168-update#jobs-can-access-output-variables-from-previous-stages"&gt;Jobs can access output variables from previous stages&lt;/a&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Part 8: Pipelines - From CI to CD and beyond in one pipeline</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part8.html" rel="alternate"></link><published>2021-04-23T00:00:00-07:00</published><updated>2021-04-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-23:/yaml-pipelines-part8.html</id><summary type="html">&lt;p&gt;Continuous Deployment is a pivotal ingredient of a healthy DevOps mindset and our ability to delight end-users with continuous value. It is the holy grail of our profession.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of pipeline wizardry. In &lt;a href="/yaml-pipelines-part7.html"&gt;part 7&lt;/a&gt; we wrapped up our application-type continuous integration (CI) pipeline. OK, we have nailed the build, but what about the release, aka continuous deployment (CD)?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why do we care about continuous deployment?&lt;/h1&gt;
&lt;p&gt;In previous posts we covered the world of Continuous Integration (CI), which builds and validates your latest code in your source control repository. With Continuous Delivery (CD) we deploy the artifact from the CI build to one or more environments. &lt;/p&gt;
&lt;p&gt;In the MSDN article, &lt;a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2016/august/devops-applying-devops-to-a-software-development-project"&gt;Applying DevOps to a Software Development Project&lt;/a&gt;, I emphasised the subtle difference between Continuous Delivery (CD) and Continuous Deployment (CD): "&lt;em&gt;The latter is to a single environment. A small team might only implement Continuous Deployment because each change goes directly to production. Continuous Delivery is moving code through several environments, ultimately ending up in production, which may include automated user interface (UI), load and performance tests and approvals along the way.&lt;/em&gt;" &lt;/p&gt;
&lt;p&gt;Note that both have the dreaded TLA (two|three lettered acronym) CD? ... confusing, right? Oh, how I loathe IT (information technology) acronyms q;-(&lt;/p&gt;
&lt;p&gt;Back to Continuous Deployment, which seems important. It &lt;strong&gt;deploys&lt;/strong&gt; new features, bugs, and hot fixes, which we can &lt;strong&gt;release&lt;/strong&gt; to our delighted customers on demand.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Light bulb" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt;&lt;/p&gt;
&lt;p&gt;The use of "continuous" implies that both the continuous integration and continuous deployment engineering processes embrace the "automate everything automatable" motto!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After being flabbergasted with the innovation, &lt;a href="/yaml-pipelines-part7.html"&gt;simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/a&gt;, I expected a world of frustration and pain to embrace the blueprints within the context of Continuous Deployment.&lt;/p&gt;
&lt;p&gt;Here is the final chapter in our blueprint-based pipeline adventure.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Tweaks to the Application-type CI Blueprints&lt;/h1&gt;
&lt;p&gt;We continue from where we left off with the app-type CI Blueprint Architecture, comprised of the following key elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] &lt;strong&gt;Starter&lt;/strong&gt; template, which configures the continuous integration pipeline. &lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;App-type&lt;/strong&gt; CI template, which &lt;strong&gt;extends&lt;/strong&gt; the starter template and abstracts the continuous integration (CI) process.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Example&lt;/strong&gt; of the app-type blueprint, for reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;App-Type CI Blueprint Architecture&lt;/p&gt;
&lt;p&gt;&lt;img alt="CI Blueprint Architecture" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We add two templates to the CI Blueprint Architecture to create our CICD Blueprint Architecture. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] &lt;strong&gt;App-type&lt;/strong&gt; CD template, which abstracts and &lt;strong&gt;includes&lt;/strong&gt; continuous deployment (CD) process.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Variable&lt;/strong&gt; template, which contains all configuration for the various &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/deployment-jobs"&gt;deployment jobs&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments"&gt;environments&lt;/a&gt; as key:value pairs.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;App-Type CICD Blueprint Architecture&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Blueprint Architecture" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It took us minutes to create a fully functional CI/CD pipeline using the App-Type CI Blueprint. In fact, it is was so painless and quick, that I repeated the exercise to verify the process.&lt;/p&gt;
&lt;p&gt;I hope that you have appreciate the simplicity, power, and prospects that the YAML templates and our app-type blueprints are bringing to the party. Now let us explore what we had to change since my engineering colleague &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Said Akram&lt;/a&gt; published &lt;a href="/yaml-pipelines-part7.html"&gt;&lt;em&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Starter&lt;/strong&gt; template tweaks&lt;/h2&gt;
&lt;p&gt;When you include variable groups or variable templates, you need to switch your variable definitions to the sequence syntax. To add the variable template, we changed our &lt;strong&gt;Starter&lt;/strong&gt; template from the simple notation ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE: Variables using simple notation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PORTFOLIO NAME&amp;#39;&lt;/span&gt; 
  &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PRODUCT NAME&amp;#39;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;... to the key:value notation. The variable template name is assembled from the portfolio and program name and pulled from the same repository as the other templates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE: Variables using key:value pair notation and variable template extract&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;portfolioName&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TODO &lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PORTFOLIO NAME&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PROGRAM NAME&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeSTemplates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;CI&lt;/strong&gt; template tweaks&lt;/h2&gt;
&lt;p&gt;Changes to the CI template were just as humdrum. An optional parameter allows us to override the app-type CD template, with a custom template on exceptional cases. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE: CI template extract&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parameters:
...
- name:     customCDTemplate
  type:     string
  default:  &amp;#39;blueprint&amp;#39; 

...

# DEPLOYMENT

- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCDTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blueprint&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
  - template: CD/Custom/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCDTemplate&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}.yml@CeSTemplates
- &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCDTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blueprint&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
  - template: CD/Blueprints/&lt;span class="nt"&gt;&amp;lt;appType&amp;gt;&lt;/span&gt;CDTemplate.yml@CeSTemplates

# END OF PIPELINE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We are experimenting and fine tuning our variable and CD templates and therefore it would be overzealous to include them in entirety. &lt;/p&gt;
&lt;p&gt;As mentioned, the variable template is a list of key:value pairs to define configuration for the associated deployment jobs and environments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE: Variable template extract&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# DEVelopment Stage&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POC_DEV&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the CD Blueprint, you should explore &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/deployment-jobs"&gt;deployment jobs&lt;/a&gt; and associated strategies. To start, we opted to experiment with the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/deployment-jobs?view=azure-devops#runonce-deployment-strategy"&gt;runOnce&lt;/a&gt; strategy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE: CD template extract&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;DEVELOPMENT&lt;/span&gt; &lt;span class="n"&gt;STAGE&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;Development&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
  &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;Development&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;runOnce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;preDeploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;PREDEPLOY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
        &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;DEPLOY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
        &lt;span class="n"&gt;routeTraffic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;ROUTETAFFIC&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;        
        &lt;span class="n"&gt;postRouteTraffic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;POSTROUTETRAFFIC&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
        &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;FAILURE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;          
          &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="n"&gt;Development&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageVmImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developmentStageEnvName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OK, the template revisions to include continuous deployment are straightforward. Apart from many upcoming refinements, we now have a functional application-type CICD blueprint-based pipeline.&lt;/p&gt;
&lt;p&gt;But, how do they map out at queue time and are our security engineers contempt with the new pipelines?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Mulling over environments and/or service connection approvals&lt;/h1&gt;
&lt;p&gt;We can define approvals and checks to &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml"&gt;service connections&lt;/a&gt; or &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;environments&lt;/a&gt;. The jury is still out whether we will use the one or the other, or both. We opted to start with and validate Environments, which are collections of resources for our typical Development, System Test, Staging, and Production environments.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Thumbs up" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Environments have the following advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployment history is maintained for each environment.&lt;/li&gt;
&lt;li&gt;Insight into jobs, tasks, and gate results&lt;/li&gt;
&lt;li&gt;Ability to lock-down environments by specifying which users and pipelines can target an environment.&lt;/li&gt;
&lt;li&gt;Environments can be shared across pipelines. For example, we only need one Security Review environment stage, configured once, and mapped to all pipelines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Thumbs down" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, approvals and checks can only be configured as pre-environment rules, unlike classic release pipeline where we have pre- and post-stage gates. Unfortunately? It forces us to re-think our deployment approvals, which will bring down the per-stage and total lead times for our pipelines.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops#:~:text=%20Create%20and%20target%20an%20environment%20%201,You%20can%20use%20approval%20checks%20to...%20More%20"&gt;Create and target an environment&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;h1&gt;Making sure our Security Engineers are happy&lt;/h1&gt;
&lt;p&gt;With classic Azure Pipelines we use Artifact filters with release triggers to deploy from multiple branches and disable deployment to higher stages, such as production, if the filters are not met. Our security engineers, however, are not fans of Artifact filters, as they can be overridden by users with elevated permissions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Light bulb" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt;&lt;/p&gt;
&lt;p&gt;"Though shalt not pass" - Gandalf, Lord of the Rings &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In comparison our blueprint-based pipelines use conditional logic, ensures that higher stages are injected, or not, when a pipeline is queued. Remember this quick video from &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4: Pipelines - Magic of queue time assembly&lt;/a&gt;, which reveals the magic. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/DWuDqCM1t6A"&gt;&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-2.png"&gt;&lt;/a&gt; [1:52] &lt;/p&gt;
&lt;p&gt;As shown below, our pipeline contains the continuous integration, development, system test, and security scan stages when the source branch is anything but &lt;strong&gt;release&lt;/strong&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;hotfix&lt;/em&gt;*. No-one, even our security engineers and cloud engineers with god-like permissions can override, as the higher stages are simply not available.&lt;/p&gt;
&lt;p&gt;So simple, yet so powerful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build Artifact triggered by non-release branch&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Blueprint Architecture" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Running the same pipeline where the source branch is either &lt;strong&gt;release&lt;/strong&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;hotfix&lt;/em&gt;*, the higher security review, staging, and production are included.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build Artifact triggered by release branch&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Blueprint Architecture" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The actual conditional logic is trivial. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# STAGING STAGE&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;refs/heads/hotfix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Staging&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;SecurityScans&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;SecurityReview&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mission accomplished :) Happy ~~wife~~ Security engineers, happy life! &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Are our engineers losing control over their pipeline?&lt;/h1&gt;
&lt;p&gt;Then again, we received harsh feedback from a recent poll, where we asked our engineers and the community if they want full control, partial control, or pipeline as a service. Only 41% of all engineers support the idea of pipeline as a service and some comments made us take a few steps back and re-think our strategy. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Well, autonomy is important, with centralizing the templates, you are creating impositions (you are imposing workflow, so how they work) in the teams, while you should focus on the outcomes.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Organizations that think they can cover 80% or even 90% of pipeline use cases always seem to miss the mark. I think folks that feel that this can be pulled off have been working at the same place or same vertical for too long.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Not all software developers are the same.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;... and so forth.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Engineers want partial or full control of CICD pipelines&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Blueprint Architecture" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After a lot of soul searching, discussions with software, security, and operation engineers, and considering that we have less than two handful of different system and technology architectures, I said: "Exactly!"&lt;/p&gt;
&lt;p&gt;With our application-type blueprints we are pursuing the best of the autonomy and governance world. We are enabling our: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Software engineers to be razor focused on delivering value to their customers.&lt;/li&gt;
&lt;li&gt;Security engineers to define and inject guardrails into all our pipelines.&lt;/li&gt;
&lt;li&gt;Operations and site reliability engineers to focus on our infrastructure, maintenance, and support.&lt;/li&gt;
&lt;li&gt;Architecture engineers to define a consistent way to deploy each application architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Light bulb" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt;&lt;/p&gt;
&lt;p&gt;What is the point (value) of allowing software engineers diverse ways of building and deploying an Azure Function? More importantly, why would we want to impose different solutions for the same solution for operations and site reliability engineering to maintain and support? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am looking forward to a storm of feedback, comments, and discussions. Let us focus on the question "&lt;em&gt;Are our engineers losing control over their pipeline?&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;The answer is a bold and blinking &lt;strong&gt;NO&lt;/strong&gt;! &lt;/p&gt;
&lt;p&gt;As discussed in this and previous posts, we are storing all our &lt;strong&gt;starter&lt;/strong&gt;, &lt;strong&gt;bootstrap&lt;/strong&gt;, &lt;strong&gt;blueprint&lt;/strong&gt;, and &lt;strong&gt;guardrail&lt;/strong&gt; templates in a common Git repository that anyone can &lt;strong&gt;view&lt;/strong&gt;. There is more. Everyone can submit a pull request with proposed changes, innovations, and bug fixes and thereby &lt;strong&gt;update&lt;/strong&gt; the templates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build Artifact triggered by non-release branch&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline Repository" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That said, not all ideas and proposals neatly packaged in a pull request will be accepted by the team(s) accountable for the impacted templates. We have a responsibility to maintain and uphold our common engineering system manifestos and guardrails. If you wander outside the guardrails and are unwilling to discuss the WHAT, WHY. and HOW your pull request will be rejected. Why? 'cause our security engineer Kevin, said so! Security is not only pivotal to our healthy DevOps mindset, it is non-negotiable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build Artifact triggered by non-release branch&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kevin Said So" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An in-house ~~joke~~ reality, sorry!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We are working on rolling our first two CI/CD blueprints for Azure Artifact and Azure Function pipelines, we will run ample workshops and awareness sessions to introduce all stakeholders to the new age of pipelines, we will lean on the observe-orient-decide-act (OODA) loop, by John Boyd, to fine-tune both blueprints and supporting infrastructure, before we embrace our other solution architectures.&lt;/p&gt;
&lt;p&gt;We may share our experience and learnings in more posts in this series if there is an interest or jump straight to the last planned post of this series "&lt;em&gt;Self-service automation - A dream turns into reality&lt;/em&gt;". &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Light bulb" src="/images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt;&lt;/p&gt;
&lt;p&gt;The consistent, secure, and simple blueprint-print based pipelines enable our automation goal!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have any questions, feedback, or would like to start a discussion on anything we have discussed in this series, please ping me on &lt;a href="https://twitter.com/wpschaub"&gt;twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/wpschaub/"&gt;linkedin&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | Part 8 | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Only changeable design is good design</title><link href="https://wsbctechnicalblog.github.io/only-changeable-design-is-good-design.html" rel="alternate"></link><published>2021-04-22T00:00:00-07:00</published><updated>2021-04-22T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-22:/only-changeable-design-is-good-design.html</id><summary type="html">&lt;p&gt;Why is changeable design desirable and what's preventing us from achieving it&lt;/p&gt;</summary><content type="html">&lt;p&gt;I started my coding career in August 1990. Back then, it was customary to write code in full isolation. My first paid job was writing COBOL applications to run on IBM midrange computers. The programs I was writing were monoliths that included everything, from database operations to green screen operations in one big, humongous program (unbeknownst to me, even back then I was a ‘full stack’ developer).&lt;/p&gt;
&lt;p&gt;Back then, the only design activities I was aware of doing was the database design (attempting to achieve the 3rd normal form). After a relatively short stint with COBOL I moved into the desktop-centric fat-client/server world (C++, SQL Server and Windows NT), and then into Java and web development. At that point, it became obvious that without having good design skills, we tended to quickly end up with a &lt;a href="https://en.wikipedia.org/wiki/Big_ball_of_mud#In_computer_programs"&gt;Big Ball of Mud&lt;/a&gt; systems.&lt;/p&gt;
&lt;h2&gt;Traditional design&lt;/h2&gt;
&lt;p&gt;Traditionally speaking, design is something we work on and then when finished, it gets delivered. Ideally, by finishing the design activities, we hope to have achieved the most optimal design. As such, the design reaches its final form and is not to be further modified.&lt;/p&gt;
&lt;p&gt;The goal is to deliver non-volatile design, and in most real-life situation that goal makes perfect sense.&lt;/p&gt;
&lt;h2&gt;Software design&lt;/h2&gt;
&lt;p&gt;Interestingly, software design does not work the same way as when designing material objects. Software is by its very nature and by intent malleable and pliable (hence the word ‘soft’ as part of its name). As such, software is supposed to be volatile. If software solution hardens, it immediately becomes useless.&lt;/p&gt;
&lt;h2&gt;What prevents changeable software design?&lt;/h2&gt;
&lt;p&gt;A non-surprising answer to this question is that the lack of design skills prevents us from producing changeable design (duh!)&lt;/p&gt;
&lt;p&gt;Back in the &lt;strike&gt;good&lt;/strike&gt; old days (before Extreme Programming arrived on the scene) I was spending years writing code all by myself. Not surprisingly, I’ve spent all those years not learning much about software design. Of course, unbeknownst to me, I was stuck in the much-dreaded Expert Beginner state.&lt;/p&gt;
&lt;p&gt;Luckily, after joining a mature team of software engineers, I started getting exposed to pair programming and continuous code reviews. Boy, was I in for a shock at that juncture! What I considered good coding practices was shredded to pieces by my older and more experienced peers.&lt;/p&gt;
&lt;p&gt;But the pain was worth enduring, because I was finally set on the path of continuous improvement. No pain, no gain, but in hindsight, the pain of being heavily scrutinized by my peers was truly worth it. So, a few factors that contribute to preventing us from producing changeable software are (in no particular order):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lack of real communication with peers&lt;/li&gt;
&lt;li&gt;Rework avoidance&lt;/li&gt;
&lt;li&gt;Lack of regard for testability&lt;/li&gt;
&lt;li&gt;Absence of Continuous Integration&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s quickly review the above four factors.&lt;/p&gt;
&lt;h2&gt;Lack of real communication with peers&lt;/h2&gt;
&lt;p&gt;Working in isolation by being assigned a ticket or a work item by the managers/scrum masters is not a good way to write software. If the only communication with peers happens during the 15 minutes of daily standups, the quality of the solution will suffer because the design will most likely end up being rigid, difficult, and risky to change. Which is never a good position to be in.&lt;/p&gt;
&lt;h2&gt;Rework avoidance&lt;/h2&gt;
&lt;p&gt;Hoping in vain to be able to deliver a solution that will be correct on the first try is extremely unrealistic. However, oftentimes the organizational culture is centered around rework avoidance (i.e. “if it’s worth doing at all, then it must be done right on the first try”).&lt;/p&gt;
&lt;p&gt;Software is not like that. Software development activities fail if they attempt to mimic activities focused on building material objects. Software development is more akin to writing an essay. If you recall from the school days, when we’re writing an essay, we always start form the first draft, and then iterate, refining the draft until we get the draft into a more presentable shape. In other words, we keep doing the rework on our draft (we keep changing the design and the content we’ve already changed), because we are aware that it is not possible to produce quality design and content on the first pass.&lt;/p&gt;
&lt;p&gt;In software, we call that rework refactoring. Without constant refactoring (i.e. doing it every step of the way), it is not possible to produce changeable design.&lt;/p&gt;
&lt;h2&gt;Lack of regard for testability&lt;/h2&gt;
&lt;p&gt;Not all software developers have testability as the most important part of their discipline. Some leave testing to a separate, independent teams (QA). Developing software with such mindset prevents changeable software design.&lt;/p&gt;
&lt;p&gt;When adding source code statements to the repo without first designing the intended code behaviour for testability, the resulting design is tightly coupled. Any tightly coupled system is not testable. And not being testable, it poses serious risks to making changes to it. That way, we end up with the design that is not changeable.&lt;/p&gt;
&lt;h2&gt;Absence of Continuous Integration&lt;/h2&gt;
&lt;p&gt;Working in isolation fosters the large batches approach. A developer takes a user story or a task to work on and disappears from the radar to spend long hours writing code. Such approach typically results in having many changes made to the code without any regard to the other changes that have possibly been made to the code by other peers working in isolation.&lt;/p&gt;
&lt;p&gt;When the time eventually comes to put all those changes together to assemble a working system, we often learn that the changed code does not work. We then must scramble to somehow resolve those conflicts, and in the process produce a lot of half-baked design. Which results in a design that is difficult and risky to change.&lt;/p&gt;
&lt;h2&gt;How to achieve changeable design?&lt;/h2&gt;
&lt;p&gt;Simply put, to achieve changeable design we must make sure to avoid factors that prevent us from delivering changeable design. In practical terms, the recommended approach is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace asynchronous communication with real-time collaboration (pair and mob programming)&lt;/li&gt;
&lt;li&gt;Practice continuous refactoring&lt;/li&gt;
&lt;li&gt;Adopt full-on TDD, service virtualization and BDD&lt;/li&gt;
&lt;li&gt;Integrate all changes continuously&lt;/li&gt;
&lt;/ol&gt;</content><category term="Posts"></category><category term="agile"></category><category term="architecture"></category><category term="code"></category></entry><entry><title>Quick peek into regular expressions</title><link href="https://wsbctechnicalblog.github.io/peek-into-regular-expressions.html" rel="alternate"></link><published>2021-04-13T13:13:00-07:00</published><updated>2021-04-13T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-13:/peek-into-regular-expressions.html</id><summary type="html">&lt;p&gt;Regular expressions are fundamental to programming&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I reviewed a pull request with a few commits focused on regular expression code changes, I decided to re-create a quick reference cheat sheet. Regular expression (regex), a variant of conventional set theory, has a few oddities with infrequent use. Hopefully this cheat sheet will turn regular expressions into a less daunting ally in your world programming and configuration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regular Expressions&lt;/p&gt;
&lt;p&gt;&lt;img alt="Regular Expressions" src="/images/peek-into-regular-expressions-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Common Expressions&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Special Characters&lt;/td&gt;
&lt;td&gt;.&lt;br/&gt;\.&lt;br/&gt;\n&lt;br/&gt;\f&lt;br/&gt;\t&lt;br/&gt;\xhhhh&lt;/td&gt;
&lt;td&gt;any character&lt;br/&gt;dot&lt;br/&gt;newline character&lt;br/&gt;form feed character&lt;br/&gt;tab character&lt;br/&gt;Unicode character as hexadecimal number, i.e. \xFFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quantifiers&lt;/td&gt;
&lt;td&gt;+&lt;br/&gt;?&lt;br/&gt;*&lt;br/&gt;{x,y}&lt;/td&gt;
&lt;td&gt;1 or more&lt;br/&gt;0 or one&lt;br/&gt;0 or more&lt;br/&gt;at least ‘x’ but no more that ‘y’ occurrences&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Character Sets&lt;/td&gt;
&lt;td&gt;\s&lt;br/&gt;\S&lt;br/&gt;\d&lt;br/&gt;\D&lt;br/&gt;\w&lt;br/&gt;\W&lt;br/&gt; [a-x] &lt;br/&gt;[^a-x]&lt;/td&gt;
&lt;td&gt;whitespace character&lt;br/&gt;non-whitespace character&lt;br/&gt;digit character (0-9) &lt;br/&gt;non-digit character&lt;br/&gt;any letter (a-zA-Z) or digit (0-9) or underscore (_) character &lt;br/&gt;non-word character&lt;br/&gt;characters in the range of a to x, excluding yz&lt;br/&gt;characters except in the range of a to x, i.e. y and z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anchoring&lt;/td&gt;
&lt;td&gt;^&lt;br/&gt;$&lt;br/&gt;\b&lt;br/&gt;\B&lt;/td&gt;
&lt;td&gt;if first char, indicates that match starts at start of  string&lt;br/&gt;match must continue to end of string&lt;br/&gt;word boundary&lt;br/&gt;non-word boundary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1&gt;Example&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Regular Expression Example&lt;/p&gt;
&lt;p&gt;&lt;img alt="Regular Expression Example" src="/images/peek-into-regular-expressions-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;#&lt;/th&gt;
&lt;th align="center"&gt;EXPRESSION&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;^&lt;/td&gt;
&lt;td&gt;The first character ^ indicates that the next match (19|20) starts at beginning of string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;(19|20)&lt;/td&gt;
&lt;td&gt;We either need a 19 or a 20 at the beginning of the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;\d\d&lt;/td&gt;
&lt;td&gt;Next we have two digit character (0-9).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;[- /.]&lt;/td&gt;
&lt;td&gt;Next we have a range of valid characters, in this case minus, slash, space and dot.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5.1&lt;/td&gt;
&lt;td align="center"&gt;(0[1-9]&lt;/td&gt;
&lt;td&gt;Either we have a 0, followed by a digit in the range of 1-9, i.e. 01 to 09.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5.2&lt;/td&gt;
&lt;td align="center"&gt;|1[012])&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OR&lt;/strong&gt; we have a 1, followed by a zero, one or two, i.e. 10, 11 or 12.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6.1&lt;/td&gt;
&lt;td align="center"&gt;(0[1-9]&lt;/td&gt;
&lt;td&gt;Either we have a 0, followed by a digit in the range of 1-9, i.e. 01 to 09.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6.2&lt;/td&gt;
&lt;td align="center"&gt;|[12][0-9)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OR&lt;/strong&gt; we have a 1 or a 2, followed by a digit in the range of 0-9, i.e. 10 to 29.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6.3&lt;/td&gt;
&lt;td align="center"&gt;|3[01])&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OR&lt;/strong&gt;** we have a three, followed by a zero or a one, i.e. 30 - 31.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;$&lt;/td&gt;
&lt;td&gt;The last character $ indicates that the next match must continue to end of string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you need more examples, go to &lt;a href="http://www.regular-expressions.info/"&gt;regularexpressions.info&lt;/a&gt;.&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="posters"></category></entry><entry><title>Quick Reference Sheet for YAML and Generic Blueprint-based Pipelines</title><link href="https://wsbctechnicalblog.github.io/moving-hundreds-of-pipeline-snowflakes-qr-1.html" rel="alternate"></link><published>2021-04-13T00:00:00-07:00</published><updated>2021-04-13T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-13:/moving-hundreds-of-pipeline-snowflakes-qr-1.html</id><summary type="html">&lt;p&gt;Summarising the main points of YAML syntax, within the context of our generic blueprint-based pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quick Reference Posters help us foster collaboration, visualise and get across key points for specific topics. They also serve as handy cheat sheets!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;YAML Generic Blueprint-based Pipeline Quick Reference&lt;/p&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The quick reference poster introduces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic concepts for &lt;strong&gt;Parameters&lt;/strong&gt;, &lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;Triggers&lt;/strong&gt;, &lt;strong&gt;Resources&lt;/strong&gt;, and &lt;strong&gt;Templates&lt;/strong&gt;, as used in our generic blueprint-based pipelines. See &lt;a href="https://aka.ms/yaml"&gt;YAML Schema&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;In the centre of the poster, our single-job, multiple-steps &lt;strong&gt;generic blueprint&lt;/strong&gt;. See &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;On the right-hand side, our &lt;strong&gt;bootstrap template&lt;/strong&gt;. See &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/multi-stage-blueprint-based-1st-gen-pipelines-poster.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enjoy and remember that we crave candid feedback to sprinkle value over these artifacts!&lt;/p&gt;
&lt;p&gt;| POSTER 1 (this) | &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-2.html"&gt;POSTER 2&lt;/a&gt; |&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="posters"></category><category term="x-as-code"></category></entry><entry><title>Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part7.html" rel="alternate"></link><published>2021-04-12T00:00:00-07:00</published><updated>2021-04-12T00:00:00-07:00</updated><author><name>Said Akram</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-12:/yaml-pipelines-part7.html</id><summary type="html">&lt;p&gt;Do you want to own two or seventy five dozen lines of pipeline code per application? The choice is yours!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of pipeline wizardry. In &lt;a href="/yaml-pipelines-part6.html"&gt;part 6&lt;/a&gt; we covered the simplicity of the generic blueprint-based YAML pipeline and mentioned that there is more magic. Welcome to our application-type blueprints!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why we teleported our generic blueprints one level higher&lt;/h1&gt;
&lt;p&gt;In &lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt; we explore infrastructure-as-code and the concept of pipeline-as-code and mention that each engineer building a continuous integration pipeline write an average of 900+ lines of json or YAML configuration ... per pipeline. Using generic blueprints, we managed to reduce this repetitive and thus wasted effort of engineering to 100+ lines of configuration code. A massive improvement, not only in terms of engineering effort, but also re-use and consistency of an ever-growing infrastructure of pipelines that needs to be nurtured and innovated continuously.&lt;/p&gt;
&lt;p&gt;Our pipeline working group, made up of passionate engineers from architecture, security, development, infrastructure, release management, and site reliability engineering, agreed that we need to do better. As we have a handful of application architecture and technology-stacks, we also agreed that consistency, automation, and continuous innovation should form the foundation to self-service automation. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When we want to power up an electronic device, we plug it into the power grid and flip the on switch. None of us are interested in generating the power ourselves, or the local substation with an autonomy mindset.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That said, we are surprised at the outcome of a poll on Twitter and a LinkedIn, where we asked engineers if they want full or partial ownership of their pipelines, or self-service. Less than 50% are interested in self-service automation!?!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Combined results from Twitter and LinkedIn quick polls as at 2021.03.30 23:13&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline ownership" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some conspiracies we noticed in the polls and discussions with engineering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;You are influencing engineering on how they should work by centralizing pipeline templates!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No&lt;/strong&gt;, we are allowing engineering to collaborate, innovate, and influence each other.&lt;/li&gt;
&lt;li&gt;In fact, we are enabling the organization to package your hard earned experience and guardrails in re-usable templates.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You cannot possibly create a template for every scenario!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fully agree&lt;/strong&gt;, especially as we are continuously innovating.&lt;/li&gt;
&lt;li&gt;But, we can create templates and blueprints for common scenarios and re-use templates to quick-start the outliers. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;You should not abstract and hide the pipelines from engineering!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fully agree&lt;/strong&gt;. As covered in &lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt;, everyone can view the templates and blueprints and anyone can submit changes to existing templates or recommend new ones. The only thing we mandate is the use of pull requests to guard the template and blueprint repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will explore the real clincher, self-service automation, in a future planned post "&lt;em&gt;Self-service automation - A dream turns into reality&lt;/em&gt;". In the meantime, rest assured that engineers are free to use their creativity to craft their precious snowflakes till the cows come home. We are here to enable and guide through continuous innovation, manifestos, and guardrails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Back on track" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us get back on track. Why are we taking our generic blueprints, covered in &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt; and &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/a&gt;, to another level? To reduce the engineering effort to ~28 lines of pipeline configuration. That is a saving of 97% of repetitive and often mind-numbing configuration engineering.&lt;/p&gt;
&lt;p&gt;Have we caught your attention? If yes, read on.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Unveiling our Application-Type Blueprints&lt;/h1&gt;
&lt;p&gt;With application-type, in short app-type, blueprints we are taking the continuous integration (CI) pipelines light-years further in terms of our goals for simplicity, security, enablement, and consistency. Each app-type blueprint, consists of a &lt;strong&gt;starter&lt;/strong&gt; template, an &lt;strong&gt;app-type&lt;/strong&gt; template, and a reference &lt;strong&gt;sample&lt;/strong&gt; implementation, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blueprint Architecture&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blueprint Architecture" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;starter&lt;/strong&gt; template allows you to configure your continuous integration pipeline. This is the only moving part that is copied and becomes part of your application code base, protected by your branch policies and your team-level pull request workflow.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;app-type&lt;/strong&gt; template abstracts the entire continuous integration (CI) process, our generic blueprints and integration with our bootstrap template, promoting consistency, delegates responsibility for the implementation to our common engineering system team, and encourages you to be razor-focused on your application. Anyone can view the blueprints (transparency) and everyone can submit a pipeline working group pull request to continuously innovate the blueprints (we are one).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;example&lt;/strong&gt; implementation of a starter and app-type template, sample application, and pipeline is self-explanatory. Handy awareness and validation aid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example of our Azure Function starter template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Trigger&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt;

&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AppTemplates&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;CeS/AzureDevOps.Automation.Pipeline.AppTemplates&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Semantic&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;Azure&lt;/span&gt; &lt;span class="n"&gt;DevOps&lt;/span&gt; &lt;span class="n"&gt;Naming&lt;/span&gt; &lt;span class="n"&gt;Conventions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SourceBranchName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;VARIABLES&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PORTFOLIO NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;CeS&lt;/span&gt;
  &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PRODUCT NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Samples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;AzureFunction&lt;/span&gt;

&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="sr"&gt;/AzureFunction/&lt;/span&gt;&lt;span class="n"&gt;AzureFunctionTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;AppTemplates&lt;/span&gt;
  &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH .NET CORE VERSION&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;applicationGuid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH A NEW GUID WITHOUT BRACKETS&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;257929&lt;/span&gt;&lt;span class="n"&gt;e89c69471083efb51899b42bdb&lt;/span&gt;
    &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In case you have not counted yourself: A mere twenty-two (22) lines of configuration code, with only four (4) TODO that require minimal effort!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;It took me a few minutes to setup our entire continuous deployment (CD) proof-of-concept (PoC) environment, after which I was able to focus on the CD experiments. I am Said's App-type blueprints #1 fan!&lt;/em&gt;" - &lt;a href="https://www.linkedin.com/in/wpschaub/"&gt;Willy Schaub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another nugget you may have missed in the platter of configuration code, is the &lt;strong&gt;extends&lt;/strong&gt; template. It enables &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/security/templates?view=azure-devops"&gt;Security through templates&lt;/a&gt; and allows us to set a required template check gate for resources and environments. More on that when we share our CD PoC results.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Don't repeat yourself&lt;/h1&gt;
&lt;p&gt;As software engineers, we try to avoid code duplication. Each time we spot a code used in two or more methods, we fix it by moving the code into its own method and calling that method from all of the places where it was originally used.&lt;/p&gt;
&lt;p&gt;The same DRY principle can be applied to Continuous Integration (CI) build pipelines. As covered in &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;, we use pipeline blueprints to define reusable content.&lt;/p&gt;
&lt;p&gt;Even if we have thousands of build pipelines, we only have a few application architectures. Our app-type templates can serve a big part of the applications we have. For the rest of the applications, we can create custom YAML based pipelines.&lt;/p&gt;
&lt;h1&gt;Pipeline As a Service&lt;/h1&gt;
&lt;p&gt;As a software developer, do I want to own (i.e. create and maintain) the pipelines to build and deploy my application? My answer is &lt;strong&gt;NO&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I will be glad to let another team take that responsibility while I focus on creating value for the business by delivering quality software.&lt;/p&gt;
&lt;p&gt;As long as I have access to the build pipeline templates and able to suggest changes, I will not lose my ability to do my work and troubleshoot issues if any.&lt;/p&gt;
&lt;h1&gt;How to implement your pipeline using the App-Type Blueprints&lt;/h1&gt;
&lt;p&gt;This is where both the effort of creating new continuous integration (CI) build pipelines and writing this post becomes &lt;strong&gt;simple&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="How-to" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-4.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy the content of the &lt;strong&gt;starter&lt;/strong&gt; template from the CeS/AzureDevOps.Automation.Pipeline.Templates repository (aka the sample above).&lt;/li&gt;
&lt;li&gt;Rename the app-type template from azure-pipelines-&lt;TYPE&gt;.yml as needed (an optional step).&lt;/li&gt;
&lt;li&gt;Look for TODO and update / fine-tune as needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other than running your pipeline, you are &lt;strong&gt;DONE&lt;/strong&gt;! &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What if an App-Type Blueprint is not available?&lt;/h1&gt;
&lt;p&gt;If our pipeline working group achieves a 75% coverage of all our current pipeline scenarios, such as Azure Artifact packages, .NET Core, or Angular applications, we will start celebrating. &lt;/p&gt;
&lt;p&gt;In the meantime, and to cover the remaining 25% there will always be an application type for which there is no blueprint, or a snowflake that requires something special.&lt;/p&gt;
&lt;p&gt;&lt;img alt="404" src="/images/moving-hundreds-of-pipeline-snowflakes-part7-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Our engineers have a simple flowchart if they cannot find a suitable blueprint in our template repository:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a custom &lt;strong&gt;starter&lt;/strong&gt; and &lt;strong&gt;app-type&lt;/strong&gt; blueprint from scratch or tweaking an existing blueprint. Latter is recommended.&lt;/li&gt;
&lt;li&gt;Submit a &lt;strong&gt;Pull Request&lt;/strong&gt; with your &lt;strong&gt;starter&lt;/strong&gt; template to our CeS Templates repo.&lt;/li&gt;
&lt;li&gt;Submit a &lt;strong&gt;Pull Request&lt;/strong&gt; with your &lt;strong&gt;app-type&lt;/strong&gt; template to our CeS AppTemplates repo. &lt;/li&gt;
&lt;li&gt;Collaborate with the pipeline working group to release your changes with the common engineering system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;SIMPLE&lt;/strong&gt;, yet powerful wizardry!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We will report back on our proof-of-concept and associated experiments to extend the app-type continuous integration (CI) build pipeline blueprints to include continuous deployment (CD).&lt;/p&gt;
&lt;p&gt;See you soon in Part 8: Pipelines - From CI to CD and beyond in one pipeline.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Synchronized 'if' statements considered harmful</title><link href="https://wsbctechnicalblog.github.io/synchronized-if-statements-considered-harmful.html" rel="alternate"></link><published>2021-04-08T00:00:00-07:00</published><updated>2021-04-08T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-04-08:/synchronized-if-statements-considered-harmful.html</id><summary type="html">&lt;p&gt;Duplicated imperative conditional logic leads to proliferation of bugs&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"&gt;Edsger Dijkstra's&lt;/a&gt; famous letter &lt;a href="https://dl.acm.org/doi/10.1145/362929.362947"&gt;"Go To Statement Considered Harmful"&lt;/a&gt; was published 53 years ago in the March 1968 &lt;em&gt;Communications of the Association for Computing Machinery (ACM)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Today, no one uses &lt;strong&gt;go to&lt;/strong&gt; statements anymore. The practice was proven harmful, and the pernicious &lt;strong&gt;go&lt;/strong&gt; to statement was replaced by more appropriate statements as part of the structured programming vocabulary.&lt;/p&gt;
&lt;p&gt;Upon closer inspection, though, it turns out that &lt;strong&gt;go to&lt;/strong&gt; statement by itself is not that harmful, after all. It simply implements a jump from one statement in the code to another statement in the code. But, so do structured programming language constructs that replaced the &lt;strong&gt;go&lt;/strong&gt; to statement. Statements such as &lt;strong&gt;return&lt;/strong&gt;, &lt;strong&gt;break&lt;/strong&gt;, &lt;strong&gt;continue&lt;/strong&gt;. Those statements also implement a jump from one statement in the code to another statement in the code.&lt;/p&gt;
&lt;p&gt;Knowing that, why did Dijkstra think &lt;strong&gt;go to&lt;/strong&gt; was so harmful, while &lt;strong&gt;return&lt;/strong&gt;/&lt;strong&gt;break&lt;/strong&gt;/&lt;strong&gt;continue&lt;/strong&gt; etc. aren’t harmful?&lt;/p&gt;
&lt;h2&gt;Cognitive dissonance&lt;/h2&gt;
&lt;p&gt;What Dijkstra had noticed back in 1968 is the discrepancy between how we think and how computers work. We seem to focus most of our thinking toward orienting ourselves in space. We like to read and draw maps, and indicate things that are near or far, over here or over there, etc.&lt;/p&gt;
&lt;p&gt;On the other hand, we don’t seem that well versed in thinking along temporal dimension. Time indicates change, and we mostly dislike change, as it threatens to unsettle us from our familiar comfort zones. We prefer spatial coordinates as they indicate something solid, firm, unchangeable, non-threatening.&lt;/p&gt;
&lt;p&gt;Computers work in the exact opposite fashion. When a computer program runs, it unfolds in time. First this statement gets executed, then that statement, and so on. But these execution steps do not necessarily follow in linear fashion.&lt;/p&gt;
&lt;p&gt;Still, when we read a source code that comprises a computer program, we reason in spatial terms. We start from the top of the page (or top of the screen) and then we parse the code-as-text one line at the time, going sequentially. Until we reach the end of the source code file.&lt;/p&gt;
&lt;p&gt;Trouble is, that’s not how the program behaves. When a program runs, it makes all kinds of hyper-space leaps and bounds. It does not follow any neatly laid out spatial map.&lt;/p&gt;
&lt;p&gt;Imagine a dancing competition where contestants would take snapshots of them dancing and would then send those snapshots to the jury. The jury would review the submitted snapshots and would then announce the winner of the dancing competition.&lt;/p&gt;
&lt;p&gt;Or, imagine a cooking competition where contestants would take snapshots of them making food and would then send those snapshots to the jury. The jury would review the submitted snapshots and would then announce the best chef.&lt;/p&gt;
&lt;p&gt;When we are reviewing a snapshot of the source code, we are equally reducing a very dynamic situation (i.e. a running program) to the set of static freeze-frame snapshots. It gives us a very unrealistic picture of how the program behaves and what is it capable of (this is especially obvious when we examine static snapshots of the code that is doing asynchronous processing).&lt;/p&gt;
&lt;h2&gt;Go to is only harmful when combined with if statements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Go to&lt;/strong&gt; statement by itself is no different than other control flow statements. It interrupts the linear flow (i.e. after executing current statement, it steps into the statement on the next line below). But so do other flow control statements that were introduced as part of structured programming with the intent to eliminate &lt;strong&gt;go to&lt;/strong&gt; statements.&lt;/p&gt;
&lt;p&gt;So, why is it then that Dijkstra considered &lt;strong&gt;go to&lt;/strong&gt; harmful? The reason is that only when &lt;strong&gt;go to&lt;/strong&gt; gets combined with &lt;strong&gt;if&lt;/strong&gt; statements that we create a fertile breeding ground for bugs. For example, if we say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;if(orderTotal &amp;gt; 500.00 go to line 10)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;that type of control flow has the potential to result in buggy code.&lt;/p&gt;
&lt;p&gt;Without the conditional statement (the &lt;strong&gt;if&lt;/strong&gt;) having a simple statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;go to line 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is not problematic. Why? Because it is not conditionally controlling the flow of execution. It is simply directing the flow without checking for any specific values.&lt;/p&gt;
&lt;p&gt;Knowing this, one wonders why is it that Dijkstra did not declare &lt;strong&gt;if&lt;/strong&gt; statements harmful? The reason is probably that back in 1968, Dijkstra was able to clearly define structured programming discipline, but he did not have the tools at his disposal that would enable him to define the discipline needed for removing the &lt;strong&gt;if&lt;/strong&gt; statements. Back then, the concept of object programming was still nascent.&lt;/p&gt;
&lt;p&gt;Today, we have well entrenched knowledge of object-oriented programming, and have great methodologies for replacing imperative &lt;strong&gt;if&lt;/strong&gt; statements with more sophisticated code constructs.&lt;/p&gt;
&lt;h2&gt;Business policy rules must be declared in very visible places&lt;/h2&gt;
&lt;p&gt;The most volatile (and most critical) parts of the app code are the parts that automate business policy rules. Those policy rules are governed by conditional logic (i.e. &lt;em&gt;if in this moment the state of the app is such-and-such, then the following expected transformation of values must occur&lt;/em&gt;). Because business policy rules are in constant flux, teams are incessantly making changes to the already changed code.&lt;/p&gt;
&lt;p&gt;It is those changes that offer the most fruitful opportunity for authoring bugs. What is the reason for this frequent bug authoring?&lt;/p&gt;
&lt;p&gt;Most of the time the unwanted effects of the change to the code happen if the conditional logic is duplicated. The same logic gets implemented in more than one module/method. This duplication creates opportunities for missing or misplacing the necessary changes.&lt;/p&gt;
&lt;p&gt;If we have implemented imperative conditional logic by using &lt;strong&gt;if-else&lt;/strong&gt; statements in some module or method, chances are that there will be some other module or method where the exact same conditional logic will be needed. As the program runs, at various times it will need to make a processing decision based on that specific conditional logic.&lt;/p&gt;
&lt;p&gt;The trouble begins when those varying modules and methods need to be maintained. The business policy rule has changed, and now our code must mirror that change. Being able to make the necessary change in all the affected methods and/or modules is often riskier than it may seem.&lt;/p&gt;
&lt;p&gt;We often call these duplicate instances of conditional logic &lt;strong&gt;synchronized ifs&lt;/strong&gt;. If one &lt;strong&gt;if&lt;/strong&gt; statement needs to change, all other synchronized &lt;strong&gt;if&lt;/strong&gt; statements must change at the same time. Which could quite often be a challenge.&lt;/p&gt;
&lt;p&gt;We must therefore abandon synchronized &lt;strong&gt;ifs&lt;/strong&gt; and abstract conditional logic away into a single source of truth. The trick is choosing proper abstraction to accomplish that task. Which is the topic for another blog post.&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="xp"></category></entry><entry><title>Extreme Programming 25 Years Later</title><link href="https://wsbctechnicalblog.github.io/xp-25-years-later.html" rel="alternate"></link><published>2021-03-31T00:00:00-07:00</published><updated>2021-03-31T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-31:/xp-25-years-later.html</id><summary type="html">&lt;p&gt;Extreme programming keeps going strong 25 years after its launch&lt;/p&gt;</summary><content type="html">&lt;p&gt;Extreme Programming (XP) was a revolutionary movement launched by &lt;a href="https://en.wikipedia.org/wiki/Kent_Beck"&gt;Kent Beck&lt;/a&gt; in 1996. According to Beck, XP was a political statement. Back in the mid-1990s, software quality was being outsourced to the QA departments. Programmers were doing their part by writing software to the best of their ability but would then delegate the quality of their products to testers.&lt;/p&gt;
&lt;p&gt;Beck disagreed with that approach and felt that quality is everyone’s responsibility. He launched Extreme Programming as a political statement which expresses full and unreserved commitment to unwavering high quality and professionalism in software engineering.&lt;/p&gt;
&lt;h2&gt;How did XP improve software engineering discipline?&lt;/h2&gt;
&lt;p&gt;Today, 25 years after Beck launched his political statement, we are seeing incredibly impressive improvements in our profession. The initial launch made strong waves which are being felt to this day. Let’s look at some of the obvious improvements that XP brought to the table.&lt;/p&gt;
&lt;h3&gt;Continuous deployment (CD)&lt;/h3&gt;
&lt;p&gt;Back in the 1990s, deployment was sporadic (non-continuous). Teams working under the waterfall development paradigm were being driven by the Big Plan Upfront. That upfront plan was fleshed out to such levels of detail that it would predict the exact deployment date. That date was typically scheduled far into the future (oftentimes 6, 8, 12 or even 24 months in the future).&lt;/p&gt;
&lt;p&gt;Beck had raised many eyebrows at Chrysler in 1996 when he was put in charge of their software engineering and declared that teams will be deploying every three weeks. Such aggressive schedule was unheard of (the most daring teams were deploying every three to six months at best). But he pushed through and stuck to his guns and demonstrated that it was possible to do regular deployments on a three weeks cadence. How did he manage to do that? He instigated the discipline of Extreme Programming.&lt;/p&gt;
&lt;p&gt;25 years ago, deploying software every three weeks did seem extreme indeed, so the name Extreme Programming stuck (today, Beck somewhat regrets choosing that name, but that’s a discussion for another micro learning episode).&lt;/p&gt;
&lt;p&gt;Today, we see many teams deploying much more frequently than every three weeks. Many manage to do it every week, or even every day. Some even do it more than once per day. In the most extreme cases of Extreme Programming, we see teams deploying code &lt;a href="https://www.zdnet.com/article/how-amazon-handles-a-new-software-deployment-every-second/"&gt;every second!&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Testing in production&lt;/h3&gt;
&lt;p&gt;Continuous deployment presents an opportunity to test changes in production. If we’re deploying to production many times per day, we get a chance to truly run our software through its paces right there, in the real world.&lt;/p&gt;
&lt;p&gt;When Beck was formulating his Extreme Programming approach, he said he was guided by one simple principle:&lt;/p&gt;
&lt;p&gt;“I want the code to run all the time!”&lt;/p&gt;
&lt;p&gt;What better way to fulfill that guiding principle than to run and test the code in a live environment?&lt;/p&gt;
&lt;p&gt;Yes, but what about potential defects? Wouldn’t deploying changes to production so that we could test them potentially harm us? The answer lies in mastering feature flags (we already discussed this topic in another micro learning episode).&lt;/p&gt;
&lt;h3&gt;No bugs&lt;/h3&gt;
&lt;p&gt;Rather than chasing bugs, our time is better spent not writing them in the first place. TDD and shift left are methodologies that underpin XP and are our best weapon against bugs. All bugs are authored and minimizing/eliminating sloppy authorship inevitably results in minimizing/preventing bugs.&lt;/p&gt;
&lt;p&gt;Consequently, we cannot consider any story actually completed until the code that implements the story is in production, tested, and proven to be bug free.&lt;/p&gt;
&lt;h3&gt;No backlog&lt;/h3&gt;
&lt;p&gt;XP teams adopt a default answer to any feature request. That default answer is “No”. The rationale is that if ideas for features (i.e. hypotheses) are indeed important, they will come up again. Only in such cases is the request for feature (hypothesis) going to be taken up for work.&lt;/p&gt;
&lt;p&gt;This approach eliminates bloat. The rationale is that maintaining a long backlog is a waste. Identify the most important thing right now and then work on it. If while working on it something more important emerges, stop working on the current thing and attend to the more important one. Keep going in the same fashion. Iterate.&lt;/p&gt;
&lt;h3&gt;No estimates&lt;/h3&gt;
&lt;p&gt;Estimating a required effort by counting story points amounts to measuring the output instead of measuring the outcome. Wrong metric.&lt;/p&gt;
&lt;p&gt;Some teams switch from counting story points to counting number of stories delivered. Which is also a meaningless metric.&lt;/p&gt;
&lt;p&gt;If teams are already doing the best they can, and are working on the most important thing at the time, and are deploying as soon as possible, what’s the point in estimating? Time spent estimating is a waste, and that time could be better spent attending to most important things (i.e. working software that meets customers’ needs).&lt;/p&gt;
&lt;h3&gt;Data driven&lt;/h3&gt;
&lt;p&gt;System cannot evolve in the absence of business hypotheses. What are the sources of those hypotheses? Backlogs, predictions, Big Plan Upfront? A better, more reliable option is to use data. Collecting data by interviewing customers and end-users, exploring logs and devising razor-sharp telemetry is a better way to evolve the business.&lt;/p&gt;
&lt;h3&gt;Improvement boards&lt;/h3&gt;
&lt;p&gt;Improvement boards are based on the improvement kata (pioneered in Toyota). Improvement kata is based on the discoveries that occur along the way. This approach requires that participants do not hold on to the sense of certainty that is based on any prescribed perspective. Rather, the emphasis is on innovation and experimentation. The experiments are published on the Improvement board, which then serves as a reminder, an inspiration, an invitation to collaboration, lessons learned, etc.&lt;/p&gt;
&lt;h3&gt;Mob programming&lt;/h3&gt;
&lt;p&gt;The original collaboration model that XP introduced (pair programming) has been expanded and improved by introducing mob programming. Mob programming is not possible without practicing TDD.&lt;/p&gt;
&lt;h3&gt;Throwing code away&lt;/h3&gt;
&lt;p&gt;Functionality is an asset; code is a liability. In XP, functionality gets encoded in test scripts. As such, those test scripts are a definitive asset. In TDD, test scripts drive the implementation of the code.&lt;/p&gt;
&lt;p&gt;Testability is the highest value, while code is disposable. Some teams are discovering that it helps if we stop viewing implementation code as an asset, and if we often dispose of it and write it again guided by the tests.&lt;/p&gt;
&lt;h3&gt;Limit work-in-progress&lt;/h3&gt;
&lt;p&gt;When teams adopt a ‘no bugs’ mindset, they work following Edward Deming’s formula: “Quality comes not from inspection, but from improvement of the production process.” The only way to improve the production process is to limit work in progress. Limiting work in progress means eliminating interruptions.&lt;/p&gt;
&lt;p&gt;When teams have full control of their work environment (i.e. teams own their work), there is no need to multitask.&lt;/p&gt;
&lt;h3&gt;Hackathons&lt;/h3&gt;
&lt;p&gt;Incremental improvements are not giving organizations much needed competitive edge. To survive and thrive, organizations need to continuously engage in experimenting with completely new ideas. Innovations are mandatory, and our InnoFest is an excellent illustration of the viability and the importance of that approach.&lt;/p&gt;
&lt;h3&gt;DevOps&lt;/h3&gt;
&lt;p&gt;As developers start doing daily deployments, they get heavily involved with operations. By doing that, DevOps quickly turn into product support team. There is then only one small step from working as a product support team to becoming THE product team.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Extreme Programming has proven not only that it has amazing staying power (25 years and going strong) but also that it can evolve in unexpected and surprisingly powerful ways. All the major improvements that happened in XP during the past 25 years serve one single purpose: running the code all the time.&lt;/p&gt;
&lt;p&gt;The future of XP looks bright. By speeding up the delivery while minimizing/eliminating defects, it is poised to continue enabling business automation and offering unprecedented competitive advantage through increased flexibility.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="code"></category><category term="devops"></category><category term="tdd"></category><category term="testing"></category><category term="xp"></category></entry><entry><title>Code-as-text</title><link href="https://wsbctechnicalblog.github.io/code-as-text.html" rel="alternate"></link><published>2021-03-26T00:00:00-07:00</published><updated>2021-03-26T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-26:/code-as-text.html</id><summary type="html">&lt;p&gt;Programming computers by feeding them plain text is very slow and needs to be sped up.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Indeed, the ratio of time spent reading vs. writing is well over 10:1… Because this ratio is so high, we want the reading of code to be easy, even if it makes the writing harder.&lt;/em&gt; — &lt;strong&gt;Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The only way we know how to program computers is by feeding them text. In the olden days, we used to program computers differently (e.g. by directly rewiring the computing machinery or by crafting punched cards – figures 1 and 2).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programming by rewiring" src="/images/early-programming.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 1.&lt;/strong&gt; &lt;em&gt;Programming computers by manually rewiring them.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Punched card" src="/images/punched-card.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 2.&lt;/strong&gt; &lt;em&gt;Programming computers by producing punched cards.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To bring the challenge of computer programming closer to the human level of comprehension, we have collectively decided, some 70 years ago, to introduce a level of indirection and let programmers encode their intentions using pure text. Text is more intuitively accessible to humans than complicated mechanical contraptions or obtuse punched cards, so the new technology stuck.&lt;/p&gt;
&lt;p&gt;Today, everyone programs computers by using nothing else but plain text.&lt;/p&gt;
&lt;h2&gt;What’s the problem?&lt;/h2&gt;
&lt;p&gt;Computer programs, written as plain text (i.e. source code) differ significantly from natural human languages. In what ways?&lt;/p&gt;
&lt;p&gt;Firstly, computer source code is lexically different from natural languages. Computer programming languages are composed of severely limited vocabulary (some words used as programming language keywords, or reserved words), while other words remain free-form in order to act as unique identifiers that help name program constructs (variables, methods, modules, etc.)&lt;/p&gt;
&lt;p&gt;Secondly, computer source code is syntactically laid out and organized differently than natural languages. Formally defined structures play much more important role in computer programming languages than they play in natural languages. Furthermore, almost all programming languages feature multiple forms of indented layouts (horizontal and vertical). Such layout is seldom, if ever, encountered in written natural languages.&lt;/p&gt;
&lt;p&gt;Thirdly, and most importantly, there is the difference in semantics: text written in a natural language is typically understood in two simultaneous (concurrent) phases. Those phases denote:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Text (how it is written down)&lt;/li&gt;
&lt;li&gt;Domain (what does the text mean)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These two phases of simultaneous comprehension are insufficient when reading a computer program (code-as-text). To understand the computer source code, we need a third dimension: execution.&lt;/p&gt;
&lt;p&gt;To discover the operational semantics of the program’s source code, we are required to trace the source code execution.&lt;/p&gt;
&lt;p&gt;Easier said than done. Oftentimes, opening a file containing code-as-text does not give as an easy access to grasping what is that program supposed to be doing. Unlike with natural language written down as text, where we can safely start from the top of the page/screen and follow the story as it unfolds, row by row, paragraph by paragraph, computer source code does not necessarily proceed in that fashion.&lt;/p&gt;
&lt;p&gt;The problem therefore lies in the fact that code-as-text cannot provide us with clear understanding of how the program will behave. We can only know for sure how the program works and what does the program execute if we execute it.&lt;/p&gt;
&lt;h2&gt;Why is that a problem?&lt;/h2&gt;
&lt;p&gt;Seeing how code-as-text is an intermediary layer between human programmer and the machine that runs the program, we observe that there is an unavoidable lag between the moment when we make a change (a diff) to the source code and the moment when we learn about the impact of the change we’ve made. This lag is the crux of the problem.&lt;/p&gt;
&lt;p&gt;In many environments, it takes a considerable amount of time between us making a diff and seeing the effects of that diff. This inevitable slowdown is negatively affecting the quality of our work.&lt;/p&gt;
&lt;p&gt;In contrast, almost any other crafting activity is free of this annoying lag. If we’re building a cabinet, for example, the material and the tools we’re using will inform us, instantaneously, about the effects of the change we’re making. We get feedback in real time, and that feedback is ensuring that we proceed without making serious mistakes.&lt;/p&gt;
&lt;p&gt;None such real time feedback is available in the activity of software engineering. When writing software, we work with code-as-text, which is incapable of giving us real time feedback. Once we introduce some change into the source code, we have to do a lot of acrobatics before we can see the result of that change. This is considerably slowing us down and therefore poses a serious problem when it comes to ensuring quality of our delivery.&lt;/p&gt;
&lt;h2&gt;Is there a solution?&lt;/h2&gt;
&lt;p&gt;Currently the only mainstream solution that exists for addressing the above problem is Test Driven Development (TDD). As we have seen in our TDD Dojo, when doing TDD we focus on executing our program as frequently as possible. The only way to gain insight and understanding about the effect of the changes we make to the source code is to execute the program. And because TDD is based on writing micro tests, the time lag between the moment when we make the change and the moment we execute the program and witness the effects of that change is as short as it can get.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="devops"></category><category term="code"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Incremental and Iterative Development – what’s the diff?</title><link href="https://wsbctechnicalblog.github.io/incremental-and-iterative-development.html" rel="alternate"></link><published>2021-03-19T00:00:00-07:00</published><updated>2021-03-19T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-19:/incremental-and-iterative-development.html</id><summary type="html">&lt;p&gt;Visual example illustrating the fundamental differences between incremental and iterative development process.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I oftentimes hear people discuss development methodologies and mention incremental and iterative approaches. When I ask for further clarification, it surprises me how frequently people conflate the two methodologies. I hear “well, they’re just two words denoting the same thing”.&lt;/p&gt;
&lt;p&gt;Which is far from being true. Let’s now examine what makes one development process iterative and another development process incremental, and let’s then look into what makes them so fundamentally different.&lt;/p&gt;
&lt;h2&gt;Iterative development&lt;/h2&gt;
&lt;p&gt;According to the dictionary, to iterate implies “to perform or utter repeatedly”. Repetition is the essence of iteration. In software engineering, we often call iteration by another name – rework.&lt;/p&gt;
&lt;p&gt;This distinction sometimes gets misinterpreted, so I’d like to illustrate what is meant by the expression ‘iterative development’, and I’d like to use a series of visual examples.&lt;/p&gt;
&lt;p&gt;Let’s start with the first iteration (or a first pass). The initial draft may look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 1" src="/images/monalisa/monalisa1.png"&gt;&lt;/p&gt;
&lt;p&gt;Since the above draft is very vague and unclear, we need to revisit our first draft and do a bit of rework, in the hopes of adding some clarity:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 2" src="/images/monalisa/monalisa2.png"&gt;&lt;/p&gt;
&lt;p&gt;The picture now is a little bit clearer, but still it is obvious it needs more work (rework). So we iterate, and the third iteration looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 3" src="/images/monalisa/monalisa3.png"&gt;&lt;/p&gt;
&lt;p&gt;A bit better, yeah? Still, quite fuzzy. Let’s do the fourth iteration:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 4" src="/images/monalisa/monalisa4.png"&gt;&lt;/p&gt;
&lt;p&gt;Ah okay, maybe now with the fourth iteration some eagle-eyed people can already recognize what are we making? Still, needs more rework. On to the fifth iteration:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 5" src="/images/monalisa/monalisa5.png"&gt;&lt;/p&gt;
&lt;p&gt;Oh, that kind of looks familiar. Just to be sure, let’s do more rework; iteration 6:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 6" src="/images/monalisa/monalisa6.png"&gt;&lt;/p&gt;
&lt;p&gt;It’s a portrait of a woman, and maybe even a very famous portrait. Let’s add more details; iteration 7:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 7" src="/images/monalisa/monalisa7.png"&gt;&lt;/p&gt;
&lt;p&gt;Aha, looks like Leonardo da Vinci’s famous Mona Lisa! Definitely. But it looks quite crude – we need to do some more rework. Iteration 8:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 8" src="/images/monalisa/monalisa8.png"&gt;&lt;/p&gt;
&lt;p&gt;Now there’s no doubt – it is Mona Lisa! If we squint we can definitely be sure. But it lacks a lot of detail still. Iteration 9:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 9" src="/images/monalisa/monalisa9.png"&gt;&lt;/p&gt;
&lt;p&gt;The details are starting to emerge. Still looks amateurish. More rework; iteration 10:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 10" src="/images/monalisa/monalisa10.png"&gt;&lt;/p&gt;
&lt;p&gt;The expression on Mona Lisa’s face is now visible. Let’s keep going; iteration 11:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 11" src="/images/monalisa/monalisa11.png"&gt;&lt;/p&gt;
&lt;p&gt;Almost there! Still somewhat pixelated, we will circle back one more time to increase the resolution. Iteration 12:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 12" src="/images/monalisa/monalisa12.png"&gt;&lt;/p&gt;
&lt;p&gt;Voila! That’s it. Gradual refinement delivers the masterpiece!&lt;/p&gt;
&lt;h2&gt;Incremental development&lt;/h2&gt;
&lt;p&gt;According to the dictionary, to increment means “an increase or addition, especially one of a series on a fixed scale”.&lt;/p&gt;
&lt;p&gt;Let’s illustrate incremental development using Da Vinci’s Mona Lisa.&lt;/p&gt;
&lt;p&gt;First increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 1" src="/images/monalisa/monalisaincrement1.png"&gt;&lt;/p&gt;
&lt;p&gt;Second increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 2" src="/images/monalisa/monalisaincrement2.png"&gt;&lt;/p&gt;
&lt;p&gt;Third increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 3" src="/images/monalisa/monalisaincrement3.png"&gt;&lt;/p&gt;
&lt;p&gt;Fourth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 4" src="/images/monalisa/monalisaincrement4.png"&gt;&lt;/p&gt;
&lt;p&gt;Fifth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 5" src="/images/monalisa/monalisaincrement5.png"&gt;&lt;/p&gt;
&lt;p&gt;Sixth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 6" src="/images/monalisa/monalisaincrement6.png"&gt;&lt;/p&gt;
&lt;p&gt;And so on…&lt;/p&gt;
&lt;h2&gt;What are the differences between iterative and incremental development?&lt;/h2&gt;
&lt;p&gt;I hope that the visual illustrations above are helpful in driving the salient points home. Let’s enumerate the differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unlike iterative development, which starts with the whole picture (the whole system), incremental development starts from one fixed part of the system&lt;/li&gt;
&lt;li&gt;Unlike iterative development, which outlines the whole system in very crude strokes, incremental development works on an isolated fixed part of the system until is fully done (following the Definition of Done, or DoD)&lt;/li&gt;
&lt;li&gt;Unlike iterative development, which is based on relentless rework, incremental development forbids rework, and only moves on to work on the next part of the system once the previous part is fully fleshed out and frozen for any further changes&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="agile"></category><category term="devops"></category></entry><entry><title>Pipeline-as-code wrapped with Pull Requests</title><link href="https://wsbctechnicalblog.github.io/pipelines-as-code-pr.html" rel="alternate"></link><published>2021-03-13T00:00:00-08:00</published><updated>2021-03-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-13:/pipelines-as-code-pr.html</id><summary type="html">&lt;p&gt;This post attempts to give our critics some answers and scratch the surface of the possibilities and values of our new blueprint-based pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the past three program increments, which amounts to a staggering 30 iterations, or 300 days, we have been working on our quest to convert our legacy classic pipelines to YAML-based pipelines, as outlined in our &lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options&lt;/a&gt; series. More importantly, we have been working in parallel to elaborate on the value to our stakeholders. &lt;/p&gt;
&lt;p&gt;A tough challenge, because there is no visual value in continuous integration and deployment pipelines to business, our delighted end-users, or our engineers who want full control of our common engineering system. &lt;/p&gt;
&lt;p&gt;A recent awareness and prioritisation push by our &lt;a href="https://www.scaledagileframework.com/release-train-engineer-and-solution-train-engineer/"&gt;Release Train Engineers&lt;/a&gt; have raised a few interesting questions. This post attempts to give our critics some answers and scratch the surface of the possibilities and values of our new blueprint-based pipelines.&lt;/p&gt;
&lt;h1&gt;Pipelines as code ... what?&lt;/h1&gt;
&lt;p&gt;Let us start with &lt;strong&gt;infrastructure as code&lt;/strong&gt; (IaC), which manages and provisions computer data centers through machine- and human-readable configuration files. Instead of humanoids manually clicking and tweaking knobs and dials in a graphical user interface, machines read and process the code. There is no apocalyptic vision of &lt;a href="https://en.wikipedia.org/wiki/Skynet_(Terminator)"&gt;Skynet&lt;/a&gt;, only the option of &lt;strong&gt;automation&lt;/strong&gt; and &lt;strong&gt;consistent&lt;/strong&gt; deployment of our infrastructure.&lt;/p&gt;
&lt;p&gt;If you view continuous integration and deployment pipelines as infrastructure, we could stop here. However, &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; introduced the term "&lt;strong&gt;pipelines as code&lt;/strong&gt;", which is more fitting.&lt;/p&gt;
&lt;p&gt;It is a technique that treats the configuration of our continuous integration and deployment pipelines as code, placed under version control, packaged in reusable components, and automated deployment and testing ... like IaC.&lt;/p&gt;
&lt;p&gt;The YAML-based pipelines in Azure Pipelines, opened the &lt;strong&gt;golden fleece&lt;/strong&gt;, not pandoras box, for our pipelines as code adventure. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #1 - Transparency&lt;/h1&gt;
&lt;p&gt;Software engineering is complex and involves stakeholders from all walks of life. &lt;strong&gt;Transparency&lt;/strong&gt; is considered one of the core ingredients to Agile and Lean development, as well as a healthy DevOps mindset.&lt;/p&gt;
&lt;p&gt;Transparency avoids assumptions, secrets, and conspiracies - instead, it fosters trust.&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://azure.microsoft.com/en-us/services/devops/pipelines/"&gt;Azure Pipelines&lt;/a&gt; all pipeline artifacts are placed in source control repositories that can be viewed by all our engineers - there are no secrets! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers to explore what is abstracted under the covers, continuously learn, give candid feedback, and &lt;strong&gt;trust&lt;/strong&gt; our common engineering system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #2 - Everyone can contribute&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-us/services/devops/repos/"&gt;Azure Repos&lt;/a&gt;, which we used to store our pipeline code, allow us to set a wide range of branch policies to protect our master (trunk) branch that always reflects a production-ready state. One of the policies enforces the use of &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests?view=azure-devops"&gt;Pull Requests&lt;/a&gt;, which allows our common engineering team to review and give actionable and constructive feedback to all proposed pipeline code changes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More importantly, we enable our engineers to &lt;strong&gt;contribute&lt;/strong&gt; to our common engineering system by submitting pipeline changes and innovations through the pull request workflow. All without the need for elevated privileges or specialized roles, such as Super Users, which complicate the administration of our classic pipeline infrastructure and security.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #3 - Automation&lt;/h1&gt;
&lt;p&gt;When you do something twice, trice, or more times, you should invest in &lt;strong&gt;automation&lt;/strong&gt;. Machines are much better with repetitive operations than we are and empower us to focus on other, more valuable, services.&lt;/p&gt;
&lt;p&gt;The explosive growth of software and our goals for &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;simplicity&lt;/strong&gt;, and &lt;strong&gt;enablement&lt;/strong&gt; have given rise to continuous delivery pipelines that build and deploy solutions in a standard way.&lt;/p&gt;
&lt;p&gt;Our common engineering system is using YAML templates to abstract away implementation details and support our engineering practices. They inject underlying tasks to run security scans, validate our building code, and keep an eye on any binary construct moving beyond our &lt;strong&gt;guardrails&lt;/strong&gt; (more appealing term for governance).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers by injecting re-usable templates when they queue their Azure Pipelines and sprinkling the concept of &lt;strong&gt;shift-left&lt;/strong&gt; automatically and consistently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a (intentional) side-effect the pipelines as code also enables our long-term vision for self-service automation. Like a self-service kiosk, we will be able to direct our engineers to a self-service portal that displays a menu of services and facilitates actions to deploy the services in an automated, consistent, and rapid manner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We will enable our engineers to deploy pipelines and associated infrastructure on their &lt;strong&gt;own terms&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #4 - Focus engineering on business code&lt;/h1&gt;
&lt;p&gt;Lastly, the most controversial and debated benefit. As software engineers we have an inquisitive mind and an urge to tinker with everything under the bonnet. It feeds purpose, mastery, and autonomy as discussed by &lt;a href="https://www.youtube.com/watch?v=u6XAPnuFjJc"&gt;Daniel Pink&lt;/a&gt;, &lt;strong&gt;but&lt;/strong&gt; it also distracts our razor focus to continuously deliver value to our delighted end-users.&lt;/p&gt;
&lt;p&gt;I am also a software engineer at heart and have often found myself spinning off into underlying and unrelated code bases. It is like doing a search on the internet, looking for a specific piece of information, and eventually stepping back from dozens of browser tabs ... "what was I looking for?!?" Interesting, educational, but minimal value to getting the job done and an unfortunate waste of productive time.&lt;/p&gt;
&lt;p&gt;Instead, let me try using &lt;a href="https://www.informationisbeautiful.net/visualizations/million-lines-of-code/"&gt;this clean visualization&lt;/a&gt; by &lt;a href="https://informationisbeautiful.net/"&gt;Information Is Beautiful&lt;/a&gt;, and the latest number of our production pipelines to make my point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from our weekly Azure Pipelines report: 927 production CI/Build pipelines&lt;/p&gt;
&lt;p&gt;&lt;img alt="WASTE" src="/images/pipelines-as-code-wrapped-with-prs-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To define a pipeline to build, test, and scan an Azure Function requires roughly 300 lines of pipeline code. The 927 production pipelines are a mix of simpler, but also more complex pipelines, adding up to an astounding 927 * 300 = &lt;strong&gt;278,100&lt;/strong&gt; lines of pipeline code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If engineers embrace our first-generation generic blueprints, as discussed in &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt; and &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt;, the lines of pipeline code are reduced to 122 for an Azure Function pipeline. 927 * 122 = &lt;strong&gt;113,094&lt;/strong&gt; lines of pipeline code. A lot less, but still a lot of code.&lt;/li&gt;
&lt;li&gt;If engineers embrace our second-generation app-type blueprints, which &lt;a href="https://github.com/orgs/CommunityBCIT/people/said-akram-wcbbc"&gt;Said&lt;/a&gt;] will discuss in the upcoming &lt;strong&gt;Part 7&lt;/strong&gt; shortly, the lines of code are reduced to a mere 28 lines of code. 927 * 28 = 25,956 lines of pipeline code.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from Infographic: How Many Lines Of Code Is Your Favorite App?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Information is Beautiful" src="/images/pipelines-as-code-wrapped-with-prs-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The difference is an astounding 927 * 272 = 252,144 lines of pipeline code, which could be invested in delivering user-value or solutions such as Photoshop v1.0. We have barely scratched the surface of our continuous deployment (CD) pipelines, which is a topic for another day and a few posts; one of my goals is to increase the 28 lines of pipeline code owner by the engineering team by no more than a handful to add CD to our app-type blueprint-based pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers to be razor-focused on their solution and avoid investing their precious time in &lt;strong&gt;wasteful&lt;/strong&gt; pipeline code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Wrap-up&lt;/h1&gt;
&lt;p&gt;You can continue to build your own pipelines, tinker with knobs, dials, configurations, and products, and remember to innovate all pipelines continuously - do-it-yourself (DIY). &lt;/p&gt;
&lt;p&gt;Alternatively, you can focus on your business code and let the pipeline engineers focus on your pipelines - pipelines-as-a-service. The choice is &lt;strong&gt;yours&lt;/strong&gt;. &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Find the capabilities and IP addresses of an Azure DevOps agent</title><link href="https://wsbctechnicalblog.github.io/azure-devops-agent-capabilities.html" rel="alternate"></link><published>2021-03-12T00:00:00-08:00</published><updated>2021-03-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-12:/azure-devops-agent-capabilities.html</id><summary type="html">&lt;p&gt;How to find more information on hosted Azure DevOps agents, such as capabilities and IP addresses.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Why should we care about an Azure DevOps Agent?&lt;/h1&gt;
&lt;p&gt;To use our &lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;Azure Pipelines&lt;/a&gt;, we need the agents. Every time one of our pipelines is triggered, it comes to life on one or more jobs, which are hosted and run an agent.&lt;/p&gt;
&lt;p&gt;Azure DevOps offers two types of agents. &lt;strong&gt;Microsoft-hosted&lt;/strong&gt; agents are a software as a service (SaaS) offering, where maintenance and upgrades are taken care of for you. Our recommended type of agents!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Self-hosted agents&lt;/strong&gt; give you more control of access and installed software needed for special builds and deployments. For example, we have a self-hosted pool to service our good old &lt;strong&gt;Cobol&lt;/strong&gt; builds.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;How to determine the capabilities of an Azure DevOps Agent&lt;/h1&gt;
&lt;p&gt;We often get the question: "What software is installed on the agent?" In other words, how do we determine the capabilities of each Azure DevOPs agent.&lt;/p&gt;
&lt;p&gt;For self-hosted agents you can go to your Azure DevOps &lt;strong&gt;organizational&lt;/strong&gt; setting, Agent pools, select &lt;strong&gt;pool&lt;/strong&gt;, select &lt;strong&gt;Agents&lt;/strong&gt;, select an &lt;strong&gt;agent&lt;/strong&gt;, and finally, select &lt;strong&gt;Capabilities&lt;/strong&gt;. You will be presented with the agent's system capabilities, variables, paths, and installed software, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capabilities of a &lt;strong&gt;self-hosted&lt;/strong&gt; agent&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Details" src="/images/azuredevops-agent-info-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you select a Microsoft-hosted agent and pool, the presented capabilities are less exciting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capabilities of a &lt;strong&gt;Microsoft-hosted&lt;/strong&gt; agent&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent LAck of Details" src="/images/azuredevops-agent-info-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to visit the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted Agents&lt;/a&gt; documentation and scroll down to the &lt;strong&gt;Software&lt;/strong&gt; section. Peruse a list of hosted agents, classic pipeline editor specifications, YAML image labels, and links to software available on each type of agent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure DevOps Agent Documentation&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Documentation" src="/images/azuredevops-agent-info-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Select your agent, click on the included software hyperlink, and voila, you have a detailed report of the agent's capabilities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure DevOps Agent Capabilities Documentation&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Capabilties Documentation" src="/images/azuredevops-agent-info-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;How to determine the IP addresses of an Azure DevOps Agent&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted Agents&lt;/a&gt; documentation also gives you information on how to identify possible IP ranges for Microsoft-hosted agents. This information is pivotal if you need to allow the agents to make their way from the public internet, through your firewall, to collaborate with one of your services.&lt;/p&gt;
&lt;p&gt;Unfortunately, you will also find some small print ... well, it is the same sized font and the note is placed on a prominent Indigo background. It is easy to miss the highlighted part, as shown below, that mentions that the IP addresses for the macOS agents are not included.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;macOS Addresses are a mystery&lt;/p&gt;
&lt;p&gt;&lt;img alt="macOS Address Mystery" src="/images/azuredevops-agent-info-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First thought is to queue a investigative pipeline on one of the macOS agents and run the &lt;strong&gt;ipconfig getifaddr en0&lt;/strong&gt; command. That only returns the private IP address of the agent, which is interesting, but not very useful to the firewall engineers.&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;task:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
  &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;ipecho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;errorActionPreference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It reveals the public IP address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  2090  100  2090    0     0  32656      0 --:--:-- --:--:-- --:--:-- 32153
100  2090  100  2090    0     0  32656      0 --:--:-- --:--:-- --:--:-- 32153

... SNIPPED FOR BLOG POST ...

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-align: center; flex: 1; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your IP is 13.105.49.13&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

...SNIPPED FOR BLOG POST...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lastly, who owns the IP address we just found?&lt;/p&gt;
&lt;p&gt;Visit &lt;a href="https://ipinfo.io/13.105.49.13"&gt;13.105.49.13 IP Address Details - IPinfo.io&lt;/a&gt; for the answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IP address "BINGO!"&lt;/p&gt;
&lt;p&gt;&lt;img alt="IPinfo.io" src="/images/azuredevops-agent-info-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;A big thank you to &lt;a href="https://www.linkedin.com/in/lukas-wilson-8792ba172/"&gt;Lukas Wilson&lt;/a&gt;, one of our resident Azure gurus, who helped with the IP address exploration. &lt;/p&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Wandering down memory lane - feature flags</title><link href="https://wsbctechnicalblog.github.io/memory-lane-feature-flags.html" rel="alternate"></link><published>2021-03-12T00:00:00-08:00</published><updated>2021-03-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-12:/memory-lane-feature-flags.html</id><summary type="html">&lt;p&gt;Use feature flags to fine-tune each release in production.&lt;/p&gt;</summary><content type="html">&lt;p&gt;More memory lane content pulled from my personal blog, before it is deprecated in favour of this technical blog.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;DevOps vancouver Meetup January 2019&lt;/h1&gt;
&lt;p&gt;We had a really great turnout and a vibrant meetup hosted by &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/members/44231812/"&gt;Andre Kaminski&lt;/a&gt;, featuring three topics in January 2019:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entropy in DevOps Teams: Andrew Rose&lt;/li&gt;
&lt;li&gt;The Virtues of Being T-shaped: Kyle Young&lt;/li&gt;
&lt;li&gt;Progressive Exposure Using Feature Flags: &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Willy Schaub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find a copy of my feature flags presentation &lt;a href="https://1drv.ms/b/s!AoTKFn7kQntwmop6lYMUH2ki07YkpA"&gt;HERE&lt;/a&gt;. Ping me if the link is blocked by your firewall.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Top 6 FAQs from my talk&lt;/h1&gt;
&lt;h2&gt;What's DevOps and what's the link to the session?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps, by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Link to the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/257318843/"&gt;January 2019&lt;/a&gt; session and &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/photos/29645676/"&gt;photos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;When should I use rings versus feature flags?&lt;/h2&gt;
&lt;p&gt;I think of a &lt;strong&gt;package&lt;/strong&gt; when using the ring-based deployment model to deploy a release and a small &lt;strong&gt;screwdriver&lt;/strong&gt; to "tweak" feature flags to fine-tune the release. See &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;How do I manage the technical debt introduced by feature flags?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;KEEP IT SIMPLE!&lt;/strong&gt; Define technical governance to clearly define who owns the feature flags, when and how to remove feature flags and the associated technical debt,  and scenarios that are suitable for feature flags. See &lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;What's the cost of feature flags?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Who owns feature flags?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most feature flags are scoped to a business feature, backed by a business case, and delivering value, which places the ownership of the feature flag switch with the business. Some feature flags are scoped to an operational feature, which places the ownership with operations (Ops).&lt;/p&gt;
&lt;h2&gt;What do we mean with "Do not hide non-production ready code behind feature flags"?&lt;/h2&gt;
&lt;p&gt;Production ready implies hat we have met an agreed quality bar and are confident to release the feature to production. It does not mean feature ready, as we may expose a production ready minimally viable product to perform experiments and A|B testing. Risk of hiding non-production ready code behind feature flags is high - it's easy to flip a switch and expose incomplete,unstable, of security breaches by mistake.&lt;/p&gt;
&lt;h2&gt;Why the product we introduced at the meetup?&lt;/h2&gt;
&lt;p&gt;You need to investigate and create your own opinion, but here are a few highlights from our evaluation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's a Software as a Service (&lt;strong&gt;SaaS&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt; administration&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;experimentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Feature flag &lt;strong&gt;dependency management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Identify &lt;strong&gt;stale flags&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rules&lt;/strong&gt; to manage exposure and blast radius&lt;/li&gt;
&lt;li&gt;... and much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Can you tell me more about circuit breakers?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Netflix/Hystrix/wiki"&gt;Hystrix&lt;/a&gt; evolved out of resilience engineering work that the Netflix API team began in 2011. See &lt;a href="https://aka.ms/bh-ff-sos"&gt;A Rough Path&lt;/a&gt;, by Brian Harry for an example, where circuit breakers could have protected us from an Operational meltdown, caused by simply "flipping a flag".&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Two epiphanies&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-6b.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-7b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Last, but not least, our feature flag manifesto&lt;/h1&gt;
&lt;p&gt;On our common engineering site, we have a collection of verbal declaration of intentions, motives, or views of the issuer, for processes and products.&lt;/p&gt;
&lt;p&gt;Here is a copy of our feature flag manifesto.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The worlds of our &lt;a href="/why-pipelines-part1.html"&gt;pipelines&lt;/a&gt; and feature flags are likely to collide when we innovate our ability to &lt;strong&gt;release on demand&lt;/strong&gt;. See you there!&lt;/p&gt;</content><category term="Events"></category><category term="azure-devops"></category><category term="devops"></category><category term="feature-flags"></category><category term="pipelines"></category></entry><entry><title>Workflow-as-code</title><link href="https://wsbctechnicalblog.github.io/workflow-as-code.html" rel="alternate"></link><published>2021-03-05T00:00:00-08:00</published><updated>2021-03-05T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-05:/workflow-as-code.html</id><summary type="html">&lt;p&gt;Configuring complex workflows that govern Continuous Integration and Continuous Delivery must only be allowed by making changes to the YAML source files; GUI tools must be prohibited&lt;/p&gt;</summary><content type="html">&lt;p&gt;Majority of software applications available on the market today offer self-serve capabilities to end users. Those self-serve capabilities are mostly focused on automating the chores related to various paperwork processes. Browsing product and service catalogs, picking items and ordering them via automated checkout process. In addition to that, there are alternate automated scenarios that enable end users to cancel their actions, repeat them, request refunds, etc.&lt;/p&gt;
&lt;p&gt;A smaller portion of such typical mainstream software applications are focused on automating the workflow. Oftentimes we see that the business operations workflow is not a simple straight line from start to finish. Depending on the business policy rules, workflows may take a number of twists and turns. Automating such complex rules is no small feat, which is why we're not seeing that many self-serve workflow applications on the market today. Unlike with simple automation of the paperwork representing straightforward business transactions, workflows tend to get more convoluted.&lt;/p&gt;
&lt;h2&gt;How are self-serve business applications implemented?&lt;/h2&gt;
&lt;p&gt;Experience has shown that the majority of end users prefer to do self-serve tasks by operating a Graphical User Interface (GUI). Such interface often mimics real life paperwork (i.e. replicating paper forms in electronic format etc.)&lt;/p&gt;
&lt;p&gt;When it comes to offering workflow solutions, it has also been demonstrated that end users prefer to do the self-serve activities via Graphical User Interfaces. The flow of various documents and forms gets represented with artifacts or simulacra resembling real world pipes. Those pipes, when put together in certain configurations, form various pipelines.&lt;/p&gt;
&lt;p&gt;Many users are now getting familiar with the concept of manipulating pipelines in order to perform the self-serve activities of configuring non-trivial workflows.&lt;/p&gt;
&lt;h2&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;So far, the self-serve model we've described looks perfectly reasonable and even quite desirable. So where's the problem?&lt;/p&gt;
&lt;p&gt;While it is perfectly reasonable to hide the formalized complexities of the automation from end users (they are not trained to operate complex systems using rigorous formal reasoning), when it comes to enabling software engineers to operate complex software systems, Graphical User Interface is not a good way to do it.&lt;/p&gt;
&lt;p&gt;And yet, for some reason we see a lot of platforms drag the GUI mindset back into the inner circles of software engineering teams. And the problem then becomes the fact that software engineers get conditioned to use GUI for configuring complex workflows needed for Continuous Integration (CI) and Continuous Delivery (CD).&lt;/p&gt;
&lt;p&gt;Why is that a problem? When using GUI, engineers are directly touching the materialized infrastructure. That is a very bad idea. To illustrate, let's imagine a scenario where a software engineer would log in to the live production system that's running the application binary (compiled) code. Imagine that engineer being privileged to go directly to the live binary code, and using some GUI tool, start making changes to the live code in production!&lt;/p&gt;
&lt;p&gt;That situation will cause panic. Making untested changes to the live code is a surefire recipe for disaster.&lt;/p&gt;
&lt;p&gt;The only legitimate way software engineering teams could make changes to the production code is if they make changes not to the materialized binary code, but only to the code representation -- the actual source code.&lt;/p&gt;
&lt;p&gt;Source code by itself cannot perform any operations. It must be compiled and the compiled code must be then built first. Those operations must happen within regulated Continuous Integration and Continuous Delivery workflows. Those workflows consist of a number of strict business policy rules that govern the quality of the proposed code change. If the quality is substandard (i.e. the code does not pass all the tests that are baked into the workflow), the proposed change gets rejected.&lt;/p&gt;
&lt;h2&gt;Replace GUI with code&lt;/h2&gt;
&lt;p&gt;Workflow, that is represented by the GUI, must be removed and in its place we must put the source code. Typically, when it comes to configuring the integration and delivery workflows, we opt for YAML code.&lt;/p&gt;
&lt;p&gt;The challenge now is to retrain software engineers from knowing how to use GUIs to configure the workflow rules to mastering YAML needed to accomplish the same self-serve automation.&lt;/p&gt;
&lt;p&gt;No one should be allowed to touch the materialized computing artifact (such as the implemented workflow engine) with their 'bare hands' (by 'bare hands' we mean direct access to the implemented machinery via a GUI tool).&lt;/p&gt;
&lt;p&gt;It is therefore urgent to rush and get rid of all GUI tools that enable software engineers to perform self-serve workflow configuration activities. Instead, we must switch wholesale to learning how to use YAML properly.&lt;/p&gt;
&lt;h2&gt;What are the advantages of workflow-as-code?&lt;/h2&gt;
&lt;p&gt;Just by the virtue of disabling engineers from touching the workflow machinery directly, we ensure that any changes to the workflow get implemented through official channels. When a team decides to make changes to the workflow, they cannot do it directly. They must first create a workflow feature branch, make proposed changes in isolation, test them, then open a Pull Request (PR), proposing these changes get merged to the main trunk. The PR gets reviewed by the stakeholders on the CI/CD workflow, and if approved, the changes will get merged and then materialized as an implemented workflow.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part6.html" rel="alternate"></link><published>2021-03-02T00:00:00-08:00</published><updated>2021-03-02T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-02:/yaml-pipelines-part6.html</id><summary type="html">&lt;p&gt;Neither the bootstrap nor generic templates are rocket science, and the YAML-based pipelines are as complex as &lt;strong&gt;you&lt;/strong&gt; make them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part 1&lt;/a&gt;. After introducing the blueprint templates on &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;, it is time to emphasise that these new YAML-based pipelines are not complex if applied correctly.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why this post?&lt;/h1&gt;
&lt;p&gt;We have received feedback from the engineering teams and our inspect and adapt workshops, that YAML pipelines are complex and require a steep learning curve. &lt;/p&gt;
&lt;p&gt;Perhaps I am biased, but I disagree. My four cents (points):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YAML pipelines are more intuitive to engineers familiar with code.&lt;/li&gt;
&lt;li&gt;Apart from the visual value, the Classic pipeline editor adds no value to the editing experience. Adding a step in a YAML pipeline is as simple  (similar) as adding a step in a classic pipeline.&lt;/li&gt;
&lt;li&gt;If all else fails, create your Azure Pipeline in your editor of choice and export to YAML. That is how we started many moons ago and a great way to get familiar with the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema"&gt;YAML schema&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When you start using pre-packaged templates, covered in &lt;a href="/yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt;, &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt; and revisited herein, the adoption of YAML pipelines becomes a no-brainer. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;Simplicity is the ultimate sophistication&lt;/em&gt;" - Leonardo da Vinci&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Generic pipeline value streams&lt;/h1&gt;
&lt;p&gt;Let us take a few steps back and take a quick look at an Azure Pipeline from a high altitude. Each pipeline is made of one or more stages, each of which is a collection of related jobs, each of which is a collection of steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure Pipeline from space&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us skip stages, zoom in, and start at the point of jobs, as shown above.&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;&lt;em&gt;&lt;em&gt;A job is a collection of steps run by an agent or on a server. Jobs can run conditionally and might depend on earlier jobs.&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;" - &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema#job"&gt;yaml-schema&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you add SonarQube to your pipeline, you know (or will find out) that the SonarQube &lt;strong&gt;Prepare&lt;/strong&gt;, &lt;strong&gt;Analyse&lt;/strong&gt;, and &lt;strong&gt;Publish&lt;/strong&gt; steps must run in the same job context as the &lt;strong&gt;build&lt;/strong&gt;. This is not a new constraint and applies to the &lt;strong&gt;Classic&lt;/strong&gt;, &lt;strong&gt;YAML out-of-the-box&lt;/strong&gt;, and our &lt;strong&gt;Blueprint-based&lt;/strong&gt; Azure Pipelines.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;simplest&lt;/strong&gt; pipeline you can configure is a single-job pipeline, which runs your &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; steps, the &lt;strong&gt;DevSecOps&lt;/strong&gt; steps (SonarQube, WhiteSource), and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps within one and the same job 1 context, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Single Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you split your pipeline into two jobs you have two separate job contexts. Similar to the single-job you could run both the &lt;strong&gt;DevSecOps&lt;/strong&gt; and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps within the same job 1 context. Alternatively, you could run the &lt;strong&gt;DevSecOps&lt;/strong&gt; in the job 1 context and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps in the job 2 context, as shown below. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dual Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dual Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-2.png"&gt;
With multiple jobs you can embrace parallelism, introduce job dependencies and flows, isolate steps in separate job contexts, and run steps on different agent specifications (Linux, Windows, macOS) - all in one pipeline.&lt;/p&gt;
&lt;p&gt;Multi Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Multi Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember, "&lt;em&gt;with power, comes great responsibility&lt;/em&gt;". As we embrace complexity, we throw simplicity out of the window. In fact, as with the pile of LEGO blocks analogy we used in &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;, you can create really powerful, but also complex and hard to evolve and maintain pipelines. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WHAT and HOW you build is up to you...&lt;/p&gt;
&lt;p&gt;&lt;img alt="LEGO" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-7.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Bootstrap template demystified&lt;/h1&gt;
&lt;p&gt;We covered the basics and the power of YAML templates in previous parts of this pipeline series.&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;Bootstrap&lt;/strong&gt; template is a standard YAML template with conditional statements. Visualise the internals as a &lt;strong&gt;switch&lt;/strong&gt; statement, which injects templates containing steps, based on the &lt;strong&gt;bootstrapMode&lt;/strong&gt; parameter passed.&lt;/p&gt;
&lt;p&gt;The following table summarises the currently available bootstrap &lt;strong&gt;modes&lt;/strong&gt;, the &lt;strong&gt;templates&lt;/strong&gt;, and associated &lt;strong&gt;steps&lt;/strong&gt; it injects into your pipeline at queue time.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BOOTSTRAPMODE&lt;/th&gt;
&lt;th&gt;INJECT TEMPLATE&lt;/th&gt;
&lt;th&gt;RUN STEPS&lt;/th&gt;
&lt;th&gt;TEMPLATE OWNED BY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;init&lt;/td&gt;
&lt;td&gt;DevSecOpsInit.yml&lt;/td&gt;
&lt;td&gt;SonarQube Prepare&lt;/td&gt;
&lt;td&gt;DevSecOps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devsecopsonly&lt;/td&gt;
&lt;td&gt;DevSecOps.yml&lt;/td&gt;
&lt;td&gt;SonarQube Analyse, SonarQube Publish, and WhiteSource&lt;/td&gt;
&lt;td&gt;DevSecOps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buildingcodeonly&lt;/td&gt;
&lt;td&gt;BuildingCode.yml&lt;/td&gt;
&lt;td&gt;BuildingCode Scripts, such as Stryker&lt;/td&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;DevSecOps.yml &lt;strong&gt;+&lt;/strong&gt; BuildingCode.yml&lt;/td&gt;
&lt;td&gt;SonarQube Analyse, SonarQube Publish, WhiteSource, and BuildCode&lt;/td&gt;
&lt;td&gt;DevSecOps and Engineering Practices&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a visualisation of the above table for the visual minds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bootstrap Template and Bootstrap Modes&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bootstrap" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-6.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; &lt;br/&gt;
Our Bootstrap.yml templates is a standard YAML-template, as are the templates it injects at queue time. There is no hidden cloak and dagger technology or additional complexity! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- template: Templates/Bootstrap.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    bootstrapMode:    &amp;#39;init&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    applicationType:  &amp;#39;TODO REPLACE WITH SUPPORTED TYPE&amp;#39; # dotnet, angular&lt;/span&gt;
&lt;span class="err"&gt;    applicationGuid:  $(productGuid)&lt;/span&gt;
&lt;span class="err"&gt;    portfolioName:    $(portfolioName)&lt;/span&gt;
&lt;span class="err"&gt;    productName:      $(productName)&lt;/span&gt;
&lt;span class="err"&gt;    sourcesDirectory: $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You now have the &lt;strong&gt;option&lt;/strong&gt; of including the Bootstrap.yml template instead of explicitly including SonarQube, WhiteSource, and Building Code steps. Note I say &lt;strong&gt;option&lt;/strong&gt;, not that you must do it one way or the other. &lt;/p&gt;
&lt;p&gt;Similar to Software-as-a-Service (SaaS) solutions you can delegate these steps and accountability to the Bootstrap.yml template, which is continuously enhanced, maintained and supported by our pipeline working group. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Generic Blueprint templates demystified&lt;/h1&gt;
&lt;p&gt;Our &lt;strong&gt;azure-pipeline-single-job.yml&lt;/strong&gt; is a generic blueprint that implements the single job pipeline we discussed and includes two calls to the &lt;strong&gt;bootstrap.yml&lt;/strong&gt; template to &lt;strong&gt;init&lt;/strong&gt;ialise the DevSecOps steps and to &lt;strong&gt;run&lt;/strong&gt; the DevSecOps and Building code steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Single Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All you need to do, is find the &lt;strong&gt;TODO&lt;/strong&gt; placeholders to update relevant parameters and insert your build and test steps. You can explore the &lt;strong&gt;azure-pipeline-single-job.yml&lt;/strong&gt; blueprint in &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;azure-pipeline-multiple-jobs.yml&lt;/strong&gt; is a generic blueprint that implements the multi job pipeline we discussed and includes three calls to the &lt;strong&gt;bootstrap.yml&lt;/strong&gt; template to &lt;strong&gt;init&lt;/strong&gt;ialise the DevSecOps steps and run the &lt;strong&gt;devseconlyinit&lt;/strong&gt; within the same job context. Lastly, it runs the &lt;strong&gt;buildingcodeonly&lt;/strong&gt; steps in a different job context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dual Job Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dual Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As with the azure-pipeline-single-job.yml blueprint, you then search for the &lt;strong&gt;TODO&lt;/strong&gt; placeholders and update relevant parameters and insert your build and test steps. It is that simple!&lt;/p&gt;
&lt;p&gt;The genetic blueprints work well for new pipelines. If you already have a YAML-based pipeline, you can include the bootstrap.yml template into your existing pipeline. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Blueprint-related questions&lt;/h1&gt;
&lt;p&gt;Here are a few of the top questions we have received from engineering to date.&lt;/p&gt;
&lt;h2&gt;Q1: Who owns our pipeline blueprints?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Our common engineering system pipeline working group, a cluster of engineers representing architecture, development, operations, and security have joint forces to pursue our quest for &lt;strong&gt;automation&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;simplicity&lt;/strong&gt;, and &lt;strong&gt;alignment&lt;/strong&gt; with our guardrails (a friendlier term for governance). While we are all accountable for the blueprints and templates discussed herein, DevSecOps owns the DevSecOps*.yml templates and Engineering Practices the BuildingCode templates and associated scripts.&lt;/p&gt;
&lt;h2&gt;Q2: How can engineers make changes to the blueprints?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-9.png"&gt;&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests"&gt;pull request&lt;/a&gt; workflow, engineers can discuss blueprint and template changes and agree to merge them once all stakeholders approve. We strive for complete transparency, allowing everyone to view the blueprints and associated templates, and contribute towards the continuous innovation of our YAML templates.&lt;/p&gt;
&lt;h2&gt;Q3: Why are we so fixated on the consistency and simplicity goals?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-10.png"&gt;&lt;/p&gt;
&lt;p&gt;Infrastructure as code (IaC) is typically associated with the process of managing and provisioning computer data centers through machine-readable configuration files. The aim is to deprecate physical hardware configuration and interactive configuration tools. &lt;/p&gt;
&lt;p&gt;Within the context of our common engineering system, we are striving to use infrastructure as code to provision our continuous delivery pipelines and associated services as well. While the classic Azure Pipelines are powerful and well established, they are configured using a graphical configuration tool and tend to become hard to maintain and enhance over time.&lt;/p&gt;
&lt;p&gt;The switch to YAML-based Azure Pipelines is enabling us to version control and store the pipelines as machine- and human-readable configuration code. We refer to this as &lt;strong&gt;pipeline as code (PaC)&lt;/strong&gt;. If and only if we manage to create a consistent infrastructure of pipelines, using templates and blueprints, we not only enable our engineering teams, but take the first steps towards self service automation.&lt;/p&gt;
&lt;p&gt;But, that is a vast topic for another day. Back to our YAML pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we all agree that neither the bootstrap nor generic templates are rocket science, and that YAML-based pipelines are as complex as &lt;strong&gt;you&lt;/strong&gt; make them, we can move ahead with the adoption of our new pipelines. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[X] Consistent pipelines&lt;/li&gt;
&lt;li&gt;[X] Enable engineers&lt;/li&gt;
&lt;li&gt;[X] Simple pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But wait, there is more ... in the next part 7, my colleague &lt;a href="https://github.com/orgs/CommunityBCIT/people/said-akram-wcbbc"&gt;Said&lt;/a&gt; will introduce the next generation of blueprints which are even simpler, supporting our goals for consistency and enablement. &lt;/p&gt;
&lt;p&gt;See you in part 7 (coming soon).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | Part 6 | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>WorkSafeBC DevOps Celebrate 100th Sprint</title><link href="https://wsbctechnicalblog.github.io/wsbc-devops-celebrate-hundredth-sprint.html" rel="alternate"></link><published>2021-02-19T00:00:00-08:00</published><updated>2021-02-19T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-02-19:/wsbc-devops-celebrate-hundredth-sprint.html</id><summary type="html">&lt;p&gt;WorkSafeBC DevOps 100th sprint celebration coincided with the 20th anniversary of the Agile Manifesto&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Navigating the Future&lt;/h2&gt;
&lt;p&gt;A happy coincidence of celebrating WorkSafeBC DevOps 100th sprint at the same time when we are celebrating 20th anniversary of the Agile Movement, provided an opportunity to host &lt;a href="https://wingman-sw.com/about"&gt;James Grenning&lt;/a&gt;, the original signatory of the Agile Manifesto.&lt;/p&gt;
&lt;p&gt;A regular &lt;strong&gt;Navigating the Future&lt;/strong&gt; session, which DevOps is holding every PI, served as a good platform to usher the celebrations.&lt;/p&gt;
&lt;p&gt;The celebration started with WorkSafeBC &lt;strong&gt;IT Director&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/andrekaminski/"&gt;Andre Kaminski&lt;/a&gt; describing his journey to Agile and DevOps. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Andre Kaminski" src="/images/Andre_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Andre explained how in the early days his relentless focus on value delivery to the customer led him to search for ways that are not heavily based on the process and on producing copious documentation. As soon as Agile arrived on the scene, Andre was an early adopter; he was also a pioneer with adopting early stages of DevOps. Andre concluded his presentation by saying that after successfully embracing Agile and DevOps, he never looked back.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Indispensable Value of Technical Excellence&lt;/h2&gt;
&lt;p&gt;Our guest of honour, James Grenning, generously spent one hour sharing his journey from the early days of switches and toggles programming, all the way to the present day of Agile DevOps and Continuous Delivery. James had repeatedly potentiated that it is important to strive to avoid getting stuck in the 'Do' loop, where we have mastered some skills and reached the plateau. It's the 'Expert Beginner' stage that is the bottleneck slowing us down and preventing us from reaching our full potential.&lt;/p&gt;
&lt;p&gt;&lt;img alt="James Grenning" src="/images/James_Grenning.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;The only way to prevent the 'Expert Beginner' impasse is to focus on &lt;em&gt;technical excellence&lt;/em&gt;. And the most effective way to pursue technical excellence is adopting &lt;strong&gt;Extreme Programming (XP)&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Service Virtualization&lt;/strong&gt; and &lt;strong&gt;SOLID principles&lt;/strong&gt; and &lt;strong&gt;design patterns&lt;/strong&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Finally, &lt;a href="https://www.linkedin.com/in/todd-yule-4679646/"&gt;Todd Yule&lt;/a&gt; (our &lt;strong&gt;Head of Innovation and Chief Digital Officer&lt;/strong&gt;) tied everything together by highlighting the salient points of our DevOps progress, which he had originally instigated and is now leading. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Todd Yule" src="/images/Todd_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Todd repeated James' advice to use &lt;strong&gt;Scrum&lt;/strong&gt; as a practice that points out deficiencies which need to be solved by using &lt;strong&gt;XP&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Agile Mindset&lt;/strong&gt; and &lt;strong&gt;Continuous Delivery&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Events"></category><category term="agile"></category><category term="devops"></category><category term="events"></category></entry><entry><title>Part 5: Pipelines - Blueprints to fuel consistency and enablement</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html" rel="alternate"></link><published>2021-01-28T00:00:00-08:00</published><updated>2021-01-28T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-28:/yaml-pipelines-part5.html</id><summary type="html">&lt;p&gt;Think of &lt;strong&gt;blueprints&lt;/strong&gt; and associated &lt;strong&gt;templates&lt;/strong&gt; as re-usable LEGO blocks, ranging from a bag of "do it yourself" blocks, to complex and detailed kits, such as the Imperial Star Destroyer.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part 1&lt;/a&gt;. After covering some of the gems and magic in &lt;a href="/yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt; we will peek at our pipeline blueprints.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What do we mean with pipeline blueprints?&lt;/h1&gt;
&lt;p&gt;If you ask 13 software engineers to cook a continuous delivery pipeline, you are likely to get more than 13 variations. Although this enables innovation, it distracts the engineers from their core responsibility to continuously delivering functional code and value. More concerning the variations of artworks (pipelines) hamper reuse and bloat support and maintenance costs.&lt;/p&gt;
&lt;p&gt;Like the building-blueprint counterpart, our &lt;strong&gt;generic&lt;/strong&gt; and &lt;strong&gt;application-type&lt;/strong&gt; pipeline blueprints define templates that allow rapid and consistent creation of unlimited number of continuous delivery pipeline copies. Let us have a look at a few of our blueprints.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Generic blueprints&lt;/h1&gt;
&lt;p&gt;We have defined two generic blueprints. One defines a one stage, multiple jobs pipeline, allowing parallel runs on separate agents, each with multiple steps. The simpler and more recommended blueprint defines a one stage, one job, with multiple steps pipeline. It keeps things simple, running everything on one agent. &lt;/p&gt;
&lt;p&gt;Both blueprints call our &lt;strong&gt;bootstrap&lt;/strong&gt; template, which injects other templates introducing DevSecOps scans such as SonarQube and WhiteSource, as well as custom built &lt;strong&gt;building code&lt;/strong&gt; scripts and products, based on queue-time parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;azure-pipeline-single-job.yml flow
&lt;img alt="azure-pipeline-single-job.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the blueprint defines a pipeline that runs within the same &lt;strong&gt;job&lt;/strong&gt; context, in a single &lt;strong&gt;stage&lt;/strong&gt;. It injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with an &lt;strong&gt;init&lt;/strong&gt; parameter, to inject initialisation templates, with tasks such as &lt;strong&gt;SonarQube Prepare&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: SonarQube Prepare for .NET applications&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# SONARQUBE - dotnet&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SonarQubePrepare&lt;/span&gt;&lt;span class="mi"&gt;@4&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SonarQube&lt;/span&gt; &lt;span class="n"&gt;Prepare&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;SonarQube&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeService&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;scannerMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MSBuild&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;projectKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeProjectKey&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;projectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeProjectName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the end of the continuous integration (CI) part of the pipeline, the blueprints injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with a &lt;strong&gt;run&lt;/strong&gt; parameter, to inject tasks such as &lt;strong&gt;SonarQube Analyze&lt;/strong&gt;, &lt;strong&gt;SonarQube Publish&lt;/strong&gt;, &lt;strong&gt;WhiteSource&lt;/strong&gt;, and &lt;strong&gt;Building Code&lt;/strong&gt; validations. Single jobs are the most efficient as dependencies, such as source code, extensions, and the bootstrap toolbox only need to be loaded once.&lt;/p&gt;
&lt;p&gt;Here is the latest version of this blueprint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;azure-pipeline-single-job.yml source code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="nl"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;

&lt;span class="cp"&gt;# Semantic version as per Azure DevOps Naming Conventions.&lt;/span&gt;
&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranchName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Configure the default agent pool and image to use for your pipeline&lt;/span&gt;
&lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                 &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt; &lt;span class="n"&gt;Pipelines&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# Variables&lt;/span&gt;
&lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;BuildConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;Release&lt;/span&gt;
  &lt;span class="nl"&gt;BuildPlatform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt; &lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;templateVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;1.0.9&lt;/span&gt;
  &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PORTFOLIO&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PRODUCT&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;NEW&lt;/span&gt; &lt;span class="n"&gt;GUID&lt;/span&gt; &lt;span class="n"&gt;WITHOUT&lt;/span&gt; &lt;span class="n"&gt;BRACKETS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# Repository resources&lt;/span&gt;
&lt;span class="nl"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="cp"&gt;# =======================================================================&lt;/span&gt;
  &lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CDTemplates&lt;/span&gt;
    &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Common&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Engineering&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="cp"&gt;# =======================================================================&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# START OF BUILD and TEST STAGE&lt;/span&gt;
&lt;span class="cp"&gt;# - GitVersion task looks at your Git history and works out the semantic &lt;/span&gt;
&lt;span class="cp"&gt;#   version of the commit being built.&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nl"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Continuous&lt;/span&gt; &lt;span class="n"&gt;Integration&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
    &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
      &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;
      &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
      &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# PREREQUISITES&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps that have to run before the build here, for example NPM, NuGet&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert your scripts, steps, and tasks here and remove this comment&lt;/span&gt;

&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP VALIDATION, STAGE: CI_BOOTSTRAP_INIT&lt;/span&gt;
&lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDTemplates&lt;/span&gt;
      &lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nl"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;SUPPORTED&lt;/span&gt; &lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angular&lt;/span&gt;
        &lt;span class="nl"&gt;applicationGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# CONTINUOUS INTEGRATION BUILD&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps/tasks to build your solution here. &lt;/span&gt;
&lt;span class="cp"&gt;# - Move initialisations (NPM, NuGet,...) to PREREQUISITES section&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#  TODO Insert your scripts, steps, and tasks here and remove these comments&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# CONTINUOUS INTEGRATION TEST&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps/tasks to test your solution here&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert your scripts, steps, and tasks here and remove this comment&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# PUBLISH&lt;/span&gt;
&lt;span class="cp"&gt;# - Publish the build and test artifacts&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert build and test artifact publication tasks&lt;/span&gt;

&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP VALIDATION, STAGE: CI_BOOTSTRAP&lt;/span&gt;
&lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDTemplates&lt;/span&gt;
      &lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nl"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;SUPPORTED&lt;/span&gt; &lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angular&lt;/span&gt;
        &lt;span class="nl"&gt;applicationGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Engineers can &lt;strong&gt;copy-paste&lt;/strong&gt; this blueprint into their application repository, look for &lt;strong&gt;TODO&lt;/strong&gt;s, update and fine-tune the pipeline as needed. Sections which should not be deleted or changed are enclosed in skull &amp;amp; cross-bones markers. &lt;strong&gt;Simple!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The other &lt;strong&gt;generic&lt;/strong&gt; template, azure-pipeline-multiple-jobs.yml, enables engineers to craft multi-job pipelines, enabling features such as parallelism. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;azure-pipeline-multiple-jobs.yml flow
&lt;img alt="azure-pipeline-multiple-jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the blueprint defines two jobs, one including the &lt;strong&gt;initialisation&lt;/strong&gt; and &lt;strong&gt;build&lt;/strong&gt; sections, and the other the &lt;strong&gt;test&lt;/strong&gt; section. Some tasks, such as the &lt;strong&gt;SonarQube&lt;/strong&gt; tasks have to run within the same job context, which is why the blueprint injects the bootstrap template three times. As before, the first injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with an &lt;strong&gt;init&lt;/strong&gt; parameter, to inject initialisation templates, with tasks such as &lt;strong&gt;SonarQube Prepare&lt;/strong&gt;. The second injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with a &lt;strong&gt;devsecopsonly&lt;/strong&gt; parameter, which magically injects all of the DevSecOps scans, such as &lt;strong&gt;SonarQube Analyse&lt;/strong&gt;, &lt;strong&gt;SonarQube Publish&lt;/strong&gt;, and &lt;strong&gt;WhiteSource&lt;/strong&gt;. The remaining templates, such as the &lt;strong&gt;Building Code&lt;/strong&gt; are only injected at the end when the third call is made to the &lt;strong&gt;bootstrap&lt;/strong&gt; template with the &lt;strong&gt;buildingcodeonly&lt;/strong&gt; parameter.&lt;/p&gt;
&lt;p&gt;To summarise, we are trying to simplify our pipeline environment and empower both development and operations with these blueprints. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, we can do better!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;App-type Blueprints&lt;/h1&gt;
&lt;p&gt;With application-type, in short app-type, blueprints we are taking the continuous integration (CI) pipelines light-years further in terms of our goals for &lt;strong&gt;simplicity&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;enablement&lt;/strong&gt;, and &lt;strong&gt;consistency&lt;/strong&gt;. Each app-type blueprint, based on our pipeline champion Said Akram's (@said-akram-wcbbc) ingenious proof-of-concept, consists of a &lt;strong&gt;starter&lt;/strong&gt; template, an &lt;strong&gt;app-type&lt;/strong&gt; template, and a reference &lt;strong&gt;sample&lt;/strong&gt; implementation, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;App-type blueprint parts&lt;/p&gt;
&lt;p&gt;&lt;img alt="azure-pipeline-multiple-jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;starter&lt;/strong&gt; template allows our engineers to configure their continuous integration pipeline, after they &lt;strong&gt;copy-paste&lt;/strong&gt; it into their application repository. This is the only moving part that is copied and becomes part of the application code base.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE - Azure Function &lt;strong&gt;starter&lt;/strong&gt; template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Trigger&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt;

&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CDAppTemplates&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;Common-Engineering-System/AzureDevOps.Automation.Pipeline.AppTemplates&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Semantic&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;Common&lt;/span&gt; &lt;span class="n"&gt;Engineering&lt;/span&gt; &lt;span class="n"&gt;Naming&lt;/span&gt; &lt;span class="n"&gt;Conventions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SourceBranchName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;VARIABLES&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PORTFOLIO NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;StarWars&lt;/span&gt;
  &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PRODUCT NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Imperial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Star&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Destroyer&lt;/span&gt;

&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="sr"&gt;/AzureFunction/&lt;/span&gt;&lt;span class="n"&gt;azureFunctionTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDAppTemplates&lt;/span&gt;
  &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Whether&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;AssemblyInfo&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
    &lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH .NET CORE VERSION&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;applicationGuid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH A NEW GUID WITHOUT BRACKETS&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;257929&lt;/span&gt;&lt;span class="n"&gt;e89c69471083efb51899b42bdb&lt;/span&gt;
    &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;restoreBuildProjects&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;**/*.csproj&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;vstsFeed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;               &lt;span class="s1"&gt;&amp;#39;11111111-2222-3333-4444-555555555555&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;_NuGet&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;
    &lt;span class="n"&gt;buildConfiguration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;Release&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;starter&lt;/strong&gt; template &lt;strong&gt;extends&lt;/strong&gt; the pipeline with the &lt;strong&gt;app-type&lt;/strong&gt; template, in our example the azureFunctionTemplate.yml. With this &lt;strong&gt;magic&lt;/strong&gt; we introduce the template &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/security/templates?view=azure-devops#use-extends-templates"&gt;&lt;strong&gt;extend&lt;/strong&gt;&lt;/a&gt; feature, which sprinkles a dash of &lt;strong&gt;security&lt;/strong&gt; on our pipelines, as we can now check that a pipeline is extended from a trusted template in &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;environment&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml"&gt;service connection&lt;/a&gt; approvals and checks. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Required template checks&lt;/p&gt;
&lt;p&gt;&lt;img alt="azure-pipeline-multiple-jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;app-type&lt;/strong&gt; template is visible, but not modifiable for the owner of the pipeline. We abstract the entire continuous integration (CI) process from the engineers, which promotes &lt;strong&gt;consistency&lt;/strong&gt;, delegates &lt;strong&gt;responsibility&lt;/strong&gt; for the implementation to our common engineering system team, and &lt;strong&gt;encourages&lt;/strong&gt; engineers to be razor-focused on their application. The complexity of injecting our &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates, task sequence, stage and job context, and pipeline plumbing we discussed in previous parts, is abstracted (hidden). &lt;/p&gt;
&lt;p&gt;Let us briefly review this with a visual.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;azure-pipeline-single-job.yml Custom Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="azure-pipeline-multiple-jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;strong&gt;custom&lt;/strong&gt; blueprints the starter template presents a much larger exposure area, where we can observe template drift, vulnerability injections, and complexity that the engineering teams should not have to worry about. As discussed, the latest &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates are pulled from the &lt;code&gt;*.Templates&lt;/code&gt; repository and injected into the pipeline instance at queue time.&lt;/p&gt;
&lt;p&gt;Time to reiterate ... we can do better!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AzureFunctionTemplate.yml Starter Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="azure-pipeline-multiple-jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;strong&gt;app-type&lt;/strong&gt; blueprints, the starter template has a much smaller exposure area. The latest &lt;strong&gt;app-type&lt;/strong&gt; template is pulled from the &lt;code&gt;*.AppTemplates&lt;/code&gt; repository, which in turn injects the latest &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates from the &lt;code&gt;*.Templates&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;You should appreciate the magic of the YAML pipelines by now!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Enabling continuous innovation and rapid change&lt;/h1&gt;
&lt;p&gt;We always start our YAML awareness and training workshops with the following scenario and question: "&lt;em&gt;Assume we have 1000 classic pipelines and 1000 YAML pipelines, and we need to make a change to one of the pipeline tasks that takes approximately 1 minute. How long will it take us to change all of the classic pipelines and all of the YAM pipelines?&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;We then give everyone 5 minutes to discuss and place their bets. Discussions vary, but usually include reference to mind-numbing classic pipeline editor, &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops"&gt;Task groups&lt;/a&gt;, code search and replace, followed by vibrant debates and eventually stunned silence ... the proverbial "room full of crickets."&lt;/p&gt;
&lt;p&gt;It is a trick question, because it depends on how the pipelines are designed, which can vary from minutes to days of effort. &lt;/p&gt;
&lt;p&gt;What should be evident, however, is that any change will be &lt;strong&gt;faster&lt;/strong&gt;, &lt;strong&gt;simpler&lt;/strong&gt;, and &lt;strong&gt;safer&lt;/strong&gt; to make if the &lt;strong&gt;consistency&lt;/strong&gt; of our pipelines is high, and the &lt;strong&gt;exposure area&lt;/strong&gt; is small. &lt;/p&gt;
&lt;p&gt;We recently received a request from DevSecOps to change all our pipelines to always run the DevSecOps scans, instead of just as part of pull request validation builds. It literally took us minute to create a feature branch, tweak the bootstrap template, and validate the change with a collaborative pull request. Once merged into the *.Templates repository, all new pipeline instances showcased the new default behaviour. DevSecOps were happy and the engineering teams unaware of any change.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Enabling automation&lt;/h1&gt;
&lt;p&gt;Lastly, we realised that our self-service automation goal is also no longer a distant dream. The app-type templates enable us to ask the engineering teams a few questions, then run automation that creates a new application repository and pipeline in seconds - and consistently! That, however, is a story for another day in Part 7: Self-service automation - A dream turns into reality q;)&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We have now covered the continuous integration (CI), also referred to as build, pipeline though the lens of YAML. You can think of the &lt;strong&gt;blueprints&lt;/strong&gt; and associated &lt;strong&gt;templates&lt;/strong&gt; as re-usable LEGO blocks, ranging from a bag of "do it yourself" blocks, to complex and detailed kits, such as the Imperial Star Destroyer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LEGO Imperial Star Destroyer kit&lt;/p&gt;
&lt;p&gt;&lt;img alt="LEGO Image" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we will explore continuous deployment (CD). See you in part 6 (coming soon).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; |  &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Part 4: Pipelines - Magic of queue time assembly</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part4.html" rel="alternate"></link><published>2021-01-13T00:00:00-08:00</published><updated>2021-01-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-13:/yaml-pipelines-part4.html</id><summary type="html">&lt;p&gt;We can use the power of the new multi-stage YAML pipelines to make even our most critical security engineers smile from ear to ear.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part1&lt;/a&gt;. It is time to move from theory to practice and explore some of the magic that is pushing us from the classic to the new YAML-based Azure Pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Re-usable Templates&lt;/h1&gt;
&lt;p&gt;In &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt; we covered YAML pipelines and why they are so exciting. Ardent classic pipeline supporters will argue that &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops"&gt;Task Groups&lt;/a&gt; offer the same feature as YAML templates - I would argue similar, but not the same. Why? Both allow us to abstract pipeline logic into re-usable containers, which can be included in pipeline definitions.&lt;/p&gt;
&lt;p&gt;Where the YAML-template take us a huge stride further is magic #2 we are covering later in this post and the fact that template are version controlled and exposed to change, review, and collaboration through &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests?view=azure-devops"&gt;Pull Requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, when we plan to make fundamental and potentially pipeline breaking changes to our pipelines, we can build and test the change continuously, while collaborating with the rest of the pipeline working group in an all-embracing pull request. Only once all guardrails are met and everyone is satisfied that we have a quality change, will the pull request be approved, and the changes merged into our master branch to be consumed.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #1 - Parameter driven pipeline&lt;/h1&gt;
&lt;p&gt;Let us start looking at some of the magic, starting with a small, yet powerful feature of parameters.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-3.png"&gt;&lt;/p&gt;
&lt;p&gt;You can define parameters in your main template, as shown in the above illustration on the left. As discussed in &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; we define parameters as key/value paid and optionally add a list of values, as well as a default.&lt;/p&gt;
&lt;p&gt;The magic appears when you run the pipeline. As shown on the right in the above illustration, the parameter(s) are included as run-time and editable pipelines values. So cool!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #2 - Queue Time Pipeline Assembly&lt;/h1&gt;
&lt;p&gt;With classic pipelines what you design and what you see in the pipeline editor, is what you will queue and what the agent pools get to process. And yes, we can add conditional steps by using custom conditions, such as &lt;code&gt;ne(variables['Agent.JobStatus'], 'SuceededWithIssues)&lt;/code&gt;, but whether the conditions are met, the tasks will be included in the queued pipeline.&lt;/p&gt;
&lt;p&gt;With the multi-stage pipelines this is where magic #2 enters the building, because conditional expressions are validated at queue time to &lt;strong&gt;inject&lt;/strong&gt; or &lt;strong&gt;ignore&lt;/strong&gt; parts of the templates. The following image shows the &lt;strong&gt;same&lt;/strong&gt; pipeline queued - on the left (1) it runs with 14 steps and on the right (2) with 24 steps. The same pipeline ... what is going on?!?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Same pipeline, same definition, different context!
&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Upon closer inspection we notice a (3) &lt;strong&gt;Bootstrap Validation Suppression Alert&lt;/strong&gt; in the first (1) pipeline run, which is our current behaviour for builds run outside a pull request. On the right we see the same pipeline run (2) within the context of a pull request validation build, which &lt;strong&gt;injects&lt;/strong&gt; (4) SonarQube, (5) WhiteSource, and (6) our Building Code. It is important to emphasise that the pipeline on the left does not include the additional steps, optimising the runtime processing and keeping the logs focused and simple.&lt;/p&gt;
&lt;p&gt;The magic is based on conditional expressions, as the following extract I pulled from our bootstrap template. It instructs the Azure Pipeline queuing feature to only inject the template if ( we are in the "run" mode, and ( the source branch is "merge" or forceCheck is true ) ). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;run&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SampleFolder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SampleTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the conditional expression is not met, the template is &lt;strong&gt;not&lt;/strong&gt; injected, and the template contents omitted from the queued pipeline. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #3 - Cannot override guardrails&lt;/h1&gt;
&lt;p&gt;Remember &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/deploy-multiple-branches?view=azure-devops#:~:text=Azure%20Pipelines%20%7C%20Azure%20DevOps%20Server%202019%20Artifact,stage%20only%20when%20those%20filter%20conditions%20are%20met."&gt;artifact filters&lt;/a&gt;? A great way to protect deployment stages in classic pipelines from artifacts built from untrusted branches - "&lt;em&gt;Applying the artifact filter to a specific branch results in the artifact deploying to a specific stage only when those filter conditions are met.&lt;/em&gt;" - docs.microsoft.com&lt;/p&gt;
&lt;p&gt;Unfortunately, as our security engineers remind us on a regular basis, these can be overridden by users with the right permission. Something that promises to be and should be immutable, can mutate as needed - not cool!&lt;/p&gt;
&lt;p&gt;Looking forward, however, we can use the power of the new multi-stage YAML pipelines to make even our most critical security engineers smile from ear to ear ... and that is no easy feat!&lt;/p&gt;
&lt;p&gt;Watch this quick video for a demo of the power, sorry magic, of the new pipelines.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/DWuDqCM1t6A"&gt;&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-2.png"&gt;&lt;/a&gt; [1:52]&lt;/p&gt;
&lt;p&gt;Here is an extract from our demo pipeline. Note that unlike in prior examples, we have no conditional expression to determine whether to inject the template or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# DEV Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStage.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Development&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Development&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Development Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# SY Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStage.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_System_Test&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD System Test&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;windows-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP System Test Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# ST Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStageR.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Stage&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Stage&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Stage Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# PROD Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStageR.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Production&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Production&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;macOS-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Production Environment&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;The last deployment uses the macOS pool, which created a few migraines for us that are worth pointing out. If you peruse &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml#networking"&gt;Microsoft-hosted agents&lt;/a&gt; you will note two potential issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&lt;em&gt;Agents that run macOS images are provisioned on Mac pros. These agents always run in US and Europe irrespective of the location of your Azure DevOps organization. If data sovereignty is important to you and if your organization is not in one of these geographies, then you should not use macOS images&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;em&gt;Our Mac IP ranges are not included in the Azure IPs above, though we are investigating options to publish these in the future.&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not a DevSecOps friendly agent pool - we have an open support ticket. If you want to know more or have more information, ping me!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case we are using conditional expressions in the DeploymentStage&lt;strong&gt;R&lt;/strong&gt;.yml template, which protects the higher environments ending with &lt;strong&gt;Stage&lt;/strong&gt; and &lt;strong&gt;Production&lt;/strong&gt; from all branches other than the &lt;strong&gt;release&lt;/strong&gt; branch. In the following conditional expression example we only allow deployments to the higher environments from the release branch. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Stage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are using release/* as your release branch, for example release/1.0.13, you need to change the last part of the conditional statement to something like &lt;code&gt;startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Combined with &lt;strong&gt;Approvals and checks&lt;/strong&gt; of &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml"&gt;Service connections&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;Environments&lt;/a&gt; the demonstrated magic allows us to align our pipelines with all our goals, such as alignment, consistency, enablement, and &lt;strong&gt;security&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Simplicity is a goal that will drive our future pipeline endeavors and define our success, because with all the power and flexibility of YAML, it is all too easy to create another ocean of complex and potentially unmaintainable pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we appreciate the power and some of the magic, we can shift gears to our blueprints. See you in &lt;a href="yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | Part 4 | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; |  &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part3.html" rel="alternate"></link><published>2021-01-04T00:00:00-08:00</published><updated>2021-01-04T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-04:/yaml-pipelines-part3.html</id><summary type="html">&lt;p&gt;With the support from all &lt;strong&gt;people&lt;/strong&gt;, YAML templates support our five (5) core goals and pillars of our common engineering system.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to the world of pipelines. In &lt;a href="/why-pipelines-part1.html"&gt;part1&lt;/a&gt; we discussed "why" pipelines are valuable and introduced the new Azure DevOps YAML-based pipelines in &lt;a href="/yaml-pipelines-part2.html"&gt;part2&lt;/a&gt;. In this post we explore templates as invaluable building blocks and telemetry to gather essential insights.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a YAML template?&lt;/h1&gt;
&lt;p&gt;Templates allow us to define reusable content, logic, and parameters, keeping our main pipeline definitions razor focused on the application and sharing common logic. Another advantage of templates, which we will exploit in part 7 of this adventure, is the ability to script and assemble pipelines at “queue” time.&lt;/p&gt;
&lt;p&gt;Essentially, we can define reusable code in separate templates. We can include templates within templates and define four types of templates:
- &lt;strong&gt;Stage&lt;/strong&gt; to define a set of stages of related jobs
- &lt;strong&gt;Job&lt;/strong&gt; to define a collection of steps run by an agent
- &lt;strong&gt;Step&lt;/strong&gt; to define a linear sequence of operations for a job
- &lt;strong&gt;Variable&lt;/strong&gt; as an alternative to hard coded values or variable groups&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Azure Pipelines currently support a maximum of 50 unique template files in a pipeline.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an example template, that defines the reusable code to download a universal artifact containing configuration files, download and run the &lt;a href="https://www.whitesourcesoftware.com/"&gt;WhiteSource&lt;/a&gt; unified code scanning agent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;urlUnifiedAgent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Download&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="n"&gt;universal&lt;/span&gt; &lt;span class="n"&gt;artifact&lt;/span&gt;
  &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;downloadDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;feedsToUse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;vstsFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;automation&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;
    &lt;span class="nl"&gt;vstsFeedPackage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;             &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;toolbox&lt;/span&gt;
    &lt;span class="nl"&gt;vstsPackageVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LJO&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlUnifiedAgent&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Download&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;WhiteSource&lt;/span&gt; &lt;span class="n"&gt;Unified&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apiKey&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;WorkSafeBC&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;WhiteSource&lt;/span&gt; &lt;span class="n"&gt;Unified&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Including the reusable code in your pipeline is simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;  - template: Templates/DevSecOps/Whitesource.yml@AzDOTemplates&lt;/span&gt;
&lt;span class="err"&gt;    parameters:&lt;/span&gt;
&lt;span class="err"&gt;      portfolioName: &amp;#39;DEMO.Samples&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;      productName:   &amp;#39;WhiteSource&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Why are we excited about YAML templates?&lt;/h1&gt;
&lt;p&gt;As discussed at the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093/"&gt;DevOps Vancouver Meetup: April 2020&lt;/a&gt;, anyone going through a digital transformation will acknowledge that we need to focus on products, process, and people. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.&lt;/em&gt;” – Donovan Brown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our mandate is to &lt;strong&gt;empower&lt;/strong&gt; people, standardize on the best products, and continuously improve processes to raise quality and security bars, efficiency, and reliability. We considered three options to drive a culture change with our continuous delivery pipeline infrastructure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rules Apply" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-1.png"&gt; We can enforce strict governance, standards, and rules, quickly stifling innovation and personal satisfaction.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rebellion" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-2.png"&gt; We can continue to promote complete autonomy, leading to a product and process rebellion and creating a pile of technology mess that is hard and expensive to maintain.&lt;/p&gt;
&lt;p&gt;&lt;img alt="YingYang" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-3.png"&gt; We can listen to what motivates and enables our Agile teams and work together to embrace organizational governance.&lt;/p&gt;
&lt;p&gt;We opted for the latter to enable and inspire engineering teams to learn, grow, and innovate by sharing and encouraging proven patterns and practices through guardrails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS Balance" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-4.png"&gt;&lt;/p&gt;
&lt;p&gt;But, let us get back to the core question - "&lt;em&gt;Why are we excited about YAML templates?&lt;/em&gt;". &lt;/p&gt;
&lt;p&gt;With the support from all &lt;strong&gt;people&lt;/strong&gt;, which implies down (organizational leadership) and bottom up (engineering), YAML templates support our five (5) core goals and pillars of our common engineering system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Continuously &lt;strong&gt;innovate&lt;/strong&gt; and enable users, with alignment to architecture, security and development &lt;strong&gt;guardrails&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt; to provide speed, consistency, and repeatable processes.
 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enable&lt;/strong&gt; and &lt;strong&gt;empower&lt;/strong&gt; users to create business value from ideation to production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Align with &lt;strong&gt;security&lt;/strong&gt; guardrails to minimize vulnerabilities and enforce a secure collaboration and engineering system.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;strong&gt;simple&lt;/strong&gt; to create a system that can be supported, maintained, and improved with ease. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reusable templates&lt;/h1&gt;
&lt;p&gt;As shown in the illustration below, from my rough notes, we defined two base blueprints. One that defines one stage, &lt;strong&gt;multiple jobs&lt;/strong&gt; allowing parallel runs on separate agents, each with multiple steps.&lt;/p&gt;
&lt;p&gt;The simpler and more recommended blueprint defines one stage, one job, with &lt;strong&gt;multiple steps&lt;/strong&gt;.** It keeps things simple, running everything on one agent within the same context.&lt;/p&gt;
&lt;p&gt;We are working on application-type specific quick-start blueprints, for example Angular, .NET Core, iOS application, and Azure Function application to make it even easier to get started and to encourage consistency.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blueprints and Templates Sketch" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-5.png"&gt;&lt;/p&gt;
&lt;p&gt;All our blueprints inject and rely on several templates, which are maintained in a secure repository - anyone can view, and anyone can suggest a change through a pull request.&lt;/p&gt;
&lt;p&gt;Like the WhiteSource sample mentioned before, we have two &lt;strong&gt;DevSecOps.yml&lt;/strong&gt; and &lt;strong&gt;DevSecOpsInit.yml&lt;/strong&gt; templates which define the use of Dev&lt;strong&gt;Sec&lt;/strong&gt;Ops tasks, such as SonarQube and WhiteSource tasks.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;BuildingCode.yml&lt;/strong&gt; template defines the use of building code validations, such as duplicate code, end of life validations, and detection of surviving &lt;a href="https://stryker-mutator.io/"&gt;Stryker&lt;/a&gt; mutants.&lt;/p&gt;
&lt;p&gt;Lastly, the &lt;strong&gt;bootstrap&lt;/strong&gt; template is the HEART of our new pipelines, using parameters and expressions to call the right validations for the known application types, which in turn injects the relevant templates and tasks when a pipeline is queued.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    - template: Templates/Bootstrap.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;      parameters:&lt;/span&gt;
&lt;span class="err"&gt;        bootstrapMode:    &amp;#39;init&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;        applicationType:  &amp;#39;dotnet&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;        applicationGuid:  $(productGuid)&lt;/span&gt;
&lt;span class="err"&gt;        portfolioName:    $(portfolioName)&lt;/span&gt;
&lt;span class="err"&gt;        productName:      $(productName)&lt;/span&gt;
&lt;span class="err"&gt;        sourcesDirectory: $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Remember to keep it simple&lt;/h1&gt;
&lt;p&gt;The power of YAML enables us to create invaluable pipeline definitions and abstract re-usable code in templates, as discussed. &lt;strong&gt;BUT&lt;/strong&gt; we always urge our pipeline working group and our pipeline users to keep things &lt;strong&gt;SIMPLE&lt;/strong&gt;, to ensure that we can innovate, scale, maintain the new world of continuous delivery pipelines, and empower both development and operations.&lt;/p&gt;
&lt;p&gt;We hide the complexity in our bootstrap.yml template, which can be embraced in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with one of our blueprints and insert … COPY PASTE … the application specific YAML code.&lt;/li&gt;
&lt;li&gt;Insert the blueprint template calls into existing YAML pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Blueprints and Context" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-6.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GOTCHA&lt;/strong&gt; -There is a need to run specific tasks within the same context. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is one of the reasons we call the blueprints differently in single-job and multi-job sample blueprints, as shown above. We need to ensure that SonarQube tasks, for example, run within the same job context as the build, and the building code after the test. When we run within the same context, we can also be more efficient by loading dependencies, such as source code, extensions, and configuration once.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Telemetry gives us insight&lt;/h1&gt;
&lt;p&gt;To monitor, troubleshoot, and understand the flow of value in our continuous delivery pipelines we explored a few ways to extend the Azure Pipeline analytics with metrics from our pipeline blueprints and templates. The telemetry will enable us to measure &lt;strong&gt;lead time&lt;/strong&gt;, &lt;strong&gt;cycle time&lt;/strong&gt;, and &lt;strong&gt;efficiency&lt;/strong&gt;, uncover waste, and continuously improve as discussed in &lt;a href="https://www.tactec.ca/value-stream-mapping-vsm/"&gt;value stream mapping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We opted for Azure &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview"&gt;Application Insights&lt;/a&gt;, calling a reusable PowerShell Core script in our templates to send the pipeline events, actions, and other data for future analysis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;SonarQube&lt;/span&gt; &lt;span class="n"&gt;Duplicate&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Validation&lt;/span&gt; &lt;span class="n"&gt;Telemetry&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Toolbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;logBootstrapEventToAI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;OperationId&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;$(Build.BuildNumber).$(Build.BuildId)&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Duplicate&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DuplicateCode&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(SQDCVars.codeMetricesTaskVar)&amp;quot;&lt;/span&gt;
      &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - The extract above shows how we use conditional &lt;code&gt;${{ if ... }}&lt;/code&gt; to introduce previews into our operational pipelines. If &lt;code&gt;parameters.previews&lt;/code&gt; is set to true, indicating that we are embracing preview logic, the telemetry script is included in our pipeline and called at run-time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we understand templates, we will look at the magic that has our Sec, in DevSecOps, smiling from ear to ear. See you in &lt;a href="yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | Part 3 | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Part 2: Pipelines - Introduction, variables and why spaces matter</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part2.html" rel="alternate"></link><published>2020-12-21T00:00:00-08:00</published><updated>2020-12-21T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-12-21:/yaml-pipelines-part2.html</id><summary type="html">&lt;p&gt;The new Azure DevOps YAML pipelines have been the focus of innovation, enabling engineering to treat pipelines as code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue our continuous delivery pipeline journey by switching gears from the unified pipelines to the new YAML-syntax pipelines. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why the YAML course change?&lt;/h1&gt;
&lt;p&gt;Do not get me wrong, the Unified pipelines introduced in &lt;a href="/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options&lt;/a&gt; are phenomenal and will continue to serve us for quite some time. However, we realised that the unified pipelines are based on the json-based user interface pipelines. Microsoft refers to these pipelines as &lt;strong&gt;classic interface&lt;/strong&gt; and there have been no improvements for many sprints in the Azure DevOps &lt;a href="https://docs.microsoft.com/en-us/azure/devops/release-notes/features-timeline"&gt;timeline&lt;/a&gt;. This is a &lt;strong&gt;RISK&lt;/strong&gt; as the technology is becoming stale.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Classic Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-1.png"&gt;&lt;/p&gt;
&lt;p&gt;In turn, the new Azure DevOps YAML-syntax pipelines have been the focus of innovation, enabling engineering to treat pipelines as code, use templates to promote consistency, efficiency, innovation, and quality, and last, but not least, combine continuous integration and deployment into one pipeline.&lt;/p&gt;
&lt;p&gt;&lt;img alt="YAML Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-2.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;YAML Overview&lt;/h1&gt;
&lt;p&gt;YAML is a mature human-readable data-serialization language, originally proposed by Clark Evans in 2001. It is often referred to as “yet another markup language” and “YAML ain’t markup language.&lt;/p&gt;
&lt;p&gt;When we look at the &lt;a href="https://aka.ms/yaml"&gt;Azure DevOps YAML&lt;/a&gt; pipelines, the pipeline configuration language has been kept structurally YAML. That is exciting!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BOOKMARK the gem &lt;a href="https://aka.ms/yaml"&gt;https://aka.ms/yaml&lt;/a&gt; URL!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;YAML Basics&lt;/h1&gt;
&lt;p&gt;Let us ask Azure Pipelines for a new YAML-syntax pipeline to explore. By default, Azure DevOps generates the following starter pipeline for us:&lt;/p&gt;
&lt;h2&gt;Our first pipeline&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Starter&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Start&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;minimal&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;

&lt;span class="k"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Run a one-line script&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Run a multi-line script&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is evident that:
- It is triggered on changes on the &lt;strong&gt;master&lt;/strong&gt; branch.
- It is queued on the latest &lt;strong&gt;ubuntu&lt;/strong&gt; agent pool - other options include macOS and Windows.
- It runs two steps, hosted in one stage, containing one job.&lt;/p&gt;
&lt;p&gt;Simple!&lt;/p&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;Next, we will explore two key YAML topics: &lt;strong&gt;Variables&lt;/strong&gt; and &lt;strong&gt;Parameters&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every variable is really a key:value pair.&lt;/li&gt;
&lt;li&gt;Simple variable syntax example
    &lt;code&gt;yml
    variables:
      name: WSBC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Explicit key:value syntax example
    ```yml
    variables:&lt;ul&gt;
&lt;li&gt;name:  myvariable
  value: WSBC 
```&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The key is the name of the variable, and it has a &lt;strong&gt;string&lt;/strong&gt; value. &lt;/li&gt;
&lt;li&gt;The variable is processed at &lt;strong&gt;run&lt;/strong&gt; time.&lt;/li&gt;
&lt;li&gt;To dereference a variable, simply wrap the key in &lt;code&gt;$()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There are several types of variables, whereby pipelines do not distinguish between these types. &lt;/li&gt;
&lt;li&gt;Inline variables&lt;/li&gt;
&lt;li&gt;Variable groups&lt;/li&gt;
&lt;li&gt;Template variables&lt;/li&gt;
&lt;li&gt;Pipeline variables&lt;/li&gt;
&lt;li&gt;Predefined Azure DevOps agent and build &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml"&gt;variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Explicit syntax is required when you mix variable types. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yml
 variables:
 - name:     myvariable
   value:    WSBC
 - group:    myVariableGroup
 - template: myVariableTemplate.yml&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parameters can be used in templates and pipelines. They allow us to deal with complex objects and combine parameters and expressions to create complex scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yml
  parameters:
  - name: parameterSample
    type: string
    default: sunshine
    values:
    - sunshine
    - moonlight
    - aurora&lt;/code&gt;
- Unlike variables, parameters are defined as key value pairs where the value can be of &lt;strong&gt;any type&lt;/strong&gt;.
- To dereference a parameter, simply wrap the key in &lt;code&gt;${{}}&lt;/code&gt;.
- The variable is processed at &lt;strong&gt;queue&lt;/strong&gt; time.&lt;/p&gt;
&lt;p&gt;Powerful magic!&lt;/p&gt;
&lt;h2&gt;Our second YAML pipeline&lt;/h2&gt;
&lt;p&gt;Now that we understand variables and parameters, let us create our second YAML pipeline and first template. No need to panic, you have not missed anything - we will explore templates in more detail in Part 3 of this series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bingo!&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;keyFinal&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you notice that we assigned the value to the keyFinal variable, but are using keyRef throughout the sample? By using the queue-time ${{}} resolution, we are changing the first script to the following during queue time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bingo!&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;keyFinal&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;keyFinal&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;keyFinal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Our first template&lt;/h2&gt;
&lt;p&gt;Like parameters the template is injected and processed at &lt;strong&gt;queue&lt;/strong&gt; time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defaultKey&amp;#39;&lt;/span&gt;  

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;

  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;KeyRef&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I recommend that you create the sample pipeline and run it. Does it display what you expected? If yes, you can skip the YAML Gotchas, otherwise read on.&lt;/p&gt;
&lt;h2&gt;Generated echo output&lt;/h2&gt;
&lt;p&gt;Take note of the fourth, fifth, and sixth echo in the template. You may expect that the output will be the same ... but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fourth &lt;code&gt;echo $(keyRef)&lt;/code&gt; displays &lt;code&gt;keyFinal&lt;/code&gt; as expected.&lt;/li&gt;
&lt;li&gt;Fifth  &lt;code&gt;echo $( keyRef )&lt;/code&gt; displays &lt;code&gt;command not found&lt;/code&gt; ... too many spaces. &lt;/li&gt;
&lt;li&gt;Sixth  &lt;code&gt;echo $( KeyRef )&lt;/code&gt; displays &lt;code&gt;command not found&lt;/code&gt; ... YAML is case-sensitive and too many spaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;... command not found&lt;/span&gt;
&lt;span class="err"&gt;here we go&lt;/span&gt;
&lt;span class="err"&gt;keyFinal&lt;/span&gt;
&lt;span class="err"&gt;... command not found&lt;/span&gt;
&lt;span class="err"&gt;keyFinal&lt;/span&gt;
&lt;span class="c"&gt;keyRef: command not found&lt;/span&gt;
&lt;span class="c"&gt;KeyRef: command not found&lt;/span&gt;
&lt;span class="err"&gt;keyFinal command not found&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;YAML Gotchas, such as spaces&lt;/h1&gt;
&lt;p&gt;For example, alignment of your definition is critical. Just like in the Cobol and Fortran days, a space too many or too few will throw errors, that are often difficult to decipher. As shown in the simple example, these two statements look the same, however, the second has too many spaces and fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, the following example looks innocent at a quick glance, but the first and third script will fail as it is indented few and one too many spaces respectively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yaml is a very positional and pedantic language!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Use the &lt;strong&gt;validate&lt;/strong&gt; feature in the Azure Pipeline editor to help you unearth some of the gremlins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="YAML Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-4.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Common language&lt;/h1&gt;
&lt;p&gt;With the various names popping up - classic, unified, YAML, and multi-stage - it is important to define and use a common language when talking about pipelines. Within the context of Azure DevOps pipelines, we suggest and use the following in these technical blogs:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TERMINOLOGY&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Classic Unified Pipeline&lt;/td&gt;
&lt;td&gt;Unified pipeline design practice, defined by WSBC, based on the user interface (Classic) Azure Pipeline to promote a consistent CICD pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-stage YAML-syntax Pipeline&lt;/td&gt;
&lt;td&gt;Unified YAML experience to create an Azure Pipeline to do CI, CD, or CI and CD, and store the pipeline configuration as part of the source code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-stage Blueprint-based Pipeline&lt;/td&gt;
&lt;td&gt;Unified pipeline design practice, defined by WSBC, based on the multi-stage YAML-syntax pipeline to promote a consistent, secure, and extensible CI/CD pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Exploration (CE)&lt;/td&gt;
&lt;td&gt;Continuous analysis of an idea or hypothesis, customer feedback, or market research through rapid prototyping. OODA – Observe, Orient, Decide, Act.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Integration (CI)&lt;/td&gt;
&lt;td&gt;Continuously collaboration, validation, and merging of code changes. Also known as a continuous and automated “Build”.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Deployment (CD)&lt;/td&gt;
&lt;td&gt;Ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one&lt;/strong&gt; environment automatically – for example, deploy straight to production.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Delivery (CD)&lt;/td&gt;
&lt;td&gt;Ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;more&lt;/strong&gt; environments automatically – for example, deploy to multiple rings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release on Demand (RoD)&lt;/td&gt;
&lt;td&gt;Ability to make changes available to customers all at once, or selectively in response to feedback or business needs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;If erroneous spaces do not rattle you, we are ready to jump into &lt;a href="yaml-pipelines-part3.html"&gt;part 3&lt;/a&gt; to explore the power of templates and how we are cooking up a storm of re-usable magic.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | Part 2 | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Part 1: Pipelines - Why bother and what are our nightmares and options?</title><link href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html" rel="alternate"></link><published>2020-12-19T00:00:00-08:00</published><updated>2020-12-19T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-12-19:/why-pipelines-part1.html</id><summary type="html">&lt;p&gt;Pipelines enable engineering to continuously deliver value, map and improve their processes and workflows, promoting consistency and reliability across the organisation.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this series we are going to invite you on our journey of grappling with hundreds of inconsistent and often conflicting continuous delivery pipelines, to evolving to unified pipelines, template-driven pipelines, and eventually self-service automation. We will break down our journey into these multiple parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: Pipelines - Why bother and what are our nightmares and options? (this)&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part2.html"&gt;Part 2: Pipelines - Introduction, variables and why spaces matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part4.html"&gt;Part 4: Pipelines - Magic of queue time assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part7.html"&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part8.html"&gt;Part 8: Pipelines - From CI to CD and beyond in one pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part9.html"&gt;Part 9: Self-service automation - A dream turns into reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part10.html"&gt;Part 10: Pipelines - Meet our second generation app-type blueprints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other pipeline posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/experiment-yaml-1.html"&gt;Azure DevOps Experimentation - YAML Conditionals, Parameters, and Triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/sharing-variables-amongst-agents.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pipelines-as-code-pr.html"&gt;Pipeline-as-code wrapped with Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/sharing-variables-with-stages-and-jobs.html"&gt;Gotchas when share variables with Azure DevOps stages and jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pipeline quick reference poster posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-2.html"&gt;Quick Reference Sheet for Application-type Blueprint-based Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-3.html"&gt;Quick Reference Sheet for Pipeline Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-1.html"&gt;Quick Reference Sheet for YAML and Generic Blueprint-based Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Why Pipelines?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Continuous Delivery Pipeline Value Stream Mapping The Continuous Delivery Pipeline (CDP) represents the workflows, activities, and automation needed to shepherd a new piece of functionality from ideation to an on-demand release of value to the end user."&lt;/em&gt; - © Scaled Agile, Inc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As alluded to by the quote from Scaled Agile, we are not talking about pipelines to carry oil, but pipelines that help us automate continuous integration and delivery tasks. Examples include the automation of guardrail automations, such as SonarQube, WhiteSource, and Building Code scans and validations.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Pipelines enable engineering to continuously deliver value, map and improve their processes and workflows, promoting consistency and reliability across the organisation.&lt;/p&gt;
&lt;h1&gt;Snowflakes&lt;/h1&gt;
&lt;p&gt;A healthy DevOps mindset promotes the line of autonomy. Above the line the organization defines its vision and governance to ensure alignment with regulatory, legal, and other requirements. Below the line the engineering teams own their process, with full autonomy to plan WHO, WHEN, and HOW they will accomplish their work.&lt;/p&gt;
&lt;p&gt;If, however, there is a lack of blueprints, design practices, and governance, each team will design and develop their pipelines slightly differently. &lt;/p&gt;
&lt;p&gt;The outcome are unique &lt;strong&gt;snowflakes&lt;/strong&gt; that promote rapid evolution (positive) and a diversity of pipelines that can become hard to maintain, support, and innovate (negative).&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With hundreds of continuous delivery pipelines the &lt;strong&gt;Sec&lt;/strong&gt; and &lt;strong&gt;Ops&lt;/strong&gt; in DevSecOps began to buckle detecting and fixing vulnerabilities and other guardrail leaks.&lt;/p&gt;
&lt;h1&gt;Emergence of Unified Pipelines&lt;/h1&gt;
&lt;p&gt;In 2018 we decided to grab the pipelines by their valves to tackle the spread of unique pipeline patterns by defining an &lt;strong&gt;Unified&lt;/strong&gt; &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops#:~:text=%20Does%20Azure%20Pipelines%20work%20with%20my%20language,code%20to%20multiple%20targets.%20Targets%20include...%20More%20"&gt;Azure Pipeline&lt;/a&gt; design pattern. The pattern promoted the following principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate everything automatable&lt;/li&gt;
&lt;li&gt;Build once&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We encourage engineering teams to create a &lt;strong&gt;release&lt;/strong&gt; build artifact, with debug symbols published to our symbol server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Continuous integration and delivery&lt;/li&gt;
&lt;li&gt;Continuous streamlining and improvement&lt;/li&gt;
&lt;li&gt;Maintain one build definition&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of a developer and release pipeline, create &lt;strong&gt;one&lt;/strong&gt; unified pipeline that locks down the higher environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Maintain one release pipeline definition&lt;/li&gt;
&lt;li&gt;Scan for vulnerabilities early, often, and fail fast&lt;/li&gt;
&lt;li&gt;Streamlined approvals&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;By optimising our approvals, we cut down on the complexity and delay, we inherited from previous years, decades, ... &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Test early, often, and fail fast&lt;/li&gt;
&lt;li&gt;Traceability and observability of releases&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nobody wants a &lt;em&gt;"where did this build come from"&lt;/em&gt; treasure hunt when joining a 2AM incident call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What followed was a mind-numbing and expensive era of aligning all snowflakes to the unified design pattern, using the Azure Pipelines GUI editor to manipulate the pipeline json-based configuration. Even though we are using re-usable &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops#:~:text=In%20Azure%20Pipelines%2C%20you%20can%20version%20your%20own,is%20appended%20to%20the%20task%20group%20version%20number."&gt;Task Groups&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&amp;amp;tabs=yaml"&gt;Variable Groups&lt;/a&gt; we had to invest thousands of error-prone clicks - there has to be a better way!?!&lt;/p&gt;
&lt;p&gt;We managed to persue our goals of &lt;strong&gt;aligning&lt;/strong&gt; with architecture and security guardrails; &lt;strong&gt;consistency&lt;/strong&gt; through design practices, automation, and collaboration; &lt;strong&gt;simplicity&lt;/strong&gt; to create maintainable pipelines; and &lt;strong&gt;enabling&lt;/strong&gt; and &lt;strong&gt;empowering&lt;/strong&gt; our common engineering system.&lt;/p&gt;
&lt;h1&gt;Hackathon triggers a course change&lt;/h1&gt;
&lt;p&gt;A radical hackathon idea in 2019 investigated latest technology trends that promised pipeline-as-code, templates, and other facinating features that promise to enable our ultimate goal of self-service automation. Our hackathon idea was not amongst the winners, but is one of the few ideas that continued to simmer and change the world of our continuous delivery pipelines.&lt;/p&gt;
&lt;p&gt;It triggered a pipeline working group, awareness workshops, and even four laptop stickers to highlight unified pipeline, multi-stage, CI+CD, and self-service automation champions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Welcome YAML based pipelines, which we will introduce in &lt;a href="yaml-pipelines-part2.html"&gt;part 2&lt;/a&gt; of this series.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | Part 1, TOC | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category></entry><entry><title>Shift LEFT and RIGHT to take yourself off the humbling 2AM calls</title><link href="https://wsbctechnicalblog.github.io/shift-left-2am-call.html" rel="alternate"></link><published>2020-10-24T13:13:00-07:00</published><updated>2020-10-24T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-24:/shift-left-2am-call.html</id><summary type="html">&lt;p&gt;We need to avoid the infamous 2AM call!&lt;/p&gt;</summary><content type="html">&lt;p&gt;During the &lt;strong&gt;Getting started with a DevOps mindset session&lt;/strong&gt; at the CSI Lab in January 2019, we discussed a number of epiphanies. Three referenced the 2AM call, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Epiphanies" src="/images/two-am-call-1.png"&gt;&lt;/p&gt;
&lt;h1&gt;What is the 2AM call?&lt;/h1&gt;
&lt;p&gt;When a user reports an issue, telemetry insights identifies an anomaly, or a circuit breaker detects a potential overload, an incident is generated. On detection of the incident a call is initiated to engineers on call, also referred to as designated response individuals, who jump on the call to identify the root cause, capture vital evidence, work on a mitigation hot fix, document the incident transparently, and work with the feature teams (pods, tribes,...) to ensure that the incident never re-occurs. The reason it is called the &lt;strong&gt;2AM call&lt;/strong&gt; is that it usually happens when we are entering the REM sleep at 2AM.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 2 - The 2AM Call is a great motivation for quality&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is obvious that no one wants to wake up at 2AM. Experiencing the 2AM call once or twice, is typically enough motivation for any of us to look for ways to improve our solution and avoid getting the dreaded call.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 3 - Teams that take ownership of features from ideation to deprecation are typically involved in the least 2AM calls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Why does SHIFT LEFT + SHIFT RIGHT reduce the 2AM calls?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Epiphanies" src="/images/two-am-call-2.png"&gt;&lt;/p&gt;
&lt;h2&gt;SHIFT LEFT&lt;/h2&gt;
&lt;p&gt;The core idea is to perform tasks such as testing, security scanning, user experience reviews, and code reviews as early as possible in the continuous integration and deployment life cycle as possible. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Quick Poll" src="/images/two-am-call-3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snapshot of our quick poll - What is important to automate for a healthy DevOps environment?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Automation is key to the &lt;strong&gt;SHIFT LEFT&lt;/strong&gt; practice allowing us to integrate the tasks seamlessly in the engineering system.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quick Poll" src="/images/two-am-call-4.png"&gt;&lt;/p&gt;
&lt;p&gt;The above snippet is from a pull request validation build that shows that 71,283 unit tests were validated in less than 7 minutes. It can be done!&lt;/p&gt;
&lt;p&gt;Similarly, continuous integration builds can perform credential, security, and other scans, allowing us to validate the quality of a feature early and continuously, identify issues early, and either fix or fail fast before we commit ourselves to a deployment.&lt;/p&gt;
&lt;h2&gt;SHIFT RIGHT&lt;/h2&gt;
&lt;p&gt;Contrary to practices such as testing and security scanning, which we want to perform as early and often as possible, we want to defer the configuration deployments as long as possible - &lt;strong&gt;SHIFT&lt;/strong&gt; configuration &lt;strong&gt;RIGHT&lt;/strong&gt;. Explore how to generate &lt;strong&gt;ONE&lt;/strong&gt; build, deploy to &lt;strong&gt;MANY&lt;/strong&gt; environments, simplify build artifact traceability and remote debug, as needed ... it is possible!&lt;/p&gt;
&lt;h2&gt;BUT, WHY DOES IT REDUCE THE 2AM CALL?&lt;/h2&gt;
&lt;p&gt;PEOPLE are the hardest part of any transformation! Innovating continuously to improve the &lt;strong&gt;PROCESS&lt;/strong&gt; and &lt;strong&gt;PRODUCTS&lt;/strong&gt; (tools) is the easy part. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 3 - We need to ensure that engineers see the value for SHIFT LEFT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you SHIFT LEFT with testing and security, the engineers, the &lt;strong&gt;PEOPLE&lt;/strong&gt;, will initially push back as the pull request validation builds take longer and associated logs and alert noise increase dramatically.  However, running 70,000 unit tests with every build, as shown above, eventually raises the quality of the solution. It is like a train that takes a while to pick up speed. Once in motion, the momentum will dramatically improve key performance indicators (KPI), such as &lt;strong&gt;lead time for change&lt;/strong&gt;, &lt;strong&gt;mean time to recover&lt;/strong&gt;, and especially &lt;strong&gt;change failure rate&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - KPIs are often not meaningful to all stakeholders. For example, mentioning a 2,604 times &lt;strong&gt;faster mean time to recover&lt;/strong&gt; metric is probably viewed with more skepticism than excitement by many business stakeholders.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Endangered" src="/images/two-am-call-5.png"&gt;&lt;/p&gt;
&lt;p&gt;A reduction in incidents and 2AM calls, however, is an easy one to unpack and understand - especially for on-call engineers now snoozing next to silent pagers and mobile phones.&lt;/p&gt;</content><category term="Posts"></category><category term="devops"></category></entry><entry><title>Don’t let your code talk to strangers</title><link href="https://wsbctechnicalblog.github.io/dont-let-your-code-talk-to-strangers.html" rel="alternate"></link><published>2020-10-24T10:20:00-07:00</published><updated>2020-10-24T10:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-24:/dont-let-your-code-talk-to-strangers.html</id><summary type="html">&lt;p&gt;Closer look into the principle of least knowledge&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have discussed the crucial effect that cost of change has on the quality of the delivered business value. If the delivered value is expensive to change, it loses its attractiveness. In such cases, it quickly morphs from an asset into liability. We certainly don’t want to find ourselves in such disadvantageous position.&lt;/p&gt;
&lt;p&gt;Generally speaking, the most frequent cause of unchangeable code is tight coupling. During the early stages of development, coupling comes naturally, almost spontaneously. And at that stage, it appears quite harmless. We continue adding capabilities to our solution, and things appear to be going swimmingly.&lt;/p&gt;
&lt;p&gt;But there often comes a moment when we realize that we need to rearrange our code due to the newly arrived requirements or findings. It is at that point that tight coupling rears its ugly head and makes us realize that we have all but painted ourselves into a proverbial corner.&lt;/p&gt;
&lt;p&gt;Tight coupling has many underlying causes and anti-patterns. Today, we are going to take a closer look into one such anti-pattern – code talking to strangers.&lt;/p&gt;
&lt;h2&gt;Principle of least knowledge&lt;/h2&gt;
&lt;p&gt;Tight coupling happens when our code knows way more than is needed in order to do the job. At a first glance, knowing more than is needed doesn’t sound undesirable. What could be wrong with possessing excessive knowledge?&lt;/p&gt;
&lt;p&gt;Let’s try to illustrate what could get wrong by indulging in excessive knowledge by following a trivial example. Suppose we have a line of code that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objectA.GetObjectB().GetObjectC().DoSomeSpecificThing();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the line above, we see &lt;code&gt;objectA&lt;/code&gt; (i.e. an instance of &lt;code&gt;classA&lt;/code&gt;) getting &lt;code&gt;objectB&lt;/code&gt; (an instance of &lt;code&gt;classB&lt;/code&gt;). That’s perfectly fine, but the issue now arises due to the fact that &lt;code&gt;objectA&lt;/code&gt; is using &lt;code&gt;objectB&lt;/code&gt; not because &lt;code&gt;objectB&lt;/code&gt; can provide some useful capability/service to &lt;code&gt;objectA&lt;/code&gt; (which would be the normal case). &lt;code&gt;objectA&lt;/code&gt; is getting &lt;code&gt;objectB&lt;/code&gt; merely in order to expressly get to &lt;code&gt;objectC&lt;/code&gt;. Once &lt;code&gt;objectA&lt;/code&gt; gets a handle on &lt;code&gt;objectC&lt;/code&gt;, it can ask &lt;code&gt;objectC&lt;/code&gt; to do some specific thing.&lt;/p&gt;
&lt;p&gt;Why is that problematic? Granted, it is obvious that to &lt;code&gt;objectA&lt;/code&gt; a once or twice removed &lt;code&gt;objectC&lt;/code&gt; is a stranger. We do we say that &lt;code&gt;objectC&lt;/code&gt; is a stranger to &lt;code&gt;objectA&lt;/code&gt;? If &lt;code&gt;objectC&lt;/code&gt; was a friend to &lt;code&gt;objectA&lt;/code&gt;, there clearly would be no need for &lt;code&gt;objectA&lt;/code&gt; to get to talk to &lt;code&gt;objectC&lt;/code&gt; by first talking to &lt;code&gt;objectB&lt;/code&gt;. But in this case, objectA can only engage in a ‘friend of a friend’ type of interaction. And that’s when the problem with tight coupling begins!&lt;/p&gt;
&lt;p&gt;We see therefore that tight coupling materializes when we endow our code with unnecessary knowledge. In our code, objectA has the absolutely necessary knowledge of how to talk to its friend, &lt;code&gt;objectB&lt;/code&gt;. But instead of leaving it like that, we succumbed to the temptation to teach our code that there exists another object, &lt;code&gt;objectC&lt;/code&gt;, and although that object is not immediately available to our &lt;code&gt;objectA&lt;/code&gt;, it is available via our network of friends. So now our objectA gets saddled with excessive knowledge of having to know how to get to &lt;code&gt;objectC&lt;/code&gt; and how to ask it to perform some specific action.&lt;/p&gt;
&lt;p&gt;This is too much knowledge, and such excessive knowledge is making things tightly coupled, bloated and brittle.&lt;/p&gt;
&lt;h2&gt;Where is brittleness coming from?&lt;/h2&gt;
&lt;p&gt;In the above example, we perceive tight coupling in the form of an underlying assumption: every &lt;code&gt;objectB&lt;/code&gt; has access to &lt;code&gt;objectC&lt;/code&gt;. That is a dangerous assumption, as we may discover later on, after we’ve created a lot of code that relies on the above chaining of method calls that in some instances &lt;code&gt;objectB&lt;/code&gt; may not have access to &lt;code&gt;objectC&lt;/code&gt;. Maybe someone had refactored the code and had completely removed the association between &lt;code&gt;objectB&lt;/code&gt; and &lt;code&gt;objectC&lt;/code&gt;. Having to go and find all instances of the legacy code and adjust them to the new situation is a potential breeding ground for bugs. Often times there are slight variation in how are instantiated objects called (no one is guaranteeing that every developer will consistently name instance of &lt;code&gt;classA&lt;/code&gt; &lt;code&gt;objectA&lt;/code&gt; etc.) No regex on earth could be crafted that will guarantee to fish all these minor variations out. So we’d be left to manually pour over reams of code, trying to find all instances of such chained calls and then fix them manually.&lt;/p&gt;
&lt;p&gt;That’s brittleness to the umpteenth degree. And a vast breeding ground for all kinds of bugs.&lt;/p&gt;
&lt;h2&gt;Only talk to your immediate friends&lt;/h2&gt;
&lt;p&gt;To avoid the terrible anti-pattern of promiscuously talking to strangers, our code should embrace a very important constraint – talk only to your immediate friends.&lt;/p&gt;
&lt;p&gt;In the above case, &lt;code&gt;objectA&lt;/code&gt; should only confine itself to talking to objectB. If there is some useful capability/functionality that some stranger (e.g. &lt;code&gt;objectC&lt;/code&gt;) possesses that &lt;code&gt;objectA&lt;/code&gt; desperately needs, let &lt;code&gt;objectB&lt;/code&gt; be the broker between &lt;code&gt;objectA&lt;/code&gt; and &lt;code&gt;objectC&lt;/code&gt;. That way, our code becomes simple, future proof, unperturbable (and also easy testable).&lt;/p&gt;
&lt;p&gt;Let’s indulge in another quick example. Suppose we have an instance of a class &lt;code&gt;Driver&lt;/code&gt;, and that driver is steering an instance of a class &lt;code&gt;Vehicle&lt;/code&gt;). The way we implement steering is to allow the driver to talk to strangers; for example, if the driver wants to steer left, the code looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;driver.GetVehicle().GetSteeringMechanism().SteerLeft();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;driver&lt;/code&gt; is talking to its immediate friend (&lt;code&gt;vehicle&lt;/code&gt;) in order to gain access to a stranger (an instance of the class &lt;code&gt;SteeringMechanism&lt;/code&gt;), so that the driver can directly manipulate the steering mechanism by sending it the command to steer left.&lt;/p&gt;
&lt;p&gt;This is the illustration of tight coupling in action. Suppose later on the instance of class SteeringMechanism (which was an instance of an automobile steering mechanism) gets replaced by an instance of a sail boat. On a sail boat, the steer left command has the opposite effect from the same command sent to a steering wheel in the car. Which means, we have inadvertently created a bug.&lt;/p&gt;
&lt;p&gt;So it is important to avoid tight coupling. Always limit the amount of knowledge your objects have. That way, your code will be clean, testable, deterministic and bug free.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="pipelines"></category><category term="testing"></category></entry><entry><title>Collective code ownership</title><link href="https://wsbctechnicalblog.github.io/collective-code-ownership.html" rel="alternate"></link><published>2020-10-22T16:24:00-07:00</published><updated>2020-10-22T16:24:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-22:/collective-code-ownership.html</id><summary type="html">&lt;p&gt;Teams share collective responsibility and therefore collectively own the code&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;"In XP we don't do what we believe, we do what our measurements tell us.”&lt;/em&gt; Ron Jeffries&lt;/p&gt;
&lt;p&gt;Value stream delivery is largely based on automating business processes. In order to continuously deliver value, businesses invest in functionality. DevOps engineers are largely responsible for implementing desired functionality.
So we see that functionality is an asset. Businesses are willing to invest heavily in optimizing that asset. And the way the asset (i.e. functionality) is delivered is via shipping code.&lt;/p&gt;
&lt;p&gt;Now for the twist of lime: while functionality is obviously an asset, shipping code isn’t. Not only is shipping code not an asset, it is actually a liability. Once shipped, code needs constant babysitting. If code is not engineered properly, babysitting the shipped code may result in spiraling costs. No business will ever feel comfortable with such liability.&lt;/p&gt;
&lt;p&gt;In Extreme Programming (XP) we have a slightly different mantra (that basically talks about the same equation): Code is nothing, stories are everything.&lt;/p&gt;
&lt;h2&gt;Who does the code belong to?&lt;/h2&gt;
&lt;p&gt;In DevOps, code belongs to the product (i.e. a bundle of functionalities). Code never belongs to an individual engineer. Code may shortly belong to a project, but a product typically outlives any project, so it’s more accurate to say that code belongs to the product.
Collective ownership is often a counter-intuitive concept in software engineering, as it annuls the authorship. In traditional software development shops, workload is divvied up among engineers, and each engineer writes their own code in complete isolation. And because they write their own code, they are responsible for it, they own it, they run with it, they live and die by it.&lt;/p&gt;
&lt;p&gt;In software development shops that have evolved from the traditional shops, workload is not compartmentalized into mini silos. No silos, no turfs, no fiefdoms. In such shops, workload is centered on user stories. And each user story belongs to the entire team. That way, we avoid painting ourselves in a corner by isolating engineers from each other and then having to herd cats (with all the frightening overhead of coordinating, overseeing, synchronizing, judging and implementing correctional actions).&lt;/p&gt;
&lt;p&gt;And since each user story belongs to the team (i.e. there is no individual, named author of a user story), the code implementing that user story also belongs to the team. That way, there are no individual authors of any line of code, of any code statement.&lt;/p&gt;
&lt;h2&gt;How does that work in daily practice?&lt;/h2&gt;
&lt;p&gt;Collective code ownership may play out in variety of scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Engineers work in isolation&lt;/li&gt;
&lt;li&gt;Engineers engage in pair programming (each pair works in isolation)&lt;/li&gt;
&lt;li&gt;Engineers engage in mob programing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case where engineers work in isolation (i.e. each engineers goes away and spends some time coding in complete isolation from the team), collective ownership manifests in the full freedom to access, open and modify any block of code in the product repo. There are no silos, no barriers – we are talking full blown open source paradigm.&lt;/p&gt;
&lt;p&gt;In case of pair programming, similar concept applies: the repo is fully open for examination, modification and merging the changes. Same as an individual engineer doesn’t own any part of the code pulled from the repo, a pair of engineers also do not own any part of the code.
In case of mob programming, collaboration between engineers happens in real time. Coding happens in brief spurts (governed by the ‘musical chairs’ rotation where the person making the changes by typing and the person navigating the changes typically spend no more than 5 minutes per mini session). As the driver (i.e. person entering the changes) and the navigator (person, or persons instructing the driver) keep rotating, at the end of the coding session pretty much every team member has touched the code. Collectively, the team has made the most optimal decisions regarding which changes to the code to commit, push and merge to the trunk. Authorship becomes moot in such practice.&lt;/p&gt;
&lt;h2&gt;What are the prerequisites of collective code ownership?&lt;/h2&gt;
&lt;p&gt;It may not be advisable to jump in head first into collective code ownership before establishing rules of the game. In a nutshell, here are the minimum requirements for teams to successfully engage in collective code ownership:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The team has collectively created and agreed upon the coding standards&lt;/li&gt;
&lt;li&gt;The team is fully committed to using code management tool (git!)&lt;/li&gt;
&lt;li&gt;The team is doing full-on TDD, ideally also doing stringent mutation testing&lt;/li&gt;
&lt;li&gt;The team is using powerful IDE (Visual Studio or VS Code)&lt;/li&gt;
&lt;li&gt;The team is actively pursuing continuous integration (CI)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the above, it is important for all engineers on the team to agree to participate/contribute to the work needed to implement aspects of the functionality that may not be everyone’s area of interest. For example, a back-end engineer may not be interested in some front-end technologies, but is agreeable to participate and pick up some skills by working with domain experts on the team. Cross-training/cross-pollination goes a long way toward creating a highly performing team.&lt;/p&gt;
&lt;p&gt;Collective code ownership works best for small size teams, famously described as “two pizzas teams”. Any team that cannot be fed with two pizzas brings along added complexity; the overhead needed for maintaining team cohesion may exceed the benefits of cultivating collective code ownership.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;DevOps software engineering discipline is founded on the team concept. A team is not a group. A team is based on the concept of collective responsibility. And since each team works with user stories and turns those stories into shipping code, team collectively owns user stories as well as the code that implements them.
In a healthy team, when something goes wrong it is never “I thought SHE was going to take care of that!” Rather, it is “What do we have to do to fix that/take care of that?”&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="devops"></category></entry><entry><title>The clash of Azure DevOps Kanban fields and Shared Area Paths</title><link href="https://wsbctechnicalblog.github.io/shared-area-paths.html" rel="alternate"></link><published>2020-10-22T13:13:00-07:00</published><updated>2020-10-22T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-22:/shared-area-paths.html</id><summary type="html">&lt;p&gt;Shared area paths can introduce inconsistency and confusion.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Azure Boards Kanban fields are powerful and valuable. Used in the land of shared Area Paths they can, however, introduce inconsistency and confusion that are hard to isolate and explain.&lt;/p&gt;
&lt;h1&gt;Let us explore a simple example&lt;/h1&gt;
&lt;p&gt;We define a few area paths for a hypothetical project, named &lt;strong&gt;Boards Chaos&lt;/strong&gt;. The Board Chaos area and its sub-paths are allocated to the default Boards Chaos team. Area A1, with sub-paths, and area A2, with sub-paths, are assigned to team A and B respectively. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Board Chaos" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-1.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; that the Boards Chaos team shares area A1 and its sub-paths with team A, and area A2 and its sub-paths with team B. Assigning area Board Chaos and sub-paths to the default team is a subtle configuration, but allows us to demonstrate the challenge of shared area paths.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Team A&lt;/strong&gt; creates three stories and pulls A.1 and A.2 into the &lt;strong&gt;Active&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team A Board" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Team B&lt;/strong&gt; creates three stories, and pulls B.1, B.2, and B.3 into the &lt;strong&gt;Active&lt;/strong&gt;, &lt;strong&gt;Resolved&lt;/strong&gt;, and &lt;strong&gt;Closed columns&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team B Board" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-3.png"&gt;&lt;/p&gt;
&lt;p&gt;When we switch to team &lt;strong&gt;Board Chaos&lt;/strong&gt;, we notice that the team has customized their board, renaming the Active column to In-flight, and adding the Area 51 and Answer 42 columns. All of these three columns map to the Active work item state.&lt;/p&gt;
&lt;p&gt;So far so good - if you ignore the &lt;strong&gt;Board C...&lt;/strong&gt; &lt;strong&gt;Active&lt;/strong&gt; field on the card.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team Chaos Board" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Board Chaos team drags cards A.1 from In-flight to &lt;strong&gt;Area 51&lt;/strong&gt;, and A.2 to &lt;strong&gt;Answer 42&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Area 51" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-5.png"&gt;&lt;/p&gt;
&lt;p&gt;The team's board looks as expected, again as long as you ignore the field &lt;strong&gt;Board C...&lt;/strong&gt; &lt;strong&gt;Active&lt;/strong&gt; field on the cards.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Board Chaos" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-6.png"&gt;&lt;/p&gt;
&lt;h1&gt;Oh, Oh, we have a problem&lt;/h1&gt;
&lt;p&gt;When the team looks at their product backlog, the anomaly becomes evident. Why are the Board Column values for B.1, A.1, and A.2 Active and not &lt;strong&gt;In-flight&lt;/strong&gt;, &lt;strong&gt;Area 51&lt;/strong&gt;, or &lt;strong&gt;Answer 42&lt;/strong&gt;?!? &lt;/p&gt;
&lt;p&gt;&lt;img alt="Incorrect Board Column Values" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-7.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a view of Team A and the default team next to each other. Now look at the &lt;strong&gt;Board C&lt;/strong&gt; ... field on the cards, all of which point to Team A's &lt;strong&gt;Active&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team A and Chaos side by side" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-8.png"&gt;&lt;/p&gt;
&lt;p&gt;What is going on?!?&lt;/p&gt;
&lt;h1&gt;Works as designed&lt;/h1&gt;
&lt;p&gt;By design, the team with the longest area path wins the clash and dictates the values for the Kanban Board Column, Done, and Lane fields. In our setup, teams A and B have the longer area paths and win. &lt;strong&gt;Board Chaos/A1&lt;/strong&gt; from team A, for example, is longer than Board Chaos/ from the default team.&lt;/p&gt;
&lt;p&gt;If we have a scenario of shared area paths of equal depth, we will have non-deterministic results. Not in scope for this simple walk-through.&lt;/p&gt;
&lt;p&gt;As a result the cards show the Kanban field value Active for Team A on Board Chaos' board, not values &lt;strong&gt;In-flight&lt;/strong&gt;, &lt;strong&gt;Area 51&lt;/strong&gt;, &lt;strong&gt;Answer 42&lt;/strong&gt; as expected. &lt;/p&gt;
&lt;p&gt;So, how can we avoid this unexpected feature?&lt;/p&gt;
&lt;h1&gt;Tips to avoid the "oh, oh" moments&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Oh Oh Moment" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-9.png"&gt;&lt;/p&gt;
&lt;h2&gt;Avoid shared areas&lt;/h2&gt;
&lt;p&gt;Stay away away from overlapping area path ownership. As this behavior is "as expected" and "works as designed", we do not expect future features to work seamlessly. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See https://msdn.microsoft.com/Library/vs/alm/Work/scale/scaled-agile-framework on guidance to setup enterprise projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Share read-only areas&lt;/h2&gt;
&lt;p&gt;Keep teams in their own contained, for example (1) Team A in Area A1 and (2) Team B in Area A2. If you need a shared area path, for example, (3) to raise awareness of and triage bugs use it as a read-only area and (4) reassign bugs to their respective area paths.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Shared Area Paths" src="/images/clash-of-azdo-kanban-fields-and-shared-area-paths-10.png"&gt;&lt;/p&gt;
&lt;h2&gt;Focus on your context&lt;/h2&gt;
&lt;p&gt;Focus on the work item types that are relevant to you and your team. If you are doing portfolio planning you should restrict your views of shared areas to &lt;strong&gt;Initiatives&lt;/strong&gt;, &lt;strong&gt;Epics&lt;/strong&gt;, and &lt;strong&gt;Features&lt;/strong&gt;. If you are part of the development, you should focus on Stories or Backlog Items.&lt;/p&gt;
&lt;p&gt;In other words &lt;strong&gt;keep it simple&lt;/strong&gt;*!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Searching for common nodes across area paths</title><link href="https://wsbctechnicalblog.github.io/area-paths-and-nodes.html" rel="alternate"></link><published>2020-10-21T13:13:00-07:00</published><updated>2020-10-21T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-21:/area-paths-and-nodes.html</id><summary type="html">&lt;p&gt;How can we find area path with specific text in their name?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let us assume that you have a common node, for example architecture runway, in a number of Azure DevOps area paths. &lt;/p&gt;
&lt;p&gt;A common question in such a setup is "what are all the architecture runway work items?". &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple&lt;/strong&gt;, create a query that searches for all the known area paths:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Area Paths" src="/images/searching-for-common-nodes-across-area-paths-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple?&lt;/strong&gt; It is not a query that can scale or that anyone wants to maintain, because the only options we have for Area Paths is the equals (=) or under 
operator. Imagine you walk up to a project containing hundreds of area paths and you need to build such a query from scratch ... run!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop!&lt;/strong&gt; There is another way, using the Node Name:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Node Names" src="/images/searching-for-common-nodes-across-area-paths-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Go &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/query-by-area-iteration-path?view=azure-devops#node-name-and-keyword-based-queries"&gt;here&lt;/a&gt; for more related gems and information!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="tips"></category></entry><entry><title>Use Active Directory Groups in your unified classic CI CD pipelines</title><link href="https://wsbctechnicalblog.github.io/ad-groups-for-ci-cd-pipelines.html" rel="alternate"></link><published>2020-10-20T13:13:00-07:00</published><updated>2020-10-20T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-20:/ad-groups-for-ci-cd-pipelines.html</id><summary type="html">&lt;p&gt;Instead of managing permissions for users in Azure DevOps, we use Azure Active Directory groups to fine tune permissions&lt;/p&gt;</summary><content type="html">&lt;p&gt;The CI/CD pipeline is a DevOps practice for delivering code changes more frequently, consistently, and reliably. It enables Agile teams to increase deployment frequency, decrease lead time for change, change failure rate, and mean time to recovery key performance indicators, thereby improving quality and delivering value faster.&lt;/p&gt;
&lt;h1&gt;Let us use Active Directory (AD) security groups&lt;/h1&gt;
&lt;p&gt;After our dream for One CI/CD pipeline to rule them all we decided to go one-step further and simplify the classic release pipeline security using Active Directory (AD) groups. Instead of assigning and managing permissions for users in Azure DevOps, we use Azure Active Directory groups to fine tune permissions. For example, we have project specific super users AD groups that grant elevated permissions to edit release pipelines and the development and system test stages.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Classic Pipeline" src="/images/use-ad-groups-with-CI-CD-pipelines-1.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Empower the Agile Development Team to own development and system test stages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bookmark the Azure DevOps DRIFT project, which will enable you to monitor and remediate configuration drift, for example to automatically remove explicit user accounts added to an AD driven security model.&lt;/p&gt;
&lt;h1&gt;Why AD groups?&lt;/h1&gt;
&lt;p&gt;The value of using AD groups depends on your environment. In our case the benefits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AD groups and memberships are centrally &lt;strong&gt;managed&lt;/strong&gt; and &lt;strong&gt;audited&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;AD group membership is track than individual user accounts spread across multiple Azure DevOps services and projects.&lt;/li&gt;
&lt;li&gt;Azure DevOps users are empowered to request group membership using an existing process, rather than relying on the Azure DevOps project collection and project administrators.&lt;/li&gt;
&lt;li&gt;Simplifies automation of pipeline generation and configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Simplicity" src="/images/use-ad-groups-with-CI-CD-pipelines-2.png"&gt;&lt;/p&gt;
&lt;h1&gt;Let us use email-enabled Active Directory (AD) security groups&lt;/h1&gt;
&lt;p&gt;However, wait, we can go a step further and use mail-enabled AD security groups for pre- and post-stage pipeline approvals.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Post deployment conditionse" src="/images/use-ad-groups-with-CI-CD-pipelines-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Use email-enables security groups for stage approvals
We replace the individual users highlighted in yellow with Release Approval AD groups.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CI CD pipelines" src="/images/use-ad-groups-with-CI-CD-pipelines-4.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simplify stage approvals with email-enabled AD security groups&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why are there no stage approval notifications?
We realized that some of our email-enabled AD security groups received no notifications and spend time with Microsoft support to identify the root cause(s).&lt;/p&gt;
&lt;p&gt;You have to ensure that the AD security groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are &lt;strong&gt;mail-enabled&lt;/strong&gt; and authorized to receive external emails.&lt;/li&gt;
&lt;li&gt;Have &lt;strong&gt;View Releases&lt;/strong&gt; permissions on release and definitions.&lt;/li&gt;
&lt;li&gt;Have a subscription that is enabled for the group(s).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second bullet is the one that caught us off guard. If the permission is missing the Azure DevOps Pipeline event/notification service filters out the account's notifications. When notifications are filtered, no email is sent for impacted group(s) - silence prevails.&lt;/p&gt;
&lt;p&gt;Make sure that your email-enabled AD security groups are members of your project &lt;strong&gt;Contributors or Readers&lt;/strong&gt;, which by default, have the View Releases permission.&lt;/p&gt;
&lt;h1&gt;What Is Next?&lt;/h1&gt;
&lt;p&gt;This is likely one of the last posts on classic CI/CD pipelines. Watch the space for unified multi-stage YAML-based pipeline learnings.&lt;/p&gt;</content><category term="Posts"></category><category term="azure"></category><category term="azure-devops"></category><category term="pipelines"></category></entry></feed>