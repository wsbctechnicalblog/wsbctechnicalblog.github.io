<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2025-02-14T00:00:00-08:00</updated><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20250207</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-2025-02-07.html" rel="alternate"></link><published>2025-02-14T00:00:00-08:00</published><updated>2025-02-14T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-02-14:/azure-pipeline-blueprints-oss-sync-2025-02-07.html</id><summary type="html">&lt;p&gt;Latest version and versioning of v2.1.0 templates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have focused on improving our self-service, which required us to finally introduce versioning for the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD app blueprints&lt;/a&gt; in v2.1.0.&lt;/p&gt;
&lt;h1&gt;SELF-SERVICE&lt;/h1&gt;
&lt;p&gt;Our self-service process for paved roads, starting with a new Azure Repo (Git) simplifies setup by automatically adding a &lt;code&gt;Hello World&lt;/code&gt; sample, an app-type-specific v2 CI/CD blueprint file, the configuration file, and triggering the Azure Pipeline to validate the setup.  We found a limitation with the configuration file being &lt;code&gt;&amp;lt;portfolio&amp;gt;-&amp;lt;application&amp;gt;-config.yml&lt;/code&gt;, restricting each repository to one domain and component type. This meant building a web app and its API required two repositories. &lt;/p&gt;
&lt;p&gt;The self-service automation logic could have implemented this update without altering the blueprints. However, we have also ensured that self-service creates kebab-style file names in accordance with our governance. The change involves switching from a dot to a dash. To maintain consistency and standardization, both old existing config files using dots and new config files using dashes will be supported. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;v2.1.0 self-service flow&lt;/p&gt;
&lt;p&gt;&lt;img alt="Self-Service" src="../images/azure-pipeline-blueprints-oss-sync-2025-02-07-01a.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To solve this, we added versioning to the v2 templates, allowing all components in one repository, as discussed below.&lt;/p&gt;
&lt;h1&gt;BUT WAIT, What are Paved Roads?&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Paved Roads&lt;/code&gt; is a term we use to describe standardized and well-defined architectures, infrastructures, and CI/CD pipelines that act as foundational templates or blueprints for creating and deploying software solutions. These paved roads capture best practices, design patterns, and automation techniques that simplify the development process, reduce complexity, and ensure consistency across projects.&lt;/p&gt;
&lt;p&gt;Just as paved roads provide a reliable and efficient transportation infrastructure for vehicles, paved roads in software development offer a structured path for engineers to follow. They include &lt;code&gt;Architecture Blueprints&lt;/code&gt;, &lt;code&gt;Infrastructure Blueprints&lt;/code&gt;, &lt;code&gt;Security Blueprints&lt;/code&gt;, and our v2 &lt;code&gt;CI/CD Blueprints&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Paved Roads" src="../images/azure-pipeline-blueprints-oss-sync-2025-02-07-02a.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our engineers have the option to choose from three distinct paths:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Paved Roads&lt;/strong&gt; - Follow well-established, reliable blueprints designed for efficiency and dependability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logging Roads&lt;/strong&gt; - Define new blueprints with an element of experimentation and innovation, while still adhering to some guidelines and flexibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jungle&lt;/strong&gt; - Create disposable proof-of-concepts with unrestricted freedom, operating outside traditional constraints.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Jungle" src="../images/azure-pipeline-blueprints-oss-sync-2025-02-07-03.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This approach enables engineers to balance innovation and structure according to their specific needs.&lt;/p&gt;
&lt;h1&gt;TEMPLATES&lt;/h1&gt;
&lt;p&gt;We introduced versioning because our templates are re-used by Azure DevOps during pipeline assembly at runtime. This allows us to support both v2.0.0 pipelines and their corresponding configuration files, as well as the enhanced v2.1.0 pipelines with updated configuration formats.&lt;/p&gt;
&lt;p&gt;Rather than implementing versioning to support two distinct versions of the &lt;code&gt;*-control-yml&lt;/code&gt; template, as outlined below, we chose to use conditinal expressions within the same set of templates and cascade the &lt;code&gt;blueprintVersion&lt;/code&gt; from the &lt;code&gt;*-start.yml&lt;/code&gt; template to all subsequent templates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Strategy 1 - Implement versioning with separate version templates&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;blueprintVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.1.0&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blueprintVersion&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.0.0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="sr"&gt;/templates/&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blueprintVersion&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.1.0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="sr"&gt;/templates/&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;configFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below is the key code snippet from one of our &lt;code&gt;*-control.yml&lt;/code&gt; templates that determines whether to load the old or the new format using conditional logic, ensuring backward compatibility while enabling enhanced functionality. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Strategy 2 (which we used) - Implement versioning with conditional logic in one and the same template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;blueprintVersion&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# VARIABLES&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blueprintVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blueprintVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would not blame you for staring at the code, wondering why there is no apparent difference between versions 2.0.0 and 2.1.0. The distinction is subtle: it is the dash &lt;code&gt;-&lt;/code&gt; instead of the dot &lt;code&gt;.&lt;/code&gt; between the portfolio and product parameters 😉.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="sr"&gt;/__101__/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;blueprintVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.1.0&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PORTFOLIO__&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PRODUCT__&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;publishFolder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_FOLDERNAME__&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;engineering&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;immediate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;being&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;configured&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also had to update all the generic templates and the &lt;code&gt;*-start.yml&lt;/code&gt; templates to pass the &lt;code&gt;blueprintVersion&lt;/code&gt; to the &lt;code&gt;boot-strap.yml&lt;/code&gt; and the &lt;code&gt;*-control.yml&lt;/code&gt; templates respectively.&lt;/p&gt;
&lt;p&gt;I did ask our AI wingman how to improve the code and got the following ... and I quote:&lt;/p&gt;
&lt;p&gt;Your YAML snippet is concise and functional, but here are a few improvements to enhance clarity, maintainability, and readability:&lt;/p&gt;
&lt;p&gt;Suggested Enhancements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Add Contextual Comments&lt;/strong&gt;: Clearly explain each parameter's purpose to improve readability for someone unfamiliar with the template.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Provide Examples&lt;/strong&gt;: Where placeholders like &lt;strong&gt;TODO&lt;/strong&gt; are used, offer examples to make it clear how they should be replaced.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Align Indentation and Formatting&lt;/strong&gt;: Ensure consistent spacing for cleaner visuals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... end quote.&lt;/p&gt;
&lt;p&gt;I will share these suggestions with our engineers, but we are unlikely to incorporate these informational updates. Why? Our focus is on automating repetitive tasks — like creating repositories, pipelines, and replacing placeholder tokens — through self-service tools. Because of this, the stakeholders will rarely review this code and we prioritize conciseness and functionality over detailed readability.&lt;/p&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Templates" src="../images/azure-pipeline-blueprints-oss-sync-2025-02-07-04.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/33"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Mastering the Art of Prompting: Unlocking Insights from the WorkSafeBC Technical Blog</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-prompt-analysis.html" rel="alternate"></link><published>2025-02-12T00:00:00-08:00</published><updated>2025-02-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-02-12:/ai-fundamentals-prompt-analysis.html</id><summary type="html">&lt;p&gt;By structuring an effective prompt, we can transform this raw blog into a meaningful and inspiring summary.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog post discusses how artificial intelligence (AI) can be used to &lt;strong&gt;augment&lt;/strong&gt; capabilities, allowing for quick handling of tedious, time-consuming tasks. AI is applied in various areas such as analyzing complex documents, processing raw survey feedback, and extracting insights from blog posts that have taken years to develop. This &lt;strong&gt;empowering&lt;/strong&gt; technology is changing the way work is conducted and information is interpreted - as our technical blog is public, I will use &lt;a href="https://chatgpt.com/"&gt;chatgpt&lt;/a&gt; today, but could also use the Microsoft 365 Copilot.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Prompting&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Document Analysis" src="../images/ai-fundamentals-prompt-analysis-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Prompting involves giving an AI model input or instructions to guide its response. A prompt is the question, statement, or command given to the AI, shaping its output. The quality of the prompt determines the effectiveness of the AI, making it a useful tool for tasks like content creation, data analysis, problem-solving, and automation.&lt;/p&gt;
&lt;p&gt;I began with a simple prompt for a blog post summary, which produced a basic result. I improved the prompt by chatting with AI, learned the following and I quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"A great prompt should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clear and Specific: Define what you want to achieve.&lt;/li&gt;
&lt;li&gt;Engaging and Inspiring: Encourage deeper exploration.&lt;/li&gt;
&lt;li&gt;Structured and Goal-Oriented: Ensure logical progression.&lt;/li&gt;
&lt;li&gt;Contextually Rich: Provide relevant background.&lt;/li&gt;
&lt;li&gt;Flexible yet Focused: Allow creativity while maintaining direction." ... end quote.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The final prompt I used was the following: &lt;code&gt;Please analyze our technical blog at https://wsbctechnicalblog.github.io/index.html and create a comprehensive summary. Group insights based on tags or categories and highlight key learnings, innovations, and best practices shared in the blog. Capture the value it provides to technical audiences, emphasizing any groundbreaking ideas, industry trends, or practical takeaways. The summary should be structured, engaging, and inspiring, making it easy for readers to grasp the significance of the content. Include a detailed summary of number of tags and blog pages analysed.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;AI document analysis quickly produced this summary, saving hours of work. A true productivity boost!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;AI Generated Summary&lt;/h1&gt;
&lt;p&gt;The WorkSafeBC Technical Blog offers a wealth of knowledge tailored for technical audiences, focusing on areas such as Azure DevOps, pipelines, engineering practices, and metrics. Below is a structured summary of key insights, grouped by relevant tags:&lt;/p&gt;
&lt;h3&gt;1. Azure DevOps and Pipelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;YAML Pipelines and Blueprint Templates&lt;/strong&gt;: The blog emphasizes the transition to Azure DevOps YAML pipelines, highlighting their advantages in treating pipelines as code. A series titled "Azure DevOps Pipeline Blueprints" delves into various templates, including Continuous Delivery (CD), Quality Assurance (QA) scans, and tools like &lt;code&gt;git-tools-git-version.yml&lt;/code&gt;. These entries provide in-depth guidance on implementing and customizing these templates to enhance deployment processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipeline Optimization&lt;/strong&gt;: In "Make your pipeline badges more compact and meaningful," the blog discusses strategies to declutter dashboards by customizing Azure DevOps pipeline badges, leading to more efficient monitoring. &lt;a href="https://wsbctechnicalblog.github.io/pipelines-badges.html?utm_source=chatgpt.com"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Variable Management&lt;/strong&gt;: The article "How to share variables amongst Azure Pipeline agents" addresses challenges and solutions in sharing output variables across stages in Azure YAML-based pipelines, offering practical troubleshooting advice. &lt;a href="https://wsbctechnicalblog.github.io/sharing-variables-amongst-agents.html?utm_source=chatgpt.com"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Engineering Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trunk-Based Development&lt;/strong&gt;: &lt;code&gt;A Deep Dive into Trunk-Based Pull Request Workflow&lt;/code&gt; explores implementing pull request workflows within trunk-based development, emphasizing continuous integration and collaboration. &lt;a href="https://wsbctechnicalblog.github.io/engineering-practices-pull-request-v2.html?utm_source=chatgpt.com"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull Request Validations&lt;/strong&gt;: The entry &lt;code&gt;Back to Basics: Pull-Request (PR) Validations&lt;/code&gt; outlines workflows and branch policies to enhance code quality and adherence to governance standards. &lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-pr-validations.html?utm_source=chatgpt.com"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Metrics and Continuous Improvement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DORA Metrics&lt;/strong&gt;: The blog discusses strategies to improve Deployment Frequency, Lead Time for Changes, Mean Time to Recovery (MTTR), and Change Failure Rates, providing actionable insights for teams aiming to enhance their DevOps performance. &lt;a href="https://wsbctechnicalblog.github.io/tag/metrics.html?utm_source=chatgpt.com"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DevOps Analytics Strategy&lt;/strong&gt;: An article titled &lt;code&gt;DevOps Analytics Strategy&lt;/code&gt; presents an objective method and maturity model for business analytics across an enterprise, guiding organizations in implementing effective analytics strategies. &lt;a href="https://wsbctechnicalblog.github.io/tag/metrics.html?utm_source=chatgpt.com"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Agile and Project Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Azure Boards Tips&lt;/strong&gt;: The blog offers practical advice on using Azure Boards, such as selecting tag colors and defining styles to enhance visualization and organization of work items. &lt;a href="https://wsbctechnicalblog.github.io/azure-boards-tips.html?utm_source=chatgpt.com"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Agile Planning&lt;/strong&gt;: In "Agile Planning with Azure DevOps," the blog recounts a recent planning session, sharing insights on effectively utilizing Azure DevOps for agile methodologies. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. Automation and Artificial Intelligence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Empowerment through Automation and AI&lt;/strong&gt;: The blog explores how automation and AI can reshape work processes, creating opportunities to empower engineers by reducing repetitive tasks and enhancing productivity. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AI Study Resources&lt;/strong&gt;: A series of posts provide consolidated study notes and guiding principles for AI certifications, serving as valuable resources for professionals pursuing AI knowledge. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Collectively, the &lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;WorkSafeBC Technical Blog&lt;/a&gt; serves as a comprehensive resource for technical professionals, offering in-depth analyses, practical solutions, and innovative strategies across various domains. Its focus on continuous improvement, adherence to best practices, and exploration of emerging trends makes it an invaluable tool for teams striving for excellence in the ever-evolving tech landscape. &lt;/p&gt;
&lt;h1&gt;Analysis of key blog tags&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Azure DevOps&lt;/strong&gt; (86 articles): This tag encompasses a broad range of topics, including pipeline configurations, boards, and best practices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pipelines&lt;/strong&gt; (59 articles): Focused on the intricacies of pipeline development, optimization, and management.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineering&lt;/strong&gt; (58 articles): Covers engineering principles, methodologies, and case studies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learning&lt;/strong&gt; (52 articles): Dedicated to educational content, tutorials, and knowledge sharing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps&lt;/strong&gt; (52 articles): Explores the culture, practices, and tools that define DevOps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile&lt;/strong&gt; (35 articles): Discusses Agile methodologies, practices, and their application in projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt; (23 articles): Highlights the role of automation in enhancing efficiency and reducing manual effort.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI&lt;/strong&gt; (18 articles): Delves into artificial intelligence topics, including machine learning and AI applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tips&lt;/strong&gt; (28 articles): Provides practical advice and best practices for various technical scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;While it can be disheartening to see AI quickly analyze and summarize what took us years to create, it is also refreshing and empowering. Rather than spending days on mundane analysis and documentation tasks, AI empowers us to focus on more challenging, interesting, and enjoyable work. One of the reasons I often begin an AI conversation with &lt;code&gt;hello&lt;/code&gt; or &lt;code&gt;please&lt;/code&gt;, and end it with &lt;code&gt;thank you&lt;/code&gt;, is to maintain a sense of courtesy and respect with my matrix wingman.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Exploring the Continuous Delivery (CD) templates</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-explore-cd.html" rel="alternate"></link><published>2025-02-05T00:00:00-08:00</published><updated>2025-02-05T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-02-05:/azure-pipeline-blueprints-explore-cd.html</id><summary type="html">&lt;p&gt;Drilling Deeper: A Closer Look at the Blueprint Continuous Delivery (CD) Templates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue our deep dive into the details of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/a&gt; open source blueprint repo. Today we are going to explore the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/universal-artifact/azure-pipeline-universal-artifact-cd.yml"&gt;blueprints/universal-artifact/azure-pipeline-universal-artifact-cd.yml&lt;/a&gt; and &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/universal-artifact/azure-pipeline-universal-artifact-cd-stage.yml"&gt;blueprints/universal-artifact/azure-pipeline-universal-artifact-cd-stage.yml&lt;/a&gt; templates, which are part of our Universal Azure Artifact templates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="drilling" src="../images/azure-pipeline-blueprints-explore-cd-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-start.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the start template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-version.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the version template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-info.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the info template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-qa-scans.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the QA Scan templates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; blog series.&lt;/li&gt;
&lt;li&gt;&lt;a href="/sharing-variables-amongst-agents.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/sharing-variables-with-stages-and-jobs.html"&gt;Gotchas when sharing variables with Azure DevOps stages and jobs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Today's topics - azure-pipeline-universal-artifact-cd.yml and azure-pipeline-universal-artifact-cd-stage.yml templates&lt;/h1&gt;
&lt;p&gt;Today we start with the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/universal-artifact/azure-pipeline-universal-artifact-cd.yml"&gt;blueprints/universal-artifact/azure-pipeline-universal-artifact-cd.yml&lt;/a&gt; template which is triggered by the &lt;code&gt;*-control.yml&lt;/code&gt; template, which controls the Continuous Delivery (CD) flow, and calls the various review, security, and QA scans.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;azure-pipeline-universal-artifact-cd.yml.yml&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# DEVELOPMENT STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;

&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# SYSTEM TEST STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;

&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# SECURITY AUTOMATION STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;security&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;securityAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;securityAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;

&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# QA SCANS STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qaScans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qaScans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;


&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# SECURITY REVIEW STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;security&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;securityReview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;stageEnvName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;securityReview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityAutomation&lt;/span&gt;

&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# STAGING STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="n"&gt;Staging&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;Staging&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QAScans&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityAutomation&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityReview&lt;/span&gt;

&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# PRE-PROD AUTOMATION SCANS STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;automation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preProdAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preProdAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QAScans&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityAutomation&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityReview&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Staging&lt;/span&gt;

&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# PRODUCTION STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="n"&gt;Production&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;Production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QAScans&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityAutomation&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityReview&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Staging&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PreProdAutomation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This template, as shown above, triggers the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/universal-artifact/azure-pipeline-universal-artifact-cd-stage.yml"&gt;blueprints/universal-artifact/azure-pipeline-universal-artifact-cd-stage.yml&lt;/a&gt; template for each deployment stage.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;azure-pipeline-universal-artifact-cd-stage.yml&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;name:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="nl"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="cp"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# STAGE&lt;/span&gt;
&lt;span class="cp"&gt;# -----------------------------------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;setSemVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;semVersion&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameVM&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deployment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameEnv&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;runOnce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="cp"&gt;# For release we enforce the toolkit version&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Create_Universal_Package&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;publishDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;feedsToUsePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;vstsFeedPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feedPublish&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;vstsFeedPackagePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packagePublish&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;versionOption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;versionPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="cp"&gt;# For non-release we increment the minor version so that we do not have to tag for DV feeds&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Create_Universal_Package&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;publishDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;feedsToUsePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;vstsFeedPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feedPublish&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nl"&gt;vstsFeedPackagePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packagePublish&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Drill-down&lt;/h1&gt;
&lt;h3&gt;azure-pipeline-universal-artifact-cd.yml nuggets&lt;/h3&gt;
&lt;p&gt;Let us take a look at the &lt;code&gt;azure-pipeline-universal-artifact-cd.yml&lt;/code&gt; blueprint template, which defines the deployment and validation stages, specifying when they are triggered and in what sequence. The first YAML snippet is part of an Azure DevOps pipeline configuration, specifically handling conditional deployment for the Production stage in a universal artifact deployment pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gem 1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="n"&gt;Production&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;Production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SystemTest&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QAScans&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityAutomation&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityReview&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Staging&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PreProdAutomation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let us break it down.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The YAML snippet runs only if &lt;code&gt;parameters.stage.production.config.active&lt;/code&gt; is &lt;strong&gt;true&lt;/strong&gt; (enabled in the *-config.yml file and if the build source branch is &lt;code&gt;refs/heads/release&lt;/code&gt; or any sub-branch under &lt;code&gt;refs/heads/release/&lt;/code&gt;, for example refs/heads/release/v1.2.3.&lt;/li&gt;
&lt;li&gt;Uses the &lt;code&gt;azure-pipeline-universal-artifact-cd-stage.yml&lt;/code&gt; template and passes parameters like name, displayName, and the config object.&lt;/li&gt;
&lt;li&gt;Establishes dependencies on multiple preceding stages to dictate the execution sequence and inherit variables from earlier stages, as outlined in &lt;a href="/sharing-variables-amongst-agents.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt; and &lt;a href="/sharing-variables-with-stages-and-jobs.html"&gt;Gotchas when sharing variables with Azure DevOps stages and jobs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;azure-pipeline-universal-artifact-cd-stage.yml nuggets&lt;/h3&gt;
&lt;p&gt;Next, let us peek into the template used by the &lt;code&gt;*-cd.yml&lt;/code&gt; template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gem 2&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;dependsOn&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This YAML snippet defines two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;config&lt;/code&gt; parameter is by default an empty array, but in our case stores pipeline configuration settings.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;dependsOn&lt;/code&gt; parameter, also by default an empty array, specifies dependencies between stages/jobs, determining execution order.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gem 2&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setSemVersion.semVersion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This line defines a pipeline variable named currentVersion, which retrieves its value from the calculated version as we discussed in &lt;a href="/azure-pipeline-blueprints-explore-version.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the version template&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first &lt;code&gt;ContinuousIntegration&lt;/code&gt; refers to the stage name.&lt;/li&gt;
&lt;li&gt;The second &lt;code&gt;ContinuousIntegration&lt;/code&gt; refers to the job name within that stage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setSemVersion&lt;/code&gt; refers a step within the job.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semVersion&lt;/code&gt; is the output variable from that task.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;*Gem 3&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Create_Universal_Package&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;publishDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;feedsToUsePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;vstsFeedPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feedPublish&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;vstsFeedPackagePublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packagePublish&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;versionOption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;versionPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This YAML snippet defines a conditional step publishes a Universal Package to an internal feed when triggered from a release branch, using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;UniversalPackages&lt;/code&gt; task to publish artifacts.&lt;/li&gt;
&lt;li&gt;Upload the package from &lt;code&gt;$(Agent.BuildDirectory)/drop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The feed and package details aprovided via &lt;code&gt;parameters.config&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;$(currentVersion)&lt;/code&gt;, as set in the ContinuousIntegration stage, to set the custom version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is a wrap for today.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Questions&lt;/h1&gt;
&lt;h3&gt;For my team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: Every time I look at the per app-type control and cd blueprint template, I wonder - can we not standardize and share common templates?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;For you&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q2: How are you dealing with the cd phase of your pipeline and integration of infrastructure as code (IaC)? &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Any questions or suggested improvements?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Exploring the QA Scan templates</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-explore-qa-scans.html" rel="alternate"></link><published>2025-01-29T00:00:00-08:00</published><updated>2025-01-29T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-29:/azure-pipeline-blueprints-explore-qa-scans.html</id><summary type="html">&lt;p&gt;Drilling Deeper: A Closer Look at the Blueprint Quality Assurance (QA) Scan Templates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue our deep dive into the details of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/a&gt; open source blueprint repo. Today we are going to explore the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/azure-pipeline-qa-scans.yml"&gt;templates/qa/azure-pipeline-qa-scans.yml&lt;/a&gt; and &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;templates/qa/qa-scans-cd.yml&lt;/a&gt; templates, designed to run the quality assurance validations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="drilling" src="../images/azure-pipeline-blueprints-explore-qa-scans-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-start.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the start template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-version.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the version template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-info.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the info template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; blog series.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Today's topics - azure-pipeline-qa-scans.yml and qa-scans-cd.yml&lt;/h1&gt;
&lt;p&gt;Today we peek into the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/azure-pipeline-qa-scans.yml"&gt;templates/qa/azure-pipeline-qa-scans.yml&lt;/a&gt; template which is triggered by the continuous delivery (cd) template and has one purpose, to trigger the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/qa/qa-scans-cd.yml"&gt;templates/qa/qa-scans-cd.yml&lt;/a&gt; and in future, other QA templates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;azure-pipeline-qa-scans.yml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;

&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# QUALITY ASSURANCE SCANS STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QAScans&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Quality Assurance (QA)&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QAScans&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# List all environment variables within this agent&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dump&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Inject the QA scans template into the pipeline&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;qa-scans-cd.yml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;modeElite&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;QA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTOMATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;FOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LOWER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NON&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;PROD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ENVIRONMENTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;STAGE&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;QA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Lower&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Placeholder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;****************************************&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;reliable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;web&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Toolbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;quality&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;assurance&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;robot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;outputdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;BUILD_ARTIFACTSTAGINGDIRECTORY&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;timestampoutputs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mylog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NONE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;RESULTSET&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;robottests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;BUILD_SOURCESDIRECTORY&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;quality&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;assurance&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;RobotScripts&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;HealthCheck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;robot&lt;/span&gt;


&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;reliable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;web&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;UNKNOWN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;QA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTOMATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;FOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HIGHER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PROD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ENVIRONMENTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;STAGE&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SourceBranch&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;QA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Higher&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Placeholder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;****************************************&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;UNKNOWN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;QA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTOMATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;FOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LOWER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HIGHER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PROD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ENVIRONMENTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;STAGE&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;QA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Lower&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Higher&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Placeholder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***********************************&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;qa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;relevant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;function&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;UNKNOWN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Drill-down&lt;/h1&gt;
&lt;h3&gt;azure-pipeline-qa-scans.yml nuggets&lt;/h3&gt;
&lt;p&gt;This template is triggered by our *cd-yml template, ensures the necessary dependencies are in place, and then hands off control to the qa-scans.yml template.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gem 1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;dependsOn:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependsOn&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The YAML snippet defines dependencies for a stage in a pipeline dynamically. It allows for flexible, parameter-driven pipeline configuration, enabling reuse of templates for multiple scenarios without hardcoding dependencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dependsOn&lt;/strong&gt; keyword&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specifies which stages in the pipeline must be completed successfully before this stage can run, ensuring the pipeline respects the execution order and dependency hierarchy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${{ each stage in parameters.dependsOn }}&lt;/code&gt; iterates over the values in the parameters.dependsOn array.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${{ stage }}&lt;/code&gt; resolves each value in the array to dynamically populate the dependsOn list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the parameters.dependsOn contains ['Build', 'Test'], the snippet will resolve to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dependsOn:
  - Build
  - Test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means the current stage will only execute after both the Build and Test stages are completed. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gem 2&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# List all environment variables within this agent&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dump&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This gem runs a Bash script to print, sort, and display all environment variables in pipeline logs. It is useful for debugging or validating environment setup in CI/CD pipelines.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bash&lt;/strong&gt;: Specifies a Bash script task in the pipeline.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;env | sort&lt;/strong&gt;: Lists and sorts all current environment variables alphabetically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;displayName&lt;/strong&gt;: Adds a label in the pipeline UI to describe what this step does.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;qa-scans.yml&lt;/h3&gt;
&lt;p&gt;For this template, we focus on a single conditional statement from the many available options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This gem is a conditional expression that checks whether the current build branch matches specific conditions - whether we are dealing with a &lt;strong&gt;release&lt;/strong&gt; branch. In the template we have a section where users can run app-type specific tasks if we are dealing with a &lt;strong&gt;release&lt;/strong&gt; branch, or any &lt;strong&gt;other&lt;/strong&gt; branch, or both.&lt;/p&gt;
&lt;p&gt;That is it for today - but an ear on the ground - we have an interesting v2.1 update coming.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Questions&lt;/h1&gt;
&lt;h3&gt;For my team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: Should we consider removing the conditional app-type logic examples and instead adding them only when needed for specific app-type blueprints? This could help reduce noise and improve clarity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;For you&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q2: How do you abstract your user interface, user experience, and other testing in the continuous delivery pipelien flow (shift right), after the continuous integration pipeline flow (shift left)is complete? &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Any questions or suggested improvements?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Exploring the info-version.yml template</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-explore-info.html" rel="alternate"></link><published>2025-01-24T00:00:00-08:00</published><updated>2025-01-24T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-24:/azure-pipeline-blueprints-explore-info.html</id><summary type="html">&lt;p&gt;Drilling Deeper: A Closer Look at the Blueprint info-version.yml Template.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue our deep dive into the details of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/a&gt; open source blueprint repo. Today we are going to explore the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/utilities/info-version.yml"&gt;templates/utilities/info-version.yml&lt;/a&gt; template, designed to capture and present detailed information about the pipeline instance, facilitating security reviews and enabling future analysis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="drilling" src="../images/azure-pipeline-blueprints-explore-info-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-start.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the start template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-version.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the version template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; blog series.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Today's topic - info-version.yml&lt;/h1&gt;
&lt;p&gt;Today we peek into the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/utilities/info-version.yml"&gt;templates/utilities/info-version.yml&lt;/a&gt; template which has one purpose - capture information about the pipeline instance for future reference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# info-version Template&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# See https:&lt;/span&gt;&lt;span class="c1"&gt;//aka.ms/yaml for Azure DevOps Pipeline documentation&lt;/span&gt;
&lt;span class="cp"&gt;# &lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="cp"&gt;# mandatory parameters&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;name:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="cp"&gt;# default parameters&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;vGuid&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__TODO_ADD_UNIQUE_GUID__HERE__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;vVersion&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.modeElite}}:${{parameters.applicationBlueprint}}:${{parameters.applicationType}}:${{parameters.vGuid}}:${{parameters.vVersion}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;BootstrapInfo&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapModeElite;isOutput=true]${{parameters.modeElite}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapBlueprint;isOutput=true]${{parameters.applicationBlueprint}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapType;isOutput=true]${{parameters.applicationType}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapGuid;isOutput=true]${{parameters.vGuid}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapVersion;isOutput=true]${{parameters.vVersion}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;BootstrapVars&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# Generate pipeline info and save it to a JSON file&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$variablesData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PSCustomObject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="l"&gt;@{&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapModeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.modeElite}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.applicationBlueprint}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.applicationType}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapGuid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.vGuid}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.vVersion}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="l"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$variablesData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConvertTo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$jsonFilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Agent.TempDirectory)/pipe-info.json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;FilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$jsonFilePath&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JSON file saved to $jsonFilePath&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;# Publish pipeline info&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PublishBuildArtifacts&lt;/span&gt;&lt;span class="mi"&gt;@1&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;PathtoPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Agent.TempDirectory)/pipe-info.json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;ArtifactName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Drill-down&lt;/h1&gt;
&lt;p&gt;The second step is a &lt;code&gt;PowerShell&lt;/code&gt; command sets five variables in an Azure DevOps pipeline to make them available for subsequent tasks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapModeElite;isOutput=true]${{parameters.modeElite}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapBlueprint;isOutput=true]${{parameters.applicationBlueprint}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapType;isOutput=true]${{parameters.applicationType}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapGuid;isOutput=true]${{parameters.vGuid}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapVersion;isOutput=true]${{parameters.vVersion}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;BootstrapVars&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;##vso[task.setvariable variable=bootStrapModeElite;isOutput=true]&lt;/code&gt; is an Azure DevOps-specific logging command to set a variable that can be accessed by other tasks in the pipeline. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;bootStrapModeElite&lt;/code&gt; is the name of the variable being set. In this case it is the variable that defines whether we are serious about quality (true) or noe (false).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isOutput=true&lt;/code&gt; makes the variable available as an output variable for other pipeline jobs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameters.modeElite&lt;/code&gt; is a reference to a parameter that is passed around the templates.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;Refer to &lt;a href="/sharing-variables-with-stages-and-jobs.html"&gt;Gotchas when sharing variables with Azure DevOps stages and jobs&lt;/a&gt; if you are planning to share the variables amongst jobs and stages.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While these variables work seamlessly for reuse within YAML-based pipelines or across different jobs, we encountered an issue with our classic Azure Pipelines, which consist of a YAML-based continuous integration (CI) pipeline and an older, classic release pipeline for continuous delivery. The variables did not flow between the new and legacy environments, and modifying thousands of legacy release pipelines was simply not feasible.&lt;/p&gt;
&lt;p&gt;This brings us to the second half of the template, which creates a json file with the variables and their values, and publishes them to the Azure Pipeline artifacts. The Powershell task runs an &lt;code&gt;inline&lt;/code&gt; script that creates a PowerShell custom object &lt;code&gt;$variablesData&lt;/code&gt; with properties that are populated using template parameters.&lt;/p&gt;
&lt;p&gt;The scripts last four steps performs the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Converts the &lt;code&gt;$variablesData&lt;/code&gt; object to &lt;strong&gt;JSON&lt;/strong&gt; format.&lt;/li&gt;
&lt;li&gt;Defines the file path for the JSON file in the agent's temporary directory.&lt;/li&gt;
&lt;li&gt;Writes the JSON content to the specified file.&lt;/li&gt;
&lt;li&gt;Outputs a message indicating the file path where the JSON file was saved.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$variablesData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PSCustomObject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="l"&gt;@{&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapModeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.modeElite}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.applicationBlueprint}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.applicationType}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapGuid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.vGuid}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.vVersion}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="l"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$variablesData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConvertTo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$jsonFilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Agent.TempDirectory)/pipe-info.json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;FilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$jsonFilePath&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JSON file saved to $jsonFilePath&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lastly, the template publishes the &lt;code&gt;pipe-info.json&lt;/code&gt; file located in the agent's temporary directory as a build artifact named &lt;code&gt;pipe-info&lt;/code&gt;. Going forward, our quality and security automation, as well as the 2AM incident root cause analysis, can find the pipeline information such as how serious we were about quality, the application-type blueprints used, the suggested application type, and the blueprint template version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;# Publish pipeline info&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PublishBuildArtifacts&lt;/span&gt;&lt;span class="mi"&gt;@1&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;PathtoPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Agent.TempDirectory)/pipe-info.json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;ArtifactName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is it for today!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Questions&lt;/h1&gt;
&lt;h3&gt;For my team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: What other information should we save in the &lt;code&gt;pipe-info&lt;/code&gt; artifact?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;For you&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q2: What other information is important for your CI/CD pipelines to track quality and governance?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Any questions or suggested improvements?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Exploring the git-tools-git-version.yml template</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-explore-version.html" rel="alternate"></link><published>2025-01-17T00:00:00-08:00</published><updated>2025-01-17T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-17:/azure-pipeline-blueprints-explore-version.html</id><summary type="html">&lt;p&gt;Drilling Deeper: A Closer Look at the Blueprint git-tools-git-version.yml Template.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue our deep dive into the details of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/a&gt; open source blueprint repo. Today we are going to explore the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/utilities/git-tools-git-version.yml"&gt;templates/utilities/git-tools-git-version.yml&lt;/a&gt; template that is used by our continuous integration (CI) pipeline phase to calculate the semantic version of our codebase using the &lt;a href="https://gitversion.net"&gt;gitversion.net&lt;/a&gt; open source project and generate a unique name for each pipeline instance based on this version.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="drilling" src="../images/azure-pipeline-blueprints-explore-version-1.png"&gt;&lt;/p&gt;
&lt;p&gt;"&lt;strong&gt;From git log to SemVer in no time.&lt;/strong&gt;" - &lt;a href="https://gitversion.net"&gt;gitversion.net&lt;/a&gt;.
GitVersion is a tool that generates a Semantic Version number based on your Git history. It can be used for various purposes, such as stamping a version number on artifacts produced during build1. GitVersion is flexible, configurable, and can be used in Continuous Server pipelines.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/azure-pipeline-blueprints-explore-start.html"&gt;Azure DevOps Pipeline Blueprints - Exploring the start template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; blog series.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Today's topic - git-tools-git-version.yml&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/templates/utilities/git-tools-git-version.yml"&gt;templates/utilities/git-tools-git-version.yml&lt;/a&gt; template has its roots in our v1 generic template era, which dates back three years. It leverages &lt;a href="https://gitversion.net"&gt;gitversion.net&lt;/a&gt; to calculate the semantic version—a powerful open-source project that has proven invaluable in our workflows. We highly recommend taking a closer look at &lt;a href="https://gitversion.net"&gt;gitversion.net&lt;/a&gt;, as it offers essential features that streamline versioning processes. We are deeply grateful to its authors for providing such a valuable tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# GitTools GitVersion Template&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# See https:&lt;/span&gt;&lt;span class="c1"&gt;//aka.ms/yaml for Azure DevOps Pipeline documentation&lt;/span&gt;
&lt;span class="cp"&gt;# &lt;/span&gt;
&lt;span class="cp"&gt;# Special template to enable YAML pipeline users to switch to WhiteSource&lt;/span&gt;
&lt;span class="cp"&gt;# until they switch to the new blueprint-based templates&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# IMPORTANT !!! The GitVersion tasks must be the first to run in pipeline.&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# EXAMPLE USAGE:&lt;/span&gt;
&lt;span class="cp"&gt;# &lt;/span&gt;
&lt;span class="cp"&gt;# resources:&lt;/span&gt;
&lt;span class="cp"&gt;#   repositories:&lt;/span&gt;
&lt;span class="cp"&gt;#   - repository: UtilityTemplates&lt;/span&gt;
&lt;span class="cp"&gt;#     type: git&lt;/span&gt;
&lt;span class="cp"&gt;#     name: &amp;#39;Common-Engineering-System/AzureDevOps.Automation.Pipeline.Templates&amp;#39;&lt;/span&gt;
&lt;span class="cp"&gt;#       ref: refs/heads/master&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;
&lt;span class="cp"&gt;# stages:&lt;/span&gt;
&lt;span class="cp"&gt;# - stage: ContinuousIntegration&lt;/span&gt;
&lt;span class="cp"&gt;#   displayName: Continuous Integration&lt;/span&gt;
&lt;span class="cp"&gt;#   jobs:&lt;/span&gt;
&lt;span class="cp"&gt;#   - job: ContinuousIntegration&lt;/span&gt;
&lt;span class="cp"&gt;#     steps:&lt;/span&gt;
&lt;span class="cp"&gt;#     - template: Templates/Utility/git-tools-git-version.yml@UtilityTemplates&lt;/span&gt;
&lt;span class="cp"&gt;#       parameters:&lt;/span&gt;
&lt;span class="cp"&gt;#         versionSpec:                &amp;#39;5.x&amp;#39;&lt;/span&gt;
&lt;span class="cp"&gt;#         useConfigFile:              true&lt;/span&gt;
&lt;span class="cp"&gt;#         configFilePath:             &amp;#39;$(Build.SourcesDirectory)\Src\GitVersion.yml&amp;#39;&lt;/span&gt;
&lt;span class="cp"&gt;#         updateAssemblyInfo:         true&lt;/span&gt;
&lt;span class="cp"&gt;#         targetPath:                 $(Build.SourcesDirectory)/$(Build.Repository.Name)&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;name:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;once&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;once&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;versionSpec&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;5.11&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5.6.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5.11&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;useConfigFile&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;targetPath&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;configFilePath&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfoFilename&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;additionalArguments&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="mi"&gt;@3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GitVersion&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="mi"&gt;@3&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GitVersion&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;useConfigFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useConfigFile&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;configFilePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configFilePath&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;updateAssemblyInfoFilename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfoFilename&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;additionalArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;additionalArguments&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=semVersion;isOutput=true]$(GitVersion.MajorMinorPatch)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=patchVersion;isOutput=true]$(GitVersion.Patch)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;setSemVersion&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Semantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;once&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;$BuildNumber&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.portfolioName}}_${{parameters.productName}}_$(GitVersion.MajorMinorPatch)_$(Get-Date -format yyyyMMdd).$(Get-Date -format HHmmss).$(Build.SourceBranchName)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[build.updatebuildnumber]$BuildNumber&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Drill-down&lt;/h1&gt;
&lt;p&gt;The first two steps of the template &lt;strong&gt;setup&lt;/strong&gt; the &lt;a href="https://gitversion.net"&gt;gitversion.net&lt;/a&gt; tool and then &lt;strong&gt;run&lt;/strong&gt; the tool to generate the Semantic Versioning (SemVer). &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Semantic versioning&lt;/strong&gt; is a widely used versioning system that follows the format MAJOR.MINOR.PATCH, where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAJOR&lt;/strong&gt;: Incremented for incompatible changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MINOR&lt;/strong&gt;: Incremented for backward-compatible new features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: Incremented for backward-compatible bug fixes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="mi"&gt;@3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GitVersion&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="mi"&gt;@3&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GitVersion&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;useConfigFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useConfigFile&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;configFilePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configFilePath&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;updateAssemblyInfoFilename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateAssemblyInfoFilename&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;additionalArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;additionalArguments&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The third step is a &lt;code&gt;PowerShell&lt;/code&gt; command sets two variables in an Azure DevOps pipeline to make them available for subsequent tasks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=semVersion;isOutput=true]$(GitVersion.MajorMinorPatch)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=patchVersion;isOutput=true]$(GitVersion.Patch)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;setSemVersion&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Semantic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;##vso[task.setvariable variable=semVersion;isOutput=true]&lt;/code&gt; is an Azure DevOps-specific logging command to set a variable that can be accessed by other tasks in the pipeline. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;variable=semVersion&lt;/code&gt; and &lt;code&gt;variable=patchVersion&lt;/code&gt; are the names of the variables being set, the former containing the MAJOR.MINOR and the latter the PATCH pert of the SemVer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isOutput=true&lt;/code&gt; makes the variable available as an output variable for other pipeline jobs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(GitVersion.MajorMinorPatch)&lt;/code&gt; is a reference to a variable output from the GitVersion tool, which contains the calculated semantic version numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last step is conditional, if and only if both the portfolio and product names are blank. It is another &lt;code&gt;PowerShell&lt;/code&gt; command that formats and sets the &lt;code&gt;$BuildNumber&lt;/code&gt;, which is a predefined Azure Pipeline variable that represents the build number assigned to your pipeline run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:&lt;span class="w"&gt; &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;TODO:&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;removed&lt;span class="w"&gt; &lt;/span&gt;once&lt;span class="w"&gt; &lt;/span&gt;portfolioName&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;productName&lt;span class="w"&gt; &lt;/span&gt;parameters&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;optional
&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;powershell:&lt;span class="w"&gt; &lt;/span&gt;|
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;$BuildNumber&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;=&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}_&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}_$(GitVersion.MajorMinorPatch)_$(Get-Date&lt;span class="w"&gt; &lt;/span&gt;-format&lt;span class="w"&gt; &lt;/span&gt;yyyyMMdd).$(Get-Date&lt;span class="w"&gt; &lt;/span&gt;-format&lt;span class="w"&gt; &lt;/span&gt;HHmmss).$(Build.SourceBranchName)&amp;quot;
&lt;span class="w"&gt;        &lt;/span&gt;Write-Host&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;##vso[build.updatebuildnumber]&lt;span class="nv"&gt;$BuildNumber&lt;/span&gt;&amp;quot;
&lt;span class="w"&gt;      &lt;/span&gt;displayName:&lt;span class="w"&gt; &lt;/span&gt;Update&lt;span class="w"&gt; &lt;/span&gt;Build&lt;span class="w"&gt; &lt;/span&gt;Number
&lt;span class="w"&gt;      &lt;/span&gt;failOnStderr:&lt;span class="w"&gt; &lt;/span&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Questions&lt;/h1&gt;
&lt;h3&gt;For my team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: We refer to portfolios and applications, not portfolios and products in our naming guidelines. Should we not align our v2 CI/CD blueprint templates accordingly?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;For you&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q2: Are your using the &lt;a href="https://gitversion.net"&gt;gitversion.net&lt;/a&gt; tool? If yes, which version and with which CI/CD Server?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Any questions or suggested improvements?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Are you part of The Solution or part of the Problem</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-part-of-the-solution.html" rel="alternate"></link><published>2025-01-15T00:00:00-08:00</published><updated>2025-01-15T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-15:/engineering-practice-part-of-the-solution.html</id><summary type="html">&lt;p&gt;Software Engineering Behavior&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Are You Part of the Solution or Part of the Problem?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Are you part of the Solution or part of the Problem" src="../images/engineering-practice-part-of-the-solution-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a harsh reality.&lt;/p&gt;
&lt;p&gt;My father, an electrical engineer by education and regional sales manager by practice at the end of his career (for Hewlett Packard), used to ask me this very question from childhood. It always gave me pause.&lt;/p&gt;
&lt;p&gt;In our fast-paced world, and especially in the technology and software engineering landscape, things are changing rapidly. From advancements in AI, computational power (hello, &lt;a href="https://en.wikipedia.org/wiki/Moore%27s_law"&gt;Moore’s Law&lt;/a&gt;), quantum computing, and the work environment duality introduced during the pandemic, we continue to evolve our development and coding standards, processes, and engineering viewpoints. Heck, even society is shifting in perspective and discourse. &lt;/p&gt;
&lt;p&gt;With all the distractions and noise, it’s much easier to take a passive position and just try to ride it out—but that is &lt;strong&gt;not in our DNA&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Having this question asked of you—&lt;em&gt;Are you part of the solution or part of the problem?&lt;/em&gt;—sure makes you consider which side of the fence you’re on. Are you:&lt;br&gt;
- Working with those that want to fix the problem, invent a new paradigm/process/widget, or&lt;br&gt;
- Lamenting with those that would rather reiterate and regurgitate the issue ad nauseam?  &lt;/p&gt;
&lt;p&gt;When I was asked, the answer was usually (at least at first) that I was in the second camp. It’s truly a mindset shift to become a member of the first camp. The transition from hapless participant to actively evaluating and defining what the solutions could be is empowering, exciting, and, honestly, a bit scary.&lt;/p&gt;
&lt;h2&gt;So, how do you take the bull by the horns and ride the tiger?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Be proactive - take control of your destiny" src="../images/engineering-practice-part-of-the-solution-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a business environment, the answer always starts with &lt;strong&gt;engagement&lt;/strong&gt;—participate in discussions concerning areas that impact you, your team, and your ability to deliver quality and value to your customers and stakeholders. Seeking out those you can ideate with is a key aspect of getting the ball rolling. It moves you into a position where you can clearly articulate the problem space and the scope you are able to address.&lt;/p&gt;
&lt;p&gt;Oh, about that—&lt;strong&gt;Scope.&lt;/strong&gt; It’s &lt;em&gt;critical&lt;/em&gt; to manage scope. We use the term &lt;em&gt;“don’t boil the ocean”&lt;/em&gt; to remind us that, in order to move the needle, we must make smaller, incremental steps (keeping it Agile). If you haven’t recognized it, this is the &lt;a href="https://en.wikipedia.org/wiki/KISS_principle"&gt;KISS principle&lt;/a&gt; in action. Derived by the US Navy in the 1960s, it’s a design objective: &lt;em&gt;“Keep it simple, stupid”&lt;/em&gt; (and other less aggressive interpretations).  &lt;/p&gt;
&lt;h2&gt;Welcome to the First Camp&lt;/h2&gt;
&lt;p&gt;My hope is that this little nudge will inspire more folks to move into the realm of being part of the brave new world. Stay relevant, and help to make tomorrow a better place. Welcome to the first camp!&lt;/p&gt;</content><category term="Posts"></category><category term="code"></category><category term="code-quality"></category><category term="engineering"></category><category term="technical-excellence"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Exploring the start template</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-explore-start.html" rel="alternate"></link><published>2025-01-10T00:00:00-08:00</published><updated>2025-01-10T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-10:/azure-pipeline-blueprints-explore-start.html</id><summary type="html">&lt;p&gt;Drilling Deeper: A Closer Look at the Blueprint Start Template.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have decided to dive into our Azure Pipeline blueprints, explore the nitty gritty, and highlight a few nuggets for discussion. Today, we will start with the Start Template, focusing on the &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/blob/master/blueprints/__101__/azure-pipeline-__101__-start.yml"&gt;blueprints/&lt;strong&gt;101&lt;/strong&gt;/azure-pipeline-&lt;strong&gt;101&lt;/strong&gt;-start.yml&lt;/a&gt; file in our open-source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/a&gt; repo. As the name implies, it is the &lt;strong&gt;start&lt;/strong&gt; of our continuous integration (CI) and continuous delivery (CD) blueprint based pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="drilling" src="../images/azure-pipeline-blueprints-explore-start-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also refer to our &lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; blog series for more details.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Today's topic - *-start.yml&lt;/h1&gt;
&lt;p&gt;This template serves as the entry point for our application-type blueprints and is the only template engineers need to kick off their YAML-based Azure Pipelines. The &lt;code&gt;*-start.yml&lt;/code&gt; template marks the beginning of the continuous integration and delivery process, seamlessly passing control to the &lt;code&gt;*-control.yml&lt;/code&gt; template using the &lt;strong&gt;extends&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;WorkSafeBC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Multi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Blueprint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Design&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Practice&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;See&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//aka.ms/yaml for Azure DevOps Pipeline documentation&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;__101__&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Blueprint&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HOW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;USE&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;__TODO_PORTFOLIO__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;__TODO_PRODUCT__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;pipelines&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Look&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fine&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;tune&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;needed&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;associated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;__TODO_PORTFOLIO__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;__TODO_PRODUCT__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Replace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;__token__&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;__TODO_FOLDERNAME__&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ReadMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Excluding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Readme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;readme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;

&lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__TODO_INSERT_AZURE_DEVOPS_NAME_HERE__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Templates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;__101__&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__TODO_PORTFOLIO__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__TODO_PRODUCT__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;publishFolder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__TODO_FOLDERNAME__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Allow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;engineering&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;immediate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;being&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configured&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Drill-down&lt;/h1&gt;
&lt;p&gt;In our template the &lt;code&gt;resources:&lt;/code&gt; keyword defines external dependencies that your pipeline requires to run. These can be repositories, pipelines, containers, or other services. The resources section allows your pipeline to pull artifacts, access shared code, trigger based on other pipelines, and more. In our case, we are pulling YAML templates making up our blueprints from the AzureDevOps.Automation.Pipeline.Templates.v2 Azure Repo - we often refer to it as &lt;strong&gt;pipeline-as-code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;extends:&lt;/code&gt; keyword allows us to reuse and inherit configurations from another template, aka the &lt;code&gt;*-control.yml&lt;/code&gt; template, which we will explore on another day. It simplifies our pipeline by pulling in predefined logic from a shared template and extending it with our application-type blueprints. Think of it as template inheritance.&lt;/p&gt;
&lt;p&gt;Today's &lt;strong&gt;nugget&lt;/strong&gt; is the &lt;code&gt;extends:&lt;/code&gt; keyword, which also enables us to configure one or more required template in our Azure Pipelines that must be included and executed as part of the pipeline to enforce organizational policies, governance, or security standards. These templates are configured, as shown below, by Azure DevOps administrators to ensure that certain steps, checks, or validations cannot be bypassed by individual teams or pipeline authors.&lt;/p&gt;
&lt;p&gt;&lt;img alt="required template" src="../images/azure-pipeline-blueprints-explore-start-4.png"&gt;&lt;/p&gt;
&lt;p&gt;We use required templates to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enforce security scanning&lt;/li&gt;
&lt;li&gt;Apply testing and quality checks&lt;/li&gt;
&lt;li&gt;Standardize build and release processes&lt;/li&gt;
&lt;li&gt;Ensure artifact management and deployment approvals&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;When using trusted templates in Azure Pipeline environments, you must refer to your extends template with the &lt;code&gt;resources:&lt;/code&gt; feature, regardless of whether it is in the same or a different Azure Repo. Alternatively, Azure DevOps will fail you with the &lt;code&gt;Required template XYZ Failed.&lt;/code&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Questions&lt;/h1&gt;
&lt;h3&gt;For my team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: Should the branches not include &lt;code&gt;refs/heads/release/*&lt;/code&gt; as well?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;For you&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q2: Interested to review a pipeline cookbook?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are working on a cookbook as an essential guide to Continuous Integration and Continuous Delivery (CI/CD) demystifies Azure Pipelines with actionable insights and our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/a&gt; blueprints. From foundational principles to advanced engineering practices, it equips teams to transform their workflows with automation, Infrastructure as Code (IaC), and self-service tools. It has been written with gratitude to contributors and collaborators, this cookbook offers the knowledge you need to master CI/CD and redefine how software is built and delivered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="book-front" src="../images/azure-pipeline-blueprints-explore-start-2.png"&gt; &lt;img alt="book-back" src="../images/azure-pipeline-blueprints-explore-start-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Any questions or suggested improvements?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Why Automation Needs People to Truly Thrive</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-simplicity.html" rel="alternate"></link><published>2025-01-08T00:00:00-08:00</published><updated>2025-01-08T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-08:/back-to-basics-simplicity.html</id><summary type="html">&lt;p&gt;Cutting Through the Chaos: Why Simplicity is the Ultimate Software Superpower!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Simplicity&lt;/strong&gt; in software engineering is a core principle! It is crucial for productivity, scalability, sustainability, and maintainability. Its super powers include (sorted alphabetically and not a comprehensive list):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allows engineers to focus on solving problems and delivering value, rather than managing complex solutions.&lt;/li&gt;
&lt;li&gt;Empowers engineers to work more efficiently and concentrate on important tasks, rather than spending time on repetitive activities.&lt;/li&gt;
&lt;li&gt;Keeps guardrails and governance, such as pull-request guardrails and quality governance, effective without constant churn and required tweaks.&lt;/li&gt;
&lt;li&gt;Reduces the technology and technical debt footprint of your solutions.&lt;/li&gt;
&lt;li&gt;Simpler solutions make it easier to gather feedback and iterate on innovations.&lt;/li&gt;
&lt;li&gt;Reduces complexity, ensuring that our codebase stays clean and easy to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simplicity in software engineering involves removing unnecessary complexity to enable &lt;strong&gt;faster delivery&lt;/strong&gt;, &lt;strong&gt;better quality&lt;/strong&gt;, and more &lt;strong&gt;satisfied engineers&lt;/strong&gt;. It supports continuous delivery, &lt;strong&gt;&lt;em&gt;*empowers&lt;/em&gt;* engineers, and makes systems &lt;/strong&gt;resilient** to future changes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bookmark &lt;a href="https://www.geeksforgeeks.org/cyclomatic-complexity/"&gt;Cyclomatic Complexity&lt;/a&gt; which is a software metric used to measure the complexity of a program's control flow. It was introduced by Thomas J. McCabe in 1976 and is a key metric in code quality analysis, particularly for assessing the maintainability and testability of code - which we will get back to in future posts.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;VAPOUR-WARE&lt;/h1&gt;
&lt;p&gt;When an idea emerges, it is assessed with a critical question: &lt;strong&gt;What is the value, and is it needed today?&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;If there is &lt;strong&gt;no clear value&lt;/strong&gt;, the idea is saved without incurring sunk costs. If there is &lt;strong&gt;future potential but no immediate need&lt;/strong&gt;, the idea is added to the Azure DevOps backlog under the &lt;code&gt;Ideas&lt;/code&gt; area path. Those &lt;strong&gt;without clear value&lt;/strong&gt; are added to the &lt;code&gt;Scrapyared&lt;/code&gt; area path for future consideration.&lt;/p&gt;
&lt;p&gt;Cool ideas can quickly become unused, costly features that complicate maintenance. This clutter hinders governance and delays meaningful improvements for engineers and business stakeholders.&lt;/p&gt;
&lt;p&gt;Our goal is to deliver value by focusing on essential engineering processes and products. We prioritize current engineer needs, stakeholder investments, and avoid adding unnecessary complexity.&lt;/p&gt;
&lt;p&gt;We focus on &lt;strong&gt;what matters&lt;/strong&gt;, not vaporware.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;EXAMPLE - v2 Generic Multi-Job Template&lt;/h1&gt;
&lt;h3&gt;From brilliant idea to blunder:a lesson in over-engineering&lt;/h3&gt;
&lt;p&gt;Let me share a humbling example of one of my early ideas for our YAML-based pipelines which seemed great but ended up being a major mistake, hindering innovation and wasting resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Excitement" src="../images/back-to-basics-simplicity-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the early days of our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;AzureDevOps.Automation.Pipeline.Templates.v2&lt;/a&gt; open-source project, we were excited about creating reusable templates. We compared single-job to multi-job templates, aiming for flexibility and efficiency, as discussed in &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt;. These have now evolved into generic-steps and generic-jobs in our open-source project.&lt;/p&gt;
&lt;p&gt;It all seemed brilliant—until reality set in.&lt;/p&gt;
&lt;p&gt;What we had created was &lt;strong&gt;far more complex than necessary&lt;/strong&gt;, introducing &lt;strong&gt;hidden maintenance costs&lt;/strong&gt; and &lt;strong&gt;slowing down engineers&lt;/strong&gt; who just needed a simple, reliable way to run pipelines. The initial excitement gave way to frustration as our generic templates became a &lt;strong&gt;monolith of unnecessary abstraction&lt;/strong&gt;, requiring &lt;strong&gt;constant upkeep&lt;/strong&gt; without delivering the expected value.&lt;/p&gt;
&lt;h3&gt;The allure of parallel jobs: a costly temptation&lt;/h3&gt;
&lt;p&gt;Our engineers often chose the &lt;strong&gt;generic-jobs template&lt;/strong&gt; over the simpler option. The allure of running &lt;strong&gt;parallel jobs&lt;/strong&gt; in Azure Pipelines, similar to &lt;strong&gt;multi-threading&lt;/strong&gt;, was too strong. More parallel jobs should mean we can complete more tasks, faster.&lt;/p&gt;
&lt;p&gt;Well … &lt;strong&gt;yes, in theory&lt;/strong&gt;. But at what cost?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Excitement" src="../images/back-to-basics-simplicity-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The result was complex pipelines, starved Azure Agent Pools, and an increasing need for additional hosted parallel jobs—which come at a &lt;strong&gt;cost&lt;/strong&gt;. What began as an effort to optimize workflows turned into a significant use of resources, both in terms of engineering capacity and budget.&lt;/p&gt;
&lt;p&gt;We are frequently asked to assist with a pipeline based on the generic-jobs template. We often find the complexity challenging and return it to the engineers, deciding that the time investment is substantial. &lt;strong&gt;Switch to generic-steps and enjoy your favorite brew&lt;/strong&gt; while you wait a bit longer for your pipeline to complete more economically. It is a matter of minutes, not hours, and the minutes you lose, you gain in hours of troubleshooting and maintenance you never have to worry about.&lt;/p&gt;
&lt;h3&gt;Hoping to be wiser&lt;/h3&gt;
&lt;p&gt;This experience taught us a vital lesson: &lt;strong&gt;Not every “cool idea” is worth pursuing&lt;/strong&gt;. The key is to balance &lt;strong&gt;innovation with simplicity&lt;/strong&gt; and to avoid creating &lt;strong&gt;vapourware—ideas&lt;/strong&gt; that sound impressive but ultimately add more complexity than value. As a result we have removed the generic-jobs template option from our self-service and will gradually retire the template.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Do you agree?&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20250105</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-2025-01-05.html" rel="alternate"></link><published>2025-01-07T00:00:00-08:00</published><updated>2025-01-07T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-07:/azure-pipeline-blueprints-oss-sync-2025-01-05.html</id><summary type="html">&lt;p&gt;Refresh the toolbox and templates with 2024 enhancements.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have focused on improving our open-source &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD app blueprints&lt;/a&gt; and the associated &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Toolbox.v2"&gt;v2 toolbox&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;TOOLBOX&lt;/h1&gt;
&lt;p&gt;The toolbox has been cleaned up, and new scripts have been added to simplify installing quality assurance tools and querying Azure Pipelines for tests. &lt;/p&gt;
&lt;p&gt;Here is a snippet of one of the new scripts the toolbox which checks whether any tests have been detected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DESCRIPTION&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;variable&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;learn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;testresults&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;resultdetailsbybuild&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;7.2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;PARAMETER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PAT&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Personal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PAT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DevOps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CmdletBinding()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter(Mandatory = $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PAT&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nl"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SYSTEM_TEAMPROJECT&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;buildId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nl"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BUILD_BUILDID&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;organization&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;__TODO_INSERT_AZDO_ORG_NAME__&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;7.2-preview.1&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Project: $project BuildId: $buildId Token Length: $($PAT.Length)&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;BasicAuthEncode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Convert&lt;/span&gt;&lt;span class="o"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;ToBase64String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Text.Encoding&lt;/span&gt;&lt;span class="o"&gt;]::&lt;/span&gt;&lt;span class="nf"&gt;ASCII&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;:$($PAT)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;AuthHeader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Basic $BasicAuthEncode&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;buildPipelineTestResultsUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;https://vstmr.dev.azure.com/$organization/$project/_apis/testresults/resultsbybuild?buildId=$buildId&amp;amp;api-version=$apiVersion&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;buildPipelineTestResultsUrl&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;buildPipelineTestResults&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;buildPipelineTestResultsUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;AuthHeader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Get&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;buildPipelineTestCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;buildPipelineTestResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;##vso[task.setvariable variable=unitTestCount;isOutput=true]$buildPipelineTestCount&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Total Tests: $($buildPipelineTestResults.count)&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;apiCallError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;##vso[task.complete result=SucceededWithIssues;]Task completed with issues&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;##vso[task.setvariable variable=unitTestCount;isOutput=true]$apiCallError&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Error: $($_.Exception.Message)&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;WHY?&lt;/h1&gt;
&lt;p&gt;We are currently ensuring that tests run. Next, we will focus on enforcing successful and comprehensive test execution. Stay tuned for updates!&lt;/p&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Toolbox" src="../images/azure-pipeline-blueprints-oss-sync-2025-01-05-01.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alert" src="../images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;As part of this sync, I noticed that the Robot files do not adhere to our lower-case-kebab naming guidelines. We will publish a bug-fix update shortly.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;TEMPLATES&lt;/h1&gt;
&lt;p&gt;The templates have undergone significant cleanup and enhancements, addressing a broad list of improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Removed Application Insights logging&lt;/strong&gt; - While a cool concept, it remained unused and incurred unnecessary costs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enabled modeElite&lt;/strong&gt; - We have switched from false to true — signaling our commitment to higher quality standards.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Added unit test enforcement&lt;/strong&gt; - The pipeline now checks for unit tests and will fail if none are detected, reinforcing our focus on test coverage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced version-info template&lt;/strong&gt; - Version details are now stored as a pipeline artifact for future reference, improving traceability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated deprecated Azure Pipeline tasks&lt;/strong&gt; - We have replaced tasks marked for retirement to ensure long-term maintainability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a snippet of the updated info-version template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# info-version Template&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# See https:&lt;/span&gt;&lt;span class="c1"&gt;//aka.ms/yaml for Azure DevOps Pipeline documentation&lt;/span&gt;
&lt;span class="cp"&gt;# &lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="cp"&gt;# mandatory parameters&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;name:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="cp"&gt;# default parameters&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;vGuid&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__TODO_ADD_UNIQUE_GUID__HERE__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;vVersion&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.modeElite}}:${{parameters.applicationBlueprint}}:${{parameters.applicationType}}:${{parameters.vGuid}}:${{parameters.vVersion}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;BootstrapInfo&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapModeElite;isOutput=true]${{parameters.modeElite}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapBlueprint;isOutput=true]${{parameters.applicationBlueprint}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapType;isOutput=true]${{parameters.applicationType}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapGuid;isOutput=true]${{parameters.vGuid}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;##vso[task.setvariable variable=bootStrapVersion;isOutput=true]${{parameters.vVersion}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;BootstrapVars&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# Generate pipeline info and save it to a JSON file&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$variablesData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PSCustomObject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="l"&gt;@{&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapModeElite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.modeElite}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapBlueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.applicationBlueprint}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.applicationType}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapGuid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.vGuid}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;bootStrapVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${{parameters.vVersion}}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="l"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$variablesData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConvertTo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$jsonFilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Agent.TempDirectory)/pipe-info.json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;$json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;FilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$jsonFilePath&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JSON file saved to $jsonFilePath&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;# Publish pipeline info&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PublishBuildArtifacts&lt;/span&gt;&lt;span class="mi"&gt;@1&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;PathtoPublish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Agent.TempDirectory)/pipe-info.json&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;ArtifactName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;WHY?&lt;/h1&gt;
&lt;p&gt;As mentioned earlier, we are fully committed to quality, driven by our common engineering processes and Azure Pipeline templates. We continue to embrace innovative approaches to improve and empower our engineering teams. In a future update, we plan to transition from using Azure Pipeline tasks to YAML commands, simplifying version tracking and management.&lt;/p&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Templates" src="../images/azure-pipeline-blueprints-oss-sync-2025-01-05-02.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Engineering Practice Engineering Interviews</title><link href="https://wsbctechnicalblog.github.io/engineering-practice-engineering-interviews.html" rel="alternate"></link><published>2025-01-03T00:00:00-08:00</published><updated>2025-01-03T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2025-01-03:/engineering-practice-engineering-interviews.html</id><summary type="html">&lt;p&gt;Engineering Interviews – Breaking Barriers with Generative AI&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Engineering Interviews – Breaking Barriers with Generative AI&lt;/h1&gt;
&lt;h2&gt;What’s Working Well and What’s Not for Our Engineers&lt;/h2&gt;
&lt;p&gt;In today’s post, I want to take you on a journey through a new initiative we’ve embarked on to break barriers and foster better connections within our engineering team. I’ll cover why we did this, how we approached it, the results we achieved, and the technical process behind it. This experiment combined the deeply human aspect of authentic conversations with the power of Generative Artificial Intelligence (Gen AI). It’s a unique blend of the personal and the technological, and I’m excited to share how it all came together.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Setting the Stage&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Engineers working Remotely" src="../images/engineering-practice-engineering-interviews-2.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our engineerings teams at WorkSafeBC are vast: over 330 engineers working across disciplines to ideate, design, develop, test, secure, deploy, and maintain more than 220 business applications. These applications serve both internal and external stakeholders, and we follow Scaled Agile Framework &lt;a href="https://scaledagileframework.com/"&gt;(SAFe)&lt;/a&gt; principles to ensure smooth delivery of value. &lt;/p&gt;
&lt;p&gt;However, at this scale—especially in the aftermath of the pandemic—our engineers often work in silos, gradually losing connection with one another. To counteract this drift, we launched a bold initiative: reconnecting and re-establishing awareness of not just what we do but who we are as individuals.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Idea: Reconnecting Through Interviews&lt;/h2&gt;
&lt;p&gt;The idea of interviewing team members was initially met with some skepticism. Why interviews? What was the purpose? What would be the value? Fortunately, we had a small group of adventurous volunteers willing to help us define the process and messaging.&lt;/p&gt;
&lt;p&gt;Before kicking off, we introduced the concept in our Developer Community of Practice. This allowed us to gather initial feedback, gauge interest, and recruit volunteers. We crafted a set of questions that blended professional topics—like work responsibilities and ways to improve our Software Development Life Cycle (SDLC)—with personal ones about hobbies and work-life balance. Sticking to a consistent question set was key to ensuring the interviews felt predictable, open, and friendly.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Interview Process&lt;/h2&gt;
&lt;p&gt;Each interview started with the “Why.” We explained the purpose of the initiative, the outcomes we hoped for, and the interviewee’s role in the process. Once that was clear, we turned on the recording—but only for audio transcripts, avoiding video to put participants at ease.&lt;/p&gt;
&lt;p&gt;The transcripts were the foundation of the process. Using Generative AI, we summarized these into two levels of detail: a concise summary and a detailed summary. We then fed these into another AI system to generate podcasts and an additional summary of that generated conversation. The idea was ambitious, and we were all curious to see how it would turn out.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Results: Human Connections Enhanced by AI&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Interviews Augmented with Gen AI" src="../images/engineering-practice-engineering-interviews-1.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The results? Simply put: WOW. The feedback from engineers was overwhelmingly positive. Comments like “That made me sound really interesting” and “Very impressive” showcased the impact of the initiative. The blend of personal stories and professional insights made the interviews feel authentic and relatable.&lt;/p&gt;
&lt;h3&gt;What Worked:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using Transcripts&lt;/strong&gt;: Starting with text transcripts helped mask speech hesitations and language barriers, giving participants more confidence.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Predefined Questions&lt;/strong&gt;: A consistent question set created a comfortable, predictable tone for the interviews.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI Summaries&lt;/strong&gt;: Generating detailed summaries added value by preserving the richness of the original conversations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What Didn’t Work:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speech-to-Text Errors&lt;/strong&gt;: AI isn’t perfect, and transcription errors sometimes distorted the meaning. Cleaning the transcript manually was essential.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI Hallucinations&lt;/strong&gt;: Without clear instructions, AI occasionally introduced unrelated content, leading to amusing (but inaccurate) results.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Lessons Learned and Next Steps&lt;/h2&gt;
&lt;p&gt;To generate high-quality summaries and podcasts, grounding the AI in the context of the interview was critical. For example, I explicitly instructed the model to rely only on the transcript and provided the original question set to maintain focus. Despite this, hallucinations were more common in summaries than in transcripts, which reinforced the need for careful review.&lt;/p&gt;
&lt;p&gt;The podcasts were a particular highlight. Engineers loved hearing themselves represented in a polished, professional way—though the occasional AI-generated quirks provided plenty of laughs. Overall, podcasts based on cleaned transcripts were the most accurate and best represented the individuals.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Moving Forward&lt;/h2&gt;
&lt;p&gt;This initiative has proven to be a great Phase I Proof of Concept. The next step? Rinse, repeat, and scale. By promoting this approach, we can continue to foster connections among team members, helping us stay connected as individuals, not just as engineers. Imagine listening to these interviews as you transition from work to home life, maintaining that balance while strengthening the bonds with your team.&lt;/p&gt;
&lt;p&gt;Breaking barriers, one conversation at a time—with a little help from AI.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;``` &lt;/p&gt;
&lt;p&gt;Let me know if you'd like any adjustments or additional sections!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="technical-excellence"></category><category term="ai"></category></entry><entry><title>Fishbowl Dev CoP</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-fishbowl-dev-cop.html" rel="alternate"></link><published>2024-12-16T00:00:00-08:00</published><updated>2024-12-16T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-12-16:/engineering-practices-fishbowl-dev-cop.html</id><summary type="html">&lt;p&gt;Experimenting with a New Developer CoP Format: Fishbowl Discussions&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this week's blog, we are diving into a fresh approach for our Developer Community of Practice (Dev CoP). Over the years, we’ve leaned on standard presentations and open dialogue formats, but this time, we’re shaking things up with a fishbowl discussion. As part of our Scalable Agile Framework for the Enterprise (SAFe) practices at WorkSafeBC, this experiment aligns with our commitment to fostering innovation and engagement in our CoP ceremonies.&lt;/p&gt;
&lt;h1&gt;What Are Communities of Practice?&lt;/h1&gt;
&lt;p&gt;Communities of Practice (CoPs) are groups of professionals united by a shared interest in a technical or business domain. They collaborate to exchange knowledge, refine their skills, and push the boundaries of their field. This concept, outlined by Etienne Wenger in Communities of Practice: Learning, Meaning, and Identity, emphasizes learning through collaboration and shared experiences.&lt;/p&gt;
&lt;p&gt;For more, see: &lt;a href="https://scaledagileframework.com/communities-of-practice/"&gt;Communities of Practice - Scaled Agile Framework&lt;/a&gt; and &lt;a href="https://wsbctechnicalblog.github.io/ceremony-community-of-practice.html"&gt;Our Technical Blog&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;What is a Fishbowl?&lt;/h1&gt;
&lt;p&gt;In a fishbowl discussion, the “bowl” is formed by a group of guest speakers seated in a circle, engaging in a moderated discussion. Surrounding them, the audience observes in concentric rings. For open fishbowls, one chair in the inner circle remains empty, inviting audience members to step in and contribute. It’s an engaging, participatory format that encourages dynamic conversations and fresh perspectives.&lt;/p&gt;
&lt;h1&gt;Adapting Fishbowl for Hybrid Teams&lt;/h1&gt;
&lt;p&gt;Post-pandemic realities mean our teams are split between remote and in-office work, posing unique challenges for interactive formats like the fishbowl. To bridge this gap, we’re piloting a hybrid model. Picture this: the core participants—our “bowl”—will be on-site, surrounded by a physical audience. Simultaneously, virtual participants will join in via Microsoft Teams, forming a “virtual outer ring.” This hybrid setup allows everyone to engage, regardless of location.&lt;/p&gt;
&lt;p&gt;Our inaugural Dev CoP Fishbowl is scheduled for a day when many engineering teams, including mine, are in the office. Limited in-person seating will make attendance a coveted experience, promoting active participation. For those online, a large monitor will provide a closer view of the live interactions, ensuring inclusivity and collaboration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Fishbowl Format" src="../images/engineering-practices-fishbowl-dev-cop-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Figure – Envisioned Developer Community of Practice using Fishbowl format
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;What’s the Topic?&lt;/h1&gt;
&lt;p&gt;For our first fishbowl, Willy, our team manager, will guide us through using Azure DevOps (AzDO) to craft and manage Azure Boards and Dashboards. Here’s the twist: I’ll be diving into this with zero prep time or prior experience, making this a truly unscripted and dynamic session. Expect a candid, off-the-cuff exploration that’s as entertaining as it is educational.&lt;/p&gt;
&lt;h1&gt;What’s Next?&lt;/h1&gt;
&lt;p&gt;This experimental format promises to be engaging, informative, and maybe even a bit chaotic—but that’s where the fun lies. The goal is to create a memorable learning experience that encourages deeper exploration of the tools and practices discussed.&lt;/p&gt;
&lt;p&gt;Stay tuned for my next blog, where I’ll share insights from our post-mortem on the fishbowl format. Will it be a success, a learning experience, or a bit of both? Let’s find out together!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="technical-excellence"></category><category term="event"></category></entry><entry><title>Journal 8 - What is the value?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-8.html" rel="alternate"></link><published>2024-12-13T00:00:00-08:00</published><updated>2024-12-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-12-13:/common-engineering-journal-8.html</id><summary type="html">&lt;p&gt;The real question is not about the tech-cool factor or simplicity; it is all about uncovering the true value.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our engineering team has undergone numerous shifts in mindset, embracing continuous learning, valuing work-life harmony, and championing simplicity. As we look ahead to 2025, we are spicing things up by adding "one thing at a time" and constantly asking ourselves, "what is the value?" to our toolkit.&lt;/p&gt;
&lt;h2&gt;One thing at a time&lt;/h2&gt;
&lt;p&gt;To truly excel, we must tackle one task at a time, avoiding the chaos of constant context switching. Though life rarely allows us to focus on just one thing, we need to zero in on our most significant goal (big rock) amidst the hustle and bustle of our engineering routines. If we finish countless small tasks but neglect our main objective (big rock), the day cannot be deemed a success.&lt;/p&gt;
&lt;h2&gt;What is the value?&lt;/h2&gt;
&lt;p&gt;Picture this: A colleague suggests renaming your Azure DevOps (AzDO) Iteration Paths from &lt;code&gt;&amp;lt;AzDO Project&amp;gt;/PI &amp;lt;n&amp;gt;/Iteration &amp;lt;n&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;AzDO Project&amp;gt;/PI &amp;lt;n&amp;gt;/&amp;lt;n&amp;gt;&lt;/code&gt;, reasoning that the word “iteration” is redundant. &lt;strong&gt;Brilliant idea!&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;The iteration path field already has &lt;code&gt;iteration&lt;/code&gt; in its label, so seeing &lt;code&gt;my-demo-project/PI 13/13&lt;/code&gt; keeps things sleek and just as clear as &lt;code&gt;my-demo-project/PI 13/Iteration 13&lt;/code&gt;. Plus, it spares you from the eyesore of &lt;code&gt;my-demo-project/PI 13/...&lt;/code&gt; when Azure DevOps truncates names in some fields and dropdown lists.&lt;/p&gt;
&lt;p&gt;In other words, it is a &lt;strong&gt;cool&lt;/strong&gt; tweak, adding &lt;strong&gt;meaningfulness,&lt;/strong&gt; and technically, it is a breeze to pull off. But what is the true value? Beyond better readability for users, think &lt;code&gt;user productivity boost&lt;/code&gt; minus the &lt;code&gt;cost of implementing the change&lt;/code&gt; and deducting the &lt;code&gt;cost of any unforeseen consequences&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Implementing the change involves investing time in revamping our automation to produce future iterations in the fresh format, crafting new automation to rename current iterations for consistency, and executing these automated processes. Ultimately, we would end up with &lt;strong&gt;delighted users&lt;/strong&gt; and a rewarding value.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Idea" src="../images/common-engineering-journal-8-1.png"&gt; &lt;/p&gt;
&lt;p&gt;But alas, we have overlooked our party-poopers! The unforeseen ripple effects on processes, products, and documentation - like software development lifecycle automation scans still clinging to the old naming conventions, PowerBI reports weaving analytics from Azure DevOps work items, and countless documents persisting in the old format, baffling readers. Suddenly, we are caught in a whirlwind of unexpected costs (negative value) swirling around us that we never saw coming. &lt;/p&gt;
&lt;p&gt;At this point we usually wonder where all the initiative's supporters have vanished to? Apologies to operations and common engineering, it is time to straighten out this mess.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Smoke" src="../images/common-engineering-journal-8-2.png"&gt; &lt;/p&gt;
&lt;p&gt;Therefore, going forward, we will assess the value of everything we consider cool, are asked to do, and add to our 2025 MUST and SHOULD deliverables. Ask yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Would I do this if I had to pay for or invest in it?&lt;/li&gt;
&lt;li&gt;Can I track the cost and define the value?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If the answer is &lt;strong&gt;no&lt;/strong&gt;, run if you can, or add it to your backlog of future ideas (referred to as scrapyard on our backlog).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, we are taking a no-nonsense route by urging our engineers to &lt;strong&gt;THINK&lt;/strong&gt;, &lt;strong&gt;ANALYZE&lt;/strong&gt;, and then decide whether to &lt;strong&gt;ACT&lt;/strong&gt; or toss the idea into the &lt;strong&gt;SCRAPYARD&lt;/strong&gt;. This approach helps us dodge surprises, cut costs, and keep our software development cycle humming smoothly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Value flow" src="../images/common-engineering-journal-8-3.png"&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;THINK&lt;/strong&gt; - First, ponder the business value and user experience benefits. How will this idea affect our current and future solutions? Collaborate with your team, challenge assumptions, and prototype where possible to see the potential unfold.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ANALYZE&lt;/strong&gt; - Next, weigh the potential value, factoring in user experience, business outcomes, and cost savings. Consider the implementation costs, possible impact mitigation, and long-term viability. Then ask yourself: Is the value worth the cost?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACT&lt;/strong&gt; - If the answer is yes, ACT on the idea, implementing it while keeping an eye on its evolving value and cost. If not, add it to the backlog for another da, or nudge it to the legendary SCRAPYARD if it is truly unworkable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simple, no?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are even creating a temporary tattoo to remind us in future.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Value" src="../images/THINK-VALUE.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="Team" src="../images/common-engineering-journal-8-4.png"&gt; &lt;/p&gt;
&lt;p&gt;As this may be my final post for some time, I would like to take this opportunity to extend my best wishes for a joyous festive season and a prosperous New Year. Please stay safe, cherish time with your family, and enjoy the cookies in moderation. I look forward to reconnecting with you all in 2025.  &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="automation"></category><category term="engineering"></category><category term="learning"></category></entry><entry><title>Journal 7 - Embracing a New Mindset for Empowerment!</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-7.html" rel="alternate"></link><published>2024-11-29T00:00:00-08:00</published><updated>2024-11-29T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-11-29:/common-engineering-journal-7.html</id><summary type="html">&lt;p&gt;Exploring innovative automation strategies to empower engineers with the right tools and support, exactly when they need them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;I have a dream!&lt;/strong&gt; A software development lifecycle (SDLC) that encourages innovation, continuous experimentation, and quality excellence can delight end-users. Automation frees engineers from repetitive tasks, allowing them to focus on meaningful work. This leads to cost-effective solutions, frequent feature updates, and a better work-life balance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY" src="../images/common-engineering-journal-7-0.png"&gt; &lt;/p&gt;
&lt;p&gt;We aim to blend technical excellence with human-centric goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt; to increase efficiency and free engineers for creative tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Holistic Outcomes&lt;/strong&gt; that move us beyond speed and cost, to user satisfaction and solution adaptability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Innovation&lt;/strong&gt; to evolve with industry, policies, and user expectations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Balance Personal and Business Impacts&lt;/strong&gt; to ensure well-being and operational success.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adaptability and Resilience&lt;/strong&gt; by staying agile with continuous delivery.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The goal is to enhance &lt;strong&gt;operational efficiency&lt;/strong&gt; and create a sustainable, &lt;strong&gt;fulfilling engineering environment&lt;/strong&gt;, making our organization a leader in innovation and employee satisfaction.&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMPOSSIBLE" src="../images/common-engineering-journal-7-0b.png"&gt; ... you may say.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Gem" src="../images/common-engineering-journal-7-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I would like to respectfully disagree and reference a slide, as above, I presented in 2018 regarding our successful transition of &lt;a href="https://www.slideshare.net/slideshow/moving-75000-microsofties-to-devops-with-visual-studio-team-services/98844997"&gt;75,000&lt;/a&gt;. It demonstrates a pull request that executed 71,283 unit tests in 6 minutes and 35 seconds with a 100% pass rate as part of the automated validation build - rapid feedback, while developing. This accomplishment underscores the potential of achieving such outcomes with an effective software development lifecycle, appropriate processes, products, and people.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Doing it the hard way!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hard Way" src="../images/common-engineering-journal-7-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the traditional approach to software development, developers focus on writing new feature code. At a certain point, the team builds the code, deploys the release to one or more pre-installed environments, and hands it over to quality assurance (QA) testers. These testers then validate the software using a structured test plan comprised of test suites and cases.&lt;/p&gt;
&lt;p&gt;Most of this testing was manual because QA testers possessed the specialized business knowledge and understanding of intricate dependencies necessary to validate the system. Consequently, they executed the same test plan repeatedly, cycle after cycle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hard Way Flow" src="../images/common-engineering-journal-7-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What stands out, as illustrated in the workflow, is that the building and deployment processes have been automated for years—decades, in fact. After all, are you still manually compiling, linking, and copying files using a command prompt? Probably not.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY" src="../images/common-engineering-journal-7-0.png"&gt; &lt;/p&gt;
&lt;p&gt;Why has build and deployment automation become standard, while manual QA testing persists? This paradox warrants reconsideration for greater efficiency and innovation.&lt;/p&gt;
&lt;p&gt;We must minimize &lt;strong&gt;repetitive tasks&lt;/strong&gt; and &lt;strong&gt;shorten feedback&lt;/strong&gt; loops. &lt;strong&gt;Quick feedback&lt;/strong&gt; on changes, whether automated or manual, is essential. Delayed feedback makes it harder and costlier to fix issues as the solution drifts from our goals.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Embracing new ways!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Future Way" src="../images/common-engineering-journal-7-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The image above depicts a contemporary work environment where individuals collaborate, extensively utilize automation, and visualize feedback on automation processes, changes, quality, and progress. The atmosphere is one of active engagement, as well as continuous and transparent activity - just like in my dream.&lt;/p&gt;
&lt;p&gt;Before detailing our vision, it's crucial to understand that this journey will be challenging and time-consuming. Success requires everyone's commitment. Without unified support, we risk an unsuccessful and costly transformation.&lt;/p&gt;
&lt;p&gt;We foresee a major mindset shift in the roles of QA Engineers and Software Engineers. Any engineer, contributor, or automation tool can make code changes. The v2 CI/CD blueprint will automatically trigger continuous integration within pull requests as part of build validation checks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Future Way Flow" src="../images/common-engineering-journal-7-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This process initiates automated security and quality validations along with automated tests. The potential for enhancement relies on advancements in service virtualization, on-demand environment provisioning, and synthetic test data creation using artificial intelligence—a concept from one of our latest InnoFest/Hackathon teams.&lt;/p&gt;
&lt;p&gt;Overall, the lead time to validate code changes is reduced, enabling faster and more efficient responses to issues or new features.&lt;/p&gt;
&lt;p&gt;In this envisioned future, automated technology debt remediation systems would autonomously verify test results and determine whether human validation is required or if the changes can be directly committed to the main/master branch.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHY" src="../images/common-engineering-journal-7-0.png"&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engineers delegate repetitive tasks like upgrades to automation, freeing them to develop new features, explore ideas, learn skills, or take a break.&lt;/li&gt;
&lt;li&gt;Consistency and standardization contribute to secure, high-quality, and reliable solutions. &lt;/li&gt;
&lt;li&gt;Additionally, this approach can lead to cost savings, time efficiency, reduced capacity stress, and an improved work environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This is our chance to redefine work, innovate, and excel as engineers. By adopting this vision, we improve processes and empower ourselves to focus on creating impactful solutions, exploring new ideas, and building features that delight users. Automation, supported by Artificial Intelligence, will relieve us of tedious tasks, letting us concentrate on meaningful, challenging work.&lt;/p&gt;
&lt;p&gt;Instead of setting goals to merely &lt;code&gt;empower engineers to reduce technical debt,&lt;/code&gt; we should strive for the more ambitious objective of &lt;code&gt;eliminating technical debt entirely&lt;/code&gt;, thus relieving engineers from the concern of it altogether.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="automation"></category><category term="engineering"></category></entry><entry><title>Working Agreement for Technical Event Speakers</title><link href="https://wsbctechnicalblog.github.io/technical-event-speakers.html" rel="alternate"></link><published>2024-11-27T00:00:00-08:00</published><updated>2024-11-27T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-11-27:/technical-event-speakers.html</id><summary type="html">&lt;p&gt;Tips and tricks for preparing as a technical event speaker, from preparing your message to engaging your audience effectively.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Preparing for a technical community event, such as the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada"&gt;DevOps Vancouver meetup&lt;/a&gt;, is essential to deliver an impactful message. A well-prepared speaker builds credibility and trust, ensuring the presentation is relevant and engaging. This preparation boosts confidence, allows for smoother delivery, and respects the audience's time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="meetup" src="../images/technical-event-speakers-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Engaging your audience with relatable examples, storytelling, or questions encourages learning and idea exchange. An engaged audience internalizes your message and provides valuable feedback. Whether you're sharing DevOps practices, lessons, or innovations, preparation makes your session memorable and beneficial for all.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Tips for DevOps Vancouver Meetup&lt;/h1&gt;
&lt;p&gt;For the DevOps Meetup Vancouver, prepare a 30–45-minute presentation followed by a 15-minute Q&amp;amp;A to share insights and engage with the audience. For a technical session, select one of our three session categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Impact on DevOps Business&lt;/strong&gt; - Explores how DevOps practices impact business outcomes like faster delivery, better software quality, and increased innovation. It uses real-world examples to show how DevOps helps teams quickly adapt to market changes, reduce costs, and improve customer satisfaction. The session connects technical practices with business goals, highlighting the benefits of DevOps while addressing challenges such as scaling and measuring ROI. Attendees learn how to align DevOps strategies with organizational objectives to maximize value and gain a competitive edge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Challenges of DevOps Implementations&lt;/strong&gt; - Explore common obstacles in adopting DevOps practices and ways to overcome them. Topics include cultural resistance, siloed teams, toolchain complexity, scaling automation, security in CI/CD pipelines, and balancing speed with quality. Through discussions, case studies, and shared experiences, attendees gain practical strategies and insights to address these challenges and foster collaboration and continuous improvement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Insights&lt;/strong&gt; - Brings together professionals, enthusiasts, and learners to share knowledge and collaborate on technical topics. These sessions include presentations, demonstrations, or discussions on new trends, tools, frameworks, or best practices. They provide a community-driven environment for networking, idea exchange, and gaining practical insights, suitable for both experts and newcomers. Technology meetups aim to build connections, spark curiosity, and drive innovation within a dynamic community.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps Vancouver Meetup&lt;/p&gt;
&lt;p&gt;&lt;img alt="devops meetup" src="../images/technical-event-speakers-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To ensure a seamless event, confirm all session details by the first of the meetup month. This includes providing the date, location, session abstract, speaker details, and finalized slides in PDF format. Adhering to these guidelines ensures well-prepared sessions that deliver value to both attendees and organizers.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Tips and Tricks for Technical Event Speakers&lt;/h1&gt;
&lt;p&gt;Preparation, content delivery, and audience engagement are key to a successful technical presentation. Tailor your content to your audience’s expertise and set clear objectives for a focused message. Practice and use visuals and storytelling to simplify complex topics. Test equipment and have backups for demos. Start with a hook, use real-world examples, and keep a clear structure. Engage your audience, adapt to feedback, and be authentic to create a memorable experience. This approach enhances learning and builds your credibility and confidence.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Technical Speaker Tips&lt;/p&gt;
&lt;p&gt;&lt;img alt="speaker tips" src="../images/technical-event-speakers-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As summarised on the working agreement cheat sheet, we recommend that you:&lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Know your audience&lt;/strong&gt; - Tailor content to their expertise. Research backgrounds if possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear objectives&lt;/strong&gt; - Clarify what you want them to learn or take away.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice&lt;/strong&gt; - Rehearse timing and delivery, but adapt based on audience feedback and reactions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep it simple&lt;/strong&gt; - Use analogies, visuals, and storytelling for technical concepts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test your setup&lt;/strong&gt; - Check projector, microphone, and demo environments early.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Demo disaster recovery&lt;/strong&gt; - Have a backup plan like pre-recorded videos or screenshots.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Content Delivery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Starting hook&lt;/strong&gt; - Use an intriguing story, statistic, or question.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Structured flow&lt;/strong&gt; - Follow a clear outline and use transitions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max visuals, min text&lt;/strong&gt; - Prefer visuals, diagrams, and code snippets for clarity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Real-worlds examples&lt;/strong&gt; - Use real-world applications, live demos, or case studies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pace yourself&lt;/strong&gt; - Speak slowly, clearly, and avoid jargon unless explained.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;End strong&lt;/strong&gt; - Conclude with a call to action, summary, or inspiring thought.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Engagement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encourage interaction&lt;/strong&gt; - Engage the audience with questions, polls, or activities. Using an interactive &lt;a href="https://www.mentimeter.com"&gt;mentimeter&lt;/a&gt; poll, sharing its link on your slides, and using it to review audience feedback or vote on the next topic can effectively engage the audience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adapt to feedback&lt;/strong&gt; - Adjust your delivery based on audience feedback.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be approachable&lt;/strong&gt; - Be genuine and relatable; use humor when appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Finally, stay open to questions and feedback, both during and after your talk. A technical meetup is as much about knowledge sharing as it is about building connections.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Quick reference Working Agreements &lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Agreements" src="../images/technical-event-speakers-4.png"&gt; &lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/technical-event-speakers.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="event"></category><category term="learning"></category><category term="posters"></category></entry><entry><title>Why is the Closed Date field empty in my work items?</title><link href="https://wsbctechnicalblog.github.io/azure-devops-empty-closed-date-field.html" rel="alternate"></link><published>2024-11-20T00:00:00-08:00</published><updated>2024-11-20T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-11-20:/azure-devops-empty-closed-date-field.html</id><summary type="html">&lt;p&gt;More importantly, what is the issue and how do we resolve it?&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you notice that the Closed Date field is empty in some closed Azure DevOps work items or want to ensure your Azure DevOps backlog is accurate, run this query in your Azure DevOps organization to get a complete picture: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Closed data anomaly query .&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="query" src="../images/azure-devops-empty-closed-date-field-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;Select the &lt;code&gt;Query across projects&lt;/code&gt; option to do a complete sweep of your Azure DevOps organization. If your query returns over 20K work items, divide it and run it project by project in Azure DevOps.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We encountered challenges in troubleshooting some of our tracking reports and determined that while the reports were accurate, the source data from Azure DevOps work items was problematic. Upon running the query in our environment, we identified a stunning 5199 work items lacking crucial data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Closed data anomaly query showing empty closed date fields.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="query result" src="../images/azure-devops-empty-closed-date-field-2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recognizing this as a product issue, we submitted an Azure Support Ticket (#2410160040016196). Microsoft acknowledged a bug in Azure DevOps that failed to add the Closed Date to the work item template for custom work item types by default years ago. &lt;/p&gt;
&lt;p&gt;The solution involves adding the Closed Date field and subsequently hiding it from the work item layout. However, work items closed prior to applying this fix lack a Closed Date value.&lt;/p&gt;
&lt;p&gt;Regrettably, Microsoft did not provide a public script to address this issue. Therefore, if you require a custom script to update previously closed work items, please await the second part of this work item, which is currently being developed by my colleague, Daniel Broderick.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Reference information&lt;/h2&gt;
&lt;p&gt;Based on research the issue happened a long time ago and may have been slumbering in your backlogs unnoticed. Read &lt;a href="https://developercommunity.visualstudio.com/t/vsts-closed-date-and-closed-by-are-empty-for-work/236045"&gt;VSTS: "Closed Date" and "Closed By" are empty for Work Item Types "Change Request","Service Request","System Alert" in result grid of Queries&lt;/a&gt; for more details.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category></entry><entry><title>Rotting Pull Requests - Detection And Actioning</title><link href="https://wsbctechnicalblog.github.io/rotting-pull-requests.html" rel="alternate"></link><published>2024-11-15T00:00:00-08:00</published><updated>2024-11-15T00:00:00-08:00</updated><author><name>Martin M. Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-11-15:/rotting-pull-requests.html</id><summary type="html">&lt;p&gt;Explore the root cause of un-actioned pull-requests, how to detect and remedy (Part 1).&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Rotting Pull Requests: Detection and Actioning&lt;/h1&gt;
&lt;p&gt;We have a problem, Houston, and we need to address it to ensure our ship can execute its mission. We have too many changes &lt;em&gt;in-flight&lt;/em&gt;, waiting to be merged into our codebase to improve our systems and mission outcomes. Yet, we keep adding more features without dealing with the backlog of changes we’ve already developed!&lt;/p&gt;
&lt;p&gt;Are you approaching this nightmare scenario? We are.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Visualizing a growing backlog in the form of an overloaded task board" src="/images/engineering-practices-rotting-pull-requests-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The exasperation of too many pull requests in-flight clogs the workflow. The chaotic backlog and continuous arrival of new features highlight the urgency and delays in merging changes to improve system outcomes.&lt;/p&gt;
&lt;p&gt;It’s not a good place to be. We need to get our processes back on track to deliver what the business needs and expects—at a high level of verified quality and functionality, without introducing vulnerabilities.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Hot Seat: Addressing 900+ Rotting Pull Requests&lt;/h2&gt;
&lt;p&gt;My manager came to me today, asking: &lt;strong&gt;How can we promote good practices and get the 900+ rotting pull requests actioned to reduce the backlog?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the subject of today’s post—and the hot seat we share.&lt;/p&gt;
&lt;h3&gt;Where Did All These Pull Requests Come From?&lt;/h3&gt;
&lt;p&gt;The first questions should be: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where did all these pull requests come from? &lt;/li&gt;
&lt;li&gt;Why are they not being actioned? &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are teams too busy adding features to perform necessary code reviews and foster team collaboration?&lt;/p&gt;
&lt;h3&gt;Quality and the Feature Farming Trap&lt;/h3&gt;
&lt;p&gt;What happens to quality when teams act like &lt;em&gt;feature farmers&lt;/em&gt;, focusing only on the next big functionality without seeing the big picture? Yes, Houston, we have a problem.&lt;/p&gt;
&lt;p&gt;We have a massive codebase—over 300 applications and growing. Many of these applications are aging and of questionable utility, requiring upgrades to avoid obsolescence and unsupported components.&lt;/p&gt;
&lt;p&gt;To address this, we’ve created automation that generates the needed upgrade changes and creates pull requests for engineers to review before committing changes to the repository. It’s an odd place to be, having code enhanced automatically and then reviewed by a human to ensure quality.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Automation and the Paradigm Shift&lt;/h2&gt;
&lt;p&gt;Typically, we write tests to verify that changes meet functional (and non-functional) requirements. However, this is different. We’re now reviewing and approving code changes generated by a program for another program—it just feels weird. It’s a mind-shift.&lt;/p&gt;
&lt;p&gt;In the age of Artificial Intelligence (AI), our existing paradigms are shifting and evolving. We must ensure our processes are solid yet malleable, with even higher levels of quality and functionality. To achieve this, we need to step back from the &lt;em&gt;feature factory&lt;/em&gt; we’ve become and reevaluate how we operate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Engineers moving from old paradigm to a Software Factory using AI to get to the next level" src="/images/engineering-practices-rotting-pull-requests-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;The Path Forward: Embracing Automation and Addressing Backlogs&lt;/h2&gt;
&lt;p&gt;This paradigm shift requires us to start viewing our automation as a &lt;strong&gt;technical advantage&lt;/strong&gt;—an enabler to grow beyond our current struggles. But first we &lt;strong&gt;must&lt;/strong&gt; address our backlog of our &amp;lt;*&amp;gt; debt, which include technical, technology, code, test, and other classification of Software Engineering related obligations deferred or incurred through time and revisions. Awareness is the first step before meaningful change can occur.&lt;/p&gt;
&lt;h3&gt;The Challenges of Automation in Pull Requests&lt;/h3&gt;
&lt;p&gt;One drawback of automation in creating pull requests for tech upgrades and security fixes is the unnoticed accumulation of PRs due to heavy workloads. Intended to simplify processes and empower engineers, these PRs often get lost among the many others. As mentioned in previous blog posts, our automation also creates a detailed work item to help engineers track their technical debt and its remediation.&lt;/p&gt;
&lt;p&gt;The key question remains: &lt;strong&gt;How can we encourage engineers to engage with automated PRs and truly empower them by automating tedious tech debt tasks?&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Watch-This-Space&lt;/strong&gt;: We are working on this issue, and our expert on the matter will blog about it in upcoming posts.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/software-engineering-standardization.html"&gt;Software Engineering Standardization&lt;/a&gt; / November 2024&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-fear-of-change.html"&gt;Embrace the Future - Use Automation and AI to Elevate Your Engineering Career!&lt;/a&gt; / July 2024&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/engineering-practices-pull-request-v2.html"&gt;Mastering Software Development: A Deep Dive into Trunk-Based Pull Request Workflow&lt;/a&gt; / Dec 2023&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/connect/vsts-the-road-to-continuous-delivery-with-visual-studio-team-services"&gt;VSTS - The Road to Continuous Delivery with Visual Studio Team Services&lt;/a&gt; / December 2017&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="engineering"></category><category term="automation"></category></entry><entry><title>Journal 6 - Empowerment through automation and artificial intelligence</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-6.html" rel="alternate"></link><published>2024-11-13T00:00:00-08:00</published><updated>2024-11-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-11-13:/common-engineering-journal-6.html</id><summary type="html">&lt;p&gt;Reshaping the way we work, creating new opportunities to empower engineers by reducing repetitive tasks, enhancing productivity, and enabling focus on high-value activities.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Optimus Prime, journal entry dated November 11, 2024, written on Remembrance Day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During 2024, our common engineering team has made significant progress despite facing various challenges, including legacy processes and products, as well as addressing issues related to government agency innovation - &lt;a href="/can-government-agencies-be-innovative.html"&gt;can-government-agencies-be-innovative&lt;/a&gt;. By integrating automation and artificial intelligence into our engineering tools, we are not only improving operations but also promoting a culture of innovation, skill development, and deeper engagement. These technologies equip our engineers, enabling them to effectively address the needs of a dynamic technology industry within the constraints of the insurance sector. In this update we will cover the three DevOps Ps - People, Process, and Products.&lt;/p&gt;
&lt;h1&gt;Team Health&lt;/h1&gt;
&lt;p&gt;We have been utilizing the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-devlabs.team-retrospectives"&gt;Retrospective&lt;/a&gt; extension, by Microsoft devLabs, to effectively manage our iteration retrospectives and monitor our team's health through its team assessment feature. This tool provides a straightforward, quick, and efficient method for these tasks. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Team Assessment - &lt;em&gt;legend for series entries intentionally omitted!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Team Assessment" src="../images/common-engineering-journal-6-1.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The visual chart and trendline reveal that &lt;strong&gt;reorganizations&lt;/strong&gt;, as indicated by points 1, 2, and 3, along with &lt;strong&gt;leadership changes&lt;/strong&gt; shown by point 4, are causing dips in metrics such as clarity, energy, psychological safety, and work-life balance. Conversely, it is evident that the engineering team is becoming increasingly resilient to change. In my opinion, this resilience can be attributed to each team member being empowered to lead within their specific area of expertise and experience.&lt;/p&gt;
&lt;p&gt;We encourage you to try the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-devlabs.team-retrospectives"&gt;Retrospective&lt;/a&gt; extension. In our next discussion, we will explore automation and artificial intelligence, revisiting aspects related to people as we shift our focus towards processes and products.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Automation&lt;/h1&gt;
&lt;p&gt;The team has achieved notable advancements and enhancements in this area by introducing automation for a variety of tasks. These include maintaining and supporting Azure DevOps operations, as well as upgrading applications to the latest version of .NET 8 using the &lt;a href="https://devblogs.microsoft.com/dotnet/upgrade-assistant-general-availability/"&gt;.NET Upgrade Assistant&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.NET Upgrade Automation&lt;/p&gt;
&lt;p&gt;&lt;img alt="Automation Flow" src="../images/common-engineering-journal-6-2.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;process&lt;/strong&gt; involves creating a feature branch in each Azure Repo to identify end-of-life (EOF) .NET code, running the upgrade assistant on this branch, generating a pull request, and creating a technical debt work item to consolidate all actions. While automation significantly reduces the upgrade time from days to seconds, it requires &lt;strong&gt;people&lt;/strong&gt; to embrace the automation, action the pull requests, and conduct &lt;strong&gt;automated&lt;/strong&gt; testing to validate changes both before and after merging. Our initial focus was overly centered on automation, leading us to realize through experience that &lt;strong&gt;people&lt;/strong&gt; involvement is crucial for successful adoption.&lt;/p&gt;
&lt;p&gt;Other notable automation processes include &lt;strong&gt;configuration-as-code&lt;/strong&gt; validations, such as ensuring that Azure Pipelines are configured according to the last known configuration, and automatically revert unknown manual changes. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Self-service&lt;/strong&gt; automation aims to enable engineers to provision infrastructure, repositories, pipelines, and introduce sample code based on reference architectures as required, with the click of a button. Watch the space, this &lt;strong&gt;process&lt;/strong&gt; will receive a ton of attention next year.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Artificial Intelligence&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://wsbctechnicalblog.github.io/common-engineering-journal-5.html"&gt;Journal 5&lt;/a&gt;, we evaluated GitHub Copilot, which has since become an essential tool in our engineering toolkit. Given that we operate on Azure DevOps rather than GitHub Enterprise, many of the latest innovations are currently irrelevant to us. This has prompted us to explore alternative products and innovative ideas to develop our own copilot system and integrate it into a powerful suite of tools – watch the space for exciting updates. Additionally, we have implemented an instance of Stack Overflow to manage our internal queries, articles, and collaboration.&lt;/p&gt;
&lt;p&gt;As with any initiative, ensuring user adoption is crucial for the success of these products and the processes they affect. Here are some considerations as you embark on your own custom automation and artificial intelligence projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure each improvement has a clear &lt;strong&gt;objective&lt;/strong&gt; and that users understand the &lt;strong&gt;WHY&lt;/strong&gt; (rationale) behind every innovation.&lt;/li&gt;
&lt;li&gt;Design each improvement to act as an "&lt;strong&gt;engineer’s wingman&lt;/strong&gt;," not a replacement, to empower users and foster a productive, engaging experience.&lt;/li&gt;
&lt;li&gt;Ensure each innovation understands the user’s &lt;strong&gt;context&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Most importantly, engage with users and provide comprehensive onboarding experience and access to support resources, and &lt;strong&gt;learn and improve&lt;/strong&gt; from user feedback&lt;/li&gt;
&lt;li&gt;Improvements must follow regulatory and organizational guidelines and help users do the same.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My team has been encouraged to complete the &lt;a href="https://learn.microsoft.com/en-us/credentials/certifications/azure-ai-fundamentals/?practice-assessment-type=certification"&gt;Microsoft Certified: Azure AI Fundamentals&lt;/a&gt; self-paced training, resulting in collaboration and creating artifacts like the &lt;a href="/ai-fundamentals-ai900-poster.html"&gt;AI-900 cheat sheet&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Our objectives for product is identical to process innovations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardization&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Empowerment&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on our Copilot evaluation or future innovations, contact us below to start a discussion.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So, to summarize, I am very proud of what the team has achieved in 2024 and excited about what is coming in 2025. &lt;/p&gt;
&lt;p&gt;What do you think and what is cooking in your engineering kitchen?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="ai"></category><category term="devops"></category><category term="journal"></category><category term="azure-devops"></category></entry><entry><title>Why Automation Needs People to Truly Thrive</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-automation.html" rel="alternate"></link><published>2024-10-26T00:00:00-07:00</published><updated>2024-10-26T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-10-26:/back-to-basics-automation.html</id><summary type="html">&lt;p&gt;While automation is an essential ingredient for DevOps, it is not a silver bullet.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuous and significant advances have been made by us in automation, including infrastructure as code, pipeline as code, self-service, upgrade, and vulnerability remediation automation. However, there has been a noticeable hesitance in the adoption of these automation solutions, prompting the question: “&lt;em&gt;Why might an engineer choose not to adopt the available automation?&lt;/em&gt;”&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;TRUST&lt;/h1&gt;
&lt;p&gt;My hypothesis is that engineers will keep doing tasks manually unless they trust the automation and see its benefits. For example, we inherently trust Visual Studio automation because no engineer creates solutions and project files by hand anymore. People trust it because they are familiar with it and believe Microsoft maintains it with current best practices and innovations. Early versions of Visual Studio generated code that I sometimes questioned. Today, however, selecting an application type in the new project wizard is straightforward and feels normal.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trust" src="../images/back-to-basics-automation-1.jpg"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If trust is the salt in automation, what is the pepper?&lt;/p&gt;
&lt;p&gt;My former leader and mentor always reminds me to ensure that we can answer the question: “&lt;em&gt;what is in it for me&lt;/em&gt;?” Automation provides efficiency gains, accuracy, scalability, cost reduction, faster time to market, consistency, reliability, compliance, auditability, and enables continuous improvement. However, it does not address “the” question and often evokes concerns among engineers about making humans redundant, reminiscent of the industrial revolution.&lt;/p&gt;
&lt;p&gt;We need messaging that addresses the mentioned benefits and emphasizes that automation eliminates many repetitive tasks. This allows engineers to spend more time on innovative and impactful work. For instance, generative AI, self-service automation, and upgrade automation are designed to assist engineers by freeing up time, reducing mental fatigue, and increasing creativity. The goal is not to make human roles redundant but to balance the work-life dynamic and enable improved, faster performance. &lt;/p&gt;
&lt;p&gt;Importantly, the time saved through automation should not solely be used to increase business output, as this would undermine the advantages and progress made with automation. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Salt and Pepper" src="../images/back-to-basics-automation-2.jpg"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if &lt;strong&gt;trust&lt;/strong&gt; is the salt, knowing “&lt;strong&gt;&lt;em&gt;what is in it for me&lt;/em&gt;&lt;/strong&gt;” is the pepper!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The &lt;strong&gt;VALUE&lt;/strong&gt; of automation&lt;/h1&gt;
&lt;p&gt;So what, apart from obvious benefits, what are some key values of automation?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automation excels at &lt;strong&gt;repetitive&lt;/strong&gt; tasks.&lt;/li&gt;
&lt;li&gt;Automation speeds up repetitive tasks like testing, deployment, and data processing, increasing productivity.&lt;/li&gt;
&lt;li&gt;Automation reduces &lt;strong&gt;human error&lt;/strong&gt;, ensuring &lt;strong&gt;consistent&lt;/strong&gt; and accurate task performance.&lt;/li&gt;
&lt;li&gt;Automation allows users to &lt;strong&gt;focus&lt;/strong&gt; more on complex problems, boosting job &lt;strong&gt;satisfaction&lt;/strong&gt;, &lt;strong&gt;innovation&lt;/strong&gt;, and productivity. I intentionally did not &lt;strong&gt;bold&lt;/strong&gt; productivity, as some engineers may question this with "&lt;em&gt;So, I am not productive?&lt;/em&gt;", which is obviously far from the intent and truth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automation with human involvement is a win-win. Together they create a symbiotic relationship that drives true progress.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The &lt;strong&gt;DARK&lt;/strong&gt; side of automation&lt;/h1&gt;
&lt;p&gt;Although automation has become a vital part of engineering environments, it also has a dark side we need to be aware of.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automation lacks &lt;strong&gt;creativity&lt;/strong&gt; and &lt;strong&gt;intuition&lt;/strong&gt; for solving complex problems.&lt;/li&gt;
&lt;li&gt;Each organization needs &lt;strong&gt;customized&lt;/strong&gt; and &lt;strong&gt;optimized automation&lt;/strong&gt; - a challenge evident from our shared &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;v2 CI/CD blueprints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Human oversight&lt;/strong&gt; is essential to prevent errors. Have you ever considered living next to an autonomous nuclear plant or flying in a cockpit-less aircraft?&lt;/li&gt;
&lt;li&gt;Automation lacks &lt;strong&gt;empathy&lt;/strong&gt; and &lt;strong&gt;emotional intelligence&lt;/strong&gt; for complex customer support.&lt;/li&gt;
&lt;li&gt;Automation requires &lt;strong&gt;consistent&lt;/strong&gt;, &lt;strong&gt;standardized&lt;/strong&gt;, and &lt;strong&gt;stable&lt;/strong&gt; environments.&lt;/li&gt;
&lt;li&gt;AI and data processing automation raise &lt;strong&gt;ethical&lt;/strong&gt; concerns.&lt;/li&gt;
&lt;li&gt;Continuous &lt;strong&gt;maintenance&lt;/strong&gt; is needed to keep automation relevant and error-free.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is no doubt that automation is a powerful tool, but it needs people to guide, improve, and ensure its successful integration.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;While writing this blog post, I have realised that to address the initial "noticeable hesitance" about automation, we need to raise &lt;strong&gt;awareness&lt;/strong&gt; of our automation, collaborate with engineers to show its &lt;strong&gt;value&lt;/strong&gt;, and gradually build &lt;strong&gt;trust&lt;/strong&gt; to improve adoption. &lt;/p&gt;
&lt;p&gt;That is my take. What are you thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="engineering"></category></entry><entry><title>Agile Planning with Azure DevOps</title><link href="https://wsbctechnicalblog.github.io/azure-devops-agile-planning-working-session.html" rel="alternate"></link><published>2024-10-23T00:00:00-07:00</published><updated>2024-10-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-10-23:/azure-devops-agile-planning-working-session.html</id><summary type="html">&lt;p&gt;Recalling the recent agile planning session hosted by common engineering during the +1 innovation and planning iteration.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our team developed an interactive session to highlight the benefits of Azure DevOps Boards for Agile Planning, focusing solely on out-of-the-box features many, many moons ago. Recently, we handed over this session to our Agile Coaches for future improvements and hosting. &lt;/p&gt;
&lt;p&gt;This blog post summarizes our shared insights, exercise outcomes, and provides references for other Azure Boards posts to conclude the fun working session.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Infamous slides&lt;/h1&gt;
&lt;p&gt;Here are the few slides we covered during the introduction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Slides A" src="../images/azure-devops-agile-planning-working-session-1.png"&gt; 
&lt;img alt="Slides B" src="../images/azure-devops-agile-planning-working-session-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Fun Exercises&lt;/h1&gt;
&lt;p&gt;To emphasize the importance of creating SMART (Specific, Measurable, Achievable, Relevant, Time-bound) and actionable work items, we requested users to draw a sketch based on the following prompt: "&lt;em&gt;Willy would like you to build a home.&lt;/em&gt;"
Below are several examples of their responses.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Exercise 1" src="../images/azure-devops-agile-planning-working-session-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We then changed the ask to: "&lt;em&gt;Willy would like you to build a home using an emergent design so that you build his isolated and rugged dream log cabin in the middle of a lake&lt;/em&gt;" and got these:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Exercise 2" src="../images/azure-devops-agile-planning-working-session-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It shows how simply describing a work item can significantly alter assumptions about user requests.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Core topics we covered while exploring Azure Boards&lt;/h1&gt;
&lt;p&gt;At a recent Azure Developer Influencer Microsoft Innovation Hub Event, I observed a subject matter expert conducting an unscripted demonstration, engaging spontaneously with the audience throughout the process. This interactive and improvisational approach resulted in one of the most effective presentations I have ever witnessed. By participating in the problem-solving journey and collaboratively addressing challenges as they arose, I not only enjoyed the experience but also gained substantial knowledge.
Inspired by this approach, I decided to adopt a similar strategy for my working session. Dispensing with the prepared script, I addressed the following topics using a straightforward example: crafting the work items necessary to build a launch pad, and constructing a two-stage rocket, featuring both a sea-level engine and a vacuum engine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Product Backlog&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Organization \ project \ service bread crumb&lt;/li&gt;
&lt;li&gt;Preview Features&lt;/li&gt;
&lt;li&gt;Profile&lt;/li&gt;
&lt;li&gt;Backlog Levels&lt;/li&gt;
&lt;li&gt;Backlog Filters&lt;/li&gt;
&lt;li&gt;Backlog options – new “keep hierarchy with filters” feature&lt;/li&gt;
&lt;li&gt;Create Features (Pad, Rocket)&lt;/li&gt;
&lt;li&gt;Create Stories (A-Engine, V-Engine, 1st and 2nd Stage, Stack) and Tags (SpaceX)&lt;/li&gt;
&lt;li&gt;Create Relationships (Mapping)&lt;/li&gt;
&lt;li&gt;Create Relationships (Predecessor/Successor)&lt;/li&gt;
&lt;li&gt;New auto-complete automation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Product Board&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Columns&lt;/li&gt;
&lt;li&gt;Swimlanes&lt;/li&gt;
&lt;li&gt;Styles&lt;/li&gt;
&lt;li&gt;Ordering&lt;/li&gt;
&lt;li&gt;Tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Delivery Plan&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demo PI Planning&lt;/li&gt;
&lt;li&gt;Demo Roadmap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dashboards, Queries&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demo Tech Debt dashboard&lt;/li&gt;
&lt;li&gt;Demo Common Engineering dashboard&lt;/li&gt;
&lt;li&gt;Demo writing a query - all items updated today&lt;/li&gt;
&lt;li&gt;Demo writing a query - all SpaceX tagged work items&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope everyone found the session informative, learned some new tricks, and had as much fun as I did. I am looking forward to seeing how our Agile Coaches Sangeeta and Anita will improve the workshop and deliver the 2.5-hour session.&lt;/p&gt;
&lt;p&gt;Below are some related blog posts for more details.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Related content&lt;/h1&gt;
&lt;p&gt;Here are more blog posts talking about Azure Boards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-azdo-backlog-automation.html"&gt;Automate Azure DevOps work item state transitions like a Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/azure-boards-tips-retain-hierarchy-with-filter.html"&gt;Azure Boards Tips - Retain hierarchy with filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips - Stop messing with our backlog!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/azure-boards-tips.html"&gt;Azure Boards Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-kanban.html"&gt;Back to Basics: Kanban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-wip-limit.html"&gt;Back to Basics: WIP Limit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/area-paths-and-nodes.html"&gt;Searching for common nodes across area paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/shared-area-paths.html"&gt;The clash of Azure DevOps Kanban fields and Shared Area Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/azure-devops-dependencies.html"&gt;Visualizing work item dependencies in Azure Boards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Farewell Azure DevOps Agile Planning working session, and best of luck to our Agile Coaches in guiding this content forward!&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="learning"></category><category term="event"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20241019</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20241019.html" rel="alternate"></link><published>2024-10-19T00:00:00-07:00</published><updated>2024-10-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-10-19:/azure-pipeline-blueprints-oss-sync-20241019.html</id><summary type="html">&lt;p&gt;Refactor the building code calls.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have focused on developing new v2 CI/CD app blueprints and enhancing our continuous integration flow.&lt;/p&gt;
&lt;h1&gt;MINOR CHANGE&lt;/h1&gt;
&lt;p&gt;We have implemented validations in our building-code.yml template, which now ensures that unit tests are present, have been run, and will eventually validate that all tests have passed. As part of these changes, we decided to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove the &lt;code&gt;buildingCodeMode: 'Validate'  # Validate | Enforce&lt;/code&gt; parameter since it was not utilized, and the modeElite parameter can determine whether to issue a warning or fail the validations.&lt;/li&gt;
&lt;li&gt;Clean up the conditionals to ensure the building-code.yml template is always executed outside of a pull request and not executed within a pull request unless the forceCheck parameter is set to true. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the new building-code calling conditionals:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# By default we do NOT run the building code if we are within the context of a pull request&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runbuildingcodeonly&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Validations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suppressed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optimize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;builds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;building&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Validation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Suppression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Alert&lt;/span&gt;

&lt;span class="c1"&gt;# User can force the building code to run within the context of a pull request&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runbuildingcodeonly&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;building&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;building&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;modeAILog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeAILog&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="c1"&gt;# If we are not within the context of a pull request (brach &amp;lt;&amp;gt; merge) then we run the building code&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runbuildingcodeonly&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;building&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;building&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeBlueprints&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeElite&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;modeAILog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modeAILog&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;WHY?&lt;/h1&gt;
&lt;p&gt;This change aims to avoid repeatedly triggering the building code with every commit within a pull request when using the pipeline as a validation build due to the lengthy runtime of the building code.&lt;/p&gt;
&lt;p&gt;You have the option to modify or reverse this process if desired.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/30"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All &lt;strong&gt;templates/boot-strap.yml&lt;/strong&gt; template has been updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>DevOps Vancouver Meetup Learnings</title><link href="https://wsbctechnicalblog.github.io/devops-vancouver-meetup-learnings.html" rel="alternate"></link><published>2024-10-02T00:00:00-07:00</published><updated>2024-10-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-10-02:/devops-vancouver-meetup-learnings.html</id><summary type="html">&lt;p&gt;Insights gained from hosting six community meetups this year: the positives, negatives, and challenges.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I need to share my learnings from community events with my peers, and summarising them here seemed a great idea. Hopefully, it benefits both my peers and you (the community). We have been running the DevOps Vancouver meetup for years, enduring fantastic and tough sessions as well as the Covid pandemic. This year, we emerged from the pandemic and shifted from virtual-only meetings to a mix of virtual, hybrid, and in-person events. In this brief post, I will share insights from a busy first half of 2024, a summer break, and upcoming events.&lt;/p&gt;
&lt;p&gt;One major realization I have made this year is that DevOps has matured, and the engineering community now embraces the mindset. We have progressed from basic DevOps to sharing innovations in the synergy of people, process, and products - there remains little interest in the fundamentals of DevOps. Additionally, Artificial Intelligence (AI)'s impact on DevOps is significant, and we are beginning to struggle with maintaining focus as AI overlaps with other areas, leading to conflicts with other meetups and duplication of events/focus.&lt;/p&gt;
&lt;h1&gt;Negatives and Challenges&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="negatives" src="../images/devops-vancouver-meetup-learnings-1.jpg"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will start by discussing the challenges of hosting meetups that meet both community needs and sponsor expectations. These are just my personal candid observations! Please be patient; we will get to the positives, because meetups are certainly valuable!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Meetups have hidden costs&lt;/strong&gt; - While free, meetups demand significant personal and business time (cost), venues, refreshments, equipment, and promotion (cost), and above all, effort to provide engaging content for diverse attendees (cost). Without these investments, the content might become niche or irrelevant, leading to decreased interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keeping momentum is tough&lt;/strong&gt; - When content loses relevance, community interest drops. To maintain engagement, we need to frequently remind the community of the meetup’s purpose and host regular meetups. For instance, out of 2882 meetup members, only 3.5% attend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;25-50% of RSVPs are unreliable&lt;/strong&gt; - Comparing actual meetup attendance with RSVPs (Répondez s'il vous plaît") shows many people do not show up due to other plans or commitments like family dinners. This makes planning venues and catering difficult and risky.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;20% Poll Response Rate&lt;/strong&gt; - Achieving an adequate response rate for online surveys is always challenging. Given that we are engaging with a part-time community, the typical 20-30% response rate decreases to 5-10% of active participants, on a good day. This limited feedback complicates efforts to enhance meetups or determine which topics to schedule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hybrid meetups are a nightmare&lt;/strong&gt; - during the pandemic, we switched from in-person to virtual. This year, we tried hybrid meetups with both in-person and virtual attendance but concluded we will either host fully virtual or in-person events going forward. Firstly, in-person events see less drop-off as attendees who travel are more engaged. Secondly, online attendees often get distracted by multiple monitors. Thirdly, time is wasted due to communication issues or unprepared users online. Therefore, our preference now is for recorded in-person meetups, sharing recordings a month later. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading this far. Let us context switch to the positives.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Positives&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="positives" src="../images/devops-vancouver-meetup-learnings-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, I focus on the positives, which undeniably surpass the disadvantages, though we might feel differently during hectic periods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Collaboration is energizing&lt;/strong&gt; - One key lesson from my army days is that we can overcome any challenge together, whether it is trekking 50km through the Alps with gear, running 5km, or facing life's hurdles. As a community, we can collaborate, share knowledge, support one another, and avoid common pitfalls and redundant efforts in a tech environment. During meetups, I prefer to observe from the back and explore the hallways during breaks to meet new engineers, each bringing unique challenges, insights, and skills to share with the DevOps Vancouver community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;In-person rocks&lt;/strong&gt; - While I appreciate remote work, I prefer in-person meetings for certain situations. They help me connect with new community members without distractions from multiple screens and constant chat notifications. During in-person meetups, it is not acceptable to be sidetracked by emails or chats, ensuring everyone stays focused.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid combining in-person and virtual meetups&lt;/strong&gt; - Hybrid events can be extremely challenging. Instead, opt for either a virtual or an in-person event, record it, and release the recording a month later. Why wait that long? If participants know they will not have immediate access to the recording, they are more likely to stay engaged during the session and less inclined to cancel their RSVP or fail to attend on short notice. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Demos are effective&lt;/strong&gt; - creating a session that pleases everyone is challenging, but combining an information session with practical, real-world demos is a hit. Meetup participants enjoy demos, and pairing them with live exercises in collaborative, in-person events result in a win-win situation. Think back to your school days – did you like the history teacher who listed events and dates, or the science teacher who mixed theory with exciting, live demonstrations?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Opt for shorter, related sessions over marathon ones&lt;/strong&gt; - If you have seen the &lt;a href="Horizon: An American Saga - Wikipedia"&gt;Horizon: An American Saga&lt;/a&gt; movie featuring Kevin Costner in a theater, you might relate to this point. Rather than having a single 1, 2, or 3-hour session with one presenter, divide the session into several short segments separated by brief collaboration breaks and presented by various subject matter experts to create variation of content, tone, and flow. Personally, I enjoyed the movie, but I watched it at home in three segments across a weekend – I cannot remain focused for 3-hours.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.mentimeter.com/"&gt;Mentimeter is effective&lt;/a&gt;&lt;/strong&gt; - Polls and surveys usually struggle with response rates as attendees prefer to leave rather than complete them. I saw a meetup use Mentimeter polls during the session by linking it on slide footers, referring to it in each session, and reviewing results in subsequent topics. This method kept attendees engaged, provided instant feedback, and allowed them to see how their responses compared to others. It was a great way to engage the audience and collect actionable feedback without the need to plead and grovel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Top 7 Tips when (co-)hosting a meetup!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bulb" src="../images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Arrange your meetups in advance&lt;/strong&gt; to avoid last-minute plans. It is crucial for attendees to be able to schedule, especially since most meetups happen after work hours and can clash with family responsibilities.&lt;/li&gt;
&lt;li&gt;Ensure there is a &lt;strong&gt;break&lt;/strong&gt; between sessions so that attendees can &lt;strong&gt;relax&lt;/strong&gt; and &lt;strong&gt;network&lt;/strong&gt;. Have a colleague with you to handle the potential influx of questions from multiple attendees, as you will also need breaks occasionally.&lt;/li&gt;
&lt;li&gt;Release a meetup &lt;strong&gt;agenda&lt;/strong&gt; (context) and align the sessions to avoid any surprises. One of the worst experiences is being trapped in a 2-hour session and realizing it's not what you expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Promote&lt;/strong&gt; your meetup through various channels like LinkedIn, meetup, and X before the event and on the day it occurs. Keep reminding your community repeatedly.&lt;/li&gt;
&lt;li&gt;Prefer multiple &lt;strong&gt;short&lt;/strong&gt; sessions with &lt;strong&gt;breaks&lt;/strong&gt; in between rather than one long continuous session. Emphasize &lt;strong&gt;real-world learning&lt;/strong&gt; with &lt;strong&gt;demos&lt;/strong&gt; over theoretical content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrate your poll&lt;/strong&gt;(s) into the sessions and engage the audience to collect feedback during the meetup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be YOU and enjoy yourself!&lt;/strong&gt; - meetups are generally community-driven events without the constraints of corporate sponsorship, branding, and messaging. They foster collaborative environments where you can be authentic and appreciate informal interactions.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;What &lt;code&gt;meetup&lt;/code&gt; &lt;strong&gt;learnings&lt;/strong&gt; can you share?&lt;/p&gt;</content><category term="Posts"></category><category term="event"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Quick Reference Poster</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-poster.html" rel="alternate"></link><published>2024-09-30T00:00:00-07:00</published><updated>2024-09-30T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-30:/ai-fundamentals-ai900-poster.html</id><summary type="html">&lt;p&gt;A consolidated poster / cheat sheet of my AI-900 study notes.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an aggregated view of my personal &lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html.html"&gt;guiding-principles&lt;/a&gt;, &lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;, and &lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt; study notes, with report images from the Microsoft Learning site.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="poster" src="../images/ai-fundamentals-cheatsheet.png"&gt; &lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/ai-fundamentals-cheatsheet.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Guiding Principles</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-ai-guiding-principles.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-ai-guiding-principles.html</id><summary type="html">&lt;p&gt;"Guiding principles aim to ensure responsible and ethical AI development and deployment." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="guiding-principles" src="../images/ai-fundamentals-ai900-guiding-principles.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Here are a few examples of solutions that adhere to guiding principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accountability&lt;/strong&gt; - &lt;em&gt;Solutions designed to conform to governance frameworks and organizational standards, ensuring compliance with established legal and ethical principles.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inclusivity&lt;/strong&gt; - &lt;em&gt;Solutions created to support individuals who are visually impaired or blind.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparency&lt;/strong&gt; - &lt;em&gt;Share details on a solution's features, possibilities, and constraints. People understand how to use the AI solution.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy &amp;amp; Security&lt;/strong&gt; - &lt;em&gt;Solutions that safeguard user data while still gathering valuable insights for enhancing services.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fairness&lt;/strong&gt; - &lt;em&gt;Solutions that yield the same outcomes for individuals residing in both urban and rural areas, gender, race, or other bias.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reliability &amp;amp; Safety&lt;/strong&gt; - &lt;em&gt;Solutions designed to include resistance to harmful manipulation.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unintended Consequences&lt;/strong&gt; - &lt;em&gt;Solutions designed to identify and reduce the spread of harmful content, such as misinformation, hate speech, and fake news on its platform.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Help around the corner&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft's &lt;a href="https://www.microsoft.com/en-us/research/project/ai-fairness-checklist/?msockid=00c538c26eda63c107f52ca16fce622e"&gt;AI Fairness Checklist&lt;/a&gt; encourages engineers to evaluate bias risks throughout every phase of the model lifecycle.&lt;/li&gt;
&lt;li&gt;Microsoft’s &lt;a href="https://www.microsoft.com/en-us/garage/wall-of-fame/seeing-ai/?msockid=00c538c26eda63c107f52ca16fce622e"&gt;Seeing AI&lt;/a&gt; solution helps visually impaired people by describing their surroundings, recognizing people, and reading text aloud, promoting inclusivity and access to technology for everyone.&lt;/li&gt;
&lt;li&gt;Microsoft's &lt;a href="https://news.microsoft.com/apac/features/ai-for-earth-helping-save-the-planet-with-data-science/?msockid=00c538c26eda63c107f52ca16fce622e"&gt;AI for Earth&lt;/a&gt; uses AI to address environmental challenges, from climate change to biodiversity loss, ensuring AI contributes positively to the planet’s sustainability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;FRAUPIT&lt;/h2&gt;
&lt;p&gt;Not ideal, but I use the FRAUPIT catch phrase to remember: &lt;strong&gt;F&lt;/strong&gt;airness, &lt;strong&gt;R&lt;/strong&gt;eliability &amp;amp; Safety, &lt;strong&gt;A&lt;/strong&gt;ccountability, &lt;strong&gt;U&lt;/strong&gt;nintended Consequences, &lt;strong&gt;P&lt;/strong&gt;rivacy &amp;amp; Security, &lt;strong&gt;I&lt;/strong&gt;nclusivity, and &lt;strong&gt;T&lt;/strong&gt;ransparency.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Bots</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-bots.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-bots.html</id><summary type="html">&lt;p&gt;Conversational AI workloads - no longer part of AI-900 certification!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="bots" src="../images/ai-fundamentals-ai900-bots.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even though conversational AI is no longer part of the AI-900 certification and has been replaced by generative AI, I will still share my notes for nostalgia.&lt;/p&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;QnA Maker&lt;/strong&gt; Service can populate a knowledgebase using a question&amp;amp;answer (Q&amp;amp;A) document. Being retired in March 2025.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Common Machine Learning Types</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-common-machine-learning-types.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-common-machine-learning-types.html</id><summary type="html">&lt;p&gt;"AI machine learning (ML) refers to the subset of artificial intelligence focused on developing algorithms and models that enable computers to learn from data and improve their performance over time without being explicitly programmed." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="common-machine-learning-types" src="../images/ai-fundamentals-ai900-common-machine-learning-types.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classification&lt;/strong&gt; predicts categories of data, such as sentiment if users on the X platform.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clustering algorithm&lt;/strong&gt; automatically finds the optimal way to split a data set into groups without training.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature engineering&lt;/strong&gt; is the method of creating new features, based on existing features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature selection&lt;/strong&gt; allows us to narrow down the features that are important for &lt;strong&gt;label&lt;/strong&gt; predictions.&lt;/li&gt;
&lt;li&gt;Training a &lt;strong&gt;Regression&lt;/strong&gt; model involves data gathering and transformation: &lt;strong&gt;Feature selection&lt;/strong&gt; --&amp;gt; &lt;strong&gt;Finding and Cleaning&lt;/strong&gt; outliers --&amp;gt; &lt;strong&gt;Impute&lt;/strong&gt; missing values --&amp;gt; &lt;strong&gt;Normalization&lt;/strong&gt; or &lt;strong&gt;Feature engineering&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Metrics&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Confusion Matrix Terms
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;True Positive (TP)&lt;/strong&gt; - number of positive cases predicted correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;True Negative (TN)&lt;/strong&gt; - number of negative cases predicted correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;False Positive (FP)&lt;/strong&gt; - number of positive cases predicted incorrectly - Type 1 error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;False Negative (FN)&lt;/strong&gt; - number of negative cases predicted incorrectly - Type 2 error.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Classification model
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt; - the ratio of predictions that exactly match the true class labels. Closer to 1 the better. Range: [0, 1]. Metric = (TP+TN)/(TP+FP+TN+FN).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Area Under Curve (AUC)&lt;/strong&gt; reflects the model's performance - AUC=&lt;strong&gt;1&lt;/strong&gt; is best fitted model and AUC&amp;lt;&lt;strong&gt;0.5&lt;/strong&gt; is worse than random. Range: [0, 1].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AveragePrecision (AP)&lt;/strong&gt; is the combined metrics of both Precision and Recall, used in vision model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confusion matrix&lt;/strong&gt; provides a tabulated view of predicted abd actual values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F1 Score&lt;/strong&gt; - machine learning evaluation metric that combines precision and recall scores. Metric = (2&lt;em&gt;Precision&lt;/em&gt;Recall)/(Precision+Recall).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Precision&lt;/strong&gt; - the ability of a model to avoid labeling negative samples as positive. Closer to 1 the better. Range: [0, 1]. Metric = TP/(TP+FP).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recall&lt;/strong&gt; - the ability of a model to detect all positive samples. Closer to 1 the better. Range: [0, 1]. TP/(TP+FN), where TP=true positive, FN=False negative.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Selectivity&lt;/strong&gt; - measures the ability of the model to correctly identify negative samples (i.e., true negatives) out of all the actual negative samples. Metric = TN/(TN+FP).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Specificity&lt;/strong&gt; - the ability of a model to correctly identify negative instances. TN/(TN+FP)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weighted accuracy&lt;/strong&gt; is accuracy where each sample is weighted by the total number of samples belonging to the same class. Closer to 1 the better. Range: [0, 1].&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Regression Model
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coefficient of determination&lt;/strong&gt;, often referred to as R2, represents the predictive power of the model. Closer to 1 the better. Range: [0, 1].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mean absolute error (MAE)&lt;/strong&gt; measures how close the predictions are to the actual outcomes. A lower score is better.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Root mean squared error (RMSE)&lt;/strong&gt; creates a single value that summarizes the error in the model. By squaring the difference, the metric disregards the difference between over-prediction and under-prediction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative absolute error (RAE)&lt;/strong&gt; is the relative absolute difference between expected and actual values. The mean difference is divided by the arithmetic mean.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative squared error (RSE)&lt;/strong&gt; similarly normalizes the total squared error of the predicted values by dividing by the total squared error of the actual values.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Clustering Model
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Distance to Other Center&lt;/strong&gt; represent how close, on average, each point in the cluster is to the centroids of all other clusters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Average Distance to Cluster Center&lt;/strong&gt; represent the closeness of all points in a cluster to the centroid of that cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Combined Evaluation&lt;/strong&gt; score at the bottom of each section of results lists the averaged scores for the clusters created in that particular model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximal Distance to Cluster Center&lt;/strong&gt; represent the max of the distances between each point and the centroid of that point's cluster. High = dispersed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Points&lt;/strong&gt; shows how many data points were assigned to each cluster, along with the total overall number of data points in any cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You need to examine historical data to forecast price ranges for your product. Label = prediction = price range.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;classification&lt;/strong&gt; model is &lt;code&gt;suitable&lt;/code&gt; for supervised learning to determine &lt;code&gt;is it&lt;/code&gt; a low, medium, high, or very high price.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;regression&lt;/strong&gt; model is &lt;code&gt;inappropriate&lt;/code&gt; because it forecasts numerical values rather than determining whether something belongs to the "is it" class.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;clustering&lt;/strong&gt; model is &lt;code&gt;inappropriate&lt;/code&gt; because it clusters unlabeled data into similar groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Common Workloads</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-common-workloads.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-common-workloads.html</id><summary type="html">&lt;p&gt;"Common workloads in AI and machine learning include data processing, model training, inference, natural language processing, computer vision, recommendation systems, time series forecasting, and robotics/automation tasks." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="common-workloads" src="../images/ai-fundamentals-ai900-common-workloads.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anomaly Detection&lt;/strong&gt; is one of five key elements of Microsoft AI, which ingests data, automatically selects the best ML model, and alerts user when an anomaly arises.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Computer Vision&lt;/strong&gt; - enables machines to interpret and understand visual information from the world.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversational AI&lt;/strong&gt; - enables machines to understand, process, and respond to human language in a natural and meaningful way. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generative AI&lt;/strong&gt; - generate new content, such as text, images, music, or even code, based on the data machines have been trained on. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; - focuses on the development of algorithms and statistical models that enable computers to learn from and make predictions or decisions based on data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural Language Processing&lt;/strong&gt; - focuses on the interaction between computers and humans through natural language.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Generative AI</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-generative-ai.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-generative-ai.html</id><summary type="html">&lt;p&gt;"Generative AI refers to a subset of artificial intelligence that creates new content—such as text, images, audio, or video." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="generative-ai" src="../images/ai-fundamentals-ai900-generative-ai.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copilots&lt;/strong&gt; are generative AI assistants that are integrated into applications often as chat interfaces. development potal. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copilot Studio&lt;/strong&gt; is designed to work well with low-code development scenarios, whereas &lt;strong&gt;Azure AI Studio&lt;/strong&gt; is a PaaS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural language&lt;/strong&gt; generation - images and code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt; avails &lt;strong&gt;small&lt;/strong&gt; and &lt;strong&gt;large&lt;/strong&gt; language models.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Natural Language Processing</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-natural-language-processing.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-natural-language-processing.html</id><summary type="html">&lt;p&gt;"Natural Language Processing (NLP) is a branch of AI that enables computers to understand, interpret, and generate human language." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="natural-language-processing" src="../images/ai-fundamentals-ai900-natural-language-processing.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTES&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Azure AI Language Service&lt;/strong&gt; provides the &lt;strong&gt;entity linking&lt;/strong&gt;, &lt;strong&gt;PII detection&lt;/strong&gt;, and Sentiment analysis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure AI Service&lt;/strong&gt; provides direct access to bot Az AI Translator and Az AI Speech services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure AI Speech Service&lt;/strong&gt; provides &lt;strong&gt;Language identification&lt;/strong&gt;, &lt;strong&gt;speaker recognition&lt;/strong&gt;, and &lt;strong&gt;voice assistants&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Entity recognition&lt;/strong&gt; returns links to exterbal webstes to disambiguate terms (entities) in a text.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language training&lt;/strong&gt; requires us to provide &lt;strong&gt;Entities&lt;/strong&gt;, &lt;strong&gt;Utterances&lt;/strong&gt;, and &lt;strong&gt;Intents&lt;/strong&gt;, using LUIS.&lt;/li&gt;
&lt;li&gt;Language training: &lt;strong&gt;Entities&lt;/strong&gt; - The word "light" in "turn the light on."&lt;/li&gt;
&lt;li&gt;Language training: &lt;strong&gt;Intents&lt;/strong&gt; - "Turn On".&lt;/li&gt;
&lt;li&gt;Language training: &lt;strong&gt;Utterances&lt;/strong&gt; - "Turn on the lights" or "Turn the lights on."&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Understanding Intelligent Service (LUIS)&lt;/strong&gt; understands voice or text commands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Analysis&lt;/strong&gt; service helps to analyse documents, detect documents' &lt;strong&gt;language&lt;/strong&gt;, extract &lt;strong&gt;key phrases&lt;/strong&gt;, determine &lt;strong&gt;entities&lt;/strong&gt;, and provide &lt;strong&gt;sentiment analysis&lt;/strong&gt; (postive = 1, neutral/undefined = 0.5, negative = 0).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vectorization&lt;/strong&gt; represents the semantic connections between words by placing them in an n-dimensional space.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Artificial Intelligence - AI-900 - Vision Workloads</title><link href="https://wsbctechnicalblog.github.io/ai-fundamentals-ai900-vision-workloads.html" rel="alternate"></link><published>2024-09-27T00:00:00-07:00</published><updated>2024-09-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-27:/ai-fundamentals-ai900-vision-workloads.html</id><summary type="html">&lt;p&gt;"Vision workloads in AI refer to tasks that involve processing and analyzing visual data, such as images and videos." - ChatGPT GPT-4o&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alert" src="../images/alert-tiny.png"&gt;
These are my living &lt;strong&gt;personal&lt;/strong&gt; study notes. Use them at your own &lt;strong&gt;risk&lt;/strong&gt;!
&lt;/p&gt;
&lt;p&gt;&lt;img alt="vision-workloads" src="../images/ai-fundamentals-ai900-vision-workloads.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Custom Vision&lt;/strong&gt; service has a model you can build and train for classification or object detection (class name, probability score, bounding box).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Computer Vision&lt;/strong&gt; detects faces, &lt;strong&gt;Face Service&lt;/strong&gt; finds and recognizes similar faces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Face Detection&lt;/strong&gt; helps detect and recognize people's faces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Form Recognizer&lt;/strong&gt; service has a custom model users can train, or a pre-built receipt model trained to work with receipts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image Analysis&lt;/strong&gt; helps extract information from the images, tag them, and create descriptive image summary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image Classification&lt;/strong&gt; classifies objects based on their content to answer the "what is the image?" question.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic Segmentation&lt;/strong&gt; classifies pixels that belong to objects (detects) and highlights the object boundaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You perused:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this-&amp;gt;&lt;/strong&gt;&lt;a href="/ai-fundamentals-ai900-vision-workloads.html"&gt;vision-workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy other learning notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-bots.html"&gt;bots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-machine-learning-types.html"&gt;common-machine-learning-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-common-workloads.html"&gt;common-workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-generative-ai.html"&gt;generative-ai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-ai-guiding-principles.html"&gt;guiding-principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-natural-language-processing.html"&gt;natural-language-processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-900 Quick reference Poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ai-fundamentals-ai900-poster.html"&gt;ai-900 poster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="ai"></category><category term="learning"></category></entry><entry><title>Stop the Confusing Language Madness in IT!</title><link href="https://wsbctechnicalblog.github.io/stop-the-confusing-language-madness-in-it.html" rel="alternate"></link><published>2024-09-23T00:00:00-07:00</published><updated>2024-09-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-09-23:/stop-the-confusing-language-madness-in-it.html</id><summary type="html">&lt;p&gt;Using a common language in IT helps avoid misunderstandings, conserves time, and enhances teamwork.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from the &lt;a href="./why-i-hate-tlas.html"&gt;Why I loathe when engineers use TLAs, such as CD vs CD!&lt;/a&gt; and switch gears to the need for a common language. Establishing a shared terminology (common language) for technical terms in an IT environment is key to avoiding miscommunication, saving time, and ensuring teams work together effectively on complex projects. One of our first &lt;a href="./ceremony-center-of-enablement.html"&gt;Center of Enablement (CoE)&lt;/a&gt; &lt;a href="./ceremony-working-group.html"&gt;working groups&lt;/a&gt; aimed to create a glossary of common TLAs, business terms, and technical terms to clarify our written and verbal communications.&lt;/p&gt;
&lt;p&gt;One of our first &lt;a href="./ceremony-center-of-enablement.html"&gt;Center of Enablement (CoE)&lt;/a&gt; focused &lt;a href="./ceremony-working-group.html"&gt;working groups&lt;/a&gt; was focused on creating a glossary of common three/four-lettered acronyms (TLAs), business, and technical terms to ensure we all know what we are talking about in written and verbal communications. Naturally, its effectiveness relies on people being able to find and use it.&lt;/p&gt;
&lt;p&gt;In combination with the common language, our suggested way to communicate is to use the format: &lt;code&gt;WHAT&lt;/code&gt; ASK &lt;code&gt;WHY&lt;/code&gt;. For instance, rather than saying "&lt;em&gt;Delete my repo XYZ&lt;/em&gt;", say "&lt;em&gt;Delete my Azure DevOps (AzDO) Azure Repo XYZ, &lt;REPO-URL&gt;, because we are decommissioning our proof of concept.&lt;/em&gt;" &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bulb" src="../images/azuredevop-automation-stakeholders-3.png"&gt;
WHAT + &lt;strong&gt;ASK&lt;/strong&gt; + WHY = &lt;strong&gt;ACT&lt;/strong&gt;IONABLE
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The latter question will result in less back-and-forth communication, confusion, and dramatically reduce both frustration and lead times, because the communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is &lt;strong&gt;clear&lt;/strong&gt; and &lt;strong&gt;precise&lt;/strong&gt;, minimizing mistakes, confusion, and delays.&lt;/li&gt;
&lt;li&gt;Provides &lt;strong&gt;context&lt;/strong&gt; to explain WHY we are undertaking certain actions.&lt;/li&gt;
&lt;li&gt;Enhances &lt;strong&gt;accountability&lt;/strong&gt; by clearly documenting the WHAT and WHY.&lt;/li&gt;
&lt;li&gt;Helps with &lt;strong&gt;prioritization&lt;/strong&gt; with cues like decommissioning.&lt;/li&gt;
&lt;li&gt;Is &lt;strong&gt;ACTIONABLE&lt;/strong&gt;, avoiding unnecessary clarification steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us explore three examples from our operational support bucket to highlight the issue.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Help, my PROJECT is broken!&lt;/h1&gt;
&lt;p&gt;We begin with a simple, yet typical example.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Project" src="../images/common-engineering-stop-the-confusing-language-madness-in-it-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imagine being an engineer handling Azure DevOps services and receiving three requests saying, "&lt;em&gt;My project is broken!&lt;/em&gt;" &lt;/p&gt;
&lt;p&gt;Questions that will pop into your mind include: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WHAT project? &lt;/li&gt;
&lt;li&gt;WHERE can I find more details about it? &lt;/li&gt;
&lt;li&gt;HOW is it broken?&lt;/li&gt;
&lt;li&gt;WHAT troubleshooting has the user done? Usually a futile question. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need to start a discussion with each user to get these answers before you can understand and prioritize the issue.&lt;/p&gt;
&lt;p&gt;While waiting, you might investigate who the users are and assume they refer to their &lt;strong&gt;business&lt;/strong&gt; application, &lt;strong&gt;Visual Studio&lt;/strong&gt; project, or &lt;strong&gt;Test&lt;/strong&gt; project based on their profiles. I have tried this approach to be proactive, but it often leads me astray because each project context is unique.&lt;/p&gt;
&lt;p&gt;Here is an example by the developer persona for an actionable request:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;My Visual Studio XYZ solution is throwing an error &lt;code&gt;CODE, DESCRIPTION&lt;/code&gt; in my &lt;code&gt;URL&lt;/code&gt; continuous integration pipeline. I have researched the error using our Stack Overflow and Google search, finding &lt;code&gt;THIS URL&lt;/code&gt; information. I am working on an urgent hotfix for &lt;code&gt;P1 INCIDENT ID&lt;/code&gt;.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The request provides a clear, well-structured overview of the issue, along with details that enable the recipient to understand, prioritize, and &lt;strong&gt;act&lt;/strong&gt;. Key parts of the revised request:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clear description of the issue (WHAT).&lt;/li&gt;
&lt;li&gt;Context and location information (WHERE).&lt;/li&gt;
&lt;li&gt;Shows effort made by the requestor and references outcome.&lt;/li&gt;
&lt;li&gt;Urgency and priority (P1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It becomes &lt;strong&gt;actionable&lt;/strong&gt; and minimizes assumptions and back-and-forth communication&lt;/p&gt;
&lt;p&gt;In this first and simple example, the term &lt;strong&gt;project&lt;/strong&gt; is used in conversation. The individual who begins the dialogue fully grasps what the project entails and the related issue, while the person being addressed has no context and thus cannot act effectively.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;SOLUTION, &amp;lt;...&amp;gt; down?&lt;/h1&gt;
&lt;p&gt;In the second example, I will simply provide a few more instances of tricky words when used without context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blueprint&lt;/li&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;li&gt;Container&lt;/li&gt;
&lt;li&gt;Goal&lt;/li&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;li&gt;Product&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Template&lt;/li&gt;
&lt;li&gt;Tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I trust you have encountered these and others in your ecosystem.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;code&gt;... --- ...&lt;/code&gt; My ENVIRONMENT needs rescue!&lt;/h1&gt;
&lt;p&gt;Unfortunately, a recent incident involving environments not only introduced a new word with gazillion meanings for us, but also caused me to lose my temper. Not productive or healthy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="&amp;lt;Environment" src="../images/common-engineering-stop-the-confusing-language-madness-in-it-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Azure is integral to our daily operations, and Azure DevOps anchors our software development lifecycle. When considering just these two environments – do not get me started with the name "Azure DevOps" – expecting two environments can mean various things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Azure DevOps (AzDO) environment&lt;/strong&gt; covers the infrastructure and services which support the entire software development lifecycle (SDLC), including boards, repositories, pipelines, test plans, and artifacts. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure DevOps (AzDO) Pipeline environment&lt;/strong&gt; enables you to define and manage resources across various environments (development, staging, production) with enhanced traceability and control over deployments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build and Test Environments&lt;/strong&gt;, where Azure DevOps oversees the CI process by constructing the application and executing unit, integration, and automated tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Environment&lt;/strong&gt;, equipped with resources like virtual machines, containers, and services (e.g., Azure App Service, Azure SQL Database), is set up for developers to create and test their code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infrastructure as Code (IaC) environments&lt;/strong&gt;, such as Terraform or ARM templates, facilitate the management of environments through code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lower/Upper Environments&lt;/strong&gt; that delineate different stages of readiness.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production Environment&lt;/strong&gt;, where the application operates and serves its users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sandbox Environment&lt;/strong&gt;, a controlled setting for experimentation, learning, and testing without impacting production or other environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staging Environment&lt;/strong&gt;, which replicates the production setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing/QA Environment&lt;/strong&gt;, used for validating code changes through both automated and manual tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As previously mentioned, had the user requested using our &lt;code&gt;WHAT&lt;/code&gt; ASK &lt;code&gt;WHY&lt;/code&gt; approach, like "&lt;em&gt;I need two Azure DevOps Pipeline environments for our infrastructure-as-code environments&lt;/em&gt;," the engineer would have needed fewer follow-up questions, reducing frustration and shortening lead times. In this scenario, Azure environments play a crucial role in our operations, with Azure DevOps environments central to our software development process. Requesting two environments without clarity can be ambiguous.&lt;/p&gt;
&lt;p&gt;This recent real-world example involved three days of back-and-forth communication, made worse by the fact that two users made similar requests for different &lt;strong&gt;environments&lt;/strong&gt;, engaging at least five engineers. This situation clearly demonstrates a significant amount of &lt;strong&gt;WASTE&lt;/strong&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The choice is yours ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Choice" src="../images/common-engineering-stop-the-confusing-language-madness-in-it-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Are you facing similar confusion and miscommunication within your IT environment? If so, how are you managing it?&lt;/p&gt;</content><category term="Posts"></category><category term="101"></category><category term="eliminate-waste"></category></entry><entry><title>Journal 5 - Unlocking the Potential of Generative AI</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-5.html" rel="alternate"></link><published>2024-08-30T00:00:00-07:00</published><updated>2024-08-30T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-08-30:/common-engineering-journal-5.html</id><summary type="html">&lt;p&gt;Explore GitHub Copilot's potential to revolutionize code quality, collaboration, and productivity.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Generative Artificial Intelligence (AI) systems create new content like text, images, music, or code by learning from existing data. Unlike traditional AI that analyzes data or automates tasks, generative AI is creative and can produce original outputs. Embracing this technology is essential as it fosters innovation, boosts productivity, and transforms industries with personalized experiences, efficient content creation, and advanced problem-solving. Adopting generative models will give a competitive advantage in a digital world.&lt;/p&gt;
&lt;h1&gt;Step 1 - Introduce the product&lt;/h1&gt;
&lt;p&gt;This journal is focused on GitHub Copilot, developed with OpenAI, is an AI coding assistant that suggests code snippets, functions, and algorithms within your IDE. Trained on public code, it offers context-aware suggestions to speed up coding and minimize repetitive tasks. Its adaptability to different programming languages makes it useful for both experienced developers and beginners, enhancing productivity and promoting efficient software development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt; - are we doing this? &lt;/p&gt;
&lt;p&gt;&lt;img alt="Confused" src="../images/common-engineering-journal-5-2.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our mission centers on the belief that technology should &lt;strong&gt;empower&lt;/strong&gt;, not replace, our engineers. GitHub Copilot serves as an assistant or wingman, enhancing &lt;strong&gt;productivity&lt;/strong&gt; and relieving engineers of repetitive tasks. This enables them to concentrate on the more &lt;strong&gt;enjoyable&lt;/strong&gt;, &lt;strong&gt;creative&lt;/strong&gt;, and &lt;strong&gt;valuable&lt;/strong&gt; parts of their work.&lt;/p&gt;
&lt;h1&gt;Step 2 - Create a community around the product&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHAT&lt;/strong&gt; - can we achieve?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plan" src="../images/common-engineering-journal-5-3.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We recognized the importance of collaborating with our developer community of practice (CoP) and launched a focused GitHub Copilot CoP. Building a strong community fosters continuous &lt;strong&gt;improvement&lt;/strong&gt;, &lt;strong&gt;trust&lt;/strong&gt;, and &lt;strong&gt;teamwork&lt;/strong&gt; among engineers to share insights, troubleshoot, and find solutions. Benefits include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sharing&lt;/strong&gt; insights, tips, and best practices to improve Copilot use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt; and &lt;strong&gt;adoption&lt;/strong&gt; through successful user experiences.&lt;/li&gt;
&lt;li&gt;Providing ongoing &lt;strong&gt;feedback&lt;/strong&gt; for Copilot's stakeholders.&lt;/li&gt;
&lt;li&gt;Enhancing &lt;strong&gt;collaboration&lt;/strong&gt; for problem-solving and new use cases.&lt;/li&gt;
&lt;li&gt;Supporting newcomers to ease &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;onboarding&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Discussing optimal integration of Copilot into workflows and &lt;strong&gt;cultures&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHAT&lt;/strong&gt; - is in it for me?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Benefits" src="../images/common-engineering-journal-5-4.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As &lt;a href="/common-engineering-journal-1.html"&gt;Common Engineering&lt;/a&gt;, we promote the following core GitHub Copilot benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mentorship&lt;/strong&gt;: offers code suggestions, auto-completions, and can generate entire functions from natural language comments and past code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: analyses, explains, and documents, particularly helpful for maintaining older code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productivity &amp;amp; Creativity&lt;/strong&gt;: speeds up coding, handles repetitive tasks, and frees engineers for complex problem-solving and innovation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduced Cognitive Load&lt;/strong&gt;: minimizes context-switching and mental strain, allowing focus on design and logic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Reduction&lt;/strong&gt;: provides real-time suggestions to catch errors early, enhancing code reliability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Step 3 - Evaluate the use and value of the product&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HOW&lt;/strong&gt; - can we add value?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Value" src="../images/common-engineering-journal-5-5.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our evaluation is continuing. We are monitoring the product's adoption and usage over 20 two-week iterations, spanning two planning intervals. For this, we employ the open-source &lt;a href="https://github.com/github-copilot-resources/copilot-metrics-viewer"&gt;GitHub Copilot Metrics Viewer&lt;/a&gt;, conduct regular feedback polls, and interview individual teams and engineers.&lt;/p&gt;
&lt;p&gt;The interviews and polls provide us with engineers' feedback, while the viewer offers deep and real-time insights into Copilot's impact and adoption.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Real-time GitHub Copilot insights&lt;/p&gt;
&lt;p&gt;&lt;img alt="Metrics" src="../images/common-engineering-journal-5-6.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the end of each iteration, we compile a report summarizing the review and share it with all stakeholders to ensure &lt;strong&gt;transparency&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Report index, per iteration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Metrics" src="../images/common-engineering-journal-5-7.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is everything for today, everyone!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Feel free to contact me at any time. I am eager to share insights that will aid us all in understanding the rapidly evolving AI landscape, its impact, and the importance of maintaining &lt;strong&gt;guiding principles&lt;/strong&gt; like safety and security. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Principles" src="../images/common-engineering-journal-5-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;References:
- &lt;a href="/common-engineering-journal-1.html"&gt;Journal 1 - What is origin of our common engineering team?&lt;/a&gt;
- &lt;a href="/common-engineering-journal-2.html"&gt;Journal 2 - Why do we need our common engineering team?&lt;/a&gt;
- &lt;a href="/common-engineering-journal-3.html"&gt;Journal 3 - Explore the trajectory of our Common Engineering (Ce) ecosystem&lt;/a&gt;
- &lt;a href="/common-engineering-journal-4.html"&gt;Journal 4 - Why are we a (the) place to work for? &lt;/a&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="ai"></category><category term="devops"></category><category term="journal"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240816</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240816.html" rel="alternate"></link><published>2024-08-19T00:00:00-07:00</published><updated>2024-08-19T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-08-19:/azure-pipeline-blueprints-oss-sync-20240816.html</id><summary type="html">&lt;p&gt;Improving the configuration file user experience.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have been silent for a while because we have been busy with operations, technology debt reduction, and self-service automation. We will share more on that later. In this update, we have tackled an issue that has bothered us for months, and more importantly causing some concern among our engineers using the v2 CI/CD blueprints.&lt;/p&gt;
&lt;h1&gt;LOOKING BACK&lt;/h1&gt;
&lt;p&gt;We stored all our configuration templates in a separate repository called &lt;strong&gt;*.Configuration.v2&lt;/strong&gt;, protected by branch policies and monitored by our common engineering and security teams. This caused annoying delays when the team needed to change configurations and get reviews that added little value.&lt;/p&gt;
&lt;h1&gt;LOOKING FORWARD&lt;/h1&gt;
&lt;p&gt;We moved the &lt;strong&gt;*-config.yml&lt;/strong&gt; from the &lt;strong&gt;*.Configuration.v2&lt;/strong&gt; repository to the same one where the team's application code and pipeline are tracked. The &lt;strong&gt;*-control.yml&lt;/strong&gt; line referencing the file changed from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nuget&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeConfiguration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the &lt;strong&gt;@self&lt;/strong&gt; which highlights that we refer to the repository where the original pipeline was found.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We also removed the following line from all &lt;strong&gt;*-start.yml&lt;/strong&gt; templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CeConfiguration&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__TODO_INSERT_AZURE_DEVOPS_NAME_HERE__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only exception is the NuGet v2 CI/CD blueprint, where the &lt;strong&gt;*-start.yml&lt;/strong&gt; template remains unchanged and allows loading the centralized configuration file from &lt;strong&gt;*.Configuration.v2&lt;/strong&gt; or from the same repository as the team's code and pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/deploy/default.config/nuget-package-config.yml@CeConfiguration

-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usePortfolioConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/deploy/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}/nuget-package-config.yml@CeConfiguration

-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDefaultConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usePortfolioConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;template:&lt;span class="w"&gt; &lt;/span&gt;/deploy/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}-config.yml@self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;OUTCOME&lt;/h1&gt;
&lt;p&gt;Now, the pipeline and its configuration templates are version controlled and managed by the same team that owns the code, making the process simpler and more efficient.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/29"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All &lt;strong&gt;blueprints/wepapp/azure-pipeline-*-control*.yml&lt;/strong&gt; templates have been updated.&lt;/li&gt;
&lt;li&gt;All &lt;strong&gt;blueprints/wepapp/azure-pipeline-*-start*.yml&lt;/strong&gt; templates have been updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Embrace the Future - Use Automation and AI to Elevate Your Engineering Career!</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-fear-of-change.html" rel="alternate"></link><published>2024-07-17T00:00:00-07:00</published><updated>2024-07-17T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-17:/back-to-basics-fear-of-change.html</id><summary type="html">&lt;p&gt;The era of manual testing and coding to a specification is nearly over!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Previously, I described &lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-engineering.html"&gt;effective engineers&lt;/a&gt; as curious, adaptable learners keen on evolving and improving their collaborative and communicative skills. They are detail-oriented, view challenges as a springboard for innovation akin to what Elon Musk advocates and turn failures into lessons. They seek better practices and results with creative thinking, overcome difficulties with logic and optimism, and endorse deep, varied skills to solve problems and foster teamwork.&lt;/p&gt;
&lt;p&gt;Today, I would like to touch on the significance of automation and artificial intelligence (AI). Before that, I will recount key experiences from my IT career to illustrate the constant evolution in technology and the role AI will play in upcoming groundbreaking advancements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="timeline" src="/images/back-to-basics-fear-of-change-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My professional journey began with the modular, message-passing, multi-process, and multi-user CTOS operating system by Convergent Technologies. To this day, I consider it to be one of the finest operating systems I have had the opportunity to use – we had diskless workstations, we had multi-tasking, multi-processing, and we wrote programs in segments of 64K. Here is a picture of the B21, the machine I miss the most, and on the right the B25, fondly referred to as the stackable toaster.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="b21" src="/images/back-to-basics-fear-of-change-2.png"&gt; &lt;img alt="b25" src="/images/back-to-basics-fear-of-change-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, it did not have certain features that OS/2 offered at the time, and it certainly did not include the extensive range of additional functionalities and graphical interface (windows) that Microsoft Windows boasts today. There was also an occasion where I encountered a significant setback while developing a system service meant to integrate a new DES encryption module with the operating system. This setback (failure) led me to travel to San Jose in California, one of the operating system's development hubs, where I collaborated with a highly skilled guru who taught me extensively about operating system debugging and helped resolve the gremlin I had introduced in the service. The whole experience was astonishingly educational and became my initial lesson in how failure can lead to growth and spark innovation.&lt;/p&gt;
&lt;p&gt;Upon the release of Windows 1.0, I immersed myself in assembler programming and particularly in resolving compatibility issues between CTOS and Windows. In the '90s, I recall the debut of Microsoft Solution Framework (MSF), NT 3.5, the original Visual Studio, and Visual Source Safe, which was developed by One Tree Software from North Carolina. The latter became a product and its creator, Brian Harry, became one of the leaders I admire most, as well as the driving force behind Team Foundation Server and Azure DevOps. This era introduced my second favourite device, the COMPAQ portable computer – although, when I reflect, I question the “portability.”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="compaq" src="/images/back-to-basics-fear-of-change-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The early 2000s marked the inception of the Agile Manifesto, introduced Team Foundation Server 2005 with its extensive setup checklist, and saw the rise of the DevOps approach that would go on to impact my career significantly. This period led me to a new continent and company, where I had the honor to contribute to Agile and DevOps initiatives within the TFS team at Microsoft. My peers often hear me advocate for our transformation efforts; we automated extensively, executed over 70,000 unit tests in merely seven minutes on every pull-request, and embodied &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown’s definition of DevOps&lt;/a&gt;: "&lt;em&gt;The union of people, process, and products to enable continuous delivery of value to our end users.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;In the 2010’s we welcomed Azure and I joined WorkSafeBC in 2018 – see &lt;a href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html"&gt;Can government agencies be innovative?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Lastly, we have seen the introduction of Azure OpenAI, GitHub Copilot, ChatGPT, and an overwhelming array of other AI innovations and chances for advancement. We are at the conclusion of the initial phase!&lt;/p&gt;
&lt;p&gt;Below the timeline, you will find the major programming languages I have used, space programs I have tracked, and five books where I have ve consolidated my insights for others to enjoy. I may have omitted some key points, but remember, the digital realm is always evolving. Having highlighted these to underline the need for continuous learning as the technology landscape evolves, let us circle back to this blog's main topic: the inevitable change in an engineer's life and the critical roles of automation and AI going forward.&lt;/p&gt;
&lt;p&gt;Here are two of my predictions that I would like to share and hear your views on:&lt;/p&gt;
&lt;h1&gt;Automation will not take your job, but an engineer using automation will!&lt;/h1&gt;
&lt;p&gt;Our team is committed to pioneering improvements and striving for engineering mastery by stewarding their insights and establishing guidelines to help safely navigate the realm of information technology. We implement automation to standardize and streamline monotonous tasks, freeing engineers to tackle more engaging and worthwhile projects. Yet, we observe that some engineers opt out of using automated systems, choosing instead to handle tasks manually.&lt;/p&gt;
&lt;p&gt;Is it a resistance to change or distrust in automation that hinders adaptation? Regardless, adapting is crucial. For instance, QA testers should shift towards QA engineering and harness AI for test automation, integrating it early into the development cycle. Software programmers, too, should transition into software engineers, employing AI for routine tasks and code generation, to stay relevant in an increasingly automated field and rapidly evolving environment. The era of manual testing and coding to a specification (distinct from general development) is near the end!
Keep in mind, machines excel at repetitive tasks with greater efficiency and reliability compared to humans, who may become distracted and lose concentration as their interest wanders.&lt;/p&gt;
&lt;h1&gt;Artificial Intelligence (AI) will not take your job, but an engineer using AI will!&lt;/h1&gt;
&lt;p&gt;Artificial intelligence (AI) has quickly become an integral part of our environment, processing vast amounts of data, automating routine tasks, offering tailored experiences, predicting in milli-seconds what took us days-weeks to analyse, and aiding in making decisions, thus fostering innovation and efficiency. The digital realm is brimming with potential for the optimistic and bold who aim high. I relish the chance to contribute to this crucial phase in the digital domain, with AI enabling me to tackle innovative and more strategic challenges.
So, why is there such an Angst for AI?&lt;/p&gt;
&lt;p&gt;It is unthinkable that anyone aspires to be an engineer secluded in a dim and solitary space, fearing change. We are inherently inclined to collaborate, exchange insights, innovate, investigate, and collectively concentrate on creating solutions, not fixating on issues, while consistently providing worth to satisfied users. We wish to engage in compelling and valuable work instead of monotonous and tedious tasks. Therefore, we should embrace automation and, at present, artificial intelligence. And no, we are not welcoming SkyNet or a horde of terminators – not just yet.&lt;/p&gt;
&lt;p&gt;Looking forward to my team revealing their AI success stories on this technical blog and/or the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vancouver&lt;/a&gt; meetup in the near future.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Nonetheless, based on my current knowledge, I believe that neither automation nor artificial intelligence will be a substitute for an effective (open-minded) and skilled (continuous learning) engineer.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;</content><category term="Posts"></category><category term="devops"></category><category term="agile"></category></entry><entry><title>Unleashing the Power of Teamwork: Key Takeaways from Collaboration Ceremonies and Events</title><link href="https://wsbctechnicalblog.github.io/ceremony-learnings.html" rel="alternate"></link><published>2024-07-12T00:00:00-07:00</published><updated>2024-07-12T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-12:/ceremony-learnings.html</id><summary type="html">&lt;p&gt;Fostering a culture of continuous improvement and innovation through events&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are committed to managing several internal initiatives, including hackathons, town halls, and Centers of Enablement (CoE) that further inspire the formation of Communities of Practice (CoP), dojos, and working committees. Additionally, we orchestrate and enjoy external engagements like workshops, training sessions, seminars, and networking events, such as our &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vancouver Meetup&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Events" src="../images/ceremony-learnings-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can review &lt;a href="/ceremony-overview.html"&gt;Ceremony Overview&lt;/a&gt; for more insight into the internal ceremonies - in this post I will focus on the takeaways from hosting public &lt;strong&gt;meetups&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A meetup is a casual event&lt;/strong&gt; where individuals with shared interests like DevOps come together to mingle, exchange ideas, connect, or participate in related activities. The term "meetup" gained prominence with &lt;a href="https://www.meetup.com/home"&gt;Meetup.com&lt;/a&gt;, a site that facilitates the organization and discovery of such events. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;But first, why are these events pivotal?&lt;/h1&gt;
&lt;p&gt;Events such as technical meetups and communities of practice (CoP) are essential for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Best Practices and Standards&lt;/strong&gt; - They aid in setting and spreading industry benchmarks. Our centers of enablement (CoE), for example, Provide guardrails (aka governance).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is a guardrail?&lt;/strong&gt; 
A guardrail is likened to the safety barriers on a bridge, serving as a metaphor to guide our engineers in safely and efficiently using our software development lifecycle (SDLC). It represents our commitment to setting standards and governance in a way that empowers rather than dictates. Our team promotes engineering practices and while engineers can disregard these 'guardrails,' doing so often leads to a higher chance of issues, with less support available.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Community Building&lt;/strong&gt; - They cultivate a sense of community and improve job satisfaction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback and Improvement&lt;/strong&gt; - Offers a chance for critique and improvement of work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Innovation&lt;/strong&gt; - Exposure to diverse thoughts encourages innovative thinking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inspiration and Motivation&lt;/strong&gt; - Witnessing peers' achievements can stimulate personal drive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Knowledge Sharing&lt;/strong&gt; - They promote ideas, experiences, and industry trends exchange.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Networking Opportunities&lt;/strong&gt; - They help build connections with colleagues and leaders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem Solving&lt;/strong&gt; - They offer venues for tackling challenges collaboratively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skill Development&lt;/strong&gt; - Dojos, workshops and presentations facilitate learning and skill enhancement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visibility and Recognition&lt;/strong&gt; - Participation raises profile and might create leadership chances.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our events contribute to continuous professional development, continuous learning, and collective progress.&lt;/p&gt;
&lt;h1&gt;What is the catch?&lt;/h1&gt;
&lt;p&gt;Although there are several challenges, typically the advantages of collaboration events surpass issues, such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Catch" src="../images/ceremony-learnings-2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt; - Event planning can incur high expenses, including venue rental, catering, advertising, and speaker honorariums.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logistics&lt;/strong&gt; - Arranging the event specifics, such as location, date, time, can be intricate and time-consuming.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low Attendance&lt;/strong&gt; - A successful event often depends on a high turnout for effective networking, promotion, and value for hosts and speakers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk Management&lt;/strong&gt; - It is critical to plan for unexpected issues like cancellations, poor attendance, or emergencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Inevitable One&lt;/strong&gt; - Handling that one attendee who comes just for the free food or to create continuous interruptions is a known challenge.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Back to the core topic - our learnings!&lt;/h1&gt;
&lt;p&gt;For a meetup to be effective, we've realized the importance of these six key components:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Learnings" src="../images/ceremony-learnings-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt; – It is critical to define the purpose and desired results for your meetup, providing clear answers to "what will I gain from this and why should I spend my valuable time attending?" &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 1&lt;/strong&gt; - &lt;strong&gt;Purpose&lt;/strong&gt; is the most important ingredient to cook up a successful event!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Engaging Content&lt;/strong&gt; - Present exciting and pertinent material to keep participants involved and provide value.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 2&lt;/strong&gt; - Minimize text and slides for a better presentation; maximize demonstrations and involve the audience more.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Organization&lt;/strong&gt; -  It is crucial to meticulously plan everything from choosing a suitable venue to organizing and handling logistics efficiently. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 3&lt;/strong&gt; - Post-pandemic findings indicate that in-person gatherings draw larger crowds compared to online events, with about 70% attendance for face-to-face meetings against roughly 50% for virtual ones, compared to RSVPs (Répondez s'il vous plait). Additionally, incorporating a live stream into your physical event might lead to a decrease in attendance since potential participants may opt to stay home at the last minute and view it online instead.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Promotion&lt;/strong&gt; - Effective advertising is key to drawing in attendees, and clear communication keeps all parties informed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback Loop&lt;/strong&gt; - It is crucial to collect and utilize feedback from participants to enhance future events and meet community expectations. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNING 4&lt;/strong&gt; - We have observed that the response rate to surveys after meetups is quite low, less than 20%. The best method to obtain feedback about the session and meetup seems to be collecting it in &lt;strong&gt;real-time&lt;/strong&gt;. I find it engaging when the speaker incorporates an interactive poll during their talk, like using &lt;a href="https://www.mentimeter.com/"&gt;Mentimeter&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Committed Leadership&lt;/strong&gt; - Having eager and passionate coordinators is essential for addressing unexpected challenges and making sure that the event runs smoothly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What have you learned from your meetups?&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>DevOps Vancouver Meetup - May 28, 2024</title><link href="https://wsbctechnicalblog.github.io/meetup-devops-meetup-2024-05-28.html" rel="alternate"></link><published>2024-07-08T00:00:00-07:00</published><updated>2024-07-08T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-08:/meetup-devops-meetup-2024-05-28.html</id><summary type="html">&lt;p&gt;How I learned to develop software like a bureaucrat?&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently hosted an amazing online &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/events/301182207/"&gt;DevOps Vancouver Meetup&lt;/a&gt; on May 28, 2024. Our presenter &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Alex Bundarzic ... see authors for details&lt;/a&gt;, agreed to present a session at short-notice.&lt;/p&gt;
&lt;p&gt;The discussion "How I learned to develop software like a bureaucrat" highlighted the issue of fragile software systems due to interdependencies which cause systems to fail when changes are made. Alex suggests that despite their inefficiency, bureaucratic methods used in large organizations can offer insights into creating more stable and adaptable software systems. This session will present ways to alter the software development process to enhance system robustness and prepare for inevitable changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/how-I-learned-to-develop-software-like-a-bureaucrat.pdf"&gt;Presentation slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Rq-UuLS2yMc"&gt;Presentation recording&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;When will &lt;strong&gt;you join&lt;/strong&gt; us at the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vandouver Meetup&lt;/a&gt; and how can we improve the meetup? Thoughts?&lt;/p&gt;</content><category term="Events"></category><category term="devops"></category><category term="engineering"></category></entry><entry><title>Revolutionizing Quality Assurance: Unleashing the Power of Automation and AI</title><link href="https://wsbctechnicalblog.github.io/quality-assurance-automation-ai.html" rel="alternate"></link><published>2024-07-08T00:00:00-07:00</published><updated>2024-07-08T00:00:00-07:00</updated><author><name>Vikas Jawa</name></author><id>tag:wsbctechnicalblog.github.io,2024-07-08:/quality-assurance-automation-ai.html</id><summary type="html">&lt;p&gt;Automation and Artificial Intelligence in Quality Assurance&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quality Assurance (QA) is vital in any organization as it ensures that products meet high standards of quality, reliability, and performance before they reach customers. QA is essential in software development, requiring collaboration among software developers, QA engineers and everyone involved in the process to ensure the success of projects.&lt;/p&gt;
&lt;p&gt;Insufficient QA practices have been responsible for numerous high-profile project failures, highlighting the critical importance of thorough quality control measures. Effective QA practices not only identify defects early but also ensure that software meets functional requirements, performance expectations, and user needs. &lt;/p&gt;
&lt;p&gt;By integrating robust QA processes, teams can mitigate risks, enhance reliability, and deliver software products that meet high standards of quality and usability.&lt;/p&gt;
&lt;p&gt;Here are a few notable instances of project failures attributed to inadequate QA practices/processes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jpl.nasa.gov/news/mars-climate-orbiter-team-finds-likely-cause-of-loss"&gt;The Mars Climate Orbiter (1999)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.forbes.com/sites/steveschaefer/2012/08/02/knight-capital-trading-disaster-carries-440-million-price-tag/"&gt;Knight Capital Group Trading Loss (2012)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://d3.harvard.edu/platform-rctom/submission/the-failed-launch-of-www-healthcare-gov/"&gt;Healthcare.gov Launch (2013)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boeing.mediaroom.com/2019-04-04-Boeing-CEO-Dennis-Muilenburg-Addresses-the-Ethiopian-Airlines-Flight-302-Preliminary-Report"&gt;Boeing 737 MAX (2018-2019)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The drive for efficiency, reliability and flexibility has led to the incorporation of automation and artificial intelligence (AI) into quality assurance (QA) processes. The shift towards automation in QA can significantly enhance efficiency, accuracy, and coverage of tests, allowing teams to identify and resolve issues faster and more effectively. Automation empowers QA professionals by reducing repetitive manual tasks, freeing up time to focus on more strategic, creative, and complex aspects of testing that require human insight. By embracing automation, QA teams can not only improve their productivity but also contribute to delivering superior products, fostering a culture of continuous improvement and innovation within the organization.&lt;/p&gt;
&lt;p&gt;Here are some links describing how big technology companies are implementing their Automation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://itrevolution.com/articles/case-study-automated-testing-google/"&gt;Google: The birth of automated testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/nts-real-time-streaming-for-test-automation-7cb000e933a1"&gt;Netflix Test Studio: Real-time streaming for test automation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Automation in QA&lt;/h1&gt;
&lt;p&gt;Automation has transformed conventional QA methods by swiftly and consistently executing repetitive tasks. This approach releases human testers from mundane, time-consuming activities, enabling them to concentrate on more intricate scenarios and strategic testing activities. 
Major areas benefiting significantly from automation include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Test Execution&lt;/strong&gt;: Automated scripts can execute tests across different environments and configurations, ensuring thorough validation of software functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regression Testing&lt;/strong&gt;: Automation of regression tests can help teams in identifying potential regression after the code changes without manual intervention, thus maintaining the software stability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance Testing&lt;/strong&gt;: Automating various performance tests can assess how an application performs under various situations, and it can identify bottlenecks and help in optimizing performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automated testing fits seamlessly into Continuous Integration/Continuous Deployment (CI/CD) pipelines, facilitating rapid feedback loops and faster delivery.&lt;/p&gt;
&lt;h1&gt;Leveraging AI in QA&lt;/h1&gt;
&lt;p&gt;Artificial Intelligence (AI) is a game changer in QA.  AI offers capabilities that extend beyond what traditional automation can achieve. AI-powered QA tools leverage machine learning algorithms to analyze vast amount of data, identify patterns, and make intelligent decisions. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Test Case Generation&lt;/strong&gt;: AI algorithms can analyze code changes and automatically generate test cases to cover new functionalities as well as identify missing test cases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defect Prevention&lt;/strong&gt;: Machine Learning models can analyze historical data to predict where defects are likely to occur and take proactive measures to prevent issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural Language Processing (NLP) for Testing&lt;/strong&gt;: AI-driven tools can interpret natural language requirements and generate test scenarios, improving accuracy and test coverage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI-powered systems can do many more things to improve the quality of the software including detecting anomalies and detecting potential security threats etc.&lt;/p&gt;
&lt;h1&gt;Challenges and Considerations&lt;/h1&gt;
&lt;p&gt;Although there are huge benefits of automation and AI in QA, there are challenges come with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Setup and Learning&lt;/strong&gt;: Implementing automation and AI requires upfront investment in tools, infrastructure, and expertise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;: Automated tests and AI models need regular updates and maintenance to remain effective as software evolves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Human Expertise&lt;/strong&gt;: Despite advancements, human QA engineers play a crucial role in designing test strategies, interpreting results, and ultimately ensuring overall quality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As technology continues to evolve, the future of QA in software development will likely see even greater integration of automation and AI. Emerging trends and technologies will further streamline QA processes and ultimately enhance the quality of the software. By harnessing these technologies effectively, organizations can reduce overall costs and deliver superior products. Integration of automation and AI in QA is about embracing the mindset of continuous improvement in software development.&lt;/p&gt;</content><category term="Posts"></category><category term="ai"></category><category term="quality"></category></entry><entry><title>Unproductive Communication - The Silent Productivity Killer That Drives Me Crazy</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-communication.html" rel="alternate"></link><published>2024-06-21T00:00:00-07:00</published><updated>2024-06-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-21:/back-to-basics-communication.html</id><summary type="html">&lt;p&gt;Stop the context-less "hi, hello, ping, pong, ..."&lt;/p&gt;</summary><content type="html">&lt;p&gt;I already discussed the issues of &lt;a href="/stop-the-meeting-hell.html"&gt;Stop the meeting overload!&lt;/a&gt;, &lt;a href="/optimize-and-track-emails.md.html"&gt;How to track (and optimize) your email traffic&lt;/a&gt;, &lt;a href="/optimize-and-avoid-emails.md.html"&gt;How to tame your vacation email traffic&lt;/a&gt;, and &lt;a href="/context-switching-no-more.html"&gt;Stop the context switching, reduce waste, and focus on value&lt;/a&gt; in 2021 and 2022. &lt;/p&gt;
&lt;p&gt;I continue to deal with unhelpful chat messages, excessive emails, and experience big meetings dominated by a few, leaving many engineers questioning their presence. When multitasking begins, the sudden "what do you think &lt;yourname&gt;?" often attempts to reengage those who have disengaged from the talk – a common pattern in our new world of remote and hybrid (in-person and remote) collaboration.&lt;/p&gt;
&lt;p&gt;If you have read this far, I assume you are in a similar boat. Let me go back to basics and see what I have learned and recommend for effective email, meetings, and chats.]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Email&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email" src="../images/back-to-basics-communication-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some email etiquettes and rules to follow are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use chat&lt;/strong&gt;, like Microsoft teams, or an in-person spit-balling whiteboard session for discussions or ideation, not emails.&lt;/li&gt;
&lt;li&gt;Only expect recipients on &lt;strong&gt;To&lt;/strong&gt; to respond, not those on Cc (for your information) or Bcc (hidden).&lt;/li&gt;
&lt;li&gt;Keep an email on one topic and thread, do not &lt;strong&gt;split&lt;/strong&gt; or &lt;strong&gt;mix it up&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Do not change the subject or reuse a finished email thread for a new topic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reply all with caution&lt;/strong&gt; - you could start an email storm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a new one we have added to our list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Please provide &lt;strong&gt;context&lt;/strong&gt; when you add someone to an email thread, especially a long one, so they do not have to spend time reading the thread backwards. Not everyone has Copilot for Microsoft 365 to get an AI assisted recap. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Meetings" src="../images/back-to-basics-communication-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As per the image above, some meeting etiquettes to improve your work:life balance and productivity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Give and get &lt;strong&gt;value&lt;/strong&gt; or leave.&lt;/li&gt;
&lt;li&gt;Stop &lt;strong&gt;T-5 minutes&lt;/strong&gt; before the end.&lt;/li&gt;
&lt;li&gt;No meetings on &lt;strong&gt;Friday&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;No meeting without &lt;strong&gt;agenda&lt;/strong&gt; or &lt;strong&gt;purpose&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;acronyms&lt;/strong&gt; or &lt;strong&gt;jargon&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Limit your invite list to &lt;strong&gt;essential participants&lt;/strong&gt; only, rather than inviting a large audience. Less is more!&lt;/li&gt;
&lt;li&gt;Write down &lt;strong&gt;notes&lt;/strong&gt; and share them with &lt;strong&gt;action items&lt;/strong&gt; - or use Copilot for Microsoft Teams to do it for you. I LOVE that productivity feature, powered by AI!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus&lt;/strong&gt; on the meeting, without laptops, when meeting in-person.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not make someone who arrives late to an in-person meeting in a huge building do pushups for each minute they are late – they might have run a long way from another meeting that was valuable but finished on time or ran over. This is another reason we need the T-5 minute rule, to allow people to move between back-to-back meeting.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Teams / Slack / Chat&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Chat" src="../images/back-to-basics-communication-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As in scenario 1, I get stressed when people use chat programs like Microsoft Teams, Slack, or text messages to say "hi", "ping", or "do you have a second" and then make me wait for context.&lt;/p&gt;
&lt;p&gt;Please do not take it personally - I do not react to these 'ello pings anymore, because it is unproductive. Before, I used to &lt;strong&gt;switch context&lt;/strong&gt;, &lt;strong&gt;wait&lt;/strong&gt; patiently, or politely ask for the missing &lt;strong&gt;context&lt;/strong&gt; - but it is frustrating and distracting, especially when I am trying to focus.&lt;/p&gt;
&lt;p&gt;Instead, as in scenario 2, please be courteous and say "Hi", but more importantly add the context and/or question. That way the receiver can decide whether to reply right away, or later.&lt;/p&gt;
&lt;p&gt;Add &lt;a href="https://sbmueller.github.io/nohello/"&gt;NoHello&lt;/a&gt; to your email signature and/or your collaboration tool status message to remind everyone of keeping the collaboration &lt;strong&gt;simple&lt;/strong&gt; and &lt;strong&gt;productive&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Anything else that drives you crazy?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Automate Azure DevOps work item state transitions like a Pro</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-azdo-backlog-automation.html" rel="alternate"></link><published>2024-06-17T00:00:00-07:00</published><updated>2024-06-17T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-17:/back-to-basics-azdo-backlog-automation.html</id><summary type="html">&lt;p&gt;Maintain your backlog by changing the status of work items according to the status of their subitems.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I review our Azure DevOps (AzDO) backlogs and team settings, I sometimes ask myself why teams do not tidy up their backlogs to prevent subtle, but significant state inconsistencies. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Anomalies" src="/images/back-to-basics-azdo-backlog-automation-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, I often encounter parents in a &lt;strong&gt;new&lt;/strong&gt; or &lt;strong&gt;active&lt;/strong&gt; state, with all their children in a &lt;strong&gt;closed&lt;/strong&gt; state – are we expecting more children or has the parent been overlooked? Alternatively we see parents in a &lt;strong&gt;new&lt;/strong&gt; state and children in an &lt;strong&gt;active&lt;/strong&gt; state – have we wrongly started work, mistakenly moved the child work item into an active state, or has the parent again been neglected?&lt;/p&gt;
&lt;p&gt;Maybe the AzDO team snuck in a new and useful feature to the product as part of the &lt;strong&gt;New Boards Hubs&lt;/strong&gt; preview feature and the teams do not know yet. I will assume this to be the case and show you 3 easy steps to create magic.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Turn on the New Boards Hubs preview feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="New Board" src="/images/back-to-basics-azdo-backlog-automation-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check your Team Settings and look at Automation – Rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Settings" src="/images/back-to-basics-azdo-backlog-automation-2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up how you want to automate your parent work item states.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Automation" src="/images/back-to-basics-azdo-backlog-automation-3.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do steps 2 and 3 for each backlog level that needs this great feature.  &lt;/p&gt;
&lt;p&gt;That is all – enjoy the &lt;strong&gt;magic&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTES&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Automation is &lt;strong&gt;team&lt;/strong&gt; specific.&lt;/li&gt;
&lt;li&gt;Automation is &lt;strong&gt;backlog-level&lt;/strong&gt; specific.&lt;/li&gt;
&lt;li&gt;Automation only triggers for work items that &lt;strong&gt;belong to the same team&lt;/strong&gt;!
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;A special note for my colleague &lt;strong&gt;Pam&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPACT ON PORTFOLIO AND SCORECARD BACKLOGS&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Number 3 in above notes affects our portfolio and scorecard backlogs. The automation will not work when linked children from other AzDO projects and/or teams are closed, if they are attached to portfolio or scorecard parents.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For more information read &lt;a href="https://learn.microsoft.com/en-us/azure/devops/boards/backlogs/automate-work-item-state-transitions?view=azure-devops"&gt;Automate work item state transitions&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Related &lt;a href="https://azure.microsoft.com/en-us/products/devops"&gt;AzDO&lt;/a&gt; Board posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/agile-boards-tips.html"&gt;Agile Boards Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-boards-tips-stop-messing-with-our-backlog.html"&gt;Azure Boards Tips - Stop messing with our backlog!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-boards-tips-operations-team.html"&gt;Azure Boards Tips for Operations Teams&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="/azure-boards-tips-retain-hierarchy-with-filter.html"&gt;Azure Boards Tips - Retain hierarchy with filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Have you discovered and are you enjoying this nifty automation rule?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Exploring the future Software Development Lifecycle (SDLC) flow</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-sdlc-improvements.html" rel="alternate"></link><published>2024-06-07T00:00:00-07:00</published><updated>2024-06-07T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-07:/engineering-practices-sdlc-improvements.html</id><summary type="html">&lt;p&gt;Looking for Insights and Feedback from other pioneers of continuous SDLC improvements.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We want to "&lt;em&gt;Unite people, process, and products to empower and enable us to deliver continuous value to delighted end-users&lt;/em&gt;", following &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan's definition of DevOps&lt;/a&gt;, and our aim is to "&lt;em&gt;Create an SDLC with consistent, standardized, secure, simple, and cost-effective processes, practices, and products&lt;/em&gt;". We always try to improve our people (80%), processes (15%), and products (5%). In this post I will highlight one topic we are investigating and I hope you will join us and share your views on whether we are on track, or need some adjustment – &lt;strong&gt;SDLC Flow&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;SDLC / FLOW / TODAY&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="SDLC of today" src="../images/engineering-practices-sdlc-improvements-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As illustrated, our current software development lifecycle (SDLC) flow involves four main environments – sometimes fewer, sometimes more, but this is the usual pattern. Development, unit testing, and verification are performed in one or more &lt;strong&gt;dev + test&lt;/strong&gt; environment(s), integration testing, performance testing, and user acceptance testing are conducted in tone or more &lt;strong&gt;dev + test&lt;/strong&gt; environment(s), additional user acceptance testing and ad-hoc bug analysis are carried out in &lt;strong&gt;pre-Production&lt;/strong&gt;, and we are all familiar with what happens in &lt;strong&gt;Production&lt;/strong&gt;.  &lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clear separation of duties.&lt;/li&gt;
&lt;li&gt;Capacity to work on and deliver a lot of value (super tankers).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple environments that need careful operational attention.&lt;/li&gt;
&lt;li&gt;Multiple environments that produce carbon emissions.&lt;/li&gt;
&lt;li&gt;Multiple environments that can diverge from each other in terms of data, setup, 3rd party software, for example .NET, and our solution artifacts.&lt;/li&gt;
&lt;li&gt;Multiple environments that increase &lt;strong&gt;complexity&lt;/strong&gt; and &lt;strong&gt;total cost of ownership&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;SDLC / FLOW / FUTURE&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="SDLC of the future" src="../images/engineering-practices-sdlc-improvements-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We want to move as much of our quality and security scans to the left as far as we can, adopt a mindset of continuous delivery and release on demand, and decrease the number of environments. We want to gradually show features in a new (green) version, while keeping the live production (blue) version. That way we can switch from green to blue and switch back if needed.  &lt;/p&gt;
&lt;p&gt;Development, testing, integration testing, performance testing, user acceptance testing, and verifications moves to the left and all activities are run continuously. While the new (green) version is not switched to production, [optional] user acceptance testing and bug analysis can be done. The blue/green environments also create a new possibility to use active-active and passive-active disaster recovery.&lt;/p&gt;
&lt;p&gt;A minor detail in the visual above, is that we could have multiple development environments, which we would provision on-demand and delete as needed.&lt;/p&gt;
&lt;p&gt;Another topic that is relevant is resolving problems - with this simpler model, we also prefer to fix-forward, not roll-back by default.  &lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Focus on delivering value continuously (small changes, aka speed boats).&lt;/li&gt;
&lt;li&gt;Giving business the power to choose when their features are launched.&lt;/li&gt;
&lt;li&gt;Fewer environments to maintain and smaller environmental impact.&lt;/li&gt;
&lt;li&gt;Fewer environments enables lower cost of ownership.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automation, automation, automation - which I personally see as an advantage, not disadvantage.&lt;/li&gt;
&lt;li&gt;Some hefty prerequisites, as below.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Continuous delivery&lt;/strong&gt; of value - think nimble speed boats not super tankers - and &lt;strong&gt;release on demand&lt;/strong&gt;. Requires a culture (PEOPLE) mindset change. &lt;/li&gt;
&lt;li&gt;Welcome &lt;strong&gt;feature flags&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shift-left&lt;/strong&gt; and &lt;strong&gt;QUALITY&lt;/strong&gt; mindset. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;standardization&lt;/strong&gt;, and &lt;strong&gt;simplicity&lt;/strong&gt; to enable automation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated&lt;/strong&gt; unit, user interface, integration, and regression testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated&lt;/strong&gt; (self-service) provisioning of architecture, infrastructure, and CI/CD blueprints.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;How has your SDLC changed and improved over time? Are we making the wrong choices or are we on the right path to continuously enhance our SDLC?&lt;/p&gt;
&lt;p&gt;Let us start a conversation and please post your thoughts in the comments below. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2016/august/devops-applying-devops-to-a-software-development-project"&gt;Applying DevOps to a Software Development Project&lt;/a&gt; / August 2016&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/connect/vsts-the-road-to-continuous-delivery-with-visual-studio-team-services"&gt;VSTS - The Road to Continuous Delivery with Visual Studio Team Services&lt;/a&gt; / December 2017&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; / February, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/may/devops-any-language-any-platform-with-azure-devops-projects"&gt;Any Language, Any Platform with Azure DevOps Projects&lt;/a&gt; / May 2018&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="engineering"></category><category term="automation"></category></entry><entry><title>Decoding the Acronyms: MMP vs. MVP vs. POC</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-mmp-mvp-poc.html" rel="alternate"></link><published>2024-06-03T00:00:00-07:00</published><updated>2024-06-03T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-06-03:/back-to-basics-mmp-mvp-poc.html</id><summary type="html">&lt;p&gt;MMP, MVP, and POC: Understanding Their Differences and Choosing the Right Approach&lt;/p&gt;</summary><content type="html">&lt;p&gt;I attended a workshop where they used many TLAs (two/three-lettered acronyms) that were hard to follow, especially after lunch when everyone was tired. Not all the participants knew what the TLAs meant, and they could cause misunderstandings or confusion. For example, SA could mean solution architect, systems architecture, or South-Africa. My team has an agreement to avoid TLAs in spoken communication and to only use them in written communication if there is a table of acronyms or the full form with the acronym in brackets is used first.  But, this is not the main point of this short blog post. In the same workshop we talked about MMP, MVP, and POC and I thought it was a good chance to clarify the acronyms and explain how I see the difference.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Proof of Concept (POC)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="POC" src="../images/back-to-basics-mmp-mvp-poc-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Proof-of-Concept (POC) is a preliminary version or a small sample that evaluates the &lt;strong&gt;feasibility&lt;/strong&gt; of an idea or concept. Its main goal is to show to its &lt;strong&gt;internal stakeholders&lt;/strong&gt;, such as engineers and investors, that a solution of the idea could be created and would work as intended. &lt;/p&gt;
&lt;p&gt;A MVP usually follows one or more POCs - let us continue with the acronym MMP.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Minimally Viable Product (MVP)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="MVP" src="../images/back-to-basics-mmp-mvp-poc-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Minimally Viable Product (MVP) is a new product that has only the core features needed to satisfy the demands of &lt;strong&gt;early adopters&lt;/strong&gt; and selected users, who can give &lt;strong&gt;feedback&lt;/strong&gt; for further improvement. Its purpose is to test the product concept with minimal resources, offering value to users, but missing the features needed for a marketable product and most importantly the need for funding.&lt;/p&gt;
&lt;p&gt;A MMP usually follows one or more MVPs - let us wrap up with the acronym MMP.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Minimally Marketable Product (MMP)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="MMP" src="../images/back-to-basics-mmp-mvp-poc-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Minimally Marketable Product (MMP) is a product that has enough features to be sold and offers comprehensive user experience. It satisfies the demands of a broader group of &lt;strong&gt;users&lt;/strong&gt; beyond early adopters, can be released, and &lt;strong&gt;marketed&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Usually, a market winning product is preceded by one or more MMPs. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thoughts? Do you agree?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="learning"></category><category term="101"></category></entry><entry><title>Technology Framework Monitor - Open Source Software Sync 20240510</title><link href="https://wsbctechnicalblog.github.io/azure-tfm-oss-sync-202400510.html" rel="alternate"></link><published>2024-05-10T00:00:00-07:00</published><updated>2024-05-10T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-05-10:/azure-tfm-oss-sync-202400510.html</id><summary type="html">&lt;p&gt;Shake Off the Dust: Our TFM Software Spring Cleaning!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The ongoing evolution of our Technology Framework Monitor (TFM) open-source project empowers us to expand our horizons in identifying end-of-life products and detecting engineering practice drift. In this latest update, we have performed tons of spring cleanups. Our next step involves adding support to detect drift from our engineering practices.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor/pull/31"&gt;Click here to peruse associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes as documented by Andreas Mertens encompasses three main changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eliminated Dead Weight&lt;/strong&gt;: Purged unused code, resolved null warnings, and adhered to naming conventions. Enhanced project stability by incorporating AssemblyVersion and AssemblyFileVersion attributes into the AssemblyInfo.cs file. Updated NuGet package versions for optimal performance. Implemented a more efficient method, sourced from StackOverflow, to delete repositories after processing. Streamlined code for clarity, eliminating unnecessary warnings and informational messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Optimization&lt;/strong&gt;: Introduced a new database view - ReportsScan - refining data presentation from the Reports table, excluding select fields and introducing Timestamp for enhanced insights. Transitioned smoothly from EntityFramework to EntityFrameworkCore, necessitating a revamp of the ProjectScannerSaveToSqlServer project. Enhanced the DbCore class to manage disposal and monitor open connections effectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fine-Tuning&lt;/strong&gt;: Empowered the main executable with parameters for single scan phases, enhancing flexibility. Addressed scenarios where repositories are disabled or not downloaded, providing clear console comments for troubleshooting. Improved performance by adding an index to the Reports table, optimizing the ReportScan view for faster access."&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our TFM product? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Why Metrics?</title><link href="https://wsbctechnicalblog.github.io/engineering-practices-metrics.html" rel="alternate"></link><published>2024-05-03T00:00:00-07:00</published><updated>2024-05-03T00:00:00-07:00</updated><author><name>Martin Lacey</name></author><id>tag:wsbctechnicalblog.github.io,2024-05-03:/engineering-practices-metrics.html</id><summary type="html">&lt;p&gt;Why should I be concerned about metrics as long as my code works?&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Set the Stage&lt;/h1&gt;
&lt;p&gt;No matter what stage of your career or size of business you are working with – and especially if you have aspirations of starting your own business or being partner in a startup, metrics are your key to success.  Let me explain why.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Teams collaborating driven by metric" src="/images/engineering-practices-why-metrics-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I first began software engineering, as a hobbyist – it was always about performance – how fast could what I built process the input and provide accurate output.  I would change the code, look for ways to optimize, and try again.  How could I tell I was moving in the right direction?  You guessed it – metrics.  It became a challenge of its own, to best my previous notions on good and fast logic – and how to use the latest capabilities of the language I was using (at the time, Rocky Mountain Basic – circa 1977).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Developing driven by metric" src="/images/engineering-practices-why-metrics-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At that early stage, I knew that I had to track my code – in terms of performance, size, and complexity.  As my career grew, I began to see the picture and importance broaden.  As I transitioned through different roles and sizes of engagements, projects and onto products – metrics became how measured our success at each and every phase of development.  It sets your team apart; it demonstrates your attention to detail and focus (and help to clarify what is important).
At WorkSafe BC, I am thrilled to see Metrics as a key factor in everything, every initiative and at every level within our Enterprise DevOps division.  As practitioner of SAFe (Scalable Agile Framework for the Enterprise), we have many teams working across various initiatives serving all aspects of the business and we use metrics to frame business benefit and track realization.&lt;/p&gt;
&lt;h1&gt;Metrics are the Key to Success&lt;/h1&gt;
&lt;p&gt;Let me list the Metrics I see in play, and why they are crucial to our collective success.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Performance Evaluation:&lt;/strong&gt; Metrics provide quantitative measures to evaluate the performance of software development processes, teams, and individual developers. They help identify areas of improvement and track progress over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Quality Assurance:&lt;/strong&gt; Metrics help assess the quality of software products by measuring factors such as code complexity, code coverage, defect density, and adherence to coding standards. This information enables teams to identify and address quality issues early in the development lifecycle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Management:&lt;/strong&gt; Metrics help in resource allocation by providing insights into project timelines, resource utilization, and budget management. They assist in identifying bottlenecks, optimizing workflows, and making informed decisions about resource allocation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Risk Management:&lt;/strong&gt; Metrics help identify and mitigate risks associated with software development projects. By tracking metrics related to project scope, schedule adherence, and budget, teams can proactively manage risks and avoid potential project failures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Process Improvement:&lt;/strong&gt; Metrics facilitate continuous process improvement by providing objective data to identify inefficiencies, optimize workflows, and implement best practices. They enable teams to measure the impact of process changes and make data-driven decisions to improve overall productivity and quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Communication and Transparency:&lt;/strong&gt; Metrics provide a common language for communication and collaboration among stakeholders, including developers, managers, customers, and other project stakeholders. They help foster transparency by providing visibility into project progress, performance, and quality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall, metrics play a vital role in software engineering by providing objective data to evaluate performance, ensure quality, optimize resources, manage risks, drive process improvement, and facilitate communication and transparency among project stakeholders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Organization driven by metric" src="/images/engineering-practices-why-metrics-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you embrace and share the value of metrics, use them to demonstrate your ability to execute on all levels of delivery - collaborating and working to improve them with each team member and group you work with.  Rember to track the value returned on your metrics too; all metrics are not created or perform equally.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="tips"></category><category term="engineering"></category><category term="code-quality"></category><category term="automation"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240405</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240405.html" rel="alternate"></link><published>2024-04-10T00:00:00-07:00</published><updated>2024-04-10T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-04-10:/azure-pipeline-blueprints-oss-sync-20240405.html</id><summary type="html">&lt;p&gt;Adding a new blueprint - webapp.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This open-source update adds the new &lt;strong&gt;webapp&lt;/strong&gt; blueprint to our collection of templates and blueprints. It can be used to build and deploy any web-based .Net application to be deployed as an Azure App Service.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/28"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New web-app blueprint, which we use for web &lt;strong&gt;apps&lt;/strong&gt;, web &lt;strong&gt;apis&lt;/strong&gt;, with &lt;strong&gt;Razor&lt;/strong&gt; or &lt;strong&gt;Blazor&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/wepapp/azure-pipeline-webapp-cd-stage.yml&lt;/strong&gt; - new&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-cd.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-ci.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-config.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-control.yml&lt;/strong&gt; - new. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/webapp/azure-pipeline-webapp-start.yml&lt;/strong&gt; - new.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Technology Framework Monitor - Open Source Software Sync 20240322</title><link href="https://wsbctechnicalblog.github.io/azure-tfm-oss-sync-20240322.html" rel="alternate"></link><published>2024-04-02T00:00:00-07:00</published><updated>2024-04-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-04-02:/azure-tfm-oss-sync-20240322.html</id><summary type="html">&lt;p&gt;The broader our scanning efforts, the more technical debt we uncover, enabling proactive resolution.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The ongoing evolution of our Technology Framework Monitor (TFM) open-source project empowers us to expand our horizons in identifying end-of-life products and detecting engineering practice drift. In this latest update, we have integrated &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops"&gt;Azure Pipeline&lt;/a&gt; referencing and exploration logic. Our next step involves adding support for NODE scans and automating Azure DevOps work item generation for identified issues.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor/pull/27"&gt;Click here to peruse associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes as documented by Andreas Mertens encompasses four main changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Addition of YAML and Classic Build pipeline scans.&lt;/li&gt;
&lt;li&gt;Incorporation of Classic Release pipeline scans.&lt;/li&gt;
&lt;li&gt;Resolution of a bug causing duplicate File records. Previously, the FileID for a file was mistakenly considered a hash code, leading to duplication. This has been rectified by using the Path to uniquely identify files in the repository.&lt;/li&gt;
&lt;li&gt;Identification and resolution of a database connection leak. The base (DBCore) of all connections has been made IDisposable, ensuring proper disposal once the connection's work is completed.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: A known issue with Classic Release pipelines, particularly regarding Artifacts, has been addressed in the code update. The auto-generated code from JSON contained a reference to internal information as a field, which has been removed for clarity and security.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our TFM product? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240322</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240322.html" rel="alternate"></link><published>2024-04-01T00:00:00-07:00</published><updated>2024-04-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-04-01:/azure-pipeline-blueprints-oss-sync-20240322.html</id><summary type="html">&lt;p&gt;Second update to complete the &lt;strong&gt;101&lt;/strong&gt; simplification.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This open-source update is minor, but aligns our NuGet-Package blueprint with the recent &lt;a href="https://wsbctechnicalblog.github.io/azure-pipeline-yaml-refactor-parameter-objects.html"&gt;Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240318&lt;/a&gt; simplifications. Now all blueprints are consistent!&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/27"&gt;Click here to view the associated Pull Request&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-cd-stage.yml&lt;/strong&gt; - replace the configuration variables with the &lt;code&gt;config&lt;/code&gt; object, which encapsulates an array of data structures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-cd.yml&lt;/strong&gt; - 
Replace the conditionals using &lt;code&gt;text&lt;/code&gt; stage names with &lt;code&gt;boolean&lt;/code&gt; stage validations for a simpler and less error-prone approach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-config.yml&lt;/strong&gt; - remove the stage names designated as &lt;code&gt;text&lt;/code&gt; and replace them with &lt;code&gt;boolean&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-control.yml&lt;/strong&gt; - instead of passing individual configuration variables, create an array of config &lt;code&gt;objects&lt;/code&gt; and pass it instead. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blueprints/nuget-package/azure-pipeline-nuget-package-start.yml&lt;/strong&gt; - change &lt;code&gt;suppressCD&lt;/code&gt; from false to true to facilitate self-service automation, allowing the injection of a placeholder config template which would break the continuous delivery (CD).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>DevOps Vancouver Meetup - March 26, 2024</title><link href="https://wsbctechnicalblog.github.io/meetup-devops-meetup-2024-03-26.html" rel="alternate"></link><published>2024-03-22T00:00:00-07:00</published><updated>2024-03-22T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-22:/meetup-devops-meetup-2024-03-26.html</id><summary type="html">&lt;p&gt;Recognizing effective DevOps teams and anchors&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently hosted an amazing in-person &lt;a href="https://www.meetup.com/devops-vancouver-bc-canada/events/299881836/"&gt;DevOps Vancouver Meetup&lt;/a&gt; on  March 26, 2024. Dive into &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:7178961872275091456/"&gt;Eduard Maievskyi's Comprehensive Report&lt;/a&gt; and &lt;a href="https://www.linkedin.com/posts/autimo_amazing-night-of-chats-networking-and-deep-activity-7178863991912325121-8f6g?utm_source=share&amp;amp;utm_medium=member_desktop"&gt;Autimo's insightful update&lt;/a&gt; for two fantastic event recaps!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/in/julian-subda-6269597/"&gt;Julian Subda&lt;/a&gt; grabbed my attention when he displayed the following image on his slides, reminiscent of the outstanding community session we hosted years ago in Victoria. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="DevOps" src="../images/meetup-devops-meetup-2024-03-26-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Knowing that we have made a positive impact always serves as a significant morale boost.&lt;/p&gt;
&lt;p&gt;When &lt;a href="https://www.linkedin.com/in/wills/"&gt;Will Sheldon&lt;/a&gt; presented &lt;strong&gt;Evolving a DevOps team&lt;/strong&gt;, one slide and the menti poll results caught my attention.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Team" src="../images/meetup-devops-meetup-2024-03-26-1.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I scanned through the characteristics, my immediate thought was of my team, Common Engineering. Upon sharing the slide with them, we collectively agreed, but also acknowledged the need to enhance our collaboration with the rest of our group. I am immensely proud of how our team has evolved into a vibrant, self-organized, self-managed entity, bursting with a thirst for learning and innovation.&lt;/p&gt;
&lt;p&gt;Next, the Menti poll results emerged, centered around the question: "&lt;em&gt;What is currently preventing your team from succeeding?&lt;/em&gt;"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Anchor" src="../images/meetup-devops-meetup-2024-03-26-2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The top three &lt;strong&gt;anchors&lt;/strong&gt; we are struggling with our engineers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Addressing &lt;strong&gt;technical debt&lt;/strong&gt; is crucial, but it's equally important to empower teams to resolve it without accumulating further debt, as I discussed in &lt;a href="https://wsbctechnicalblog.github.io/back-to-basics-dealing-with-technical-debt.html"&gt;Back to Basics: Dealing with Technical Debt&lt;/a&gt;. Do it right, not fast!&lt;/li&gt;
&lt;li&gt;Fear of change and failure is another anchor that is dragging progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;People&lt;/strong&gt; and &lt;strong&gt;Culure&lt;/strong&gt;, however, is the Achilles' heel. DevOps is &lt;strong&gt;80%&lt;/strong&gt; PEOPLE, &lt;strong&gt;15%&lt;/strong&gt; PROCESS, and &lt;strong&gt;5%&lt;/strong&gt; PRODUCTS! &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all an interesting and fun evening.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When will &lt;strong&gt;you join&lt;/strong&gt; us at the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vandouver Meetup&lt;/a&gt; and how can we improve the meetup? Thoughts?&lt;/p&gt;</content><category term="Events"></category><category term="devops"></category><category term="engineering"></category></entry><entry><title>Azure DevOps Pipeline Blueprints - Open Source Software Sync 20240318</title><link href="https://wsbctechnicalblog.github.io/azure-pipeline-blueprints-oss-sync-20240318.html" rel="alternate"></link><published>2024-03-20T00:00:00-07:00</published><updated>2024-03-20T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-20:/azure-pipeline-blueprints-oss-sync-20240318.html</id><summary type="html">&lt;p&gt;“&lt;em&gt;Constantly think about how you could be doing things better.&lt;/em&gt;” - Elon Musk.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We decided to align our internal blueprint updates with the cutting-edge templates provided by &lt;a href="https://github.com/WorkSafeBC-Common-Engineering"&gt;WorkSafeBC-Common-Engineering&lt;/a&gt;, an open-source project. This synchronization guarantees that you are always equipped with the most up-to-date enhancements and innovations from our team. Below is an overview of all the recent modifications. You can review the latest template changes in this closed &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/pull/25"&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Drop Samples&lt;/h1&gt;
&lt;p&gt;Sharing the samples we inject into our &lt;a href="https://azure.microsoft.com/en-us/products/devops/repos/"&gt;Azure Repos&lt;/a&gt; as part of our self-service automation has been linked with our blueprint efforts. However, it has become evident that this initiative has received minimal attention, provided limited value, and diverted our focus away from blueprint innovations. Consequently, I have taken the decisive step to remove these samples from our open-source repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.universal-artifact&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.generic-multiple-jobs&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.generic-single-job&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.azure-function&lt;/li&gt;
&lt;li&gt;AzureDevOps.Automation.Pipeline.Sample.nuget-package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need them, ping me!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;.NET 8&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;End-of-life (EOL) Roadmap&lt;/p&gt;
&lt;p&gt;&lt;img alt=".NET EOL" src="../images/azure-pipeline-blueprints-oss-sync-20240318-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anticipating the impending end of support for .NET 6 in November, we have taken proactive measures to elevate our open-source and internal blueprints to the latest version of .Net 8 by default, but will support .Net 6 as an option.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Simplifications&lt;/h1&gt;
&lt;p&gt;We have aligned all our blueprints with the &lt;a href="/azure-pipeline-yaml-refactor-parameter-objects.html"&gt;Navigating Azure DevOps Complexity: Harnessing Objects to Simplify YAML Template Parameter Management&lt;/a&gt; improvements and simplifications, which affected the following blueprints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/azure-function"&gt;azure-function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/nuget-package"&gt;nuget-package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... as well as the following templates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/generic-multiple-jobs"&gt;generic-multiple-jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2/tree/master/blueprints/generic-single-job"&gt;generic-simple-jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What else can/should/must we consider as part of our blueprints? Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Open Source Software (OSS)</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-oss.html" rel="alternate"></link><published>2024-03-11T00:00:00-07:00</published><updated>2024-03-11T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-11:/back-to-basics-oss.html</id><summary type="html">&lt;p&gt;Raising awareness of our open-source projects for knowledge sharing.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our open-source software (OSS) projects, &lt;a href="https://github.com/wsbctechnicalblog/wsbctechnicalblog.github.io"&gt;wsbctechnicalblog&lt;/a&gt;, &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;Azure DevOps Automation Pipeline Templates&lt;/a&gt;, and &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor"&gt;Technology Framework Monitor&lt;/a&gt;, are readily available on GitHub, and we are committed to their ongoing development whenever time and opportunities allow. The first OSS project and the most evident is our technical blog, serving as a platform where we share fundamental principles, insights, and advanced knowledge gathered throughout our bits and bytes journeys. We share whatever we feel is important to our fellow Agile, DevOps, and Software Engineering communities, fostering collaboration and continual learning.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Azure DevOps Automation Pipeline Templates&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html"&gt;Pipelines - Meet our second-generation app-type blueprints&lt;/a&gt; touches on the core rationale behind our investment in this OSS project. When tasked with creating a continuous delivery pipeline, soliciting input from 13 software engineers is akin to inviting a multitude of perspectives, potentially resulting in more than 13 different approaches. While this diversity underscores autonomy and fosters innovation, it can inadvertently divert our delivery teams from their primary obligation of consistently delivering functional code and value. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline status" src="/images/back-to-basics-oss-1.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moreover, the drift and sprawl of pipeline configuration snowflakes complicates reuse and inflates support and maintenance overheads and cost of ownership. Analogous to architectural blueprints, our standardized pipeline templates — both generic and application-specific — facilitate the swift and uniform creation of countless delivery pipelines. This approach champions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Using predefined pipeline templates, we ensure uniformity across our delivery processes. This consistency minimizes errors and discrepancies, fostering predictability and reliability in our software delivery lifecycle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardization&lt;/strong&gt;: Standardized pipeline blueprints establish a common framework for development teams to follow. This alignment streamlines collaboration, simplifies onboarding of new team members, and enhances overall efficiency by reducing the need for custom solutions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-Service Automation&lt;/strong&gt;: Using predefined pipeline templates empower us to create and delivery software development lifecycle &lt;a href="https://learn.microsoft.com/en-us/azure/devops/repos/?view=azure-devops"&gt;Azure Repos&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops"&gt;Azure Pipelines&lt;/a&gt;. Using self-service automation, teams can rapidly iterate on their development environment, reducing dependency on centralized resources and accelerating time to market.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: By integrating security best practices into our pipeline blueprints, we embed security measures directly into the software delivery process. This proactive approach helps identify and mitigate security vulnerabilities early in the development cycle, enhancing the overall resilience and robustness of our applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Callout" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPLORE&lt;/strong&gt; our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Automation.Pipeline.Templates.v2"&gt;Application-type CI/CD blueprint template&lt;/a&gt; OSS project, collaborate, and continuously improve the templates with us. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To get an insight into WHY we engineered these blueprints, HOW they evolved, and HOW we use them, please refer to the &lt;a href="/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; series. We are also working on a v2 blueprint cookbook, which we may self-publish this year - watch this space.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Technology Framework Monitor (TFM)&lt;/h1&gt;
&lt;p&gt;The Technology Framework Monitor project is a side project by &lt;a href="/pages/authors.html"&gt;Andreas Mertens&lt;/a&gt;, who wanted to help us find out the use of outdated versions of .NET that are used by solutions in hundreds of Azure Repos. The TFM product will go through and collect information on every project in an Azure Developer Operations organization, or repository, check the files inside, and then save the data collected into a Microsoft Standard Query Language (SQL) server database.&lt;/p&gt;
&lt;p&gt;Some features of the TFM product are to do a scan that will go through projects with different file extensions, get a file list, and store information in the SQL database. The file list information gathered can include which .NET version, .nuget package versions, npm package versions and more depending on the configuration settings. The data being published is stored in the SQL server database for analysis and reporting purposes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="TFM Observation" src="/images/back-to-basics-oss-2.png"&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In 2023, we were lucky to work with Andreas and two BCIT students, Daniel Chellapan and &lt;a href="https://www.linkedin.com/in/samuel-tjahjadi-952b03205/"&gt;Samuel Tjahjadi&lt;/a&gt;, on a special project to refactor and open-source the project, once again sharing our learnings and an OSS solution that serves as a pivotal tool to address several critical issues within software development, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Outdated Products&lt;/strong&gt;: Identify and flag end-of-life (EoL) technologies, such as out of support versions of .NET, across various solutions stored in Azure Repositories. By pinpointing these outdated products, development teams can prioritize updates and ensure they are leveraging the latest features, performance enhancements, and security patches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Debt&lt;/strong&gt;: Detection of technical debt allows teams to identify areas where shortcuts or temporary solutions have been implemented, leading to increased complexity and maintenance overhead. Addressing technical debt early helps prevent future development bottlenecks and ensures the long-term sustainability of software systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Poor Software Development Practices&lt;/strong&gt;: Through its scanning capabilities, TFM sheds light on poor software development practices, such as inconsistent naming conventions, out-of-support dependencies, and unhealthy branching strategies. By surfacing these practices, teams can implement corrective measures, enforce coding standards, and foster a culture of continuous improvement, ultimately leading to higher-quality software products.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Callout" src="/images/back-to-basics-batch-size-alert.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPLORE&lt;/strong&gt; our &lt;a href="https://github.com/WorkSafeBC-Common-Engineering/AzureDevOps.Technology-Framework-Monitor"&gt;Technology Framework Monitor&lt;/a&gt; OSS project, collaborate, and continuously improve the templates with us. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since then, we have to keep telling Andreas to add a technical enabler card to our team’s backlog, as he explores more innovations to improve the product, our software development lifecycle, and automation of technical debt. There is a plethora of fantastic ideas for enhancing TFM (Technology Framework Monitor). I will take a pause here and pass the baton over to Andreas to delve into these potential improvements further.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Handing over to &lt;a href="/pages/authors.html"&gt;Andreas Mertens&lt;/a&gt;, who will start blogging on this blog on these open source topics. He will lift and explore the bits and bytes under the bonnet! &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="oss"></category><category term="engineering"></category></entry><entry><title>Back to Basics: Dealing with Technical Debt</title><link href="https://wsbctechnicalblog.github.io/back-to-basics-dealing-with-technical-debt.html" rel="alternate"></link><published>2024-03-06T00:00:00-08:00</published><updated>2024-03-06T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2024-03-06:/back-to-basics-dealing-with-technical-debt.html</id><summary type="html">&lt;p&gt;Breaking Free: A Guide to Tackling Technical Debt Head-On&lt;/p&gt;</summary><content type="html">&lt;p&gt;Upon initial review of our &lt;a href="https://learn.microsoft.com/en-us/azure/devops/user-guide/what-is-azure-devops?view=azure-devops"&gt;Azure DevOps&lt;/a&gt; technical debt backlog, it became evident that we face a pivotal challenge in our pursuit of QUALITY and INNOVATION. Dealing with the seemingly impossible can be daunting for any DevOps product team. Similar to financial debt, addressing technical debt demands a well-defined strategy and commitment to implementation, leaving no space for compromise or excuses.&lt;/p&gt;
&lt;p&gt;To commence your technical debt remediation journey, consider the following steps:&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embrace the Reality and acknowledge the Problem&lt;/strong&gt; - Collaborate with your product owner, stakeholders, and team to establish a clear strategy for tackling technical debt head-on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Draw the Line and distinguish Bugs from Technical Debt&lt;/strong&gt; - Explore why bugs should not be mistaken for technical debt in the discussion on &lt;a href="/engineering-practices-why-bugs-are-not-technical-debt.html"&gt;Why Bugs are NOT Technical Debt&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Categorize Technical Debt&lt;/strong&gt; - Organize your technical debt into categories like Architectural, Automation, Billing, Code, Design, End-of-Life (EoL), External Component, Infrastructure, Operational, Product, Security, and Test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Prioritize Technical Debt&lt;/strong&gt; - Focus on addressing the most critical and valuable issues first to prevent compounding interest, leveraging an experienced panel or working group to collaboratively prioritize tasks. Should you tackle end-of-life software or known vulnerabilities first, considering their potential impact on tomorrow's headlines or the return on investment?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously Track Technical Debt&lt;/strong&gt; - Routinely review and archive technical debt that has lingered for over a year or two, keeping it accessible for reference but out of public view. If your product and users have tolerated it for this long, its impact is likely minimal. We have adopted a similar strategy for shelving "would-be-cool" features from cluttering our product backlog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Invest in Automated Solutions&lt;/strong&gt; - Empower your engineers with automation tools to detect, comprehend, and mitigate technical debt efficiently. Consider initiatives like our AI Software Sentinel experiments, paving the way for proactive identification and resolution of potential issues through artificial intelligence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sentinel Mascot" src="/images/back-to-basics-dealing-with-technical-debt-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;How are you dealing effectively with your technical debt?&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="azure-devops"></category><category term="engineering"></category></entry></feed>