<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>- Posts</title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/posts.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2022-01-11T00:00:00-08:00</updated><entry><title>The problem with big batches</title><link href="https://wsbctechnicalblog.github.io/the-problem-with-big-batches.html" rel="alternate"></link><published>2022-01-11T00:00:00-08:00</published><updated>2022-01-11T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-11:/the-problem-with-big-batches.html</id><summary type="html">&lt;p&gt;Improve the predictability of delivering business value by reducing the utilization rates&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Big batch" src="../images/batch.png"&gt;&lt;/p&gt;
&lt;p&gt;We are learning how to transform organizational culture from focusing on measuring and tracking &lt;strong&gt;outputs&lt;/strong&gt; to focusing on measuring and tracking &lt;strong&gt;outcomes&lt;/strong&gt;. Immature practices tend to focus on measuring and tracking outputs for the simple reason that outputs are much easier to measure and track. Traveling along the trajectory of the least resistance, our need to &lt;strong&gt;reduce uncertainties&lt;/strong&gt; and &lt;strong&gt;increase predictability&lt;/strong&gt; is leading us to latch onto whatever is immediately available for measuring and tracking.&lt;/p&gt;
&lt;p&gt;However, we slowly but surely learn that outputs almost never correlate to or map on to outcomes. For example, if we are measuring and tracking number of lines of code that a software development team produces in a unit of time, we will have hard time proving that the more lines of code the team produces, the better the outcomes.&lt;/p&gt;
&lt;p&gt;Similar reasoning applies to measuring and tracking number of work items completed, number of user story points delivered, number of stories closed, number of features shipped, and so on.&lt;/p&gt;
&lt;p&gt;If we agree that outcomes matter far more than outputs, we are faced with the challenge: how do we measure outcomes?&lt;/p&gt;
&lt;h2&gt;Business value&lt;/h2&gt;
&lt;p&gt;A useful &lt;strong&gt;Key Performance Indicator (KPI)&lt;/strong&gt; for measuring the outcomes is often referred to as &lt;strong&gt;business value&lt;/strong&gt;. What is business value?&lt;/p&gt;
&lt;p&gt;Maybe it’s easier to say what business value is not. For example, it is clearly obvious that number of lines of code produced in the unit of time cannot by any stretch of imagination be viewed as being business value. Same goes for number of work items completed, number of user story points completed, and so on.&lt;/p&gt;
&lt;p&gt;Business value needs to be associated or correlated with measurable impacts. Such as, for example, improved customer satisfaction. Or increased revenue stream. Or improved profit margins. Or reduced cost of doing business. Or enhanced reputation on the market.&lt;/p&gt;
&lt;h2&gt;Delivery of Business Value&lt;/h2&gt;
&lt;p&gt;Once we set our sights on delivering business value, we naturally strive to maximize the throughput of said value. If a little bit of business value is desirable, then naturally more business value is much more desirable.&lt;/p&gt;
&lt;p&gt;Now, that way of thinking could turn into a slippery slope. And it all has to do with &lt;strong&gt;batch sizes&lt;/strong&gt;. Humour me for a few moments.&lt;/p&gt;
&lt;p&gt;Sizeable business value immediately suggests a big chunk of work. A big chunk of work immediately suggests big risk. But since we’re talking value, the risk may be worth taking, after all.&lt;/p&gt;
&lt;p&gt;And so, we go back to the problem of increasing predictability. Predictability is tightly coupled with the uncertainty of “when will desired business value be delivered?” No one has the crystal ball, and since we live in the world riddled with &lt;strong&gt;V&lt;/strong&gt;olatility, &lt;strong&gt;U&lt;/strong&gt;ncertainty, &lt;strong&gt;C&lt;/strong&gt;omplexity, and &lt;strong&gt;A&lt;/strong&gt;mbiguity (&lt;strong&gt;VUCA&lt;/strong&gt;), we know that predictability is a tricky proposition.&lt;/p&gt;
&lt;p&gt;Knowing that, how do we commence work needed to deliver business value? We tend to &lt;strong&gt;maximize resource utilization&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Where is the problem in that? The problem is potentially twofold.&lt;/p&gt;
&lt;h2&gt;Are big batches chockful of value?&lt;/h2&gt;
&lt;p&gt;One assumption when maximizing the business value is that loading up various features and functionality into a single batch means that we’re expecting customers to find everything we deliver in a big batch valuable.&lt;/p&gt;
&lt;p&gt;That is a risky assumption. Without receiving customer feedback, we cannot be sure if the functionalities and features we delivered are being perceived as valuable by the customers.&lt;/p&gt;
&lt;p&gt;And because customers will get presented with a big batch of changes, it will be difficult at that point to collect much needed, precise feedback. The change is overwhelming.&lt;/p&gt;
&lt;p&gt;More likely than not, some of the features and functionality delivered in the big batch will not make any impact (some sources quote that around 60% of big batches contain dubious value, on average). Which, in the final analysis, reads as waste.&lt;/p&gt;
&lt;p&gt;Not everything shipped in the big batch is going to be valuable to the customers. That being the case, why bother cramming so much assumed value in?&lt;/p&gt;
&lt;p&gt;We may spend some time in our office daydreaming about the features and functionalities our customers may find valuable. But without shipping those hypothetical features and functionality into customers’ hands and collecting feedback from them, we have no way of knowing.&lt;/p&gt;
&lt;h2&gt;Is high utilization rate the quickest way to deliver value?&lt;/h2&gt;
&lt;p&gt;It may make sense to organize the system in such a way that all resources at our disposal are utilized to the maximum. Never a dull moment may appear as the most prudent way to go. After all, we are employing top shelf experts and products, tools, and platforms. Why not take advantage of that phenomenal potential, and go full bore when creating business value?&lt;/p&gt;
&lt;p&gt;That approach, as common-sense as it appears to be, poses certain challenges. The nature of work in a fully loaded organization is such that it results in a lot of &lt;strong&gt;wait time&lt;/strong&gt;, instead of resulting in a lot of &lt;strong&gt;work time&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is for that reason that it is not recommended to strive toward a fully loaded organization.&lt;/p&gt;
&lt;p&gt;Value stream delivery crews quickly recognize this problem (too much idling time in a fully loaded organization). It is not difficult to spot long wait times. To deliver almost any change, the requesting teams are instructed to “take a number” and patiently wait for their number to be called.&lt;/p&gt;
&lt;p&gt;Another problem with that arrangement is related to measuring and tracking. Most tools and practices are geared toward only measuring the &lt;strong&gt;work time&lt;/strong&gt;. None of the existing processes seem keen on capturing and tracking &lt;strong&gt;wait times&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That bias gives a skewed perspective on how the work is progressing. In the end, the entire operation gets perceived as being &lt;strong&gt;extremely unpredictable&lt;/strong&gt;, because wait times don’t prominently figure in the tracking reports. Everyone’s eyes seem to be glued to tracking the time spent working, not tracking time spent waiting.&lt;/p&gt;
&lt;p&gt;We see that high utilization rates create a lot of speed bumps in the process (everyone is fully loaded; requests need to wait for their turn). Those speed bumps contribute to the unpredictability of the delivery. High utilization rates are not the best way for the quickest delivery of desired value.&lt;/p&gt;
&lt;h2&gt;Dealing with unpredictability&lt;/h2&gt;
&lt;p&gt;Unpredictability of delivery is highly undesirable. How do we deal with that?&lt;/p&gt;
&lt;p&gt;We ask people who work in a fully loaded system to give us &lt;strong&gt;estimates&lt;/strong&gt;. The thinking is that precise estimates will enable us to better predict when will the desired business value be shipped to the customers.&lt;/p&gt;
&lt;p&gt;When we ask for estimates, what we mean is estimates of &lt;strong&gt;effort&lt;/strong&gt;, not of the wait time. However, seeing how unpredictable wait times are in a fully loaded system, estimates of effort cannot deliver any reasonable degree of predictability. We often hear “your guess is as good as mine” when asking some team to tell us when will the value be delivered. The team is not being difficult when they reply in that fashion; they are merely signaling the undeniable fact that wait times in a fully loaded system are grossly unpredictable.&lt;/p&gt;
&lt;p&gt;And if we switch the focus and ask the teams to estimate the wait times instead of estimating the effort, that would be a losing proposition, because no one can estimate that with any degree of accuracy.&lt;/p&gt;
&lt;p&gt;This impasse creates problems. We expect teams to provide estimates and in that way, we put them between the rock and the hard place. Teams know that, due to the nature of working in a fully loaded system, whatever estimate they come up with, will be incorrect. That knowledge damages psychological safety and erodes the trust in the organization.&lt;/p&gt;
&lt;p&gt;Estimating the effort needed to deliver business value in a fully loaded system is therefore poor person’s attempt to achieve predictability and minimize/eliminate uncertainty. As such, it always delivers poor results.&lt;/p&gt;
&lt;h2&gt;What’s the solution?&lt;/h2&gt;
&lt;p&gt;The only leverage point for reducing uncertainty and increasing predictability lies in &lt;strong&gt;reducing the utilization rates&lt;/strong&gt; in the system.&lt;/p&gt;
&lt;p&gt;What is achieved by reducing the utilization rates (i.e., by avoiding setting up a fully loaded system)? Reduction in the utilization rates increases the &lt;strong&gt;flow through the system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How do we reduce the utilization rates? By reducing the batch sizes!&lt;/p&gt;
&lt;p&gt;Instead of daydreaming of building and delivering a big splash product that will woo the market, it is advisable to switch focus on very small hypotheses. Each small hypothesis proposes hypothetical value that we can swiftly deliver, probe, and test on the market.&lt;/p&gt;
&lt;p&gt;By following that model, we preempt the unpleasant question “when will it be done?” If we are releasing in very short bursts (almost daily), no one will have the time to stop and ask for estimates. Why? Because we’re too busy working, delivering value.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="eliminate-waste"></category><category term="agile"></category><category term="devops"></category><category term="no-estimates"></category></entry><entry><title>Make yourself interruptible</title><link href="https://wsbctechnicalblog.github.io/make-yourself-interruptible.html" rel="alternate"></link><published>2022-01-05T00:00:00-08:00</published><updated>2022-01-05T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-05:/make-yourself-interruptible.html</id><summary type="html">&lt;p&gt;Adopt humble approach when creating software products by making yourself open to interruptions&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Interrupt" src="../images/Interrupt.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's take one simple example: suppose I'm a programmer writing code and I use Notepad to do it. I can lock myself in my office and keep writing code in the Notepad for hours without being interrupted. I'm a professional programmer and I know what I'm doing, right?&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade from Notepad to a sophisticated code editor. If I continue writing code the way I used to do with Notepad, I will start getting interrupted. Why? Because sophisticated code editors are opinionated and will push back if I attempt to write syntactically incorrect code. Notepad, on the other hand, couldn't care less if the code I wrote is correct or not.&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade to an even more sophisticated code editor that on every diff runs all tests in the background. The moment any test fails, the editor interrupts my coding session and demands that I fix the failing test.&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade to an even more sophisticated code editor that on every diff runs all tests in the background, and when all tests pass it runs mutation testing. If there are any surviving mutants, it interrupts my coding session and demands that I kill all surviving mutants before I could continue writing code.&lt;/p&gt;
&lt;p&gt;All those interruptions are extremely desirable if we care at all about the quality of our work.&lt;/p&gt;
&lt;h2&gt;Are interruptions slowing us down?&lt;/h2&gt;
&lt;p&gt;Common sense thinking is prone to viewing interruptions as a speed bump. If I know exactly what I’m doing, what’s the point in me being interrupted? My flow will slow down, and the delivery will inevitably suffer.&lt;/p&gt;
&lt;p&gt;Few years ago, I went to IKEA and purchased a large bookshelf. Brought it home, unpacked it, and studied the instruction sheet. Since I’m an engineer by training, I was confident that I completely understood the prescribed process of assembling the shelf.&lt;/p&gt;
&lt;p&gt;I jumped into action and spent a few hours working on the big shelf without any interruptions. When I was finished and stood the shelf up, I realized that I have assembled it incorrectly – it looked the way a normal shelf would look when viewed in a mirror! Obviously, the shelf was not safe to use in such botched shape, so I had to disassemble it and then reassemble it following the instruction sheet very carefully.&lt;/p&gt;
&lt;p&gt;So, what was happening now that I realized the importance of respecting and following the instruction sheet to the letter? I started getting many, many interruptions while I was working on it. Those interruptions were slowing down the flow of work. I had to stop my work, put down the tools and the parts of the shelf I was holding in my hands, bring the instruction sheet up to my attention, and study it carefully before making the next decision. That took some extra time.&lt;/p&gt;
&lt;p&gt;However, overall, I finished the shelf in less than half the time it took me originally to assemble it, realize it was botched, disassemble it, and then waste time on few expletives.&lt;/p&gt;
&lt;p&gt;I now apply the same approach to creating software. I welcome interruptions. Any time I make a change to the code, I invite the system to run and let me know if my change broke anything. If it did, I reset the system to its previous working state, and try again. If it didn’t break anything, I continue confidently, knowing that the software I’m creating is always in its fully functional state.&lt;/p&gt;
&lt;p&gt;And that, in my experience, is the fastest way to work and release software.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="TDD"></category><category term="eliminate-waste"></category><category term="agile"></category><category term="devops"></category></entry><entry><title>DevOps value proposition</title><link href="https://wsbctechnicalblog.github.io/devops-value-proposition.html" rel="alternate"></link><published>2021-12-30T00:00:00-08:00</published><updated>2021-12-30T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-30:/devops-value-proposition.html</id><summary type="html">&lt;p&gt;DevOps introduces simultaneous focus on expectations, architecture, design, testing, building, releasing, and running the system&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="DevOps Yoda" src="../images/DevOps.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Software engineering consists of four distinct activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Envisioning software&lt;/li&gt;
&lt;li&gt;Creating software&lt;/li&gt;
&lt;li&gt;Releasing software&lt;/li&gt;
&lt;li&gt;Running software&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Traditionally, those four activities were compartmentalized into four distinct divisions/departments/teams. There are departments and teams that work on envisioning/hypothesizing and gathering the requirements. There is a hand-off from those upstream departments to the downstream software creation departments (consisting of software architects, modelers, designers, coders, and testers).&lt;/p&gt;
&lt;p&gt;There is a hand-off from those upstream software creation departments to downstream software release departments. Those departments consist of release engineers who are concerned with mitigating risks via proper change control processes.&lt;/p&gt;
&lt;p&gt;There is a hand-off from those upstream software release departments to downstream sustainment and reliability departments. Those teams are responsible for running the released software and keeping the lights on.&lt;/p&gt;
&lt;p&gt;The above arrangement has proven inefficient when it comes to competing on the mainstream market. Any change necessary for improving the quality of the service takes way too long, due to the gated phases and asynchronous “take a number” approach to attending to the process. Value stream delivery tends to be very choppy and unpredictable following the traditional software engineering model.&lt;/p&gt;
&lt;h2&gt;There is room for improvement&lt;/h2&gt;
&lt;p&gt;The proposed improvement arrived in the form of Extreme Programming, Agile Manifesto, and DevOps. In a nutshell, the proposed change starts with the suggestion to remove the above four silos and to combine all four distinct activities (envisioning, creating, releasing, and running) into a single activity. DevOps is a discipline that is based on doing all those four activities simultaneously. DevOps teams engage in envisioning, creating, releasing, and running software as part of their daily activities.&lt;/p&gt;
&lt;p&gt;What would be the advantages of this newfangled approach? The constraints of being expected to perform all four activities at once forces organizations to focus on reducing the average batch sizes and limiting the number of items being worked on at the same time (limited Work in Progress).&lt;/p&gt;
&lt;p&gt;As a result, it gets easier to ensure technical excellence and overall quality of the value delivered to the paying customers, because issues and errors caught tend to be small, with a very limited blast radius.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="eliminate-waste"></category><category term="devops"></category></entry><entry><title>How to tame your vacation email traffic</title><link href="https://wsbctechnicalblog.github.io/optimize-and-avoid-emails.md.html" rel="alternate"></link><published>2021-12-24T00:00:00-08:00</published><updated>2021-12-24T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-24:/optimize-and-avoid-emails.md.html</id><summary type="html">&lt;p&gt;How to ensure you are not confronted by hundreds of emails when you are back-to-work.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pick up from the &lt;a href="/optimize-and-track-emails.html"&gt;How to track (and optimize) your email traffic&lt;/a&gt; post, where we have discussed the tsunami wave of emails we receive and process every day. I would like to focus on avoiding the &lt;strong&gt;WASTE&lt;/strong&gt;ful first day back at work, when we spend hours processing hundreds of emails we received while we were away on a well-deserved vacation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why should we avoid the return-to-work flood of emails?&lt;/h1&gt;
&lt;p&gt;We have all had the terrifying welcome back to work experience, when we opened our favourite email client and stared at hundreds of emails seeking our attention. After hours of reading dated and often redundant emails, we have a brief sense of achievement when the inbox is finally empty - similar to sorting bottle tops into respective colours.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Emails" src="../images/optimize-and-avoid-emails-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, we just wasted hours of precious time we could have used for more productive work and often find ourselves behind schedule and stressed out after the first day of work. What is important to realize is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email that has been sitting in your inbox for days or weeks is most likely &lt;strong&gt;outdated&lt;/strong&gt; by the time you read it.&lt;/li&gt;
&lt;li&gt;Many emails are fire-and-forget type communication and will be &lt;strong&gt;rotting&lt;/strong&gt; by the time you read them.&lt;/li&gt;
&lt;li&gt;Users will automatically loop other users into their email thread if they realise you are out of office or touch base with you again when you return.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Every second you spend on outdated email is &lt;strong&gt;WASTE&lt;/strong&gt;!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Create a vacation rule&lt;/h1&gt;
&lt;p&gt;I recommend you create a vacation rule which automatically moves all inbound email to a bucket you can reference, not process, in future.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Rule" src="../images/optimize-and-avoid-emails-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This ensures that you can hit the ground running when you return to work, rather than sorting through a pile of junk for hours first.&lt;/p&gt;
&lt;p&gt;More importantly, it discourages you from "quickly" checking your email during precious family time in order to avoid the inbox from hell. To achieve a &lt;strong&gt;work-life balance&lt;/strong&gt; you must &lt;strong&gt;STOP&lt;/strong&gt; mixing the two!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Set the expectations in your out of office message&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Rule" src="../images/optimize-and-avoid-emails-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I go away for a longer period, I enable both the &lt;strong&gt;Archive OOO&lt;/strong&gt; email rule and create an out of office message. You will notice in the red text, that I set a clear expectation with senders that I will &lt;strong&gt;not&lt;/strong&gt; process their email.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Last, but not least, your phone is a phone!&lt;/h1&gt;
&lt;p&gt;Oh, how I hate my mobile device at times. It started as a handy text + phone device with a short-lived and huge battery in the 90's but evolved into an ever-lasting digital device that follows you to the end of the world, interrupts your precious family time, and encourages you to keep track of email.&lt;/p&gt;
&lt;p&gt;Please note that I have uninstalled business email, business collaboration, and social channels such as Facebook from my mobile "phone".&lt;/p&gt;
&lt;p&gt;Worst case you can drag your business phone and laptop with you on vacation, but intentionally leave your chargers at home. That gives you a few hours of distraction at worst.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;With that, I wish everyone a safe, warm, and festive holiday season, as well as a jump into a successful new year!&lt;/p&gt;
&lt;p&gt;C (see) U (you) in 2022!&lt;/p&gt;</content><category term="Posts"></category><category term="tips"></category></entry><entry><title>How to minimize queueing</title><link href="https://wsbctechnicalblog.github.io/how-to-minimize-queueing.html" rel="alternate"></link><published>2021-12-23T00:00:00-08:00</published><updated>2021-12-23T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-23:/how-to-minimize-queueing.html</id><summary type="html">&lt;p&gt;Adopt the humble approach to only work in smallest possible batches with limited work-in-progress&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Queue" src="../images/queue.png"&gt;&lt;/p&gt;
&lt;p&gt;In my previous post &lt;a href="https://wsbctechnicalblog.github.io/flow-of-work.html"&gt;Systems thinking and the flow of work&lt;/a&gt;, I tried to describe the sluggish/unpredictable software delivery caused by queueing and looping. Adding speed bumps introduces unwanted wait time that is exacerbated by frequent requests for retries. A gated phase, a quality inspection gate, often finds fault with proposed changes and asks the authoring team to try again. Those retries add significant amount of waste to the process.&lt;/p&gt;
&lt;p&gt;How to avoid such unwanted delays? There are a few ideas that may help:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Insist on getting clear expectations&lt;/li&gt;
&lt;li&gt;Insist on vertically slicing the expected delivery&lt;/li&gt;
&lt;li&gt;Insisting on starting together, working together, finishing together&lt;/li&gt;
&lt;li&gt;Insist on smallest possible batches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s examine these ideas.&lt;/p&gt;
&lt;h2&gt;Insist on getting clear expectations&lt;/h2&gt;
&lt;p&gt;While it may seem obvious that clear expectations are needed, every now and then we receive expectations that are somewhat muddled. By muddled I mean not carefully thought through. The rationale is that it is quicker to start building the hypothesized solution than it is to spend extra time hammering out the expectation.&lt;/p&gt;
&lt;p&gt;The problem is that oftentimes it is a false math to assume so. Rushing to implement a half-baked expectation tends to result in bloat. We will see later in this article why is bloat extremely wasteful.&lt;/p&gt;
&lt;p&gt;Another problem is that muddled expectation may send us off on a wild geese chase. I will use an example from my career to illustrate that pattern (names will be withheld to protect the innocent):&lt;/p&gt;
&lt;p&gt;I was once consulting for a large organization whose Credit department was experiencing series of issues. To cut the long story short, that department somehow could not properly balance their books. The ledger was for some reason always off, and that was causing a lot of churn.&lt;/p&gt;
&lt;p&gt;I did initial interview with stakeholders and was informed that the reason the processing in their department was often so wrong boiled down to inadequate software system they were using at that time, as well as down to staff errors – ‘fat fingers’ data entry mistakes and so on. They would like me to help them design better software solution that would preclude human data entry errors and also set the books straight.&lt;/p&gt;
&lt;p&gt;Makes sense. So, I started drilling deeper into the business domain, to understand business policy rules and document the expectations with regards to various use cases.&lt;/p&gt;
&lt;p&gt;That’s where the muddled expectations started entering the picture. I was getting several half-baked, imprecise use cases. Such muddled use cases could not be tested, and as such could not be automated.&lt;/p&gt;
&lt;p&gt;Naturally, I pressed upon the stakeholders to provide me with clearer expectations. To which I started receiving annoyed responses, such as “I don’t know; you are the software developer, you figure it out!”&lt;/p&gt;
&lt;p&gt;It was clear to me, at that point, that the entire project was a no go, and I gracefully bowed out.&lt;/p&gt;
&lt;p&gt;Moral of the story – insisting on crisp and clear expectations is necessary. Without it, we cannot even know if it makes sense to continue being engaged on the project.&lt;/p&gt;
&lt;h2&gt;Insist on vertically slicing the expected delivery&lt;/h2&gt;
&lt;p&gt;Once the expectation is clearly stated, it is important to abstain from overbidding. Instead of knee-jerk agreeing to implement the expectation as it is stated, it is more prudent to investigate the possibility of vertically slicing it. Commit to delivering the solution iteratively, rather than in one big fell swoop. Explain to the stakeholders that the intention is to engage them in swift and frequent delivery. Such approach is needed to gather quick and valuable feedback from them.&lt;/p&gt;
&lt;p&gt;In my experience, stakeholders tend to appreciate such transparency and such proactive engagement. The upside is that it will give the delivery team much better chances of attaining predictive delivery of value.&lt;/p&gt;
&lt;h2&gt;Insisting on starting together, working together, finishing together&lt;/h2&gt;
&lt;p&gt;Once the expectation has been vertically sliced, abstain from assigning individual tasks to individual team members and asking them to scatter and work in parallel, in isolation. Instead, attempt to start as a whole team. Look into the vertically sliced expectation, decide which aspect of the implementation is of the highest priority, then get together and start working on it as a team. Every member who has the so-called ‘skin in the game’ should be present from the get-go. This is important so that every member has a full understanding and a complete grasp of what is going on in the process of building.&lt;/p&gt;
&lt;p&gt;Continue working in such fashion. The ideal model is synchronous collaboration, sometimes called ‘keyboardless programming’. In this mode of collaboration, decisions regarding the design of the system are made by team members who are &lt;strong&gt;not&lt;/strong&gt; sitting at the keyboard. The implementation of those decisions is performed by the so-called “driver”. Another important aspect of such mode of working is &lt;strong&gt;continuous rotation&lt;/strong&gt;; every 5 minutes or so, the driver gets up and joins the navigators, while someone else steps in and becomes the driver.&lt;/p&gt;
&lt;p&gt;Eventually, the mob programming session described above reaches the stage where all team members agree that the solution has reached the “shippable state”. At that point, they finish together and move on to working on the next slice.&lt;/p&gt;
&lt;h2&gt;Insist on smallest possible batches&lt;/h2&gt;
&lt;p&gt;The secret sauce to avoiding queuing and retries is in the art of crafting small batches. Let’s first define what is meant by ‘batch’:&lt;/p&gt;
&lt;p&gt;A batch is defined as a group of items that move together from one step to the next step in the process.&lt;/p&gt;
&lt;p&gt;What is meant by ‘item’? Typically, an item denotes a unit of change that affects the system. It could be a code diff or a configuration diff.&lt;/p&gt;
&lt;p&gt;The more of these items (i.e., diffs) we bundle up and push into the integration and delivery workflow, the larger the batch we must deal with.&lt;/p&gt;
&lt;p&gt;Consider a smallest possible batch: a single item comprising a single diff (such as, for example, a one-line correction in the code syntax). When such batch arrives for inspection, it is so light-footed and innocuous that it will be a breeze to approve.&lt;/p&gt;
&lt;p&gt;Compare that with a large batch that contains hundreds of items, each item consisting of dozens or even hundreds of diffs. Obviously, when such bloated batch arrives at the inspection gate, it will cause a lot of consternation. And rightly so. Alarm bells go off, red flags are raised, and the inspection crew now need to roll up their sleeves and pour over the minutia of that batch. They now have their work cut out for them, and it may take days, even weeks, until the batch either gets cleared (“good to go to the next gated phase”) or gets sent back for a retry (“better luck next time!”).&lt;/p&gt;
&lt;p&gt;And of course, such large batch necessitates long wait queuing times. While the inspection crew is heads down examining the bloated batch, nothing else is moving in the queue. We now have a serious bottleneck.&lt;/p&gt;
&lt;h2&gt;Benefits of small batches&lt;/h2&gt;
&lt;p&gt;There are numerous benefits of working in small batches. Here I will quickly list some of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduction in errors&lt;/li&gt;
&lt;li&gt;Faster feedback&lt;/li&gt;
&lt;li&gt;Reduction in deployment risk&lt;/li&gt;
&lt;li&gt;Increase in frequency of delivering customer value&lt;/li&gt;
&lt;li&gt;Reduction in mean time to recover in case of defects&lt;/li&gt;
&lt;li&gt;Improvement in psychological safety
​​​​​​​&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small batches introduce small, localized changes. That approach reduces the risk of damaging the system operations, as the small change is contained, and the blast radius is quite limited.&lt;/p&gt;
&lt;p&gt;Customers also benefit as they get to enjoy the value sooner than they would if the teams worked with large batches.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="eliminate-waste"></category><category term="estimates"></category></entry><entry><title>Exploring the concept of mob-ownership</title><link href="https://wsbctechnicalblog.github.io/mob-ownership.html" rel="alternate"></link><published>2021-12-23T00:00:00-08:00</published><updated>2021-12-23T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-23:/mob-ownership.html</id><summary type="html">&lt;p&gt;We succeed or fail as a team (mob), not as individuals!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mob-programming, which is the art of an entire team working on the same thing, at the same time, in the same space, and at the same keyboard/monitor, has been on our radar for a while. My colleague &lt;a href="https://wsbctechnicalblog.github.io/author/alex-bunardzic.html"&gt;AlexB&lt;/a&gt; has been driving the software development approach with vigour, demonstrating a drop in &lt;strong&gt;WASTE&lt;/strong&gt; and surge of &lt;strong&gt;shared learning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mob programming" src="../images/mob-ownership-1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What about Mob-ownership?&lt;/h1&gt;
&lt;p&gt;You will find several posts on this blog that emphasize my loathing for &lt;a href="https://wsbctechnicalblog.github.io/tag/eliminate-waste.html"&gt;&lt;strong&gt;WASTE&lt;/strong&gt;&lt;/a&gt;, promotion for continuous learning, improvement, and experimentation, ownership of features from ideation to deprecation, and the courage to &lt;a href="/ooda-one-of-the-devops-genomes.html"&gt;&lt;strong&gt;FAIL&lt;/strong&gt;&lt;/a&gt; as one of the genomes of our healthy DevOps mindset.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Toxic" src="../images/mob-ownership-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The one thing we have not discussed yet, but makes me boil on a regular basis, is the art of toxic “finger pointing.” In other words: “&lt;em&gt;this is not my problem, it must have been caused by [X], in team (silo) [Y].&lt;/em&gt;” &lt;/p&gt;
&lt;p&gt;&lt;img alt="Finger-Point and Waste" src="../images/mob-ownership-2.png"&gt;&lt;/p&gt;
&lt;p&gt;It is another form of &lt;strong&gt;WASTE&lt;/strong&gt; and is extremely &lt;strong&gt;TOXIC&lt;/strong&gt; for things we value, such as collaboration, improvement, learning, and team-work.&lt;/p&gt;
&lt;p&gt;I therefore would like to propose &lt;strong&gt;mob-ownership&lt;/strong&gt;, which extends the concept of &lt;strong&gt;mob-programming&lt;/strong&gt; for people to collaborate to own, analyze, remediate, and learn from one challenge at a time. The challenge could be an experiment, proof-of-concept, program bug, a live site incident, an anomaly in telemetry, or a disagreement in guardrails that protect us from violation company policies or governance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Change “&lt;em&gt;this is not my problem, it must have been caused by [X], in silo [Y]&lt;/em&gt;" to "&lt;em&gt;this is our problem as a team, let us analyse and remediate.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By sharing and collaborating within a joint(mob)-ownership, we not only solve communication problems, enable decision making, avoid toxic politics and harmful context switching, but more importantly accept shared responsibility for every adventure. The “them and us” and associated “finger-pointing” fades away as we grow as a team, fueled by delighted end-users.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mob programming" src="../images/mob-ownership-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="quality"></category><category term="eliminate-waste"></category></entry><entry><title>Why do we need our common engineering team?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-2.html" rel="alternate"></link><published>2021-12-20T13:13:00-08:00</published><updated>2021-12-20T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-20:/common-engineering-journal-2.html</id><summary type="html">&lt;p&gt;Introducing the voice of reason and stewards of guardrails&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are T+74 calendar days into the journey of our EDO Common Engineering team and it is time to share and update our team journal, post 2. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changing the culture and mindset of engineers and business stakeholders of an organization based on stringent security policies, processes, and segregation of duties takes grit, tenacity, a thick skin, and lots of patience. It often feels like trying to change course of a massive oil-tanker travelling through heavy seas at full speed. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our EDO Common Engineering Team?&lt;/h1&gt;
&lt;p&gt;We want everyone to embrace a healthy DevOps mindset to empower development and operations collaboration and enable us, as an organization, to “delight our end-users”, most importantly our BC employers and workers, our WorkSafeBC workers, and IT engineers. It is important we shift the focus from creating technological marvels and snowflakes, to reducing waste, automate everything automable, and delivering value to our end-users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you boarded your last cross-Atlantic flight, were you interested in how the plane was assembled and which processes or products were used? I believe your response is "NO". What you cared about was the outcome, landing safe and on time at your destination.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, our goal is not just automation and enabling technology, but to deliver &lt;strong&gt;value&lt;/strong&gt;. Any innovation, transformation, or measured value is worthless, unless we can continuously deliver value to our end-users. It is important to understand that DevOps is not a silver bullet, nor is it a product we can buy and install. It is a mindset that enables people to &lt;strong&gt;collaborate&lt;/strong&gt; and follow a known &lt;strong&gt;process&lt;/strong&gt; enabled by &lt;strong&gt;products&lt;/strong&gt; to deliver &lt;strong&gt;value&lt;/strong&gt; to our end users.&lt;/p&gt;
&lt;p&gt;Also, instead of starting with a focus on our burning platform, our team agreed to focus on establishing an efficient system of highways, roads and railroads that enable both our business and engineering teams to focus on outcomes that delight our end-users. Automated circuit-breakers and smoke detectors monitor the health of our ecosystem, while we continuously improving outcomes.&lt;/p&gt;
&lt;p&gt;We need to empower engineers and products to integrate and shift-left security, create quality governance guardrails and documentation, leverage the Azure cloud to its fullest potential, encourage experimentation, and a tolerance for failure to fuel innovation.&lt;/p&gt;
&lt;p&gt;Noble goals, but back to our core question: "&lt;em&gt;WHY do we need the EDO Common Engineering team?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;As mentioned in &lt;a href="https://wsbctechnicalblog.github.io/common-engineering-journal-1.html"&gt;"what is origin of our common engineering team"&lt;/a&gt; we are the catalyst to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourage and enable everyone’s creativity, passion, purpose, and strengths!&lt;/li&gt;
&lt;li&gt;Empower all stakeholders to continuously deliver quality &lt;strong&gt;value&lt;/strong&gt; to our &lt;strong&gt;delighted end-users&lt;/strong&gt;, while stewarding our guardrails to promote &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;standardization&lt;/strong&gt;, and &lt;strong&gt;security&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Declare war on WASTE, such as cycle time, excessive meetings, complexity, and manual processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;WHAT is the goal of our 90-day Roadmap?&lt;/h1&gt;
&lt;p&gt;When we lit the candle of our team's first stage, our goal for the first 90-days after launch was to lay the foundations and ensure that we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A common and sound &lt;strong&gt;vision&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Vibrant &lt;strong&gt;collaboration&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An atmosphere encouraging &lt;strong&gt;failure&lt;/strong&gt;, &lt;strong&gt;learning&lt;/strong&gt;, and continuous &lt;strong&gt;innovation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A healthy &lt;strong&gt;DevOps&lt;/strong&gt; mindset - "&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users&lt;/em&gt;", by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we have a foundation, we plan to enable, foster, and steward &lt;strong&gt;COLLABORATION&lt;/strong&gt;, engineering &lt;strong&gt;PRACTICES&lt;/strong&gt;, and &lt;strong&gt;QUALITY&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;HOW have we fared after 74 days?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Falcon Heavy" src="../images/common-engineering-journal-2-5.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team took off like a &lt;a href="https://www.spacex.com/vehicles/falcon-heavy/"&gt;SpaceX Falcon Heavy&lt;/a&gt; and it is extremely difficult to cherry-pick from our running list of achievements linked to our backlog of &lt;strong&gt;culture&lt;/strong&gt;, &lt;strong&gt;collaboration&lt;/strong&gt;, &lt;strong&gt;innovation&lt;/strong&gt;, &lt;strong&gt;practices&lt;/strong&gt;, and &lt;strong&gt;kaizen&lt;/strong&gt; work. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BURNOUT!&lt;/strong&gt; - Although everyone loves to watch teams take off and perform at maximum capacity, we must ensure that we throttle back to avoid inevitable &lt;strong&gt;stress&lt;/strong&gt; and &lt;strong&gt;burnout&lt;/strong&gt; which will impact &lt;strong&gt;quality&lt;/strong&gt; and &lt;strong&gt;health&lt;/strong&gt; negatively.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will pick the top 3 on my personal favourites list and invite my colleagues to add another journal entry with their favourites.&lt;/p&gt;
&lt;h2&gt;LITE Self-Service Automation&lt;/h2&gt;
&lt;p&gt;The first preview of our self-service automation prototype which creates an Azure Repo, inserts an application-type specific sample, an Azure Pipeline based on an application-type CI|CD YAML-based blueprint, and queues the pipeline ... in a mere 8 seconds! &lt;/p&gt;
&lt;h2&gt;EDO Ce Common Engineering Center of Enablement&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We launched the collaboration program to dog|cat-food our working agreements, checklists, and ceremony portal for the &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies.&lt;/p&gt;
&lt;p&gt;The EDO Ce Center of Enablement triggers the &lt;strong&gt;Common Language&lt;/strong&gt;, &lt;strong&gt;Containerization&lt;/strong&gt;, and &lt;strong&gt;Crank-it-up-board v2&lt;/strong&gt; working groups, with a few more such as &lt;strong&gt;Healthy mindset for continuous delivery and release on demand&lt;/strong&gt;, &lt;strong&gt;Automate everything automatable for Azure DevOps governance printing&lt;/strong&gt; using &lt;a href="https://github.com/vinijmoura/Azure-DevOps"&gt;vinijmoura/Azure-DevOps&lt;/a&gt;, and &lt;strong&gt;Application-type CICD blueprint&lt;/strong&gt; rolling onto the launch pad.&lt;/p&gt;
&lt;h2&gt;WAR on Silos!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we started with the common engineering system in 2019, we experienced turbulence created by our siloed culture and stringent processes. The latter will raise its head again when we discuss how we &lt;strong&gt;improve our value streams&lt;/strong&gt; and &lt;strong&gt;innovate&lt;/strong&gt; supporting processes and products in future. &lt;/p&gt;
&lt;p&gt;Organizational silos exist for a number of reasons, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating &lt;strong&gt;isolated&lt;/strong&gt; groups with common interests and experiences.&lt;/li&gt;
&lt;li&gt;Creating working relationships, based on personal experiences - we typically favour working with colleagues with whom we have had positive experiences and &lt;strong&gt;isolate&lt;/strong&gt; ourselves from those that are associated with turbulence.&lt;/li&gt;
&lt;li&gt;Reorganizations that create a churn in the organizational culture - we often go "heads down" and focus on our work as the organization changes, &lt;strong&gt;isolating&lt;/strong&gt; ourselves from the noise and fallout.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For us to &lt;strong&gt;innovate&lt;/strong&gt; and be &lt;strong&gt;productive&lt;/strong&gt; we must eradicate &lt;strong&gt;isolation&lt;/strong&gt; and foster a culture based on &lt;strong&gt;trust&lt;/strong&gt;, &lt;strong&gt;exchange of ideas&lt;/strong&gt; and &lt;strong&gt;collaboration&lt;/strong&gt;. The reason I am smiling from ear to ear, is that our EDO Ce Center of Enablement and associated EDO Working Groups is enabling and demonstrating &lt;strong&gt;vibrant collaboration&lt;/strong&gt; with (in no specific order) Enterprise Architecture, Solution Architecture, Sustainment, Site Reliability Engineering, DevSecOps, Development, Cloud Operations, Innovation, Release Management, and EDO Common Engineering.&lt;/p&gt;
&lt;p&gt;The appetite and interest in continuous &lt;strong&gt;innovation&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Standardization&lt;/strong&gt;, and the removal of &lt;strong&gt;waste&lt;/strong&gt; and associated &lt;strong&gt;snowflakes / accidental complexity&lt;/strong&gt; is both exciting and refreshing! &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Feedback from my colleagues&lt;/h2&gt;
&lt;p&gt;Alex's favourite part and I quote: &lt;em&gt;"My favourite part of our first 90 days journey (which hasn't ended yet) is formulating clear expectations coming from the stakeholders. That creates clarity in my mind, which is very important to me."&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That is it for today. Ping me on &lt;a href="https://www.twitter.com/wpschaub"&gt;twitter&lt;/a&gt; if you have any questions. &lt;/p&gt;
&lt;p&gt;See you next journal update!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category></entry><entry><title>Why can I not just create a working group?</title><link href="https://wsbctechnicalblog.github.io/ceremony-focus-single-source.html" rel="alternate"></link><published>2021-12-17T13:13:00-08:00</published><updated>2021-12-17T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-17:/ceremony-focus-single-source.html</id><summary type="html">&lt;p&gt;It all depends on the context - [CoE] Working Group&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we launched our &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies, we triggered vibrant collaboration (which is good) and created confusion (which is bad) with working groups. In the &lt;a href="/ceremony-overview.html"&gt;An overview of our key collaboration ceremonies&lt;/a&gt; we described the difference between the ceremonies, the importance of the terms of reference (why are we here), and the process of creating one or more of the ceremonies.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is the difference between a working group and a CoE Working group?&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;working group&lt;/strong&gt; is a group of people working together to collaborate and achieve specified goals. The lifespan of a working group can last anywhere between minutes to years, although we strongly recommend &lt;strong&gt;the shorter the better&lt;/strong&gt; mindset. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are referring to this generic type of working group, you can spin one up whenever you need to.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;CoE working group&lt;/strong&gt; is sponsored by one or more Centers of Enablement, its terms of reference (vision, goals, hypothesis) a subset of and supporting the CoE terms of reference. In other words, there is a strong dependency between a sponsoring and other collaborating CoEs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are referring to the CoE working group, you need a CoE to spin up a short-lived CoE Working Group.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="F1" src="../images/ceremony-focus-single-source-0.png"&gt; &lt;/p&gt;
&lt;p&gt;Think of the CoE as the Ferrari racing team (long-lived) and the CoE Working Group  as the team that performs one of the pit stops (short-lived). The CoE cannot succeed without the CoE Working Group and relies heavily on their feedback to improve.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let us look at the CoE flow of value&lt;/h1&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-focus-single-source-1.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; - A Centre of Enablement (CoE) is created to assemble people from different disciplines to collaborate and enable our organization to shift across multiple disciplines to create a place where the highest standards are maintained. Every CoE is a coalition for change, made of these pillars: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide thought leadership, vision, and direction.&lt;/li&gt;
&lt;li&gt;Provide good practice and guardrails (aka governance).&lt;/li&gt;
&lt;li&gt;Establish collaboration with key stakeholders and other CoEs to abolish silos.&lt;/li&gt;
&lt;li&gt;Trigger working groups, dojos, and community of practices to implement research, education, and outcomes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; - All CoE synchronize on a regular basis to exchange learnings, failures, and ensure that as a whole, the CoEs bubble up to a common vision for the organization.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Group" src="../images/ceremony-focus-single-source-2.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; and &lt;strong&gt;(4)&lt;/strong&gt; - The CoE triggers one or more CoE working groups, each focused on a subset of the CoE goals, their backlogs linked to he CoE backlog, and their vision supporting the CoE's vision. Every CoE working group is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short-lived!&lt;/strong&gt; - The working group's lifetime is limited to the CoE's lifetime and a maximum of 2 program increments (10 weeks). See FAQ for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Laser focused!&lt;/strong&gt; - Focus on experiments, (dis)prove hypothesis, make recommendations, and minimal viable products.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A slice!&lt;/strong&gt; - Take baby steps, focus on a vertical slice, and do &lt;strong&gt;not&lt;/strong&gt; try to solve the world's problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Flow" src="../images/ceremony-focus-single-source-3.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5)&lt;/strong&gt; and &lt;strong&gt;(6)&lt;/strong&gt; - Information flows from the CoE Working Group back to the CoE, where it is vetted and consolidated into the CoE knowledgebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(7)&lt;/strong&gt; - Each CoE will synchronize and exchange the learnings from the working groups during the Co&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;What happens when a CoE is terminated?&lt;/h2&gt;
&lt;p&gt;When we terminate a CoE, all associated CoE Working Groups, CoE Dojos, and CoE Community of Practices are terminated as well. All learnings, failures, etc. are maintained for future reference.&lt;/p&gt;
&lt;h2&gt;What happens when a CoE Working Group's lifetime expires?&lt;/h2&gt;
&lt;p&gt;We terminate the working group, perform a retrospective, and &lt;strong&gt;optionally&lt;/strong&gt; spin up a new working group to complete the work, if and only if it still deemed valuable. THe intentionally limit the lifetime of working groups to keep them focused and energized.&lt;/p&gt;
&lt;h2&gt;What happens at a +1 Townhall?&lt;/h2&gt;
&lt;p&gt;We present the overall health of our collaboration, experimentation, and innovation ecosystem, as well as an update and optional demos by each active CoE.&lt;/p&gt;
&lt;p&gt;Any other questions?&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category></entry><entry><title>Systems thinking and the flow of work</title><link href="https://wsbctechnicalblog.github.io/flow-of-work.html" rel="alternate"></link><published>2021-12-15T00:00:00-08:00</published><updated>2021-12-15T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-15:/flow-of-work.html</id><summary type="html">&lt;p&gt;Speeding up software development may not speed up the delivery&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Yoda" src="../images/yoda.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everyone is busy and yet few things are ever finished.&lt;/em&gt; -Anonymous&lt;/p&gt;
&lt;p&gt;Delivery of the planned workload often appears unpredictable. Let’s examine what processes contribute to that lack of reliable predictability.&lt;/p&gt;
&lt;h2&gt;How reliable are the estimates?&lt;/h2&gt;
&lt;p&gt;If the expected delivery fails to materialize, usually the first suspect is poor estimates. If the team bids on a certain feature and estimates it at one timeboxed cycle (i.e., one iteration), but the feature gets delivered after three or four iterations, the team’s ability to accurately estimate is placed under suspicion.&lt;/p&gt;
&lt;p&gt;However, the team is only one component of a larger system, and the delivery workflow travels throughout the entire system. A team cannot reliably predict how will the workflow get processed throughout the system.&lt;/p&gt;
&lt;p&gt;A larger, more holistic system view is needed if we are to understand the overall delivery process. Without gaining such insights, we will continue to be somewhat mystified why is our workflow slow and unpredictable.&lt;/p&gt;
&lt;h2&gt;Ask developers to work faster&lt;/h2&gt;
&lt;p&gt;Because of the lack of the insight into the overall working of the entire system, the bottlenecks may get wrongly identified. What we see typically happen is development gets erroneously perceived as the bottleneck. The slowness of delivery gets attributed to the pace of software development. Management attempts to address these ‘bottlenecks’ by either hiring more staff, or by purchasing more advanced tools, or by retraining the staff, or the combination thereof.&lt;/p&gt;
&lt;p&gt;What that amounts to is basically asking software development staff to work faster. The thinking is that if the developers were to pick up the speed by certain level of magnitude (say, by 50%), then the value delivery will improve in speed by 50%.&lt;/p&gt;
&lt;p&gt;A good time to take a closer look into this line of reasoning.&lt;/p&gt;
&lt;h2&gt;Software delivery queues&lt;/h2&gt;
&lt;p&gt;Software development is always done in isolation. The reason is that changes done to the software code are always assumed to be somewhat faulty. It is much more likely that a change made to the source code is less than optimal. Because of that, we instigate processes in the form of delivery queues. These queues/quality gates are created to make sure software does not get released without inspection.&lt;/p&gt;
&lt;p&gt;Queues are, by their very nature, speed bumps. Their only job is to slow down the delivery.&lt;/p&gt;
&lt;p&gt;Why the need to slow down? As mentioned, we don’t trust raw changes to the software, and thus enforce points of inspection.&lt;/p&gt;
&lt;h2&gt;Software delivery loops&lt;/h2&gt;
&lt;p&gt;Putting speed bumps on the road to releasing software improves our chances of delivering quality products. However, to blindly assume a happy path and smooth sailing, where all changes get carefully inspected and vetted by the gatekeepers, would be overly optimistic and naïve. More likely than not, the inspection will catch some issues with the proposed changes. When that happens, the proposed change gets sent back to authors. This sendoff then creates a loop.&lt;/p&gt;
&lt;p&gt;It would also be overly optimistic to assume that it’s always a single loop. Not every request for a fix gets done to the gatekeepers’ satisfaction. We often see the loop (i.e., back to the authors) occur more than once. Try again!&lt;/p&gt;
&lt;h2&gt;Queues and loops eat up the cycles&lt;/h2&gt;
&lt;p&gt;The inspection process is never instantaneous. When the requested change arrives at the inspection queue, it is extremely unlikely that the gatekeepers responsible for inspecting the change are immediately available to look at it. They’re busy servicing other requests. The newly arrived change request must “take a number” and then wait in the queue for the number to be called.&lt;/p&gt;
&lt;p&gt;How long will the wait be? There is no definitive, precise answer to that question. It depends on many things, most of them completely unpredictable.&lt;/p&gt;
&lt;p&gt;The team who is planning to release their changes is now forced to leave their changes alone; they then either start idling (which causes the management to frown – low utilization rates), or they get to work on something else. The wait time spent in the queue is wasting precious cycles. Not only are the teams waiting, but customers are also waiting for the new functionality/feature/fix.&lt;/p&gt;
&lt;p&gt;What happens when the gatekeepers finally get to work on the request? They will spend some time examining it, and that time could be substantial. The outcome could be positive (i.e., everything a-okay, go to the next gated phase), or negative (i.e., “we found a defect, sending it back to the team who authored it and now need to fix it”).&lt;/p&gt;
&lt;p&gt;Now we have a loop. The team who authored the defect receives the request for fixing it, and places it on their queue (“take a number”). Since they are busy working on something else, the request needs to wait for the team to free up their time and attend to it.&lt;/p&gt;
&lt;p&gt;How long is that wait time going to be? There is no definitive, precise answer. It depends on many things, many of those things also unpredictable.&lt;/p&gt;
&lt;h2&gt;Will speeding up the development make a significant impact?&lt;/h2&gt;
&lt;p&gt;If we were to trace the time spent on handoffs (i.e., idling in the queue, waiting for the next available inspectors, reassigning the team to work on something else while they’re waiting) as well as trace the time spent on examining/inspecting the change, plus the time spent on looping back with requests to fix the discovered issues, we will notice that it tends to be of a higher order of magnitude larger compared to the time spent developing software.&lt;/p&gt;
&lt;p&gt;Since any time spent waiting in the queue is unproductive time, we should go ahead and label it as waste (waste of time). Waste is to be avoided, however in the current model of software development process, such waste seems unavoidable. Our challenge then is to try to reduce it. Reduce the unproductive time.&lt;/p&gt;
&lt;p&gt;The added stress caused by this mode of working causes another waste – cognitive dissonance that arises from the frequent context switching. The flow of the work gets interrupted, teams get frustrated, customers place additional pressure by complaining about the sluggish speed of delivery.&lt;/p&gt;
&lt;p&gt;Is it possible to speed up the development process? Definitely – there is always room for improvement. But is that going to make a significant dent in the overall speed of delivery? Probably not.&lt;/p&gt;
&lt;p&gt;The real improvement will happen when we focus on reducing the unproductive idling. Instead of investing time and effort in finding ways to speed up the development, it may be better to work on reducing the queue wait time, eliminating the loops, and minimizing the context switching stress.&lt;/p&gt;
&lt;p&gt;Once we remedy the queuing, inspecting, and looping time waste, speeding up the development process will start showing significant improvements. But not before the remedial intervention.&lt;/p&gt;
&lt;h2&gt;Would more precise estimating help?&lt;/h2&gt;
&lt;p&gt;The assumption that every development task can be precisely estimated still leaves the problem of unpredictable idling time caused by queues and loops. As we’ve seen, the grand total time spent on making the change and then seeing that change in production is quite unpredictable. It doesn’t really help knowing how long predictable activities will take if we have no way of knowing how long unpredictable activities will take.&lt;/p&gt;
&lt;h2&gt;What is the solution?&lt;/h2&gt;
&lt;p&gt;The only plausible solution to this challenge is to strive to reduce, minimize, or even eliminate queues and loops. If we get to the point where we do not need handoffs, there would be no need for queues caused by asynchronous inspection. Once that happens, estimating individual software development tasks will make more sense, as it will offer closer approximation of the delivery time.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="estimates"></category></entry><entry><title>How to track (and optimize) your email traffic</title><link href="https://wsbctechnicalblog.github.io/optimize-and-track-emails.md.html" rel="alternate"></link><published>2021-12-13T00:00:00-08:00</published><updated>2021-12-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-13:/optimize-and-track-emails.md.html</id><summary type="html">&lt;p&gt;How to stop the insane volume of emails and WASTE!&lt;/p&gt;</summary><content type="html">&lt;p&gt;As mentioned in &lt;a href="/common-engineering-journal-1.html"&gt;What is origin of our common engineering team&lt;/a&gt; we have declared war on &lt;em&gt;WASTE&lt;/em&gt; and are fighting that battle on multiple fronts. On the meeting frontline we are reducing the number of meetings, dropping off meetings when our presence adds no value or we add no value to the meeting, avoiding repetitive meetings, and enjoying a meeting free Friday. I recommend you try to optimize your meetings - it is extremely liberating q;-) &lt;/p&gt;
&lt;p&gt;But, I am drifting, because in this email I want to focus on the tsunami wave of emails we receive and process every day. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my case I receive an average of &lt;strong&gt;149 emails per day&lt;/strong&gt; - too much to process to remain productive! &lt;/li&gt;
&lt;li&gt;In response I send an average of &lt;strong&gt;21 emails per day&lt;/strong&gt; - time I could invest more productively!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what are we doing to combat the email &lt;strong&gt;WASTE&lt;/strong&gt;?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Prioritize (and ignore) incoming emails&lt;/h1&gt;
&lt;p&gt;I am using Outlook rules to separate and prioritize incoming email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Emails" src="../images/optimize-and-track-emails-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I process emails from most important to least important, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox&lt;/strong&gt; contains email sent directly to me (I am on the &lt;strong&gt;To&lt;/strong&gt; list).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inbox Mentions&lt;/strong&gt; contains email notifications generated by Azure DevOps where I am @ mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Mentions" src="../images/optimize-and-track-emails-2b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox PR&lt;/strong&gt; contains incoming email notifications generated by Azure DevOps where I need to review a Pull Request (PR).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="PR" src="../images/optimize-and-track-emails-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox AzDO&lt;/strong&gt; contains all the other email notifications generated by Azure DevOps services.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Mentions" src="../images/optimize-and-track-emails-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox CC&lt;/strong&gt; contains email sent to me indirectly (I am on the &lt;strong&gt;Cc&lt;/strong&gt; list).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="CC" src="../images/optimize-and-track-emails-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I focus on the first three when I have time to check my emails. The &lt;strong&gt;Inbox CC&lt;/strong&gt; seldom makes it onto my radar as I "assume" CC == FYI only.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Noise" src="../images/optimize-and-track-emails-0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emails I regards as noise:&lt;/strong&gt;
- Any email is sent to me as a &lt;strong&gt;Cc&lt;/strong&gt; - I assume it is for my information only.
- Any Azure DevOps work item notification where I am not explicitly @ mentioned - I assume it is for my information only.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Defer outgoing email&lt;/h1&gt;
&lt;p&gt;Ever sent an email and regretted it 10 seconds later? Well, I defer all emails I send that are not priority for 13 minutes. It give me time to tweak the content and reconsider sending it in the first place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="13min" src="../images/optimize-and-track-emails-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Qualifiers&lt;/h1&gt;
&lt;p&gt;Something we used in the ALM/DevOps Ranger era and which I have noticed making a comeback in our group the use of qualifiers in the email subject.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[INFO] This is an information-only email sample email subject&lt;/li&gt;
&lt;li&gt;[NOTIFICATION] This is an important notification email sample email subject&lt;/li&gt;
&lt;li&gt;[ALERT] Someone's hair is on fire sample email subject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a &lt;strong&gt;consistent&lt;/strong&gt; list of qualifiers, users can create email rules and take action on emails, based on their qualifier tag.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use more productive collaboration channels&lt;/h1&gt;
&lt;p&gt;Instead of email, consider using Microsoft Teams, Slack, or some other collaboration service that allows you to collaborate with your peers and stakeholders far more effectively. It avoids the misunderstandings and the frustrating and often time consuming conversations that split and drift from the conversation topic.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;25% email reduction challenge&lt;/h1&gt;
&lt;p&gt;I just challenged my team to reduce the email we send as individuals and as a team by 25% in 2022. We will track the challenge using a Search Folders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Challenge" src="../images/optimize-and-track-emails-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Email Sent by me in 2021 shows the total number of emails&lt;/strong&gt; I sent in 2021.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email Send by me in 2022 tracks the number of emails&lt;/strong&gt; I sent in 2022.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us walk through the process of creating one of these search folders.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right click on &lt;strong&gt;Search Folders&lt;/strong&gt;, scroll to bottom of list, and a choose &lt;strong&gt;Create a new search folder&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Custom Search" src="../images/optimize-and-track-emails-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Criteria&lt;/strong&gt; and set &lt;strong&gt;Sent To&lt;/strong&gt; to your email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sent To" src="../images/optimize-and-track-emails-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Advanced&lt;/strong&gt; tab and add two &lt;strong&gt;Sent&lt;/strong&gt; date filters to limit search folder to 2002.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dates" src="../images/optimize-and-track-emails-10.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click OK a few times to save all the changes you have made to the search folder.&lt;/li&gt;
&lt;li&gt;Right Click on the search folder, select &lt;strong&gt;Properties&lt;/strong&gt;, and change view to &lt;strong&gt;Show total number of items.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Count of items" src="../images/optimize-and-track-emails-11.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Simple! Now you can track the emails sent in 2021 and 2022.&lt;/p&gt;
&lt;p&gt;My hypothesis for the challenge is: "&lt;em&gt;I believe that by sending 25% less email the EDO Ce team will achieve a drastic reduction in incoming email and associated WASTE created as a bi-product of replies and split email conversations.&lt;/em&gt;" &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="2023" src="../images/optimize-and-track-emails-12.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C U in 2023 to disprove or prove my hypothesis q;-)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Anything else that helps you to manage your emails?&lt;/p&gt;</content><category term="Posts"></category><category term="tips"></category></entry><entry><title>Replace road maps with sea charts</title><link href="https://wsbctechnicalblog.github.io/replace-roadmaps-with-seacharts.html" rel="alternate"></link><published>2021-12-10T00:00:00-08:00</published><updated>2021-12-10T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-10:/replace-roadmaps-with-seacharts.html</id><summary type="html">&lt;p&gt;Adopt more modest planning strategy by treating the journey as if sailing trecherous waters&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/seachart.png"&gt;&lt;/p&gt;
&lt;p&gt;Roadmaps are a familiar way to represent a strategic vision. We start from our current position, we then pinpoint our strategic goal/destination, and then map our projected journey by placing strategic milestones to be hit along the way.&lt;/p&gt;
&lt;p&gt;Roadmaps are very useful in situations that are predictable and free of hazards. However, we live in the world that is not so predictable. The challenges are manifold, including global challenges such as the unpredictable pandemics, climate changes, economic turmoil, and so on. As our world is becoming more global and the blast radius of various changes keeps attaining ever wider reach, we are starting to recognize and acknowledge that we live in the so-called &lt;strong&gt;VUCA&lt;/strong&gt; world.&lt;/p&gt;
&lt;h2&gt;What is &lt;strong&gt;VUCA&lt;/strong&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Volatility%2c_uncertainty%2c_complexity_and_ambiguity"&gt;&lt;strong&gt;VUCA&lt;/strong&gt;&lt;/a&gt; is an acronym first used in 1987; it stands for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;olatility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U&lt;/strong&gt;ncertainty&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;omplexity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;mbiguity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we recognize and acknowledge that we operate inside such environment, we begin to realize that roadmaps are not that useful. For example, two years ago we may have mapped an ambitious roadmap which then got completely invalidated when the pandemic hit in March 2020. Less than a year ago we may have projected another roadmap that got perturbed by the unexpected regulation to provide paid sick leave for employees affected by COVID-19. And so on; examples of volatility and uncertainty abound.&lt;/p&gt;
&lt;h2&gt;Why do roadmaps tend to be imprecise?&lt;/h2&gt;
&lt;p&gt;Roadmaps assume that all factors affecting the desired outcome are understood and managed. If we chart the direction, from our current position, to the desired destination, we feel we can draw a road leading from here to there. We also feel that the road is well paved, smooth, with clearly mapped pit stops, landmarks, and milestones.&lt;/p&gt;
&lt;p&gt;In reality (as we’ve seen), &lt;strong&gt;VUCA&lt;/strong&gt; interferes without asking for our opinion or for our permission. It doesn’t even give us the slightest hint of warning. Volatility seems to appear randomly, creating uncertainty, complexity, and ambiguity.&lt;/p&gt;
&lt;p&gt;And because we’ve invested a lot of energy into producing the roadmap, the temptation to stick to it persists. We’d often rather ignore the warning signals around us than agree to cut our losses and ditch the precious roadmap.&lt;/p&gt;
&lt;p&gt;That bias leads to imprecision. By continuing on the now invalidated roadmap, we run the risk of not hitting our desired destination, and instead finding ourselves in an unfamiliar territory.&lt;/p&gt;
&lt;p&gt;When that happens, we need to act carefully. Here is an analogy: if we buy a car and sit down and drive around, after a while we may park somewhere, get out, and look around. If, at that point, we realize that we do not like the place where we’ve arrived, we should not invest in buying a new car. Instead, we should invest in making better plans that get us to the desired destination.&lt;/p&gt;
&lt;h2&gt;Why are sea charts more realistic?&lt;/h2&gt;
&lt;p&gt;When sailing a boat across the sea, we are not restricted by the rails or by the paved roads. We are not even restricted by the dirt roads. The sea is wide open for exploring.&lt;/p&gt;
&lt;p&gt;But the flexibility comes at a cost. Our sailing will be smooth if we catch the tail wind. But if we are counting and betting on the continuous presence of the tail wind, we’d be in for an unpleasant surprise. Because the weather conditions are volatile and unpredictable, we may experience head winds. Those types of winds are highly undesirable because they impede our progress by slowing us down and even pushing us off the planned course.&lt;/p&gt;
&lt;p&gt;Knowing that, we are better equipped to deal with the &lt;strong&gt;VUCA&lt;/strong&gt; situation. Yes, by agreeing to avoid charging ahead in the straight line we may appear to be losing track of our goals, but in reality we are rolling with the punches and making sure we persist in our efforts to reach our destination. That way, we never sacrifice the precision of our plans.&lt;/p&gt;</content><category term="Posts"></category><category term="strategy"></category><category term="planning"></category></entry><entry><title>What is origin of our common engineering team?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-1.html" rel="alternate"></link><published>2021-12-06T13:13:00-08:00</published><updated>2021-12-06T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-06:/common-engineering-journal-1.html</id><summary type="html">&lt;p&gt;Learning about the genesis of our EDO Common Engineering (EDO Ce) team&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I joined the Cloud Operations and Infrastructure team in 2018, I explored the variety of snowflakes decorating continuous integration and delivery pipelines, engineering practices, repositories, and solution architectures. While I agree with &lt;a href="https://en.wikipedia.org/wiki/Drive:_The_Surprising_Truth_About_What_Motivates_Us"&gt;Daniel Pink&lt;/a&gt; that knowledge workers have a need for autonomy to self-direct and manage their own lives, it must thrive within the context of engineering guardrails and organizational governance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Daniel Pink" src="../images/common-engineering-journal-1-2.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Autonomy&lt;/strong&gt; - Works exceptionally well in an environment where an engineers owns a feature from ideation to deprecation. Healthy DevOps mindset!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RED FLAG&lt;/strong&gt; - When ownership of a feature is transferred to a sustainment, maintenance, site reliability, or any other team it is pivotal to balance autonomy with consistency and standarization. NOT a healthy DevOps mindset!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I began to poke the hornet's nest in our architecture, development, operations, and security teams, which inspired guidance I contributed to the &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; book. I highlighted the risk of &lt;strong&gt;autonomy without guardrails&lt;/strong&gt;, especially in an environment plagued by organizational silos that stifle collaboration and where ownership is transferred from team to team. We will be reflecting on this in future journals, as our common engineering team is promoting for engineers to own a feature from ideation to deprecation.  &lt;/p&gt;
&lt;p&gt;On the 21st October 2019 I chose to consolidate the guidance, frequently asked questions and answers, knowledgebase, manifestos, and guardrails in an open wiki. The contents of the wiki is based on knowledge I gathered during collaboration, troubleshooting, breakfast and lunches, and informal meetups with fellow engineers in our atrium. &lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS" src="../images/common-engineering-journal-1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;To this date, the wiki remains to be our &lt;strong&gt;go-to&lt;/strong&gt; place for engineering processes, security, standardization, collaboration, as well as the manifestos that started it all.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS" src="../images/common-engineering-journal-1-4.png"&gt;&lt;/p&gt;
&lt;p&gt;A few months ago I became aware that there were plans to promote our informal common engineering system, to a more strategic common engineering team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;CeS Journal, entry #1&lt;/h1&gt;
&lt;p&gt;For our journal, let us fast-forward to 6th December 2021, which marks the 67th day of our EDO Ce team, which emerged from the informal and rebellious common engineering system like a mythical Phoenix.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Journal Countdown" src="../images/common-engineering-journal-1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;The EDO Ce team was launched with a leadership mandate to empower every engineer by standardizing practices and products, and stewarding guardrails to promote engineering consistency, enablement, security, and simplicity. &lt;/p&gt;
&lt;p&gt;We agreed that our formal goals are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable collaboration through active working groups, community of practices, and workshops.&lt;/li&gt;
&lt;li&gt;Steward guardrails (lightweight governance) to foster consistency, maintainability, security, and simplicity.&lt;/li&gt;
&lt;li&gt;Nurture the courage to experiment and fail, and breed a culture of continuous learning and innovation, and transparency.&lt;/li&gt;
&lt;li&gt;Empower engineering to embrace high DevOps performance.&lt;/li&gt;
&lt;li&gt;Foster the courage to tackle the status quo!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My personal leadership vision is to: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourage and enable everyone’s creativity, passion, purpose, and strengths!&lt;/li&gt;
&lt;li&gt;Declare war on WASTE, such as cycle time, excessive meetings, complexity, and manual processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While we are all inspired by the phenomenal pace of innovation with &lt;a href="https://www.spacex.com/"&gt;SpaceX&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Elon_Musk"&gt;Elon Musk's&lt;/a&gt; mantra to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make requirements less dumb&lt;/li&gt;
&lt;li&gt;Try to delete part of the process&lt;/li&gt;
&lt;li&gt;Simplify or optimize&lt;/li&gt;
&lt;li&gt;Accelerate cycle time&lt;/li&gt;
&lt;li&gt;Automate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next journal update, I will explore &lt;em&gt;"why we need the common engineering team?"&lt;/em&gt; and how we navigate the endless friction between the demand by engineering for full autonomy and the quest to create a common (common == all of ours) engineering mindset.&lt;/p&gt;
&lt;p&gt;See you next time!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category></entry><entry><title>Don’t debug; do TDD instead</title><link href="https://wsbctechnicalblog.github.io/dont-debug.html" rel="alternate"></link><published>2021-12-02T00:00:00-08:00</published><updated>2021-12-02T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-02:/dont-debug.html</id><summary type="html">&lt;p&gt;Avoid wasteful debugging activities by creating automated tests using TDD technique&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/debug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;When creating software, we often realize that the solution we’ve created does not behave the way we expect it to behave. We move into creating software with certain intentions (I call those intentions expectations). We materialize those expectations by writing code. If we are not careful when writing code, the code we wrote may end up having a few bugs. Hopefully, those bugs get identified before we release our changes to the customers. Unfortunately, that’s not always the case and sometime bugs get discovered in production, by the end users.&lt;/p&gt;
&lt;p&gt;Now we need to fix the bugs. And how do we do that? We debug. The debugging process is a technique for identifying bugs in the code.&lt;/p&gt;
&lt;p&gt;There are three different ways we debug code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We debug the code we wrote&lt;/li&gt;
&lt;li&gt;We debug the code someone else wrote and we have the source code&lt;/li&gt;
&lt;li&gt;We debug the code we wrote that uses the code someone else wrote but we don’t have their source code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In each of the above three cases, we aim at &lt;em&gt;slowing down&lt;/em&gt; the program execution. If we are not debugging, we activate the code by running the app (the program) and observing how the app behaves. If the app crashes, we have a serious defect somewhere. If the app doesn’t crash but behaves erratically (for example, displays incorrect information or takes us to an incorrect part of the app, or sends incorrect information to some other systems), we have detected that there is a bug somewhere (but we don’t know where). Now’s the time to hunt for that bug (or bugs). We typically hunt for it by slowing down the execution of the program.&lt;/p&gt;
&lt;p&gt;How do we slow down the execution? There are basically two ways to do that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We add new lines of code that print some values to the output (a console, or a printer)&lt;/li&gt;
&lt;li&gt;We add a breakpoint at some line of the code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Either of these tricks are intrusive; they make the cut into the body of the code so that the troubleshooting engineers could pry into the innards of the system.&lt;/p&gt;
&lt;p&gt;Furthermore, not only are debugging activities intrusive, but they are also wasteful. Nothing useful gets produced after spending some time debugging. The best we can hope for after a successful debugging session is to gain a better understanding of how the system works. But that understanding was achievable even without debugging, by simply reading the source code carefully.&lt;/p&gt;
&lt;p&gt;The worst part of any debugging activity is that it is 100% manual. We manually add new lines of code that output some values, or we manually add breakpoints to the code. When the program execution reaches the breakpoint, we then manually step through the code and manually inspect the produced values. Extremely tedious and error prone.&lt;/p&gt;
&lt;p&gt;As if that activity was not inefficient enough, an even worse part is that we cannot record the debugging session and reuse it later. If sometimes later the same or very similar bug returns, we need to repeat the same tedious manual process of debugging. Very wasteful, to say the least. Add to that the fact that it is literally impossible to estimate how long will any debugging session last (we are fishing for results, basically), and we get an extremely non-productive way of working (I’ve seen situations where teams sometimes waste days debugging).&lt;/p&gt;
&lt;h2&gt;How to avoid wasting time with debugging activities?&lt;/h2&gt;
&lt;p&gt;Any time we discover a bug, we realize that our expectation hasn’t been met but the running code. Rather than rolling up our sleeves and wasting time by getting immersed in tedious debugging activities (as described above), we should strive to work smarter, not harder.&lt;/p&gt;
&lt;p&gt;A much more productive approach to removing any bugs is to first formulate our expectation. If we do not take the time to formulate our expectation, we analyze program’s execution while keeping our expectation in our heads. It is of very little use being kept there. Instead, we should always insist to write our expectation down.&lt;/p&gt;
&lt;p&gt;When creating software, the best way to write our expectation down is to craft a test. A test is much simpler and easier to write than the implementation code. If done properly, a written test cannot contain any bugs (by ‘properly’ I mean the test must never contain any processing logic).&lt;/p&gt;
&lt;p&gt;Because we know exactly what we expect from the code when it runs, the test we wrote will fail (the bug in the implemented code will cause the program to fail to satisfy the expectation written in the test, which makes the test fail). Now we have the evidence that something is broken. And now is the time to work on fixing the breakage.&lt;/p&gt;
&lt;h2&gt;Why is this approach better than debugging?&lt;/h2&gt;
&lt;p&gt;To begin, notice how we did not have to make any incision into the implemented code. No need to add any output statements, nor do we have to enforce any breakpoints in the code.&lt;/p&gt;
&lt;p&gt;Secondly, we have explicitly expressed our expectation. This is useful not only in guiding our own thinking, but also facilitates successful teamwork. We can interrupt our programming session and let other team members pick up the slack and continue exactly from where we stopped, because they will be guided by the test we wrote.&lt;/p&gt;
&lt;p&gt;Thirdly, we did not have to slow the program execution down. We did not interrupt the flow. The test runs and executes the program and does not expect the program to run slower so that the automated test could examine it. That is a huge time saver and a big productivity boost.&lt;/p&gt;
&lt;p&gt;And lastly, our tests are recorded, and are repeatable to our hearts content. If later the same or a similar bug reenters the system, we don’t have to start from square one. We just let tests detect the breakage (fail early) and then use the tests to guide the process of fixing it. That way, we are safeguarded from allowing the breakage to bleed through into production.&lt;/p&gt;
&lt;p&gt;Writing tests to replace any debugging time wasters is the best strategy to safely grow our products. Everything we write must be fully testable. That way, bugs will be prevented from ever entering our codebase.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category></entry><entry><title>Plate-emptying is not the same as Done</title><link href="https://wsbctechnicalblog.github.io/plate-emptying.html" rel="alternate"></link><published>2021-11-23T00:00:00-08:00</published><updated>2021-11-23T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-23:/plate-emptying.html</id><summary type="html">&lt;p&gt;Maximizing the utilization of the time spent on creating software is a surefire way to drive the team into a brickwall&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/plateemptying.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Back in the heady days of dotcom boom (1999 – 2000) I was hired by an e-commerce startup company as their Chief Technology Officer. It was a sudden and large leap in my career, being mostly focused on creating software and only marginally involved in managing the process of software creation.&lt;/p&gt;
&lt;p&gt;To cut the long story short, dotcom boom quickly turned into dotcom bust, and by April 2001 the company went belly up. Ran out of funding. Sad story, but it was a great learning experience for us who got involved in that venture.&lt;/p&gt;
&lt;p&gt;My duties as CTO were to build the engineering department from ground up. My department got funded to open the office in downtown Vancouver (the US to Canadian dollar exchange rate at that time made the venture look much less expensive to the US investors). We procured office space, office furniture, workstations, servers, licensed all required software, and then the race was on to hire talented engineers.&lt;/p&gt;
&lt;p&gt;One of the reasons the company hired me as a CTO was due to the fact that at that time, I was teaching software development courses at the local BCIT college, and they rightly assumed I’ll be in the position to hire talented developers from the cohorts of my students.&lt;/p&gt;
&lt;p&gt;Their bet was sound, and it didn’t take me more than a few days to hire a team of five bright, talented engineers who had just graduated the course I was teaching.&lt;/p&gt;
&lt;h2&gt;Where things started going in the wrong direction&lt;/h2&gt;
&lt;p&gt;Being young and still inexperienced, I made a serious mistake in managing my department – I took a very wrong approach to planning. When abruptly growing from a hands-on engineer into a CTO role, I missed a few important stops along the way. I had no idea what does prudent planning entail. Back then I certainly wasn’t aware of that, but in hindsight…&lt;/p&gt;
&lt;p&gt;So, what did I do wrong? I took a long hard look into the limited budget that was given to my department, looked at the expenses (office lease, licensing costs, employee salaries and benefits), and decided to maximize the time that the budget was buying us. Obviously, we had a limited runway (a stretch of time needed before the operation becomes profitable, or at least starts pulling its own weight). My bosses were very strict about money (who could blame them) and that created the air of anxiety in my mind.&lt;/p&gt;
&lt;p&gt;Basically, I decided to tailor my plans in such way to make sure every team member is super busy every minute on the job!&lt;/p&gt;
&lt;p&gt;That was a terrible mistake. I deeply regret it to this day. But I didn’t know back then the value of slack time, the value of establishing the flow.&lt;/p&gt;
&lt;p&gt;But by foolishly insisting that every task and subtask my team members were performing be done in quickest possible time (i.e., I was pushing to minimize the touch-time), I only managed to frustrate the team and it started dying of attrition.&lt;/p&gt;
&lt;h2&gt;How would I do it today?&lt;/h2&gt;
&lt;p&gt;If I had a time machine and could travel back 22 years in the past, I’d do everything differently. To begin with, I would forget about making plans to maximize the utilization of team members’ time. Experience has taught me that maximizing the utilization of resources that are at our disposal has a strong counter-productive effect. A fully utilized highway defeats its purpose, as it quickly turns into a parking lot.&lt;/p&gt;
&lt;p&gt;The secret to productivity in knowledge-based economy is ample slack time. We need to be careful when defining ‘slack time’. The danger is that some may interpret ‘slack time’ as ‘wait time’. And that’s not what is meant by ‘slack time’.&lt;/p&gt;
&lt;p&gt;When we plan for maximal utilization of workers’ time, our goal is to create some semblance of an assembly line. I may start my day by taking on a list of to-do tasks. As I’m going down the to-do list, I am handling, one-by-one, each task defined for me. Where does the maximum utilization come in?&lt;/p&gt;
&lt;p&gt;The maximum utilization mindset comes in at the task level. Under the ‘maximum utilization/everyone busy all the time’ regime, I am expected to spend the least possible amount of time on my task and promptly hand it off to the next worker in line. That worker in turn is also expected to spend the least possible amount of time handing the task passed on to them (the touch-time). If any of the workers end up spending more time than projected on handling their task, that worker gets reprimanded for not pulling their weight.&lt;/p&gt;
&lt;p&gt;On the surface, that arrangement may seem very reasonable. We have hired the team, and the crew is doing their job as prescribed. If anyone takes longer than prescribed, it only means they are not fully qualified/fully skilled to perform the duties related to the task. They’re not pulling their weight.&lt;/p&gt;
&lt;p&gt;Working under such pressure results in what has been called ‘plate emptying’. As I work, I have a lot on my plate and my job is to empty my plate as quickly as possible. Doing that, I demonstrate to my employer how valuable, how eager I am to continue working and dealing with the next full plate.&lt;/p&gt;
&lt;p&gt;Why is plate-emptying bad? It creates a mindset and a culture where workers are rewarded when giving their work short shrift by declaring early completion for work that was only partly done. In the end, the crew trades quality for apparent velocity.&lt;/p&gt;
&lt;p&gt;And that’s exactly the culture I had created back in the year 2000 with my team. Wanting to maximize the utilization of expensive staff, I set up the system that openly rewarded skillful plate-emptying. Everything looked great at first, until we started getting hit by those terrible bugs and defects. Suddenly, the blindingly fast delivery (our great velocity) got destroyed by the catastrophic defects that were almost impossible to reproduce and fix. The crew was cutting corners left and right, striving to meet my approval and pat on the back (and a hefty year-end bonuses). Little did I know how much those bonuses would end up costing us.&lt;/p&gt;
&lt;p&gt;Of course, once the ugliness of severity-one incidents started hitting the team on an almost daily basis, people started looking for a new job. The team began dying of attrition. By that time, it was too late to try to find the intervention point that would turn the ship around. We started tanking.&lt;/p&gt;
&lt;p&gt;So, how would I have done it back then if I knew what I know today? To begin, I’d abandon trying to make plans so that everyone has their plates full during the project. I’d treat the project like a race with passing the baton. Rather than keeping an eye on individual runners, I’d make plans to only keep an eye on the baton.&lt;/p&gt;
&lt;p&gt;That way, I’d be able to better manage the progress of the delivery. If the team is delivering frequently (at least once per day, ideally many times per day), I don’t need to worry whether everyone on the team is pulling their weight. The only thing that matters is continuous delivery and continuous release, and if that activity turns into an uninterrupted flow, I need not concern myself with the resource utilization/slack time. That approach would relieve team members from the futile plate-emptying race and would realign their efforts with the business priorities. Meaning, we’d improve our chances of avoiding the fiasco that was caused by the team attrition.&lt;/p&gt;
&lt;p&gt;When team members realize that completing their task or subtask does not mean they’ve reached the “done” stage, they start paying closer attention to the quality of their work. A task/feature is done only when it is deployed and released to production and is causing zero bugs or defects.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="value"></category><category term="process"></category><category term="flow"></category><category term="lean"></category></entry><entry><title>How do we know what our customers value?</title><link href="https://wsbctechnicalblog.github.io/what-is-value.html" rel="alternate"></link><published>2021-11-17T00:00:00-08:00</published><updated>2021-11-17T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-17:/what-is-value.html</id><summary type="html">&lt;p&gt;We cannot know what customers actually value unless we expose them to our products and services. Here is how to do it in the most elegant way.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/buffett.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Common wisdom defines value as something that customers are willing to pay for. That line of thinking is applicable to repeatable processes, such as manufacturing.&lt;/p&gt;
&lt;p&gt;When it comes to digital product development, processes are not nearly as repeatable as they are in manufacturing. In the new product development, what customers might find valuable are often unclear. In such environment, we need a new definition of value. That definition must support the discovery of who our customers are and what their needs are.&lt;/p&gt;
&lt;h2&gt;Validated learning&lt;/h2&gt;
&lt;p&gt;Since value is not known upfront, we must engage in the process of learning what value for the customer might be (“Value is what customers actually want”, Womack and Jones, Lean Thinking).&lt;/p&gt;
&lt;p&gt;Another guiding principle for finding out value is by Gerald M. Weinberg: “Value is what people are willing to pay (or do) to have their requirements met.”&lt;/p&gt;
&lt;p&gt;The only plausible way to perform the process of validated learning is to adopt the &lt;a href="https://wsbctechnicalblog.github.io/hypothesis-driven-development.html"&gt;hypothesis-driven development&lt;/a&gt;. We do not push our ideas of what customers may be willing to pay for; instead, we switch to the pull model of working.&lt;/p&gt;
&lt;p&gt;Pull means doing work in response to the immediate downstream demand.&lt;/p&gt;
&lt;p&gt;To be able to gain insight into the downstream demand, we need to propose a hypothesis and immediately implement it. Once implemented, the modified product gets placed in customers’ hands, and we collect feedback by observing customer behaviour.&lt;/p&gt;
&lt;p&gt;That feedback, collected via implemented hypothesis, is then used to validate the hypothesis. It can either corroborate the hypothesis (in the sense of “yes, we were right, that change indeed delivers value to the customer”), or it can falsify the hypothesis (“it looks like we were wrong in assuming that the change will deliver value to the customer”).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The trick to learning rapidly is creating small cheap experiments that will inform a decision you’re trying to make” -Joshua Kerievsky&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Establish the pull model of working&lt;/h2&gt;
&lt;p&gt;Once the value has been identified, the delivery of the value should be mapped into steps. Each step must contribute, in a partial way, to the delivered value. It is vitally important that the necessary steps occur in tight sequence. That way, value flows smoothly to the customers.&lt;/p&gt;
&lt;p&gt;Why is it called ‘pull model of working’? Customer behaviour (identified via hypothesis-driven development) pulls the value from the next upstream delivery. Customer behaviour determines which hypothesis will enter (will be pulled into) the value stream.&lt;/p&gt;
&lt;h2&gt;Seek perfection&lt;/h2&gt;
&lt;p&gt;Common wisdom warns us that perfect is the enemy of good. In this case, however, we seek perfection not by being dissatisfied with the good, but by eliminating waste.&lt;/p&gt;
&lt;p&gt;Well established value stream with steps necessary to implement the pull mode of working can easily be invalidated if we allow waste to enter the process and to begin festering. It is paramount to keep a watchful eye on any signs of waste and to diligently eliminate it.&lt;/p&gt;
&lt;h2&gt;What is waste?&lt;/h2&gt;
&lt;p&gt;Anything that is not positively identified as value is waste.&lt;/p&gt;
&lt;p&gt;For example, imposing an inspection gate at the final step of value stream delivery is waste. It is not possible to inspect quality into a product. Finding out that the value is defective after the value has already been implemented is completely wasteful. Garbage in, garbage out.&lt;/p&gt;
&lt;p&gt;Inspection must be eliminated and replaced with the full-fledged shift-left process that favors early and frequent failures that happen all the way upstream.&lt;/p&gt;
&lt;h2&gt;How to measure flow?&lt;/h2&gt;
&lt;p&gt;Flow is characterized by four metrics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Cycle time&lt;/em&gt; (how long does it take from starting to work on a hypothesis to fulfilling the hypothesis)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lead time&lt;/em&gt; (how long does it take from the moment we collected validated learning to fulfilling it)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Throughput&lt;/em&gt; (the number of steps completed in a fixed amount of time)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Work-in-Progress, or WIP&lt;/em&gt; (the amount of work that has started but not completed)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It should be obvious that the more we manage to eliminate waste, the smoother and tighter the flow will get. The goal is to achieve short cycles, shorten the lead time, increase the throughput while minimizing the WIP.&lt;/p&gt;
&lt;p&gt;What is this tightening of flow buying us? The short answer is &lt;em&gt;increased frequency of feedback&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Factors that threaten to slow down flow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;High WIP&lt;/em&gt; – as a leading indicator of cycle time WIP is the primary intervention point to enable us to establish, or interrupt, the flow. High WIP introduces speed bumps into the flow. Reducing the WIP speeds up the flow.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Multitasking&lt;/em&gt; – it’s a deception that maximizing the utilization of people and resources increases the throughput; fully utilized highway becomes a parking lot.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Minimize slack&lt;/em&gt; – tightening the screws and cramming more work into a queue has about the same level of effectiveness as jamming more paper into the printer hoping that will increase the speed of printing.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Making changes in how we work&lt;/h2&gt;
&lt;p&gt;We’ve been tasked with focusing on continuous improvement. It is not possible to continuously improve without experimentation and rapid learning. It is therefore useful to adopt a work discipline that is based on several principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Leave task lists behind&lt;/em&gt;. We should not focus on &lt;em&gt;things we want to do&lt;/em&gt;; instead, focus on the minimum essential completion criteria. What do we have to do to deliver this minimum essential completion sooner?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stop measuring outputs&lt;/em&gt;; only measure required &lt;em&gt;outcomes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stop starting and start finishing&lt;/em&gt;. Favor dealing with steps that are closest to the finish line. Ignore steps that are still stuck at early stages of the flow.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Set WIP ceilings&lt;/em&gt;. Each step comprising the value delivery process must have a WIP cap. Periodically revisit those WIP caps and experiment by making the WIP capacity even smaller. Did the experiment accelerate the delivery, or did it slow the delivery down?&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="quality"></category><category term="value"></category><category term="customer-centric"></category><category term="process"></category><category term="lean"></category></entry><entry><title>Streamlining your pipeline using the magic of YAML-base Azure Pipelines</title><link href="https://wsbctechnicalblog.github.io/pipelines-streamlined-approvals-new-world.html" rel="alternate"></link><published>2021-11-16T13:13:00-08:00</published><updated>2021-11-16T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-16:/pipelines-streamlined-approvals-new-world.html</id><summary type="html">&lt;p&gt;Teleport to the future, to optimize the YAML-based Azure Pipeline approvals.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the previous &lt;a href="/pipelines-streamlined-approvals.html"&gt;Streamlining your pipeline approvals, without flooding DevSecOps with noise&lt;/a&gt; post we covered streamlined approvals and the magic and challenges of artifact filters. In essence, we discussed the Jurassic era of classic Azure Pipelines.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipelines-streamlined-approvals-new-world-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In this post we will switch gears and compare it to the era of state-of-the-art YAML-based Azure Pipelines. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipelines-streamlined-approvals-new-world-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Most of the engineers I recently discussed this magic with, looked at me with the &lt;em&gt;"what are you talking about?!?"&lt;/em&gt; glazed look. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipelines-streamlined-approvals-new-world-5.png"&gt;&lt;/p&gt;
&lt;p&gt;A really worrying trend, because the Microsoft &lt;a href="https://aka.ms/yaml"&gt;documentation&lt;/a&gt; is comprehensive and the associated features amazing - hence this post.&lt;/p&gt;
&lt;h1&gt;Goodbye Artifact Filter Issues&lt;/h1&gt;
&lt;p&gt;Using the YAML-based Azure Pipelines we implemented the same streamlined approvals as we discussed in &lt;a href="/pipelines-streamlined-approvals.html"&gt;Streamlining your pipeline approvals, without flooding DevSecOps with noise&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Trusted Branches" src="../images/pipelines-streamlined-approvals-new-world-3.png"&gt;&lt;/p&gt;
&lt;p&gt;As shown above, the pipeline looks the same as the classic pipeline when the release artifact is created using one of the repository branches that are trusted for the Canary and Production environments.&lt;/p&gt;
&lt;p&gt;If the source branch is untrusted, the pipeline looks different - in fact, everything after the system test environment is missing. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Untrusted Branches" src="../images/pipelines-streamlined-approvals-new-world-4.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# SECURITY REVIEW STAGE&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;refs/heads/release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;refs/heads/release/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DevSecOps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;security&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code extract reveals the simple trick. If the source originates from the &lt;strong&gt;release&lt;/strong&gt; branch, we inject the Security review, Canary, and Production stages. If not, Azure DevOps ignores them while assembling the run-time pipeline. If they are missing, they cannot be overridden as is the case with artifact filters, even if you are an Azure DevOps god. Simple!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Blocking untrusted templates&lt;/h1&gt;
&lt;p&gt;If you are working with Azure Pipelines I urge you to read &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;Create and target an environment&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;Define approvals and checks&lt;/a&gt;. It is standard reading material for our engineers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untrusted Templates" src="../images/pipelines-streamlined-approvals-new-world-6.png"&gt;&lt;/p&gt;
&lt;p&gt;As shown above, if one of more of the templates used by Azure DevOps when assembling the run-time pipeline, the environment check blocks the pipeline from trundling down the deployment chain. In this case you cannot override the template check. "You shall not pass" if you are using untrusted pipelines.&lt;/p&gt;
&lt;p&gt;The magic in this case is the &lt;strong&gt;extends&lt;/strong&gt; feature, as used in the following code extract:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/Blueprints/azure-function/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeSTemplates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You configure the required templates in your &lt;strong&gt;Environments&lt;/strong&gt;, under &lt;strong&gt;Approvals and Checks&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untrusted Templates" src="../images/pipelines-streamlined-approvals-new-world-7.png"&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://twitter.com/jjjettrain"&gt;josh-ops'&lt;/a&gt; blog post &lt;a href="https://josh-ops.com/posts/extends-template/"&gt;Azure DevOps: Extends Template with Build and Deployment Templates&lt;/a&gt; for a great overview and example of using &lt;strong&gt;extends&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Right, if you are excited and interested in these YAML-based pipeline features, I recommend that you review our &lt;a href="/why-pipelines-part1.html"&gt;Pipeline Series&lt;/a&gt; which delves deeper into the classic and new pipelines. If not, you are likely in the wrong movie.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>An overview of our key collaboration ceremonies</title><link href="https://wsbctechnicalblog.github.io/ceremony-overview.html" rel="alternate"></link><published>2021-11-13T13:13:00-08:00</published><updated>2021-11-13T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-13:/ceremony-overview.html</id><summary type="html">&lt;p&gt;Taking a step back and digesting this week's storm of ceremony posts.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Refreshed on January 4, 2022.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During this week we launched a tsunami of blog posts focused on our &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies. Behind the scenes we also launched our first CoE to dogfood (evaluate our own stuff) guardrails, posters, and working agreements we created.&lt;/p&gt;
&lt;p&gt;In this post I will answer some of the questions we received to date. Plan is to update this post as we dog-food our ceremonies, with an intent to continuously improve them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Overview" src="../images/ceremonies-overview.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The overview image highlights that the heart of our ceremonies is the CoE providing vision, direction, and governance. It also serves as the steward and source of laser focused working groups, dojos, and community of practice ceremonies. For details on each of ceremonies, refer to:
- &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE)
- &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP)
- &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;
- &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;
- &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Frequently asked questions&lt;/h1&gt;
&lt;p&gt;&lt;img alt="FAQ" src="../images/automation-lesson-1-5.png"&gt;&lt;/p&gt;
&lt;p&gt;List of questions we will cover herein:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can I join a ceremony?&lt;/li&gt;
&lt;li&gt;What are the pre-requisites to initiate a ceremony?&lt;/li&gt;
&lt;li&gt;What are the outcomes of a ceremony?&lt;/li&gt;
&lt;li&gt;When and How to host a ceremony? &lt;/li&gt;
&lt;li&gt;Who creates the CoE?&lt;/li&gt;
&lt;li&gt;Why is the CoE called Center of Enablement, not Excellence?&lt;/li&gt;
&lt;li&gt;Why do we have guardrails?&lt;/li&gt;
&lt;li&gt;Why do we insist on a Terms of Reference?&lt;/li&gt;
&lt;li&gt;Why can I not just create a working group?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How can I join a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Join" src="../images/ceremony-overview-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; and &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt; are by invitation only for the active and core members. You can request to be invited to these events as a "fly on the wall" to observe, not interrupt.&lt;/p&gt;
&lt;p&gt;The &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;, &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, and &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt; ceremonies are open to everyone. You should be engaged and committed to collaborate when joining these events and introduce yourself to the Sensei for Dojos out of respect. &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What are the pre-requisites to initiate a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Initiate" src="../images/ceremony-overview-4.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To initiate a &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; you need a sponsor - a director and/or manager who owns the area of focus. &lt;/li&gt;
&lt;li&gt;To initiate a &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;, or &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, you need a sponsoring &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; to ensure that the ceremonies are aligned with the vision, direction, and governance promoted by the CoE.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;What are the outcomes of a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Outcomes" src="../images/ceremony-overview-5.png"&gt;&lt;/p&gt;
&lt;p&gt;The following table summarizes the outcomes of the ceremonies.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CEREMONY&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;OUTCOMES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CoE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Vision, Direction, and Governance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CoP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Vibrant collaboration and continuous learning.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dojo&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Vibrant collaboration and immersive learning.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Working Group&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Process and Product Guardrails. (Dis)Proven Hypothesis.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2&gt;When and how to host a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Host" src="../images/ceremony-overview-6.png"&gt;&lt;/p&gt;
&lt;p&gt;We recommend to start with &lt;strong&gt;weekly&lt;/strong&gt; meetups, moving to &lt;strong&gt;bi-weekly&lt;/strong&gt; and &lt;strong&gt;monthly&lt;/strong&gt; when the members are laser focused and the ceremony picks up momentum. As with the ceremony overall, each meetup must have an agenda, a purpose, and survive on actions.&lt;/p&gt;
&lt;p&gt;Ceremonies must be a psychologically safe place for all in attendance and dealing with failure as an opportunity to learn and innovate. Respect those more experienced, respect those less experienced, and do not force your ideas on others. It is all about collaboration!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Who creates the CoE?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-overview-7.png"&gt;&lt;/p&gt;
&lt;p&gt;Anyone can collaborate and initiate a &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; and any of its related ceremonies. Our directors and managers are the &lt;strong&gt;stewards&lt;/strong&gt; to ensure we have buy-in and that each CoE provides vision, direction, and governance to the organization. &lt;/p&gt;
&lt;p&gt;When you have buy-in, you can &lt;strong&gt;announce&lt;/strong&gt; the new CoE. When you have the &lt;strong&gt;Terms of Reference&lt;/strong&gt; and committed core members, you can launch the CoE. When the CoE is active, you can launch associated COP, Working Group, and Dojo ceremonies. Always monitor the &lt;strong&gt;heart-beat&lt;/strong&gt; of all ceremonies and &lt;strong&gt;terminate&lt;/strong&gt; them when the energy, value, or intent fades.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why is the CoE called Center of Enablement, not Excellence?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-overview-7.png"&gt;&lt;/p&gt;
&lt;p&gt;On one hand the term &lt;strong&gt;Excellence&lt;/strong&gt; triggers the same alarm bells as &lt;strong&gt;Best Practices&lt;/strong&gt;. More importantly our goal is to &lt;strong&gt;enable&lt;/strong&gt; our common engineering stakeholders - therefore I LOVE our decision to pivot to &lt;strong&gt;Enablement&lt;/strong&gt;. The CoE enables by providing vision, direction, and governance, as well as stewarding laser focused working groups, dojos, and community of practices.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why do we have guardrails?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Guardrails" src="../images/ceremony-overview-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Yes, the guardrails feel like we are ignoring the first value of the Agile manifesto: "&lt;em&gt;Individuals and interactions over processes and tools&lt;/em&gt;." We decided to introduce lightweight guardrails through these blog posts and the referenced overview and working agreement posters to ensure that we promote &lt;strong&gt;consistent&lt;/strong&gt; and &lt;strong&gt;laser focused&lt;/strong&gt; collaboration, with measurable outcomes, and an opportunity to drive our dream to optimize our meetings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Meetings" src="../images/ceremony-overview-1x.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why do we insist on a Terms of Reference?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ToR" src="../images/ceremony-overview-2.png"&gt;&lt;/p&gt;
&lt;p&gt;We question the value of every ceremony and every meeting we plan or attend. The minimal expectations for the terms of reference identifies the purpose, the outcomes, and a measurable hypothesis. This promotes consistency and purpose!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why can I not just create a working group?&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;working group&lt;/strong&gt; is a group of people working together to collaborate and achieve specified goals. The lifespan of a working group can last anywhere between minutes to years, although we strongly recommend the shorter the better mindset. You can create these working groups whenever you need one!&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;CoE working group&lt;/strong&gt; is short-lived and sponsored by one or more Centers of Enablement, its terms of reference (vision, goals, hypothesis) a subset of and supporting the CoE terms of reference. In other words, there is a strong dependency between a sponsoring and other collaborating CoEs.&lt;/p&gt;
&lt;p&gt;See [Why can I not just create a working group?]https://wsbctechnicalblog.github.io/ceremony-focus-single-source.html) for details.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="Meetings" src="../images/azuredevop-automation-stakeholders-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Watch this space for more questions and posts by ceremony members sharing their experiences.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>How to increase collaboration</title><link href="https://wsbctechnicalblog.github.io/guest-leader.html" rel="alternate"></link><published>2021-11-12T00:00:00-08:00</published><updated>2021-11-12T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-12:/guest-leader.html</id><summary type="html">&lt;p&gt;How to improve the flow of teamwork&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Increase collaboration" src="../images/collaboration.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gerald Weinberg (Weinberg, G., “The Psychology of Computer Programming: Silver Anniversary Edition”, Dorset House, 1998) described the central role of a soda vending machine at a university’s programming helpdesk. The department administration, disturbed by the students congregating around the machine, ordered it removed. Much to their surprise, the line at the help desk suddenly became much longer. It took a while before they worked out that the students congregating around the soda machine were helping each other solve their programming problems, and thus reducing the load on the help desk staff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Weinberg’s description above is a textbook case of the usefulness of collaboration. One interesting thing on the topic of collaboration is the fact that, while there is plethora of scientific studies on the importance of communication, collaboration for some reason didn’t get that much attention. Taking the closer look into the topic of collaboration is long overdue; in this micro learning episode, I will try to shed some light on it.&lt;/p&gt;
&lt;h2&gt;Distributed cognition&lt;/h2&gt;
&lt;p&gt;In his book &lt;a href="https://www.amazon.ca/Cognition-Wild-Edwin-Hutchins/dp/0262581469"&gt;Cognition in the Wild&lt;/a&gt;, Edwin Hutchins describes the process of bringing in a large naval ship into the port. A team of merchant marines operates as though a single brain unifies many distributed components. Each crew member is busy forming a slightly different idea of what problem they are solving and how the solution should look. In the process, they may run into problems that require others to lend a helping hand.&lt;/p&gt;
&lt;p&gt;Hutchins termed this mode of working “distributed cognition”. When working in a distributed cognition mode, the problem of mental search and synchronization emerges. The skillful crew is capable of quickly resolving differing opinions and deciding whose view to accept.&lt;/p&gt;
&lt;h2&gt;Software development is distributed cognition&lt;/h2&gt;
&lt;p&gt;It is easy to recognize from the above description that software development is the activity of distributed cognition. It is exceptionally rare that software solution gets developed in its entirety by a single engineer. As soon as the development gets done by two or more team members, constraining forces of distributed cognition come into play. The process of mental search and synchronization becomes the central problem.&lt;/p&gt;
&lt;p&gt;That problem gets exacerbated when team members are working in isolation, asynchronously. Applying the &lt;em&gt;scatter-gather&lt;/em&gt; model of working introduces the problem of effective communication. The aspects of effective/ineffective communications have been heavily studied. The findings seem to be conclusive – effective communication appears to drop off at about 10 meters in distance between the team members (&lt;em&gt;Allen, T., “Managing the Flow of Technology: Technology Transfer and the Dissemination of Technological Information Within the R&amp;amp;D Organization”, The MIT Press, 1984). Turns out that most people would not bother to walk longer than the length of a school bus to ask a question (Olson, G., Olson, J., “Distance Matters”, HUMAN-COMPUTER INTERACTION, 2000, Volume 15, pp. 139–178&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The conclusion is clear: collocated teams stand better chance of doing improved collaboration.&lt;/p&gt;
&lt;p&gt;However, avoiding distributed teams by collocating the members does not remove the problem of distributed cognition – it only intensifies it. But it’s a good kind of intensification, because it creates small failures that urge the team to fix them right there, on the spot.&lt;/p&gt;
&lt;p&gt;With distributed teams, the distributed cognition problems are not usually as intense, and tend to be placed on the back burner. Which only exacerbates the situation – postponing the solutions for the differing opinions only makes it worse with the passage of time.&lt;/p&gt;
&lt;h2&gt;Promote Guest Leadership to increase successful collaboration&lt;/h2&gt;
&lt;p&gt;I remember in one of my previous jobs being invited to the company’s barbecue ceremony organized to celebrate employee contributions. The ceremony was set in such way that bosses and line managers were serving hamburgers and hot dogs to the line employees.&lt;/p&gt;
&lt;p&gt;Such activities, despite being fully collocated, are removed as far as possible from collaborative activities.&lt;/p&gt;
&lt;p&gt;During a different stint at another company, employees were invited to attend a potluck party. Everyone brought something to share, and the vertical distancing disappeared – there were no job titles on the display. Sharing and commenting on various items quickly created a very collaborative atmosphere where people were stepping forward and wholeheartedly partaking in the event.&lt;/p&gt;
&lt;p&gt;There is a semi-technical term that denotes the type of behaviour typically observed in situations where hierarchical, or vertical distancing diminishes. The term is “Guest Leader”.&lt;/p&gt;
&lt;p&gt;One of the most effective ways to increase quality collaboration is to create a situation where Guest Leaders emerge. Let’s quickly examine factors that tend to contribute to fostering the Guest Leader behavioral pattern:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure all participants in the collaborative session have ‘skin in the game’ by clearly understanding the goal(s)&lt;/li&gt;
&lt;li&gt;Make it clear that everyone in the group is invested in the outcome of the collaboration&lt;/li&gt;
&lt;li&gt;Try to create psychological safety by clearly explaining that in the collaboration session we have nothing to lose and only have a chance to gain something of value&lt;/li&gt;
&lt;li&gt;Identify possible Guest Leader champion(s) and get them to ‘warm up the room’ by stepping forward and in that way demonstrating that their participation creates immediate impact&lt;/li&gt;
&lt;li&gt;Create sense of positive urgency – we intensely desire to deliver results in this session today!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other contributing factors may be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explain that collaboration serves everyone’s self-interests&lt;/li&gt;
&lt;li&gt;Minimize the presence of anointed leaders; make official leaders recede in the background, relegating them to the role of ‘spectators’&lt;/li&gt;
&lt;li&gt;Agree with stakeholders beforehand to be permissive and not dismiss anyone’s contribution; all ideas and comments are valid&lt;/li&gt;
&lt;li&gt;Be explicit in explaining that whoever steps forward and suggests an improvement will not find themselves being stuck with the task; any agreed-upon solutions will be collectively owned&lt;/li&gt;
&lt;li&gt;Encourage rotations; participants should not feel that there are already enough people who are stepping forward and it would be rude to interfere&lt;/li&gt;
&lt;li&gt;Organizer recognizes others&lt;/li&gt;
&lt;li&gt;Organizer inquires but doesn’t contradict&lt;/li&gt;
&lt;li&gt;Organizer challenges, but adopts&lt;/li&gt;
&lt;li&gt;Organizer readily lowers their hierarchical position in the organization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Factors that may interfere with attempts to create Guest Leader atmosphere:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Announcing that failure is not an option&lt;/li&gt;
&lt;li&gt;Not explaining that proposed solutions don’t imply there will be additional workload&lt;/li&gt;
&lt;li&gt;Not dealing with the desire in some participants to stay safe by not standing out&lt;/li&gt;
&lt;li&gt;Valuing status quo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Benefits of Guest Leadership&lt;/h2&gt;
&lt;p&gt;Encouraging participants to become Guest Leaders during collaboration sessions fosters so-called ‘horizontal’ social-professional culture. It flattens the hierarchical structure (top-down chain of command) by shortening the distances between senior and junior members as well as the distance between members at different levels of management hierarchy. That approach invites and cultivates diversity, which is the strongest suit of any complex organization.&lt;/p&gt;
&lt;p&gt;When a Guest Leader emerges during a collaboration event, few beneficial patterns become prominent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Guest Leader is eager to detect when an intervention is needed (i.e., they are proactive)&lt;/li&gt;
&lt;li&gt;Guest Leader has the propensity to decide “This is something I should take care of now”&lt;/li&gt;
&lt;li&gt;Being aware of their guest status, Guest Leaders tend to understand the temporary nature of their role, and often easily step back into their previous, more passive position, thus freeing the space for the next Guest Leader to step forward&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Social dynamics brought forward by the Guest Leadership pattern tend to result in more fruitful collaboration sessions. The team is more vested in the end-goals and leaves the collaboration session energized, ready to tackle new challenges.&lt;/p&gt;</content><category term="Posts"></category><category term="collaboration"></category><category term="psychological-safety"></category></entry><entry><title>Guidelines to start and terminate the Townhall Events</title><link href="https://wsbctechnicalblog.github.io/townhall.html" rel="alternate"></link><published>2021-11-12T00:00:00-08:00</published><updated>2021-11-12T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-12:/townhall.html</id><summary type="html">&lt;p&gt;A super-event to foster systems thinking and the removal of barriers and silos&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Townhall" src="../images/townhall.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Terms of reference&lt;/h2&gt;
&lt;p&gt;Continuous improvement is not possible without firmly established systems thinking. A holistic view of the organization as a system is necessary to ensure uninterrupted stream of delivery of desirable business value. &lt;/p&gt;
&lt;p&gt;The objective of starting a series of Townhall events is to promote and foster the need for sharing knowledge and insights regarding the functioning of the system as a whole.&lt;/p&gt;
&lt;p&gt;By proposing to start a series of Townhall events, we hypothesize that the outcomes will materialize as an improved consistency of the alignment with the business priorities and the delivery of desired business value. The rationale driving this hypothesis is that regardless of how successful, advanced, or brilliant any part of the system may be, the system itself is only as performant, reliable, resilient, and secure as is its weakest, slowest part. It is therefore hypothesized that having regular ‘super events’ to share knowledge and insights will yield the overall improvement of the system’s performance by breaking potential barriers and removing silos. &lt;/p&gt;
&lt;p&gt;To avoid potential waste, we also hypothesize that any established Townhall series of events must be terminated in case the anticipated desired outcomes fail to materialize. &lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;During the regular business operations, as various ceremonies get executed, those distributed activities will be synchronized by attending the shared ‘super event’ -- Townhall. &lt;/p&gt;
&lt;p&gt;Establishing the Townhall event is rather simple: it will commence once per PI, during the Innovation &amp;amp; Planning iteration. The organizers create the Townhall wiki, the Townhall Teams channel, and publicize to the organization the opening of the Townhall. &lt;/p&gt;
&lt;h2&gt;Projected trajectory for success&lt;/h2&gt;
&lt;p&gt;Townhall events must publish the expected measurable criteria for success. That criteria could be reducing the number of recorded system defects during the next PI, or reducing the number of support calls during the next PI, etc. &lt;/p&gt;
&lt;p&gt;In addition to establishing clear, focused, and measurable criteria for success, Townhall meetings must provide the platform for collaborating on identifying the bottlenecks in the system. Those bottlenecks will be identified by sharing the findings that resulted from the regular sessions in Centers of Enablement, Working Groups, Community of Practices, and Dojos. &lt;/p&gt;
&lt;p&gt;Once bottlenecks have been identified, they must be prioritized in terms of importance/urgency, and an actionable plan must be delivered with clearly stated expected acceptance criteria. &lt;/p&gt;
&lt;p&gt;Upon executing the PI and attending to the agreed-upon elimination of prioritized bottlenecks, a retrospective session must be scheduled to assess whether the Townhall findings and recommendations yielded the expected results. &lt;/p&gt;
&lt;h2&gt;Preferred mode of working&lt;/h2&gt;
&lt;p&gt;Townhall events are envisioned as “come all, share all” happenings. Ceremonious parts of the event should be kept at a minimum, to enable lively and productive collaboration. There should be no anointed/appointed leaders of the event. Preferred mode of collaboration is by following the &lt;a href="/guest-leader.html"&gt;Guest Leaders&lt;/a&gt; model – minimize any ‘vertical distance’ between participants and encourage stepping forward and temporarily taking charge of the pressing topics. A facilitator/moderator is a must at such events. &lt;/p&gt;
&lt;p&gt;At all times, the Townhall event must be a psychologically safe place for all in attendance. To ensure smooth and effective progress, we propose the &lt;em&gt;Townhall Code of Ethics&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Respect those more experienced. Do not force your ideas on others.  &lt;/li&gt;
&lt;li&gt;Respect those less experienced. Do not force your ideas on others.  &lt;/li&gt;
&lt;li&gt;If you understand the nature of the issue and are working with someone who does not, lead them according to your understanding. Do not attempt to verbally correct or instruct others.  &lt;/li&gt;
&lt;li&gt;Upon entering the Townhall, strive to cultivate an open mind that expects to be informed by the views of others. No other concerns or discussions should be on the attendant's mind for the duration of the session.  &lt;/li&gt;
&lt;li&gt;Management and senior executives always enter the Townhall with undivided respect and gratitude to all in attendance who are ready to collaborate.  &lt;/li&gt;
&lt;li&gt;It is important to be on time for event. If you arrive late, please enter the session quietly, so as not to disturb the flow.  &lt;/li&gt;
&lt;li&gt;Participants may find themselves disagreeing with the consensus. While asking questions is part of the Townhall session, it is important to keep in mind that it is possible that not all the details have been fully presented at the moment when confusion arises in the participant's understanding. Patience is a virtue, and often what appears contradictory or incoherent becomes clearer as the collaboration session continues. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Deliverables&lt;/h2&gt;
&lt;p&gt;After each Townhall session the organizers will tally up the attendees and provide the report to the Townhall stakeholders/sponsors. &lt;/p&gt;
&lt;p&gt;Once every PI the organizers will prepare the report outlining the status of the Townhall: how many staff have attended; what is the trend of attendance; how many staff are lagging; approximate estimate as to how many more sessions may be needed to resolve all outstanding system bottlenecks. &lt;/p&gt;
&lt;p&gt;Townhall stakeholders will organize periodical celebration ceremonies. This is to recognize and award initiatives that have ‘moved the needle’ and demonstrably improved the overall system performance. &lt;/p&gt;
&lt;p&gt;Organizers will be responsible for maintaining the Townhall wiki and for collaborating on the Townhall Team channels. Organizers will be responsible for recording each Townhall session and for publishing the recordings. &lt;/p&gt;
&lt;h2&gt;Responsibilities&lt;/h2&gt;
&lt;p&gt;Townhall organizers will be responsible for preparing the handout material for all Townhall sessions. Those handouts will typically include above mentioned deliverables (reports) as well as any newly identified bottlenecks to be discussed.&lt;/p&gt;
&lt;p&gt;Attendees are responsible for the effective utilization of the time spent in the Townhall, as well as the time spent preparing any material to be presented in the Townhall. Attendees are expected to demonstrate brisk and sustained participation in the Townhall.  &lt;/p&gt;
&lt;p&gt;If the Townhall demonstrates effective progress (i.e., identified and prioritized bottlenecks are swiftly being minimized/removed from the system), organizers will be given allowances to demand more time that the staff should dedicate to identifying system-wide bottlenecks and improving the overall system performance. &lt;/p&gt;
&lt;h2&gt;Terminating the Townhall&lt;/h2&gt;
&lt;p&gt;Everything good and nice must eventually end. The desired end-state of the system as a whole is a fully flexible, secure, reliable, resilient, and anti-fragile system that perfectly aligns with WorkSafeBC business priorities. Once the system reaches that high level of performance, the Townhall should be terminated. &lt;/p&gt;
&lt;p&gt;There is also a possibility that the Townhall events may not be yielding the hoped-for results. In case of such eventuality, organizers should terminate the Townhall.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and Community of Practice (CoP) working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-townhall.pdf"&gt;Working Agreement - Townhall PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="technical-excellence"></category><category term="ceremony"></category></entry><entry><title>What is our Community of Practice (CoP) and why do we need it?</title><link href="https://wsbctechnicalblog.github.io/ceremony-community-of-practice.html" rel="alternate"></link><published>2021-11-10T13:13:00-08:00</published><updated>2021-11-10T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-10:/ceremony-community-of-practice.html</id><summary type="html">&lt;p&gt;"People with great PASSION can make the impossible happen" - Elon Musk.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Community of Practice (CoP) is an event by people that share a concern or passion for something they do and learn how to group of people with common disciplines do it better as they interact regularly. As implied by the name, a CoP is a &lt;strong&gt;community&lt;/strong&gt;, driven by &lt;strong&gt;passion&lt;/strong&gt;, and therefore voluntary.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CoP" src="../images/ceremony-community-of-practice-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://www.scaledagileframework.com/communities-of-practice/"&gt;Community of Practice&lt;/a&gt; for details on how to organize, operate, and encourage your community. Within the context of this blog post we are referring to CoPs that are triggered by and serve our &lt;a href="/ceremony-center-of-enablement.html"&gt;Centers of Enablement (CoE)&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our Community of Practice (CoP)?&lt;/h1&gt;
&lt;p&gt;Looking through the lens of our common engineering ecosystem, we use our CoPs to bring together committed and passionate people from different areas within the organization who are inspired by quotes such as these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;“Every person is defined by the communities she belongs to.”&lt;/em&gt; – Orson Scott Card.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Constantly think about how you could be doing things better. Keep questioning yourself."&lt;/em&gt; - Elon Musk&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Really, the only thing that makes sense is to strive for greater collective enlightenment."&lt;/em&gt; - Elon Musk&lt;/li&gt;
&lt;li&gt;&lt;em&gt;“People should pursue what they’re passionate about. That will make them happier than pretty much anything else.”&lt;/em&gt; - Elon Musk&lt;/li&gt;
&lt;li&gt;&lt;em&gt;“Diversity: the art of thinking independently together.”&lt;/em&gt; – Malcolm Forbes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our core objective is to promote collaboration and share tribal knowledge, experience, and passion for processes, products, and other interesting themes that our Centers of Enablement (CoE) are focused on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CoP" src="../images/ceremony-community-of-practice-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Every CoE typically triggers one CoP, but can trigger more as needed throughout its lifetime.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Lifetime&lt;/h1&gt;
&lt;p&gt;As shown below, the Center of Enablement (CoE) typically spawns one Community of Practice (CoP), which has a long-term lifetime. Similar to the CoE the CoP starts with a terms of reference that outlines the "WHY" we need the CoP, with an inherited buy-in from the CoE. We KICKSTART the CoP and switch to IN-FLIGHT mode until the value or energy of the CoP starts diminishing. We then TERMINATE the CoP and share the final outcomes, the value, with the CoE. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Lifetime" src="../images/ceremony-community-of-practice-lifetime.png"&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bulb" src="../images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt; Something to peruse:  &lt;a href="https://workingknowledge-csp.com/wp-content/uploads/CoP_Maturity_Model_v1.pdf"&gt;Community of Practice Maturity Model&lt;/a&gt; by Bill Kaplan from Working Knowledge.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No &lt;strong&gt;flight plan&lt;/strong&gt; (terms of reference), no CoE launch!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is our secret sauce?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Secret Sauce" src="../images/ceremony-community-of-practice-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a recipe for our Community of Practice ceremonies:&lt;/p&gt;
&lt;h2&gt;Executive buy-in!&lt;/h2&gt;
&lt;p&gt;Every Working Group inherits the executive support to be empowered with a clear strategy and support where needed from its parent Center of Enablement (CoE).&lt;/p&gt;
&lt;h2&gt;Cross-discipline collaboration!&lt;/h2&gt;
&lt;p&gt;A Community of Practice relies on vibrant collaboration and respect, similar to the &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Respect those more experienced. &lt;/li&gt;
&lt;li&gt;Do not force your ideas on others.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Consistency&lt;/h2&gt;
&lt;p&gt;Communities of Practice must monitor and motivate their members to adhere to the CoP guardrails, and use shared blueprints, working agreements, backlogs, processes, and products consistently. Consistency is pivotal to share and implement the CoP outcomes through its parent CoE and associated Working Groups.&lt;/p&gt;
&lt;h2&gt;Transparency&lt;/h2&gt;
&lt;p&gt;Transparency of hypothesis, visions, goals, and outcomes are pivotal to avoid duplication of effort, creation of &lt;strong&gt;WASTE&lt;/strong&gt;, and fuel the overall energy. The CoE-Sync and the &lt;strong&gt;Townhall&lt;/strong&gt; event are two of the key ceremonies that enable the sharing of CoP deliverables and outcomes.&lt;/p&gt;
&lt;h2&gt;Consistent guardrails!&lt;/h2&gt;
&lt;p&gt;CoPs require guardrails and a blueprint to standup and energize. Here are some of our guidelines, sorted alphabetically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Larger than the pizza sized team (3-9 members) - the more the merrier.&lt;/li&gt;
&lt;li&gt;Groomed and prioritized subset of the CoE backlog.&lt;/li&gt;
&lt;li&gt;Membership is voluntary.&lt;/li&gt;
&lt;li&gt;Long-term lifetime.&lt;/li&gt;
&lt;li&gt;Terminate if there is no remaining energy in or value for the community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terms of Reference&lt;/strong&gt; defining &lt;strong&gt;WHY&lt;/strong&gt; we are here and &lt;strong&gt;WHAT&lt;/strong&gt; are our objectives and hypothesis that defines the Working Group's existence and purpose.&lt;/li&gt;
&lt;li&gt;Triggered by CoE.&lt;/li&gt;
&lt;li&gt;Recognition of attendance.&lt;/li&gt;
&lt;li&gt;Bi-weekly or monthly cadence.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bulb" src="../images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt; Something to peruse for terms of reference ideas: &lt;a href="https://view.officeapps.live.com/op/view.aspx?src=http%3A%2F%2Ftheagiledirector.com%2Fimages%2FCoPToR-examplebyEvanLeybourn.docx"&gt;Community of Practice: Terms of Reference&lt;/a&gt; by Evan Leybourn
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also have a look at our Community of Practice working agreement poster for a crisp summary of these and other guidelines. &lt;/p&gt;
&lt;h2&gt;All good things come to an end&lt;/h2&gt;
&lt;p&gt;Every CoP will go through the Forming-Storming-Norming-Performing stages, similar to &lt;a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development"&gt;Tuckman's Stages of Group Development&lt;/a&gt;, whereby it is important to continuously measure the passion, energy, and value (to members and stakeholders) of your event and members. 
If any of these metrics start dipping it is time to ask whether is is time to terminate your CoP!&lt;/p&gt;
&lt;p&gt;The Scaled Agile Framework has a great visualization of the CoP five-stage life cycle, from &lt;strong&gt;committing&lt;/strong&gt; to &lt;strong&gt;shutting down&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SAFe CoP" src="../images/ceremony-community-of-practice-safe.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Image from &lt;a href="https://www.scaledagileframework.com/communities-of-practice/"&gt;Community of Practice&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figure 4. CoPs typically follow a five-stage life cycle, from conceptualization to closure&lt;/p&gt;
&lt;p&gt;© Scaled Agile, Inc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What are our Community of Practice deliverables?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="SDeliverables" src="../images/ceremony-community-of-practice-4.png"&gt;&lt;/p&gt;
&lt;p&gt;CoPs are responsible to report back to its parent CoE with:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regular update on terms of reference.&lt;/li&gt;
&lt;li&gt;Regular updates on associated events.&lt;/li&gt;
&lt;li&gt;Collaboration recordings.&lt;/li&gt;
&lt;li&gt;Ongoing Net Performance Score (NPS) from members and stakeholders.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and Community of Practice (CoP) working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-community-of-practice.pdf"&gt;Working Agreement - Community of Practice PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other ceremonies&lt;/h2&gt;
&lt;p&gt;Here are references to more information on ceremonies mentioned above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ceremony-working-group.html"&gt;Working Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>What is our Working Group and WHY do we need it?</title><link href="https://wsbctechnicalblog.github.io/ceremony-working-group.html" rel="alternate"></link><published>2021-11-09T13:13:00-08:00</published><updated>2021-11-09T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-09:/ceremony-working-group.html</id><summary type="html">&lt;p&gt;Union of laser-focused experts collaborating to empower its parent Center of Enablement (CoE).&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working Groups are people from different disciplines, collaborating to solve a specific problem and/or (dis)prove a hypothesis. They are empowered to research processes and products, evaluate and recommend guardrails (governance), and propose adoption and readiness plans.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Group" src="../images/ceremony-working-group-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We admit that there are many flavours and definitions of working groups. Within the context of this blog post we are referring to Working Groups that are triggered by and serve our &lt;a href="/ceremony-center-of-enablement.html"&gt;Centers of Enablement (CoE)&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our Working Group?&lt;/h1&gt;
&lt;p&gt;Looking through the lens of our common engineering ecosystem, we use our Working Group to bring together committed and appropriate subject matter experts from different areas within the organization to solve a specific problem and/or (dis)prove a hypothesis for its parent CoE. Subject matter experts from Architecture, Business, DevSecOps, Operations, Site Reliability Engineering, Innovations, and other stakeholders not only bring their tribal knowledge and experience to the table, but naturally erode organizational silos through vibrant collaboration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Group" src="../images/ceremony-working-group-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Every CoE can trigger one or more focused Working Groups throughout its lifetime. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Relationshiop" src="../images/ceremony-working-group-5.png"&gt;&lt;/p&gt;
&lt;p&gt;In other words, every Working Group has a CoE parent, and every CoE can have one or more short-lived Working Groups.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Lifetime&lt;/h1&gt;
&lt;p&gt;As shown below, the Center of Enablement (CoE) typically spawns one or more Working Groups, which have a short-term lifetime. Similar to a short-lived feature branch.&lt;/p&gt;
&lt;p&gt;The Working Group starts with a terms of reference that outlines the "WHY" we need the Working Group, with an inherited buy-in from the CoE. We KICKSTART the Working Group and switch to IN-FLIGHT mode until the maximum lifetime, value or energy of the CoP starts diminishing. We then TERMINATE the Working Group and share the final outcomes, the value, with the CoE. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Lifetime" src="../images/ceremony-working-group-lifetime.png"&gt; &lt;/p&gt;
&lt;p&gt;No &lt;strong&gt;flight plan&lt;/strong&gt; (terms of reference), no CoE launch!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is our secret sauce?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Secret Sauce" src="../images/ceremony-working-group-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a recipe for our Working Group ceremonies:&lt;/p&gt;
&lt;h2&gt;Executive buy-in!&lt;/h2&gt;
&lt;p&gt;Every Working Group inherits the executive support to be empowered with a clear strategy, an innovation budget, and support where needed from its parent Center of Enablement (CoE).&lt;/p&gt;
&lt;h2&gt;Cross-discipline collaboration!&lt;/h2&gt;
&lt;p&gt;Working Groups rely on cross-discipline collaboration to research and resolve a specific problem or (dis)prove a hypothesis, as requested by its parent CoE.&lt;/p&gt;
&lt;h2&gt;Consistency&lt;/h2&gt;
&lt;p&gt;Working Groups must monitor and incentivize their members to adhere to the Working Group guardrails, and use shared blueprints, working agreements, backlogs, processes, and products consistently. Consistency is pivotal to share and implement the Working Group outcomes through its parent CoE.&lt;/p&gt;
&lt;h2&gt;Transparency&lt;/h2&gt;
&lt;p&gt;Transparency of hypothesis, visions, goals, and outcomes are pivotal to avoid duplication of effort, creation of &lt;strong&gt;WASTE&lt;/strong&gt;, and fuel the overall energy. The CoE-Sync and the &lt;strong&gt;Townhall&lt;/strong&gt; event are two of the key ceremonies that enable the sharing of Working Group deliverables and outcomes.&lt;/p&gt;
&lt;h2&gt;Consistent guardrails!&lt;/h2&gt;
&lt;p&gt;Working Groups require guardrails and a blueprint to standup and energize. Here are some of our guidelines, sorted alphabetically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-pizza sized team (3-9 members).&lt;/li&gt;
&lt;li&gt;Groomed and prioritized subset of the CoE backlog&lt;/li&gt;
&lt;li&gt;Innovation charge code for members to commit their time.&lt;/li&gt;
&lt;li&gt;Membership is by invitation only.&lt;/li&gt;
&lt;li&gt;Short-term lifetime ranging from iterations to a maximum of 2 program increments (10 iterations).&lt;/li&gt;
&lt;li&gt;Terminate if problem is solved, maximum lifetime is reached, there is no energy, or there is no value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terms of Reference&lt;/strong&gt; defining &lt;strong&gt;WHY&lt;/strong&gt; we are here and &lt;strong&gt;WHAT&lt;/strong&gt; are our objectives and hypothesist that defines the Working Group's existence and purpose.&lt;/li&gt;
&lt;li&gt;Triggered by CoE.&lt;/li&gt;
&lt;li&gt;Recognition of attendance.&lt;/li&gt;
&lt;li&gt;Weekly to bi-weekly cadence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also have a look at our Working Group working agreement poster for a crisp summary of these and other guidelines.&lt;/p&gt;
&lt;h2&gt;All good things come to an end&lt;/h2&gt;
&lt;p&gt;When your Working Group reaches its maximum lifetime or it as resolved the problem, you must terminate your Working Group!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Passion" src="../images/ceremony-termination.png"&gt;&lt;/p&gt;
&lt;p&gt;Also, every Working Group will go through the Forming-Storming-Norming-Performing stages, similar to &lt;a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development"&gt;Tuckman's Stages of Group Development&lt;/a&gt;. When you find yourself in the Performing phase, it is important to continuously measure the passion, energy, and value (to members and stakeholders) of your event and members. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What are our Working Group deliverables?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="SDeliverables" src="../images/ceremony-working-group-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Working Groups are responsible to report back to its parent CoE with:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Report of outcomes.&lt;/li&gt;
&lt;li&gt;Guardrail proposals, as needed.&lt;/li&gt;
&lt;li&gt;Recording of all collaboration recordings.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and Working Group working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-working-group.pdf"&gt;Working Agreement - Working Group PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other ceremonies&lt;/h2&gt;
&lt;p&gt;Here are references to more information on ceremonies mentioned above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>How to create deterministic tests</title><link href="https://wsbctechnicalblog.github.io/deterministic-tests.html" rel="alternate"></link><published>2021-11-09T00:00:00-08:00</published><updated>2021-11-09T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-09:/deterministic-tests.html</id><summary type="html">&lt;p&gt;Quality of automated tests is the most important aspect of continuous delivery&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Law of Demeter" src="../images/nondeterministic.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In my previous post &lt;a href="/automate-tests.html"&gt;Do not automate anything unless you automate the tests&lt;/a&gt; I discussed the importance of having full test coverage for any automated operation in the system. This episode will elaborate on that by looking into factors that enable automated tests to run deterministically.&lt;/p&gt;
&lt;p&gt;Generally speaking. there are two types of tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exploratory tests&lt;/li&gt;
&lt;li&gt;Automated tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Exploratory tests are not part of the continuous delivery flow. Usually performed by QA engineers (in collaboration with other team members), these tests are experimental in nature and are focused on disrupting the system &lt;em&gt;status quo&lt;/em&gt;. The aim of exploratory tests is to expose potential vulnerabilities in the automated system. If vulnerabilities get discovered during the exploratory testing spike, a remedy solution gets engineered and implemented. The system thus grows more resilient, less fragile.&lt;/p&gt;
&lt;p&gt;Automated tests, on the other hand, are part and parcel of the continuous delivery flow. As a matter of fact, continuous delivery is not possible without a comprehensive suite of automated tests.&lt;/p&gt;
&lt;p&gt;Continuous delivery is only possible if automated tests that are underpinning the delivery are deterministic. If the automated tests are not 100% deterministic, engaging in continuous delivery becomes risky. If the risk compounds, we are at the danger of experiencing outages and defects caused by the continuous delivery. Once that starts happening, we would be forced to discontinue the continuous delivery, and would fall back to the slow and sluggish scheduled delivery model.&lt;/p&gt;
&lt;h2&gt;What are deterministic tests?&lt;/h2&gt;
&lt;p&gt;Deterministic tests are tests that are repeatable. If we have a test that delivers certain results when we run it, and then if we run it again it delivers different results, that test is not deterministic.&lt;/p&gt;
&lt;p&gt;Tests that are not deterministic are not only useless, but they are also harmful. They have capacity to mislead us. As such, non-deterministic tests must be avoided at all cost. It is better not having any tests than having non-deterministic tests.&lt;/p&gt;
&lt;h2&gt;How to recognize non-deterministic tests?&lt;/h2&gt;
&lt;p&gt;It is relatively straightforward to detect non-deterministic tests. If a test we are creating or modifying/examining depends on some other tests, it is a clear sign that it is a non-deterministic test.&lt;/p&gt;
&lt;p&gt;Any tests that depend on some sequence of events that are scheduled outside of the body of the test are non-deterministic. Automated tests must be immune to any sequence of events that happen in the system under test.&lt;/p&gt;
&lt;p&gt;In addition to that, any test that depends on hidden inputs is a non-deterministic test. A typical example would be a test that depends on the system clock. System clock is a hidden input, which means that at the time the test gets executed, it is impossible to predict the value of that input. A system clock provides the test with the value (usually in milliseconds). That value changes with the passage of time (every millisecond that value is different). The test whose assertion depends on that hidden value cannot ever be deterministic.&lt;/p&gt;
&lt;p&gt;Similarly, tests that rely on any other non-explicit values (entering the test via a network, or some I/O operation) are non-deterministic. Also, tests that depend on some value that is part of the shared mutable state are non-deterministic tests. Such tests must be banned from the repo.&lt;/p&gt;
&lt;h2&gt;Create only quality tests&lt;/h2&gt;
&lt;p&gt;As we’ve seen, not all automated tests are equally valuable. Some are downright harmful. Our goal is to hone our skills to only create high value, high quality automated tests. That way we will pave the way to the ultimate engineering goal – delivery on demand, not on the predefined schedule.&lt;/p&gt;
&lt;h2&gt;So, what are quality tests?&lt;/h2&gt;
&lt;p&gt;To begin with, each test must isolate &lt;strong&gt;one failure mode only&lt;/strong&gt;. A test that detects and measures two or more failure modes is low quality test.&lt;/p&gt;
&lt;p&gt;What is one failure mode? It is a single expectation of how we intend the system to behave. A quality test should never combine two or more such expectations. For example, we must never create a test that expects the system to calculate monthly installment rate AND craft the notification message to the client. Those are two separate expectations, and those expectations must have two separate automated tests.&lt;/p&gt;
&lt;p&gt;It goes without saying that the above two separate tests are completely independent of each other. We must make sure to create our expectations in such a way that the sequence of execution does not matter.&lt;/p&gt;
&lt;p&gt;Next thing to strive for is speed. As we keep creating more and more such isolated automated tests, we want to be able to run them at will. The decision when to run all tests should never be an issue. All tests must always run, without incurring any speed bumps. Ideally, any time we make any changes to our system, we must run all tests. That means that tests must be designed to run in memory. No suite of tests should take more than several seconds to run.&lt;/p&gt;
&lt;p&gt;The onus is therefore on us, the designers of automated tests, to pay close attention to how are we going to design them so that they don’t consume more than few seconds of running time. Being able to get to that level of design skills takes a lot of practice. It is therefore recommended that engineers attend TDD Dojo sessions where they can gain those skills by working together (mob programming).&lt;/p&gt;
&lt;p&gt;If we are running all tests after we make any change to our system, that implies that all tests are repeatable. Any time tests run they produce identical results. I was at one point managing a software development department that released faulty code to production. During the &lt;em&gt;postmortem&lt;/em&gt; we discovered that engineers have disabled some tests in the pipeline. When asked why, they replied that the tests were failing which was preventing them from releasing the code to production. When asked why those tests were failing, the engineers replied: “There were some TEMPORAL dependencies!”&lt;/p&gt;
&lt;p&gt;‘Temporal dependencies’ is just a fancy phrase for ‘tests are not isolated; they are not independent’. Meaning, they are poor quality tests.&lt;/p&gt;
&lt;p&gt;Moral of the story: it is crucially important to make sure that each test is completely isolated and independent from any other events in the system.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Automated tests should be viewed as the Oracle. They should be able to predict the future. If we go to the Oracle and ask: “Is it safe to release this code to production?”, the Oracle must be able to give us a clear Yes or No answer. If all tests pass, that’s the Oracle’s Yes answer. If even one test fails, that the Oracle’s No answer.&lt;/p&gt;
&lt;p&gt;If the Oracle answers with Yes (i.e., all test pass), and if we deploy to production but then the deployed code blows up, we lose confidence in the Oracle. We realize that the Oracle is flaky and is not capable of predicting the future. When that happens, we start feeling reluctant when it comes to writing automated tests. What’s the point in wasting time on writing those tests if they cannot tell us if it’s safe to proceed or not?&lt;/p&gt;
&lt;p&gt;It is for that reason that we must make our automated tests fully deterministic. Tests that always behave according to the expectations regardless of the conditions (i.e., the underlying computing machinery, the time of day, week, month, year, the network status, the I/O operations, presence of shared mutable values, etc.) are deterministic tests. They support a predictable system. Such predictable system is completely immune to any perturbations that may occur in the operating environment. The magic word that makes that happen is &lt;em&gt;isolation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Once we get to that level of technical excellence, we can safely engage in continuous delivery (a.k.a. delivery on demand).&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category><category term="delivery-on-demand"></category><category term="continuous-delivery"></category><category term="tdd"></category></entry><entry><title>What is our Center of Enablement (CoE) and WHY do we need it?</title><link href="https://wsbctechnicalblog.github.io/ceremony-center-of-enablement.html" rel="alternate"></link><published>2021-11-08T13:13:00-08:00</published><updated>2021-11-08T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-08:/ceremony-center-of-enablement.html</id><summary type="html">&lt;p&gt;It all starts with people from different disciplines to create a focused competency center and obliterating silos through vibrant collaboration!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our Center of Enablement (CoE), typically known as center of excellence, assembles people from different disciplines to collaborate and enable our organization to shift across multiple disciplines to create a place where the highest standards are maintained. Every CoE is a coalition for change, made of these pillars: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide thought leadership, vision, and direction.&lt;/li&gt;
&lt;li&gt;Provide good practice and guardrails (aka governance).&lt;/li&gt;
&lt;li&gt;Establish collaboration with key stakeholders and other CoEs to abolish silos.&lt;/li&gt;
&lt;li&gt;Trigger working groups, dojos, and community of practices to implement research, education, and outcomes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-center-of-enablement-1.png"&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our CoE?&lt;/h1&gt;
&lt;p&gt;Looking through the lens of our common engineering ecosystem, we use our CoE to bring together committed and appropriate subject matter experts from different areas within the organization. Architecture, DevSecOps, Operations, Site Reliability Engineering, Innovations, and other stakeholders explore better ways to enable engineering to continuously deliver quality and value, through continuous process and products innovation.&lt;/p&gt;
&lt;p&gt;Every CoE is laser focused on a strategic vision, actionable goals, and made up of apt, committed, and engaged members. It solves many of the common collaboration challenges we all experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too many meetings.&lt;/li&gt;
&lt;li&gt;Large meetings that are unsuitable for strategic thinking or to make a decision.&lt;/li&gt;
&lt;li&gt;Disengaged participants - &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Lack of clarity of "&lt;strong&gt;WHY&lt;/strong&gt; are we here?".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you scale your ecosystem into a ring of interconnected CoEs, you will need to coordinate them through a CoE sync which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shares the current status and roadmap for each CoE.&lt;/li&gt;
&lt;li&gt;Collaborates on current challenges for each CoE and the organization.&lt;/li&gt;
&lt;li&gt;Identify and track dependencies between CoEs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="CoE Sync" src="../images/ceremony-center-of-enablement-2.png"&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Lifetime&lt;/h1&gt;
&lt;p&gt;As shown below, the Center of Enablement (CoE) has a long-term lifetime, which starts with a terms of reference that outlines the "WHY" we need the CoE. Once we have business buy-in, we LAUNCH the CoE and switch to IN-FLIGHT mode until the value or energy of the CoE starts diminishing. We then TERMINATE the CoE and share the outcomes, the value, transparently.&lt;/p&gt;
&lt;p&gt;The CoE has a long lifespan, that is terminated by a technology or approach of philosophy becoming obsolete. For example, if we had On Prem Engineering CoE, once we move fully to the cloud, it will be terminated. During the decline phase, the membership, governance, and vision will become stale. This is where it is important for the CoE members to track and identify trends and start the process of termination.&lt;/p&gt;
&lt;p&gt;That said, think of the CoE lifetime as the &lt;a href="https://en.wikipedia.org/wiki/Huygens_(spacecraft)"&gt;Huygens&lt;/a&gt; space probe's lifetime, which could be describes as a potentially infinite journey without any known destination.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lifetime" src="../images/ceremony-center-of-enablement-lifetime.png"&gt; &lt;/p&gt;
&lt;p&gt;Emphasize the long-term lifetime, the strategic laser focus, and the "&lt;strong&gt;WHY we are&lt;/strong&gt;" here when creating a new CoE. Invest time to prepare your terms of reference for your CoE to ensure that you can launch with clear objectives and committed members. Walk up to a whiteboard or use a digital board to collaborate around &lt;strong&gt;Current State&lt;/strong&gt;, &lt;strong&gt;Future State&lt;/strong&gt;, &lt;strong&gt;Current Problems&lt;/strong&gt;, &lt;strong&gt;What can stop us&lt;/strong&gt;, &lt;strong&gt;What we need to do&lt;/strong&gt;, &lt;strong&gt;How do we know we are successful&lt;/strong&gt; to define your terms of reference.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CoE Planning" src="../images/ceremony-center-of-enablement-3.png"&gt; &lt;/p&gt;
&lt;p&gt;No &lt;strong&gt;flight plan&lt;/strong&gt; (terms of reference) and/or no &lt;strong&gt;take-off approval&lt;/strong&gt; (business buy-in), no CoE launch!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is our secret sauce?&lt;/h1&gt;
&lt;p&gt;Here is a recipe for our Center of Enablement ceremonies:&lt;/p&gt;
&lt;h2&gt;Executive buy-in!&lt;/h2&gt;
&lt;p&gt;Every CoE requires executive support to be empowered with a clear strategy, an innovation budget, and support where needed. It can take considerable effort to get the buy-in for innovation from skeptical engineering teams who &lt;em&gt;"have been doing it the same way for years."&lt;/em&gt; With executive buy-in these hurdles can usually be avoided or remediated.&lt;/p&gt;
&lt;h2&gt;Cross-discipline collaboration!&lt;/h2&gt;
&lt;p&gt;CoEs rely on cross-discipline collaboration to erode debilitating silos and bring together the right mix of passion and expertise. For example, our common engineering ecosystem relies on architecture, business, development, operations, and other disciplines who respect each other and engage to create more efficient and effective guardrails, processes, and products.&lt;/p&gt;
&lt;h2&gt;Consistency&lt;/h2&gt;
&lt;p&gt;CoEs must monitor and incentivize their members to adhere to the CoP guardrails and use the shared blueprints, working agreements, backlogs, processes, and products consistently. Consistency will enable cross-discipline and cross-CoE collaboration to flourish. &lt;/p&gt;
&lt;h2&gt;Transparency&lt;/h2&gt;
&lt;p&gt;Transparency of strategies, visions, goals, and outcomes are pivotal to avoid duplication of effort, creation of &lt;strong&gt;WASTE&lt;/strong&gt;, and fuel the overall energy. The CoE-Sync and the &lt;strong&gt;Townhall&lt;/strong&gt; event are two of the key incentives that enable monitoring, sync, and transparency.&lt;/p&gt;
&lt;h2&gt;Consistent guardrails!&lt;/h2&gt;
&lt;p&gt;CoEs require guardrails and a blueprint to standup and energize new CoPs. Here are some of our guidelines, sorted alphabetically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-pizza sized team (3-9 members).&lt;/li&gt;
&lt;li&gt;Groomed and prioritized backlog.&lt;/li&gt;
&lt;li&gt;Innovation charge code for members to commit their time.&lt;/li&gt;
&lt;li&gt;Long-term lifetime.&lt;/li&gt;
&lt;li&gt;Membership is by invitation only.&lt;/li&gt;
&lt;li&gt;CoE triggers Community of Practice, Working Group, and Dojo ceremonies linked to CoE.&lt;/li&gt;
&lt;li&gt;CoE owns Community of Practice, Working Group, and Dojo ceremony lists and planning.&lt;/li&gt;
&lt;li&gt;Recognition of attendance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terms of Reference&lt;/strong&gt; defining &lt;strong&gt;WHY&lt;/strong&gt; we are here and &lt;strong&gt;WHAT&lt;/strong&gt; are our objectives and hypothesis that defines the CoE's existence and purpose, for example standardization, guidance, governance, and removing blockers.&lt;/li&gt;
&lt;li&gt;Weekly to bi-weekly cadence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also have a look at our CoE working agreement poster for a crisp summary of these and other guidelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What are our CoE deliverables?&lt;/h1&gt;
&lt;p&gt;The Center of Enablement acts as a hub for all the information, learnings, and outcomes for all the collaboration, community of practice, working group, and Dojo events it triggers. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regular updates on the CoE terms of reference, for example at the Townhall.&lt;/li&gt;
&lt;li&gt;Regular updates on the triggered events, for example at the Townhall.&lt;/li&gt;
&lt;li&gt;Recordings of all collaboration sessions.&lt;/li&gt;
&lt;li&gt;Ongoing Net Performance Score (NPS) from members and stakeholders.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and CoE working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-center-of-enablement.pdf"&gt;Working Agreement - Center of Enablement PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other ceremonies&lt;/h2&gt;
&lt;p&gt;Here are references to more information on ceremonies mentioned above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ceremony-working-group.html"&gt;Working Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>Do not automate anything unless you automate the tests</title><link href="https://wsbctechnicalblog.github.io/automate-tests.html" rel="alternate"></link><published>2021-11-04T00:00:00-07:00</published><updated>2021-11-04T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-04:/automate-tests.html</id><summary type="html">&lt;p&gt;Automating critical systems operations without having automated tests is risky practice&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Automate QA" src="../images/qatrex.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There are three types of automated tests that software engineers focus on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Customer-facing functionality&lt;/li&gt;
&lt;li&gt;Code structure quality&lt;/li&gt;
&lt;li&gt;Systems operations&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Customer-facing functionality&lt;/h2&gt;
&lt;p&gt;Teams build and ship features that enable customers to perform self-service activities. Customers appreciate the convenience of being in the driver’s seat and availing themselves of many useful and needed services.&lt;/p&gt;
&lt;p&gt;The desired behaviour of the systems that teams are building must be fully tested before it is placed in front of paying customers. It is extremely desirable to make the systems fully testable by writing automated tests. Such tests are faster and more reliable than manual tests. They enable teams to engage in continuous delivery while minimizing the risk of introducing defects.&lt;/p&gt;
&lt;h2&gt;Code structure quality&lt;/h2&gt;
&lt;p&gt;Unlike automating the tests that guarantee the desired behaviour of the system, automating the tests that guarantee the code structure quality is a bit trickier. Code structure quality hinges on many industry accepted design principles. Static code analysis tools can provide the metrics that expose the level of the code structure quality. Where the tricky part enters the picture is in deciding which of those metrics are a necessary factor when it comes to assessing the code structure quality.&lt;/p&gt;
&lt;p&gt;While the automated tests that verify customer-facing behaviour (i.e., functionality) are by their nature binary (i.e., either the functionality is present or it isn’t present), automated tests that assess the code structure quality are quite nuanced. It is up to the company’s quality standards to establish the bar – the minimum acceptable quality of the code structure that gets shipped to production.&lt;/p&gt;
&lt;h2&gt;Systems operations&lt;/h2&gt;
&lt;p&gt;When I started my career in the 1990s, the company I worked for (BC InfoHealth, cutting payroll for all hospitals in British Columbia) was still running their business on mainframe computers. Those behemoth machines were situated in the sealed, air-conditioned computer room with a crew of computer operators buzzing around wearing white lab coats (sounds like a scene from some futuristic movie).&lt;/p&gt;
&lt;p&gt;Back in the day, operating those large computer systems was completely manual. One of the reasons mainframe computers got phased out was the unwieldiness of the operations. It was too slow, cumbersome, tedious, and quirky, not to mention exorbitantly expensive.&lt;/p&gt;
&lt;p&gt;Fast forward to today when we finally managed to completely commoditize the computing infrastructure (infrastructure-as-code). Since infrastructure is code, that means it is fully programmable. And that’s why there is a big push toward automating all systems operations.&lt;/p&gt;
&lt;p&gt;To automate systems operations, one must become proficient in systems programming. Programming systems operations is not necessarily the same as programming business applications. If we are to efficiently program any systems operations, we need to understand how those systems work.&lt;/p&gt;
&lt;p&gt;I have seen plenty of very knowledgeable systems programmers write very elaborate programs that automatically run intricate computer operations. I remember reviewing large source code files, containing tens of thousands of lines of code per file. And in almost every of those large files, the code was far from being trivial. Hundreds, if not thousands of nested if-else statements, hundreds of try-catch blocks of code. It’s a veritable jungle!&lt;/p&gt;
&lt;p&gt;Whenever I review any such large files containing the code that runs intricate computer operations, I always make a point to ask the authors: “How did you test this and how do you plan to keep testing the changes going forward?”&lt;/p&gt;
&lt;p&gt;The answer always manages to shock me: “We always test it manually!”&lt;/p&gt;
&lt;p&gt;What is odd in that situation is that experts who spend a lot of time writing sophisticated programs and scripts to automate computer operations never seem to write automated tests. Almost always (in my experience), they resort to manual testing.&lt;/p&gt;
&lt;p&gt;That arrangement raises all sorts of red flags in my mind. When I look at those intricate and convoluted nested if-else statements and those numerous try-catch blocks of code, all I see is plenty of danger zones. If whoever is maintaining those automated scripts does not fully understand the logic governing the automation, they run a huge risk of introducing serious bugs while maintaining the automated system operations.&lt;/p&gt;
&lt;h2&gt;Never write any automated processing without first having automated tests that cover it&lt;/h2&gt;
&lt;p&gt;I think it would be foolhardy to produce a lot of automation without having tests that run any time we make any changes to the automated system and alert us if anything gets broken. That, in my mind, would be an absolute minimal requirement for a well-engineered solution.&lt;/p&gt;
&lt;p&gt;We have adopted and implemented TDD practices in WorkSafeBC. However, those practices only pertain to automating the processing of business policy rules. When it comes to automating systems operations, we don’t have any TDD, nor other automated testing strategy. Seems like we always tend to resort to manual testing when making changes to the source code that automates critical system operations.&lt;/p&gt;
&lt;p&gt;It is high time to mitigate the risks and discontinue such approach and to adopt and implement the test-first approach. It is very important to first and foremost implement executable expectation when automating any aspect of the system operation. Once we have that executable expectation up and running, we can safely proceed to implement the code that will automate the actual operation. That way, we will produce a safety net of tightly knit automated tests that will guarantee we won’t inadvertently break anything nor introduce any regression when maintaining, enhancing, enriching, or repurposing any of our automated operations.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Software engineers serve the business needs by automating business processes. But in addition to that, software engineers engage in continuous improvement of the processes that deliver the business automation.&lt;/p&gt;
&lt;p&gt;While the automation of the business processes is delivered via carefully chosen testing strategy, automation of the critical systems operations lacks such well-engineered strategy. It is critically important that we adopt stringent test-first approach to automating critical systems operations. The criticality is even more urgent when we realize that automated system processing always runs a risk of creating catastrophic damages by programmatically elevating the permissions during runtime. All it takes is for an automated program/script to issue the &lt;strong&gt;RunAs&lt;/strong&gt; command, and the program elevates itself to the highest level of authority on the system. Basically, the program becomes a super user, capable to doing anything on the system!&lt;/p&gt;
&lt;p&gt;We must make sure any such unauthorized breaches of security get caught by the tests before the automated script/program reaches production.&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category><category term="testing"></category><category term="TDD"></category><category term="testability"></category><category term="automation"></category><category term="system-programming"></category></entry><entry><title>Streamlining your pipeline approvals, without flooding DevSecOps with noise</title><link href="https://wsbctechnicalblog.github.io/pipelines-streamlined-approvals.html" rel="alternate"></link><published>2021-11-02T00:00:00-07:00</published><updated>2021-11-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-02:/pipelines-streamlined-approvals.html</id><summary type="html">&lt;p&gt;Back to the future, to optimize the Classic Azure Pipeline approvals.&lt;/p&gt;</summary><content type="html">&lt;p&gt;To improve our deployment frequency, reduce our lead time for change, and avoid unnecessary release stress, we have invested a lot of time reviewing processes and products. In this post I am &lt;strong&gt;NOT&lt;/strong&gt; covering the magic of YAML-based pipelines (see &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part4.html"&gt;magic of queue time assembly&lt;/a&gt; for details) but am focusing on the classic Azure Release Pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEPLOYMENT FREQUENCY - determines how many deployments are made to &lt;strong&gt;**production&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;LEAD TIME FOR CHANGE - is the average time between receiving a feature request and deploying it to &lt;strong&gt;production&lt;/strong&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Streamlined approvals&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Streamlined Approvals" src="../images/pipelines-streamlined-approvals-1.png"&gt;&lt;/p&gt;
&lt;p&gt;As shown, we assume we have a release pipeline that deploys artifacts received from the continuous integration (build) pipeline to a development, system test, canary, and production environment. Deployment to the development environment is automatic, whereas we have gates before can deploy to the system test, canary, and production environments.&lt;/p&gt;
&lt;p&gt;For each gate we use one or more Azure Active Directory (AAD) groups to define the group of users who are authorized to approve the deployment. See &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/deploy-using-approvals?view=azure-devops"&gt;use gates and approvals to control your deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may or should be frowning at this point, because anything that is deployed to the system test environment automatically triggers the Security Review. In our environment this led to agitated Security Engineers who were inundated with security review request across hundreds of release pipelines.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unhappy DevSecOps" src="../images/pipelines-streamlined-approvals-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us reduce the number of security reviews which are WASTEful and check back with DevSecOps.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Artifact filters&lt;/h1&gt;
&lt;p&gt;The eye of the storm is created as we are passing all the artifacts down the release pipeline, regardless from which source repository branch it originated from. In other words, security engineers were triggered for changes that were not ready for prime time (production).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Artifact Filters" src="../images/pipelines-streamlined-approvals-2.png"&gt;&lt;/p&gt;
&lt;p&gt;By adding an &lt;strong&gt;artifact filters&lt;/strong&gt; allow us to create a first line of defense against artifacts that were generated from source repository branches that are not trusted in production and therefore do not require a security review. We only allow artifacts originating from &lt;strong&gt;release&lt;/strong&gt; branches to trigger a security review and trundle down the pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy DevSecOps" src="../images/pipelines-streamlined-approvals-5.png"&gt;
Artifact filters can be overridden if you have relevant permissions. If you need a "&lt;strong&gt;you shall not pass&lt;/strong&gt;" checkpoint, you should investigate the YAML-based pipelines as mentioned above.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://medium.com/objectsharp/branch-and-artifact-filters-in-azure-pipelines-83d4256ada98"&gt;Branch and Artifact Filters in Azure Pipelines&lt;/a&gt;, by Dave Lloyd, for a great overview of artifact filters. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Happy DevSecOps" src="../images/pipelines-streamlined-approvals-4.png"&gt;&lt;/p&gt;
&lt;p&gt;We now have less WASTE, which makes me happy, and a lot less security reviews, which improved our security engineers' mood and ability to be laser focused on potential production deployments.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Mulling over the future approvals&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Constantly think about how you could be doing things better. Keep questioning yourself."&lt;/em&gt; - Elon Musk
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We take this quote to heart and have been mulling over our streamlines approval process. When we map a pipeline to a value stream it becomes evident that all of the gates and the security review contribute to our &lt;strong&gt;Lead time for change&lt;/strong&gt; - WASTE.&lt;/p&gt;
&lt;p&gt;Where we can, we ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce the number and the sequence of approvals.&lt;/li&gt;
&lt;li&gt;Automate validations and approvals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Leaving us with security review, which is based on automated vulnerability and quality scans and a few pairs of security engineer eyeballs. My colleague Kevin and I have been chatting about the &lt;a href="https://nexus-card.ca/"&gt;NEXUS&lt;/a&gt;-type border control process, which may allow us to expedite parts of the security reviews based on &lt;strong&gt;trust&lt;/strong&gt;. Watch this space for updates.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Quality of Design</title><link href="https://wsbctechnicalblog.github.io/quality-of-design.html" rel="alternate"></link><published>2021-10-27T00:00:00-07:00</published><updated>2021-10-27T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-27:/quality-of-design.html</id><summary type="html">&lt;p&gt;Adopt design principles to ensure highest quality of the code design&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Quality of design" src="../images/quality-of-design.png"&gt;&lt;/p&gt;
&lt;p&gt;Quality of design in software engineering is focused on the code structure. There are many ways to implement the desired behaviour of a software product. Careless implementation of desired behaviour delivers poor quality of design. Consequently, the quality of the delivery gets compromised.&lt;/p&gt;
&lt;p&gt;It is therefore paramount to invest time and effort to ensure that quality of the designed code structure is optimal. There are two branches of industry standards that serve as guidelines when it comes to producing optimal quality of the designed code structure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design principles&lt;/li&gt;
&lt;li&gt;Design patterns&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Design patterns have been introduced more than 25 years ago (&lt;a href="https://www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?dchild=1&amp;amp;gclid=Cj0KCQjw8eOLBhC1ARIsAOzx5cH-0nZehpHbrYfJBmdgtJ5AAfU0wYOyyHk4LrPvKjNjmsHAy31fcO8aAlsVEALw_wcB&amp;amp;hvadid=353255290729&amp;amp;hvdev=c&amp;amp;hvlocphy=9001545&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=362995041334244275&amp;amp;hvtargid=kwd-301036555631&amp;amp;hydadcr=26084_9772498&amp;amp;keywords=design+patterns+gang+of+four&amp;amp;qid=1635370689&amp;amp;sr=8-1"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;, published in 1994). Most software engineers are by now familiar with many design patterns, which is a great improvement compared to earlier days of software engineering practices.&lt;/p&gt;
&lt;p&gt;Design principles, on the other hand, are still not as widely accepted as design patterns are. Now may be a good time to pay a bit closer attention to what design principles mean and how to adopt them in our daily practice.&lt;/p&gt;
&lt;h2&gt;What are design principles?&lt;/h2&gt;
&lt;p&gt;Organizing structural components of a software system should be following accepted industry standards. These standards comprise the body of design principles.&lt;/p&gt;
&lt;p&gt;The standardized body of design principles has two levels of abstraction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Coarse-grained design principles&lt;/li&gt;
&lt;li&gt;Fine-grained design principles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Coarse-grained design principles are difficult to apply in daily practice because they are quite abstract. There are four coarse-grained design principles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Low coupling&lt;/li&gt;
&lt;li&gt;High cohesion&lt;/li&gt;
&lt;li&gt;Low complexity&lt;/li&gt;
&lt;li&gt;Proper encapsulation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fine-grained design principles are less abstract and therefore easier to apply in daily practice. Adhering to fine-grained design principles ensures adherence to more abstract, coarse-grained design principles.&lt;/p&gt;
&lt;h2&gt;What are the benefits of design principles?&lt;/h2&gt;
&lt;p&gt;Design principles are helpful in building common basis of architectural knowledge. By following guidelines on how to implement fine-grained design principles, software engineers get enabled to build, understand, and maintain high-quality software systems. Systems built following design principles can successfully grow into large scale systems. Following those principles is also helpful in preventing us from unforeseen pitfalls.&lt;/p&gt;
&lt;h2&gt;An example of fine-grained design principle&lt;/h2&gt;
&lt;p&gt;An example of a fine-grained design principle may help understand the benefit of mastering those principles. For this exercise let’s have a quick look at &lt;strong&gt;Option Operand Principle (OOP)&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Every routine, method, or function operates on certain values. Those values are referred to as &lt;em&gt;operands&lt;/em&gt;. Typically, operands make their way into the body of a routine, method, or function by being passed in as an argument, or a parameter. The OOP principle states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The argument of a routine should only include operands (no options).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is meant by ‘option’ in the above principle? We can view option in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Option that the client calling the routine does not provide a value for the argument&lt;/li&gt;
&lt;li&gt;Option that is passed in as an argument but is not treated as an argument&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the first case, the onus is on the creator of the routine to provide a default value that will kick in in case the client chooses not to provide the value (i.e., in case the argument contains NULL value).&lt;/p&gt;
&lt;p&gt;In the second case, a value passed in as an argument is not being operated on by the routine. If the routine does not operate on a value passed in, that value is viewed as an option, not as an operand.&lt;/p&gt;
&lt;p&gt;Both cases of violating the OOP principle are considered bad code smell, with the first case being viewed as a mild code smell while the second case a more serious case of bad code smell.&lt;/p&gt;
&lt;p&gt;Providing default value for cases when the client chooses not to provide the value for an argument is a code smell because it places the onus on the routine to implement reasonable escape hatch (which may not always be easily achievable), while it may give the client code a false understanding of what to expect when calling the routine.&lt;/p&gt;
&lt;p&gt;Providing an option when calling a routine places onus on the called routine to handle the decision logic. That responsibility is better left to the calling client; they need some processing done; they should possess sufficient understanding which routine to call.&lt;/p&gt;
&lt;h2&gt;Detecting violations of the OOP principle&lt;/h2&gt;
&lt;p&gt;While it is very desirable to be able to automatically detect violations of this principle, in practice it is proving to be a tough challenge. Static code analyzers cannot easily distinguish between operands and options. The only time when it is possible to detect violations of this principle automatically and unambiguously is if the option type is Boolean. In such case it is obvious that Boolean argument serves to split the code into two paths and decide the mode of operation.&lt;/p&gt;
&lt;h2&gt;Conclusion​​​​​​​&lt;/h2&gt;
&lt;p&gt;There are numerous design principles that guide us in producing high quality structure of a software product. Adhering to those principles protects us from various pitfalls and improves the overall quality and maintainability of our system. In this episode I’ve reviewed only one design principle, to provide a simple example and a foretaste of how those principles may apply in our daily practice.&lt;/p&gt;</content><category term="Posts"></category><category term="design"></category><category term="code-quality"></category><category term="learning"></category></entry><entry><title>Don’t become an Expert Beginner</title><link href="https://wsbctechnicalblog.github.io/dont-become-expert-beginner.html" rel="alternate"></link><published>2021-10-25T00:00:00-07:00</published><updated>2021-10-25T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-25:/dont-become-expert-beginner.html</id><summary type="html">&lt;p&gt;How to avoid the trap of getting stuck in an Expert Beginner role&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dreyfus model lists five phases of skill acquisition:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Novice &lt;/li&gt;
&lt;li&gt;Competent &lt;/li&gt;
&lt;li&gt;Proficient &lt;/li&gt;
&lt;li&gt;Expert &lt;/li&gt;
&lt;li&gt;Master &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When paired with what Dreyfus refers to as Mental Functions (Recollection, Recognition, Decision and Awareness), the skill acquisition moves from "following the rules dogmatically without the awareness of the big picture", to "complete grasp of the big picture which manifests in the act of intuitive transcending of rules". So, while a Novice exhibits non-situational recollection, decomposed recognition analytical decision making and monitoring awareness, Master exhibits situational recollection, holistic recognition, intuitive decision making and absorbed awareness. And everything in-between (refer to the table below): &lt;/p&gt;
&lt;p&gt;&lt;img alt="From novice to master" src="../images/novice-to-master.png"&gt;&lt;/p&gt;
&lt;p&gt;In an optimistic situation, skill levels progress linearly, from Novice to Competent, then from Competent to Proficient, after which we progress from Proficient to Expert, and finally from Expert to Master: &lt;/p&gt;
&lt;p&gt;&lt;img alt="From novice to master 2" src="../images/novice-to-master2.png"&gt;&lt;/p&gt;
&lt;p&gt;Leaving the ultimate level (Mastery) out for the purposes of this discussion, let’s look into how things play out when we introduce a finer grained phase into the picture – Advanced Beginner: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Advanced beginner" src="../images/advanced-beginner.png"&gt;&lt;/p&gt;
&lt;p&gt;While Novices are obviously unsure of what lies ahead in terms of training needed to acquire necessary skills, after spending some time in training and reaching the Advanced Beginner status, trainees now gain much needed confidence. No one likes to feel inadequate, so Novices are extremely motivated to graduate to a higher skill level.&lt;/p&gt;
&lt;p&gt;Advanced Beginner is that next level. Practitioners reaching Advanced Beginner stage possess some skills but nevertheless lack the insight into the big picture. Because of that lack of insight, Advanced Beginners are in danger of confusing themselves with Experts. &lt;/p&gt;
&lt;p&gt;As they continue their skills acquisition trajectory, Advanced Beginners can take two paths: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Graduate to the Competent &lt;/li&gt;
&lt;li&gt;Graduate to the Expert Beginner &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If they graduate to the Competent stage, they gain the first precious insight into the big picture. At that point, the insight into the big picture (regardless of how incomplete that insight may be) prevents them from confusing themselves with Experts. Competent people are those who know that they don’t know. 
If Advanced Beginners graduate to the Expert Beginner level, they typically assume that now they’ve graduated to the Expert level, period. That assumption is fortified by the absence of insight into the big picture.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Expert beginner" src="../images/expert-beginner.png"&gt;&lt;/p&gt;
&lt;p&gt;What is also typical for the Expert Beginner level is that it is reinforced by the optimistic self-assessment which goes something like this: "I know that I’m doing it right because, as an expert, I’m pretty much doing everything right by definition." (i.e., they are still rules-bound).&lt;/p&gt;
&lt;p&gt;Expert Beginner is more advanced than the Advanced Beginner for the simple reason that Expert Beginner has more experience being a beginner. But Expert Beginner doesn’t yet have sufficient experience to be able to reach the level of Competent practitioner (due to the lack of the grasp of the big picture). &lt;/p&gt;
&lt;p&gt;So, while Competent practitioner may boast something like "ten years of experience", Expert Beginner can actually boast "one year of experience ten times." Notice the lack of progress in Expert Beginner. &lt;/p&gt;
&lt;p&gt;Progress is not possible without the awareness that there is more hard work awaiting to be done. But if we feel that we’ve reached the level of Expert, what else is there that remains to be done? &lt;/p&gt;
&lt;p&gt;The desire to deviate and to experiment vanishes from the Expert Beginner’s repertoire. And with it, any hope for progress disappears. It’s status quo that stretches indefinitely into the future.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category></entry><entry><title>Your old and trusted hammer is not always the right tool for the job</title><link href="https://wsbctechnicalblog.github.io/hammer-is-not-always-the-right-tool-for-the-job.html" rel="alternate"></link><published>2021-10-23T00:00:00-07:00</published><updated>2021-10-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-23:/hammer-is-not-always-the-right-tool-for-the-job.html</id><summary type="html">&lt;p&gt;“I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail.” - Abraham Maslow 1966&lt;/p&gt;</summary><content type="html">&lt;p&gt;How often have you tried to fix everything using a hammer, often without considering other choices? Abraham Maslow's quote brings back precious memories from my childhood in sunny South-Africa, when the hammer seemed the fitting tool (or weapon) for any venture.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hammer" src="/images/hammer-is-not-always-the-right-tool-for-the-job-0.jpg"&gt;&lt;/p&gt;
&lt;p&gt;But I am not here to talk about hammers. To the contrary, I want to encourage everyone to question &lt;strong&gt;WHY&lt;/strong&gt; we do the things we do, make use of the technology of &lt;strong&gt;today&lt;/strong&gt;, continuously look for ways we can &lt;strong&gt;innovate&lt;/strong&gt;, &lt;strong&gt;simplify&lt;/strong&gt;, and reduce invaluable &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the 80's&lt;/h1&gt;
&lt;p&gt;Let us travel back in time to the early 1980's when I started my first job with Burroughs, working on the &lt;a href="https://en.wikipedia.org/wiki/Convergent_Technologies_Operating_System#:~:text=The%20Convergent%20Technologies%20Operating%20System%2C%20also%20known%20variously,STARSYS%2C%20was%20a%20modular%2C%20message-passing%2C%20multiprocess-based%20operating%20system."&gt;Convergent Technologies Operating System&lt;/a&gt; (CTOS) on 80186-based B21 mini-computers. Those were the days we were creative in Assembler and V2/PLM languages, operating within the 64 kilobytes (yes kilo, not giga) memory segments, and battling to backup 10MB hard-drives, staring at flickering green screens.&lt;/p&gt;
&lt;p&gt;&lt;img alt="B25" src="/images/hammer-is-not-always-the-right-tool-for-the-job-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;At home, I was the proud owner of a B21 mini-computer, like this photo I found on the Internet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="B21" src="/images/hammer-is-not-always-the-right-tool-for-the-job-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I am drifting off again ... focus! Back in those days, we had no version control services or software that tracked changes. Therefore, whenever we wanted to make a change to a document or a source file, we created a backup copy, typically by appending a &lt;strong&gt;-yyyzmmdd.rev&lt;/strong&gt; suffix to the filename. &lt;/p&gt;
&lt;p&gt;After a while we had a hard drive filled with endless copies of the same file with variations of changes.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the 90's&lt;/h1&gt;
&lt;p&gt;Teleporting to the mid-90's we find ourselves working with &lt;a href="https://www.bing.com/search?q=sourcesafe&amp;amp;cvid=4c7c624dc2ad4eed94ec071ebf6e15c2&amp;amp;aqs=edge.0.69i59j0l5j69i60l3.1977j0j4&amp;amp;FORM=ANAB01&amp;amp;PC=U531"&gt;Visual SourceSafe&lt;/a&gt;, a source control system that evolved from One Tree Software in North Carolina. &lt;/p&gt;
&lt;p&gt;&lt;img alt="SourceSafe" src="/images/hammer-is-not-always-the-right-tool-for-the-job-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It was the beginning of the journey that would take us into the era of Team Foundation Server, Visual Studio Team System, and today's flagship &lt;a href="https://azure.microsoft.com/en-us/services/devops/"&gt;Azure DevOps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was also the end of copying source files by hand to create version backups, polluting your storage with meaningless copies of the same bits and bytes.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the future&lt;/h1&gt;
&lt;p&gt;Fast forward to 2021, which is four decades later, in a world with Google Docs or Office 365, boasting powerful collaboration and versioning features. I find myself staring at file servers filled with hundreds, if not thousands of Office documents such as Excel, PowerPoint, and Word. Most are copies created the same way we created backups for source code in the 80s. &lt;/p&gt;
&lt;p&gt;The worst is watching documents attached to emails, updated by recipients as separate copies, until a brave volunteer steps forward to merge all changes back into the master. &lt;strong&gt;Merge hell&lt;/strong&gt; all over again.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Merge Hell" src="/images/hammer-is-not-always-the-right-tool-for-the-job-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Please put your 80's hammer and mindset aside and start collaborating with the products, such as &lt;a href="https://www.office.com/"&gt;Office 365&lt;/a&gt; and &lt;a href="https://www.microsoft.com/en-ca/resilience/remote-development-solutions"&gt;Visual Studio Code Live Share&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only will you collaborate efficiently, but you will also cut down on the amount of &lt;strong&gt;WASTE&lt;/strong&gt; you produce and avoid the dreaded merge hell exercise.&lt;/p&gt;
&lt;p&gt;Still unconvinced? If yes, I recommend you try these two experiments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;EXPERIMENT 1&lt;/strong&gt;: Create an Excel document containing a beefy set of data and share it as an attachment with 13 of your colleagues. Ask everyone to update formulas and data. When done, ask them to send the changes back to you. Merge all the changes back into your master copy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EXPERIMENT 2&lt;/strong&gt;: Share the same file using Office Excel 365 and ask your colleagues to update formulas and data. You can literally watch &lt;strong&gt;everyone&lt;/strong&gt; co-author and instantly see any content changes in real-time. &lt;strong&gt;Simple&lt;/strong&gt; and effective!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will let you decide which is the simpler and more productive experiment, producing little to no &lt;strong&gt;WASTE.&lt;/strong&gt; I will place all my apples on the second experiment!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Collaboration" src="/images/hammer-is-not-always-the-right-tool-for-the-job-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Please pack away your hammer (habits) and explore the phenomenal collaboration products you have at your disposal!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="eliminate-waste"></category></entry><entry><title>Cultivate apathy for details to enable refactoring</title><link href="https://wsbctechnicalblog.github.io/apathy-for-details.html" rel="alternate"></link><published>2021-10-15T00:00:00-07:00</published><updated>2021-10-15T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-15:/apathy-for-details.html</id><summary type="html">&lt;p&gt;Give equal care to the code structure as you would give to the code behaviour&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Law of Demeter" src="../images/law-of-demeter.png"&gt;&lt;/p&gt;
&lt;p&gt;Code behaviour cannot be implemented without having code structure. On the other hand, code structure that does not implement meaningful and useful behaviour is worthless. It thus becomes apparent that code behaviour and code structure go together – it is not possible to separate one from another.​​​​​​​&lt;/p&gt;
&lt;p&gt;Since code structure is never visible to end-users, the tendency is to assign much higher value to the code behaviour than to the code structure. From the business operations side of things, the most pressing question is always &lt;em&gt;Why&lt;/em&gt;? Why are we planning to make changes to our system? There’s got to be a valid business case for spending precious time, money, and effort on making proposed changes.&lt;/p&gt;
&lt;p&gt;Once the business case is justified, we move into the &lt;em&gt;What&lt;/em&gt; phase. What do we need to change in our system so that the business case gets fulfilled?&lt;/p&gt;
&lt;p&gt;It is this &lt;em&gt;What&lt;/em&gt; stage of development that defines the expected change in the behaviour of the system. Maybe we need to change the behaviour of the system in such way that it allows end-users to apply for a promotional discount? Now that we know what needs to get done, there is an urgent pressure to do it.&lt;/p&gt;
&lt;p&gt;That leads us to the &lt;em&gt;How&lt;/em&gt;. While our discussions and concerns around the &lt;em&gt;What&lt;/em&gt; had helped define the &lt;em&gt;expected behaviour&lt;/em&gt; (i.e., the desired functionality), when it comes to deciding &lt;em&gt;How&lt;/em&gt; to do it, we realize that there are many ways to skin a cat. And here is where the trouble can potentially begin.&lt;/p&gt;
&lt;p&gt;How to implement the agreed-upon behaviour is the sole responsibility of the code structure. We could implement it in a simple, straightforward way, or we could implement it in a convoluted, unnecessarily complex way. There are many possible ways to implement the same behaviour of the code. Having cleared the questions around the &lt;em&gt;Why&lt;/em&gt; and the &lt;em&gt;What&lt;/em&gt;, we are now discussing the &lt;em&gt;Way&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Substandard structure causes substandard behaviour&lt;/h2&gt;
&lt;p&gt;From the business operations standpoint, the most valuable way to implement the desired behaviour is the quickest, cheapest way. However, such approach usually belies false economy.&lt;/p&gt;
&lt;p&gt;If the desired behaviour, once implemented, is never going to change, one could argue that the cheapest, quickest, dirtiest way to implement it makes sense. However, it is extremely rare that newly added behaviour to the system never changes.&lt;/p&gt;
&lt;p&gt;Change in software is inevitable. Creating a substandard structure of the code results in inability to safely accommodate upcoming unavoidable changes. As such, what little gets saved upfront by not caring about the quality of the code structure, gets quickly eaten up by the exorbitant costs of having to make subsequent changes to the code. Not only that, but the changes to a lousy code structure tend to introduce a lot of bugs, defects, and breakages.&lt;/p&gt;
&lt;p&gt;Overall, not paying attention to the quality of the code structure (the &lt;em&gt;Way&lt;/em&gt;) results in the substandard behaviour of the system. It becomes brittle, unreliable, non-performant, and quickly turns from being an asset into becoming a liability.&lt;/p&gt;
&lt;h2&gt;Enable refactoring&lt;/h2&gt;
&lt;p&gt;Almost all knowledge-based activities are based on refactoring. We typically start any project by crafting the first draft. That first draft is far from being anywhere near good, but it’s a great starting point. We throw in quick outlines and paint with a broad brush (we approximate). Then we iterate. We make a second pass (either working on our own or collaborating on the project in a team). The second pass increases the resolution of the information provided in the document we are working on. That gradual increase in the precision of information is what we refer to as ‘refactoring’.&lt;/p&gt;
&lt;p&gt;Regardless of the type of the project we may be collaborating on (i.e., a financial plan, a technology roadmap, an important planning event, etc.), we never create a publishable version on the first pass. We must keep reworking our initial draft, adding more details, removing clumsy/cumbersome statements, and so on. We proceed piecemeal, step-by-step.&lt;/p&gt;
&lt;p&gt;After several iterations (i.e., refactoring sessions), we eventually arrive at a satisfactory version of our deliverable. It is finally ready to be published.&lt;/p&gt;
&lt;p&gt;There is absolutely no reason why writing software code should be any different. And yet, for some strange reason, we meet many software engineers who feel that refactoring is a waste of time. Some people think that good programmers must know how to write well-structured code on the first try.&lt;/p&gt;
&lt;p&gt;That mindset is very damaging to the quality of the delivery. It insists on ignoring the quality of the code structure and instead spending all the time only on implementing the desired behaviour of the code. The argument for such irresponsible practice is that since end-users will never see the code structure, why should we worry about its quality?&lt;/p&gt;
&lt;p&gt;It’s like saying “Since average drivers will never get to see the inside of the car engine, why worry about its quality? Instead, we should pour all our efforts into making the attractive exterior and interior, plus do an amazing paint job and add an awesome stereo system, heated leather seats, and so on!”&lt;/p&gt;
&lt;h2&gt;Why enable refactoring?&lt;/h2&gt;
&lt;p&gt;The key to enabling easy, risk-free refactoring is to practice &lt;em&gt;apathy for details&lt;/em&gt;. What do we mean by that? Maybe a hypothetical example could illustrate the concept better:&lt;/p&gt;
&lt;p&gt;Imagine a person arriving at the checkout in a supermarket and the cashier asks them to pay for their groceries. The person reaches into their pocket and takes out their car keys and gives the keys to the cashier. The cashier is confused, and the person says: “I’m parked in the stall 17, red Honda Accord. Go to my car, open the passenger side door, open the glove compartment, find my jacket in there, reach into the bottom right jacket pocket, grab my wallet, take out the cash and please leave the change in!”&lt;/p&gt;
&lt;p&gt;Naturally, the cashier would refuse to do that. Why? Because the cashier has &lt;em&gt;apathy for details&lt;/em&gt;. Simply put, the cashier only wants the money bills (the &lt;em&gt;What&lt;/em&gt;) and is absolutely not interested in the process by which that money arrives at their hands (disinterested in the &lt;em&gt;How&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;If we structure our code in such a way that it always refuses to know the annoying details (the &lt;em&gt;How&lt;/em&gt;), it will be easy to refactor it without any risk. If, on the other hand, we structure our code in such a way that it is hungry for details, we end up with tightly coupled code that is brittle, expensive, and risky to modify. Which is to say, we paint ourselves in the corner.&lt;/p&gt;
&lt;h2&gt;How to enable refactoring&lt;/h2&gt;
&lt;p&gt;The best way to enable refactoring is to write code that is &lt;em&gt;structure-shy&lt;/em&gt;. If the code is disinterested in knowing more details than is necessary, such code remains loosely coupled (easy and risk-free to change).&lt;/p&gt;
&lt;p&gt;Yes, but how to make sure the code we write is &lt;em&gt;structure-shy&lt;/em&gt;? The recommended way is to abstain from writing any code before we have created a client who will consume that code.&lt;/p&gt;
&lt;p&gt;To create the first client of the yet-to-be-written code, we focus on the &lt;em&gt;expected behaviour&lt;/em&gt;. The &lt;em&gt;expected behaviour&lt;/em&gt; should be obtained via a single step. The client should be able to ask the system to do something, and that ask should be a simple step. The system will then go away, do some processing behind the scenes, and return with the expected values.&lt;/p&gt;
&lt;p&gt;What we’ve described above is what is technically known as an interface, or an API.&lt;/p&gt;
&lt;p&gt;A quality interface/API is always &lt;em&gt;structure-shy&lt;/em&gt;. It does not care about the &lt;em&gt;How&lt;/em&gt;, only cares about the &lt;em&gt;What&lt;/em&gt;.
To create the client before we create the code that will serve the client’s expectations, we resort to writing microtests. Microtests are focused on small, atomic steps where the client sends one request to the system, and then, after receiving a response, asserts whether the response matches the initial expectation. That way, the client verifies that the behaviour of the system is still as expected.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;structure-shy&lt;/em&gt; code is now freely open for radical refactoring. With each refactoring step (i.e., a change made to the code structure), we run the clients (i.e., microtests) to confirm that nothing broke with that change and that the system still behaves as expected.&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category></entry><entry><title>How to suppress selected logic when running PR validation pipelines</title><link href="https://wsbctechnicalblog.github.io/suppress-pipeline-as-code-for-pr.html" rel="alternate"></link><published>2021-10-04T00:00:00-07:00</published><updated>2021-10-04T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-04:/suppress-pipeline-as-code-for-pr.html</id><summary type="html">&lt;p&gt;Solving the pipeline-as-code "chicken or the egg" challenge by suppressing selected logic&lt;/p&gt;</summary><content type="html">&lt;p&gt;With our app-type CI/CD pipeline blueprints we are consolidating the continuous integration (CI) and continuous delivery (CD) pipelines into one pipeline. When you peruse &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10: Pipelines - Meet our second generation app-type blueprints&lt;/a&gt; you will get an overview of our new pipelines which are &lt;strong&gt;powerful&lt;/strong&gt; ... with a twist.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The Twist&lt;/h1&gt;
&lt;p&gt;By consolidating both the continuous integration and delivery logic, we made the pipelines unsuitable to be used as validation pipelines in our Pull Request policies. Why? &lt;/p&gt;
&lt;p&gt;Assume you are creating a pull request to apply a hotfix to a release branch. When the pull request triggers your pipeline, it must wait until the pipeline is complete - which means we must build and deploy to all environments, including production, before the validation pipeline completes. Obviously a "chicken or the egg" and &lt;strong&gt;not&lt;/strong&gt; a desired solution.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The Fix&lt;/h1&gt;
&lt;p&gt;We therefore applied a minor fix (or feature) to our blueprints.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# DEPLOYMENT&lt;/span&gt;
&lt;span class="c1"&gt;# 2021.10.04 WS Suppress CD on &amp;quot;merge&amp;quot; so that we can use PR validation builds&lt;/span&gt;
&lt;span class="c1"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCDTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blueprint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Custom&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCDTemplate&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;cdParameter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCDParameter&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;ne(lower(variables['Build.SourceBranchName']), 'merge')&lt;/code&gt; part of the code suppresses the conditional logic if the pipeline run originates from a Pull Request merge validation build.&lt;/p&gt;
&lt;p&gt;At this stage we suppress all post-build logic to keep it &lt;strong&gt;simple&lt;/strong&gt; but can shift the conditional logic by a few lines to allow the deployment to the &lt;strong&gt;development&lt;/strong&gt; stage, while suppressing others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple&lt;/strong&gt;, but powerful!&lt;/p&gt;</content><category term="Posts"></category><category term="pipelines"></category><category term="tips"></category><category term="x-as-code"></category></entry><entry><title>A peek at our Dream Team Working Agreement Poster</title><link href="https://wsbctechnicalblog.github.io/dream-team-working-agreement-poster.html" rel="alternate"></link><published>2021-10-02T00:00:00-07:00</published><updated>2021-10-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-02:/dream-team-working-agreement-poster.html</id><summary type="html">&lt;p&gt;As a team we want to create an empathetic, safe, and vibrant ecosystem&lt;/p&gt;</summary><content type="html">&lt;p&gt;With our Common Engineering team we have a noble vision to &lt;em&gt;"Enable and empower engineering to work together with shared and efficient processes, products, and promote a healthy DevOps mindset, to continuously deliver value to our organization and end-users."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As we prepare for the the countdown to launch our mission methods, we are taking the opportunity to inspect and adapt ourselves to create an &lt;strong&gt;empathetic&lt;/strong&gt;, &lt;strong&gt;safe&lt;/strong&gt;, and &lt;strong&gt;vibrant&lt;/strong&gt; team, to continuously look for opportunities to &lt;strong&gt;innovate&lt;/strong&gt; and reduce &lt;strong&gt;waste&lt;/strong&gt;, and to contribute to a &lt;strong&gt;common language.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this post we are sharing our dream team working agreement poster, which sets team expectations, lays out ways to collaborate, and establishes an atmosphere that encourages failure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Failure is an option here. If things are not failing, you are not innovating enough."&lt;/em&gt; - Elon Musk
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;The dream team poster summarizes what we value and encourage, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How we will &lt;strong&gt;optimise meetings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Our &lt;a href="https://agilemanifesto.org"&gt;Agile mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our &lt;strong&gt;Kanban&lt;/strong&gt; mindset (visualise, flow, improve)&lt;/li&gt;
&lt;li&gt;Our &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;DevOps mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our &lt;a href="https://www.tactec.ca/ndtw-resources"&gt;DevOps Core Values&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/dream-team-working-agreement-poster-1.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/dream-team-working-agreement-poster.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enjoy and remember that we crave candid feedback to sprinkle value over these artifacts!&lt;/p&gt;
&lt;p&gt;| &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-1.html"&gt;POSTER 1&lt;/a&gt; | &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-2.html"&gt;POSTER 2&lt;/a&gt; | &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-3.html"&gt;POSTER 3&lt;/a&gt; | POSTER 4 (this) |&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>Why I loathe when engineers use TLAs, such as CD vs CD!</title><link href="https://wsbctechnicalblog.github.io/why-i-hate-tlas.html" rel="alternate"></link><published>2021-10-01T00:00:00-07:00</published><updated>2021-10-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-01:/why-i-hate-tlas.html</id><summary type="html">&lt;p&gt;The use of TLAs creates subpar collaboration, unnecessary confusion, and unintended waste.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When last were you sitting in a discussion, lost in a bombardment of TLAs (&lt;strong&gt;t&lt;/strong&gt;hree-&lt;strong&gt;l&lt;/strong&gt;ettered-&lt;strong&gt;a&lt;/strong&gt;cronyms)? In engineering, especially software engineering, we have an abundance of acronyms which is the norm for us, but the kiss of confusion and one of the core reasons collaboration with our non-&lt;strong&gt;IT&lt;/strong&gt; stakeholders is so challenging.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IT&lt;/strong&gt; = &lt;strong&gt;I&lt;/strong&gt;nformation &lt;strong&gt;T&lt;/strong&gt;echnology in the context of this post. It could be mistaken for &lt;strong&gt;i&lt;/strong&gt;nternet &lt;strong&gt;t&lt;/strong&gt;imes, &lt;strong&gt;i&lt;/strong&gt;nternational &lt;strong&gt;t&lt;/strong&gt;rade, &lt;strong&gt;i&lt;/strong&gt;ncome &lt;strong&gt;t&lt;/strong&gt;ax, &lt;strong&gt;i&lt;/strong&gt;nitial &lt;strong&gt;t&lt;/strong&gt;est, &lt;strong&gt;I&lt;/strong&gt; &lt;strong&gt;t&lt;/strong&gt;hink, etc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Seek Clarity!&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Confusion" src="/images/why-i-hate-tlas-1.png"&gt;&lt;/p&gt;
&lt;p&gt;In our common engineering team, we are spearheading several cool initiatives, such as optimization of meetings (a future topic) and the avoidance of TLAs or FLAs - three, four, and five lettered acronyms. Instead, when writing, we practice the recommended way of first mentioning the full meaning, followed by the acronym, for example Information Technology (IT).&lt;/p&gt;
&lt;p&gt;When collaborating verbally we encourage everyone to "read" the TLA, but "speak" the expanded form. In other words, when we read "IT is fun", we say "Information Technology is fun."&lt;/p&gt;
&lt;p&gt;&lt;img alt="Happy" src="/images/why-i-hate-tlas-2.png"&gt;&lt;/p&gt;
&lt;p&gt;A simple way to change the most complex and confusing conversation, to a &lt;strong&gt;simple&lt;/strong&gt; and &lt;strong&gt;easy to understand&lt;/strong&gt; collaboration.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;So, what is CD versus CD?&lt;/h1&gt;
&lt;p&gt;Continuous Delivery (CD) is similar, but not the same as Continuous Deployment (CD). Although &lt;code&gt;CD == CD&lt;/code&gt;, there is a subtle difference.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Continuous Delivery" src="/images/why-i-hate-tlas-3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous Delivery&lt;/strong&gt; deploys the release artifacts to several environment, such as development, system test, staging, and production, or deployment rings. See &lt;a href="https://www.tactec.ca/ndtw-resources"&gt;Act 3 in Navigating DevOps through Waterfalls&lt;/a&gt; and &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Feature flags or Rings&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Continuous Deployment" src="/images/why-i-hate-tlas-4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous Deployment&lt;/strong&gt; deploys the release artifacts to a single environment and each change goes directly to production. Using &lt;a href="https://opensource.com/article/19/6/why-hypothesis-driven-development-devops"&gt;Hypothesis-driven Development&lt;/a&gt;, for example, you can separate the deploy from the release using &lt;strong&gt;Feature Flags&lt;/strong&gt;, hiding the changes until it is time to release them for prime time.&lt;/p&gt;
&lt;p&gt;Imagine if you are sitting in a production release planning meeting and mistake &lt;strong&gt;CD&lt;/strong&gt; for &lt;strong&gt;CD&lt;/strong&gt; - welcome 2AM production incident meeting(s) :( Compared to have clarity whether the release is based on Continuous Delivery or Continuous Deployment - enjoy a night of uninterrupted quality sleep :) The choice is yours!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Keep it simple and avoid waste!&lt;/h1&gt;
&lt;p&gt;In conclusion, having a common and clear language, void of the infamous TLAs, energizes collaboration and avoids waste such as frustration, confusion, overwhelming &lt;a href="https://www.simscale.com/blog/2017/12/nasa-mars-climate-orbiter-metric/"&gt;loss of space crafts in translation&lt;/a&gt;, or worse &lt;a href="https://twitter.com/mcsee1/status/1443597775346839557?s=20"&gt;unrecognized waste&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Invaluable feedback from discussions making communication unambiguous&lt;/h1&gt;
&lt;p&gt;We have received candid feedback on how to make communication unambiguous, which I would like to add to this post.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Avoid technical jargon.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoid colloquialism.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoiding acronyms and technical jargon also addresses accessibility, not everyone fills a technical role within this Division therefore I consistently must ask the meaning of acronyms. I would add using proper nouns (I spoke to Annette) instead of pronouns (I spoke to her), of course this is not related to a person's preferred identity signature block.&lt;/em&gt; - AnnetteG.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;THANK YOU&lt;/strong&gt; for the candid feedback. Keep it coming.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="pipelines"></category><category term="eliminate-waste"></category></entry><entry><title>Checkout your git repos at the right time!</title><link href="https://wsbctechnicalblog.github.io/checkout-at-the-right-time.html" rel="alternate"></link><published>2021-09-21T00:00:00-07:00</published><updated>2021-09-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-09-21:/checkout-at-the-right-time.html</id><summary type="html">&lt;p&gt;Let us explore why the sequence of &lt;strong&gt;checkout&lt;/strong&gt; steps are important in your Azure Pipeline.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="https://wsbctechnicalblog.github.io/share-your-toolbox-with-pipelines.html"&gt;Two ways to share your toolbox with your pipelines&lt;/a&gt; we reviewed two strategies to share scripts and config files with your Azure (YAML) Pipelines. &lt;/p&gt;
&lt;p&gt;&lt;img alt="WIN:WIN" src="../images/checkout-at-the-right-time-1.png"&gt; &lt;/p&gt;
&lt;p&gt;As discussed, the &lt;code&gt;checkout: git://&amp;lt;AzDO-PROJECT&amp;gt;/&amp;lt;REPO-NAME&amp;gt; path: &amp;lt;PATH&amp;gt;&lt;/code&gt; gem gets a tick for &lt;strong&gt;SIMPLICITY&lt;/strong&gt; and a tick for &lt;strong&gt;PERFORMANCE&lt;/strong&gt;. But ... as always, there is a catch. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YES - There are other options, such as &lt;a href="https://www.powershellgallery.com/"&gt;PowerShell Gallery&lt;/a&gt;, but we intentionally only compared the two &lt;code&gt;checkout:&lt;/code&gt; versus &lt;code&gt;Universal Artifact&lt;/code&gt; options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Run pipeline blueprint regression tests&lt;/h1&gt;
&lt;p&gt;When I ran the regression tests my excitement grew as the generic-single-job and generic-multiple-jobs blueprints passed with flying colours. Next, the app-type Universal Artifact blueprint created the templates that triggered a continuous integration, followed by a continuous delivery to a development and production Universal Azure Artifact. &lt;/p&gt;
&lt;p&gt;Next, I ran the regression test for our app-type azure-function blueprint, which &lt;strong&gt;failed&lt;/strong&gt; with the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hostedtoolcache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;413&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sdks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PackageDependencyResolution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;NETSDK1004&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Assets&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/vsts/work/1/s/AzureDevOps.Automation.Pipeline.Sample.azure-function/Src/AzureFunction.Sample/AzureFunction.Sample/obj/project.assets.json&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Run&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;NuGet&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which lights up as the following failure in the &lt;strong&gt;build&lt;/strong&gt; step of the continuous integration pipeline.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ERROR" src="../images/checkout-at-the-right-time-2.png"&gt; &lt;/p&gt;
&lt;h1&gt;Said to the rescue!&lt;/h1&gt;
&lt;p&gt;My colleague Said, the author of the Azure Function Blueprint, was intrigued and vanished in his binary lab. After a brief pause, he was back with a smile.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Said Akram" src="/images/Said-mug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"The checkout runs after the restore step, which will override all the nuget packages/files needed by the build step. Hence, the missing project.assets.json. I will advise adding the checkout steps at the job level (first step of the job) and avoid nesting checkouts in other templates."&lt;/em&gt; - Said Akram&lt;/p&gt;
&lt;p&gt;Looking at the continuous integration pipeline flow, as shown below, it is evident that the &lt;strong&gt;Restore&lt;/strong&gt; step runs before the &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema#checkout"&gt;checkout&lt;/a&gt;&lt;/strong&gt; step that checks out source code of our Azure Function solution. &lt;/p&gt;
&lt;p&gt;In fact, we identified another bug - we checked out the source code at the start of the job and again after the restore.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SEQUENCE" src="../images/checkout-at-the-right-time-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Time to &lt;strong&gt;FAIL-FAST&lt;/strong&gt;!&lt;/p&gt;
&lt;h1&gt;Call checkout: at the right time!&lt;/h1&gt;
&lt;p&gt;What I &lt;strong&gt;love&lt;/strong&gt; about pipeline-as-code, is that we were able to fix the issue by tweaking two templates, issuing a pull request, and waiting for the validation build to give us the "thumbs up."&lt;/p&gt;
&lt;p&gt;As shown, the &lt;strong&gt;Restore&lt;/strong&gt; now runs before the &lt;code&gt;checkout&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="CORRECTION" src="../images/checkout-at-the-right-time-4.png"&gt;&lt;/p&gt;
&lt;p&gt;To cut a long ~~story~~ post short. Make sure you run the &lt;code&gt;checkout:self&lt;/code&gt; at the beginning of your pipeline, so that dependent tasks, such as &lt;strong&gt;Restore&lt;/strong&gt;, can reference the solution source code. You can run the other &lt;code&gt;checkout: git://&amp;lt;AzDO-PROJECT&amp;gt;/&amp;lt;REPO-NAME&amp;gt;&lt;/code&gt; to checkout your toolbox with scripts and/or configuration as needed.&lt;/p&gt;
&lt;p&gt;Thanks for reading and thank you &lt;strong&gt;Said&lt;/strong&gt; for the tip!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="tips"></category><category term="version-control"></category><category term="eliminate-waste"></category></entry><entry><title>Track work with POPCORN Flow</title><link href="https://wsbctechnicalblog.github.io/popcorn-flow.html" rel="alternate"></link><published>2021-09-16T00:00:00-07:00</published><updated>2021-09-16T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-09-16:/popcorn-flow.html</id><summary type="html">&lt;p&gt;Work challenges are opportunities to explore, experiment, and track the feedback gathered from the innovation&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Popcorn" src="../images/popcorn.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I love to visualize the work. It’s easy to do – all I need is a low tech/low rent board and some yellow sticky notes. Or, a simple, inexpensive whiteboard with erasable markers. Easy to acquire, easy to set up.&lt;/p&gt;
&lt;p&gt;Yes, but what to put on the board? Ah, that’s where the real trick lies. Knowing what information to put on the board is oftentimes half the battle.&lt;/p&gt;
&lt;p&gt;Different teams adopt different prescriptions on how to track the work using a board. Whatever the prescription, it always boils down to something simple – track the progress of work in time by starting from the left-hand side of the board until you reach the right-hand side of the board. Leftmost side implies nascent work; rightmost side implies completed work.&lt;/p&gt;
&lt;p&gt;That’s easy, but what goes in the middle? That’s where various prescriptions propose various types of tracking. It is difficult to argue that one type of tracking is necessarily better than other types of tracking. At the end of the day, it mostly boils down to personal preferences.&lt;/p&gt;
&lt;h2&gt;My preferred mode of tracking&lt;/h2&gt;
&lt;p&gt;I can only talk about my personal preferences, but I’m sure others will find something similar in the way they prefer to track the progress of work. To begin, I tend to perceive work as a response to challenges. Things change, and with the change we experience challenges. Taking those challenges on is a special skill because we don’t want to be caught in the situation where we are faced with chronic challenges. To avoid that trap, we must make the work that matters more visible. Still, without challenges we wouldn’t have anything to work on.&lt;/p&gt;
&lt;p&gt;I like to start by adding a column to the board where I place problems and observations that come along the way. Once I pick the problem I plan to focus on, I move it to the next column to the right of the “Problems and observations” column. I label that column “Options”. The problem that made its way into the "Options" column should be split into several possible options. It is unlikely that a problem is so simple that there is only one option available to solve it. Having options at our disposal is always a desirable thing.&lt;/p&gt;
&lt;p&gt;We then choose one option that seems to promise the best outcome. We move that option to the next column to the right and we label that column “Possible experiments”. Each experiment could be defined with three attributes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Action: which action is the experiment proposing?&lt;/li&gt;
&lt;li&gt;Duration: how long is the experiment expected to run?&lt;/li&gt;
&lt;li&gt;Expectation: What is the expected desired outcome of the experiment?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From that position the work continues by picking one of the possible experiments and moving it to the next column to the right – “Committed experiments”.&lt;/p&gt;
&lt;p&gt;Once the experiment gets committed, we move it to the next column to the right – “Ongoing experiments”.&lt;/p&gt;
&lt;p&gt;The experiments selected to be worked on (i.e., the ongoing experiments), must obey the constraints of the Work in Progress (WiP) buffer. Small batches are &lt;em&gt;de rigeur&lt;/em&gt; here. It is best if at any point in time no more than a couple of experiments are being worked on. Because we strive to keep the WiP buffer as small as possible, there could be a number of committed experiments waiting for their turn in the "Committed experiments" column.&lt;/p&gt;
&lt;p&gt;When the experiment is finished, it moves to the column to the right – “Review”. During the review, we ask some questions, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What did we expect to happen (i.e., the hypothesis)?&lt;/li&gt;
&lt;li&gt;What had actually happened?&lt;/li&gt;
&lt;li&gt;What did we learn?&lt;/li&gt;
&lt;li&gt;What opportunity do we perceive?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on the answers to the above questions, we now move to the next column to the right – “Next”. In this column, we try to answer the question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Based on what we learned, what do we need to learn next?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which leads us back to the leftmost column – “Problems”. The work thus progresses smoothly from left to right.&lt;/p&gt;
&lt;h2&gt;POPCORN Flow&lt;/h2&gt;
&lt;p&gt;The columns on our board, from left to right, are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;roblems and observations&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;ptions&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;ossible experiments&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ommitted experiments&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;ngoing experiments&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;eview&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;ext&lt;/p&gt;
&lt;p&gt;Reading the capitalized letters, it spells &lt;strong&gt;POPCORN&lt;/strong&gt;. So, we can call it the Popcorn Flow (a handy mnemonic to help us recall the correct order of the workflow; originally proposed by &lt;em&gt;Claudio Perrone&lt;/em&gt;, a.k.a. &lt;em&gt;Agile Sensei&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Why is this workflow useful? It comes from the recognition that the best way to respond to challenges is to collect feedback. Rather than formulating the solution to the challenges by working in isolation, it is better to face the challenges head-on and start getting feedback by experimenting.​​​​​​​&lt;/p&gt;
&lt;h2&gt;An example&lt;/h2&gt;
&lt;p&gt;I will use my own example to illustrate the Popcorn Flow in the workflow board. For brevity, I will present only two problems (and in here I won’t include the experiment details):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lack of understanding by non-technical people of the benefits of TDD&lt;/li&gt;
&lt;li&gt;Lack of actionable metrics for code quality&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="PopcornFlow" src="../images/popcornflow.png"&gt;&lt;/p&gt;
&lt;p&gt;The first problem was solved by entertaining three options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ignore the problem&lt;/li&gt;
&lt;li&gt;Suggest some reading material&lt;/li&gt;
&lt;li&gt;Organize a tailored presentation for the staff&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After some deliberation with the team, option 3 was picked to be worked on, and it generated three possible experiments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Publish a wiki article explaining the benefits&lt;/li&gt;
&lt;li&gt;Publish article in the WSBC technical blog explaining the benefits&lt;/li&gt;
&lt;li&gt;Organize lunch ‘n learn session to present hands-on demonstration of TDD to non-technical audience&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Out of 3 proposed experiments, experiment #3 was picked and committed to work. Once the experiment was completed (i.e., the hands-on demo session was delivered), we performed the review (i.e., a retro, or Inspect and Adapt). From the review we examined the possibility of having the next learning opportunity.&lt;/p&gt;
&lt;p&gt;The second problem was pulled in with #3 possible options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let teams decide how to respond to code quality issues&lt;/li&gt;
&lt;li&gt;Instigate code quality review by mandating PRs&lt;/li&gt;
&lt;li&gt;Automate code quality review by adding static code analysis to the CI pipeline&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option #3 was then pulled into the next column, where it generated 3 possible experiments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use SonarQube to generate code quality reports&lt;/li&gt;
&lt;li&gt;Use Microsoft app.Metrics nuget to generate code quality reports&lt;/li&gt;
&lt;li&gt;Use Microsoft app.Metrics nuget to generate code quality reports as part of Automated Building Code
​​​​​​​&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Experiment #3 was then picked as committed work item, and it is ongoing at the time of writing this episode.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Change comes with challenges. Those challenges present us with the opportunity to work. We practice picking our battles wisely and knowing when to cut our losses.&lt;/p&gt;
&lt;p&gt;Visualizing the workflow is a helpful heuristic. There are many ways to visualize the progress of the work, but such visualization cannot help solving the problem. The problem can only be solved by experimenting and gathering feedback. After accomplishing that, we apply validated learning and obtain insights into what should be done next.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="quality"></category><category term="lean"></category><category term="engineering"></category><category term="innovation"></category><category term="learning"></category></entry><entry><title>How is ordering a pizza similar to hexagonal architecture?</title><link href="https://wsbctechnicalblog.github.io/hexagonal-architecture-exaple.html" rel="alternate"></link><published>2021-09-10T00:00:00-07:00</published><updated>2021-09-10T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-09-10:/hexagonal-architecture-exaple.html</id><summary type="html">&lt;p&gt;How to build a system that interacts with the outside world without knowing the gory details of the outside world&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Pizza" src="../images/pizza.png"&gt;&lt;/p&gt;
&lt;p&gt;Any pizza parlour has two capabilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is capable of taking orders&lt;/li&gt;
&lt;li&gt;It is capable of fulfilling orders&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To understand how pizza parlour performs those capabilities, it helps if we look at how is pizza parlour structured:&lt;/p&gt;
&lt;p&gt;Figuratively speaking, any pizza parlour has two ‘windows’. What are those windows for?&lt;/p&gt;
&lt;p&gt;One window is for enabling customers to place orders and then pick up their orders. Another window is for communicating orders to the kitchen staff and also for taking fulfilled orders to be delivered to the customers.&lt;/p&gt;
&lt;p&gt;We see that the first window is a port for initiating the transaction. The second window cannot initiate the transaction; it can only relay the already initiated transaction to the ‘back end’ (i.e., to the kitchen staff).&lt;/p&gt;
&lt;p&gt;What is that area between the two windows then? It’s what we call the ‘Core Competence’ area. Inside the cloistered Core Competence area resides the ‘secret sauce’ that enables the business operation to compete. In the case of a pizza parlour, we’re talking pizza recipes, inventory and procurement, tooling, training, pricing structure, deals and promotions, advertising, hiring/firing, organizing company picnics, etc.&lt;/p&gt;
&lt;p&gt;The bulk of the business happens in-between the two windows. And yet, close either of the two windows, and the business collapses.&lt;/p&gt;
&lt;p&gt;Let’s call the first window (the order taking/order pickup window), the Left Window. Because we read from left to right, the initiation of the transaction (i.e., placing the order for a pizza) naturally belongs to the left side of the visualized pizza parlour diagram.&lt;/p&gt;
&lt;p&gt;The order fulfilling window is then relegated to the right side of the imaginary diagram. The important thing to keep in mind, as we are trying to map the pizza parlour diagram onto the hexagonal architecture, is that the left side of the diagram and the right side of the diagram are asymmetrical.&lt;/p&gt;
&lt;h2&gt;No Pizza Nazi&lt;/h2&gt;
&lt;p&gt;Unlike the Soup Nazi in that infamous “Seinfeld” episode, our pizza parlour typically thrives on offering options. The comical Soup Nazi offered no options to his customers, and any, even the tiniest transgressions in how customers order a soup were punished by the legendary exclamation: “No soup for you! Come back in one year!”&lt;/p&gt;
&lt;p&gt;A successful pizza parlour business strives to offer as many ways to order and consume their pizza as possible. Customers can walk up to the order window and order a pizza, they can phone in to order, they can go online and place an order, or even use a smartphone app to place an order. It doesn’t make any sense to limit the ways customers can order and pay for their order. Convenience is the name of the game.
Also, successful pizza parlour places no constraints on how the order is to be fulfilled. Most likely, an incoming order will be fulfilled by the kitchen staff making a fresh pizza following a recipe. But that’s not the only way the order could be fulfilled. Many other scenarios are possible and are perfectly legitimate.&lt;/p&gt;
&lt;p&gt;For example, it is possible that the kitchen happens to be understaffed (after some crew members called in sick). They’re overwhelmed with orders and cannot fulfill them in a timely fashion. The crew may choose to take overflowing orders, run across the street and place those orders in the competitor’s pizza parlour. That way, they get to keep their customers happy.
Customers don’t care, nor do they know how their pizza was made (so long as it is to their liking). It is also possible that a previous customer for some reason returned freshly made pizza and now the same order arrives from a new customer. Well, no reason to throw the returned pizza to the trash and start making a new one. Simply forward the returned untouched pizza to the new customer. And so on, the possibilities seem manifold.&lt;/p&gt;
&lt;p&gt;Also, a successful pizza parlour does not place any constraints on who can order a pizza. Someone from the kitchen staff can go outside and return to the front counter (the left window) and order a pizza. Why not?&lt;/p&gt;
&lt;h2&gt;Flexibility and adaptability&lt;/h2&gt;
&lt;p&gt;In the above example we’ve seen that flexibility and adaptability in how the business handles the market demands are very important. That’s the reason hexagonal architecture is proposed as the most optimal model for building automated systems.&lt;/p&gt;
&lt;p&gt;If we were to map the pizza parlour operating model to the hexagonal architecture, we would see that the Left Window (the conversation initiating window) is labeled as the Driver in hexagonal architecture. Similar to how a pizza parlour can accept the initiation of the conversation (i.e., placing an order) in various ways (e.g., walk-ins, phone-ins, online orders etc.), The Driver in hexagonal architecture can be implemented as many different ports. The salient point is that the Driver’s intervention is the only possible way to agitate the system.&lt;/p&gt;
&lt;p&gt;For example, if a pizza parlour opens up in the morning, and no customer walks in nor do any customers phone in or send an online order, the parlour remains quiet. No activity. No reason to do anything, as it would be wasteful without making a sale.&lt;/p&gt;
&lt;p&gt;Without the Driver, the automated system must remain dormant. Only an action initiated by the Driver can set the automated system into action.&lt;/p&gt;
&lt;p&gt;What about the Right Window in the pizza parlour? In hexagonal architecture, the right side is referred to either as a Recipient, or as a Repository (there could be more than one Recipient and more than one Repository). Both Recipients and Repositories are passive. They cannot ever act on their own. They only act in response to the action initiated by the Driver on the left.&lt;/p&gt;
&lt;p&gt;The important thing to keep in mind when it comes to any flexible and adaptable system is that Drivers, Recipients, and Repositories can be numerous (actually, for all intents and purposes, endless). A well designed, well-engineered system allows the easy adding of brand new Drivers, Recipients, and Repositories, without disrupting the established Drivers, Recipients, and Repositories, as well as avoiding the disruption of any other parts of the system. We’ve already seen how a pizza parlour can easily add new ways of initiating the transaction (for example by receiving a text message to a newly implemented chatbot). Same applies to the right side of the parlour — the back-end staff can easily add ways to fulfill an order, for example by experimenting with some prefabricated ingredients.
Hexagonal architecture is one of the best ways to build a complex automated system that is infinitely flexible and adaptable.&lt;/p&gt;
&lt;h2&gt;What about the Core Competence?&lt;/h2&gt;
&lt;p&gt;The Middle Kingdom (the space between the left and the right side of the system) is what we call Core Competence. That area is what holds the system together, because it contains all the policy rules that govern the business operations.&lt;/p&gt;
&lt;p&gt;Hexagonal architecture establishes the left side (the Drivers) and the right side (The Recipients and the Repositories) to segregate the outside world from the inner workings of the Core Competence kingdom. This Core Competence area must not be burdened with the knowledge about various technicalities. A transaction can be initiated in myriad technological ways, but the Core Competence must not be aware of any of those technicalities. Also, an initiated transaction, coming from one of the Drivers, can be fulfilled using myriad of different technical solutions, but the Core Competence must not be aware of any of those technical solutions.&lt;/p&gt;
&lt;p&gt;That way, Core Competence layer remains completely decoupled form the outside world. Why is that desirable?&lt;/p&gt;
&lt;p&gt;The only way to establish and maintain flexibility and adaptability is to avoid any coupling. As soon as the coupling occurs, the system becomes brittle. We try to make some change to it, and it breaks.&lt;/p&gt;
&lt;h2&gt;Configurable dependencies&lt;/h2&gt;
&lt;p&gt;It is not possible to build a complex system without introducing dependencies. Many parts of the system depend on many other parts of the system. Those dependencies enable the system to function properly.
The trouble begins when those dependencies harden and thus create areas of rigidity. Those areas of rigidity have tendency to proliferate and oftentimes contribute to rendering the system inflexible. Inflexible systems are not adaptable and tend to crumble under the pressure of changing conditions.
One way to avoid painting ourselves into a corner when building complex automated systems is to begin by first building a Walking Skeleton that embodies the above described hexagonal architecture. Meaning, define the left-side port(s) (i.e., the Driver(s)) as well as the right-side ports (i.e., the Recipients and the Repositories). The Driver is the port that is used for initiating the conversation (i.e., putting the system in motion). That port is responsible for using the system and is therefore burdened with the knowledge of dependencies (for example, in a pizza parlour case, the Driver must know the street address of the parlour, or the phone number, or the web address, etc.)&lt;/p&gt;
&lt;p&gt;The Recipient(s) and the Repository(s) are the ports used for fulfilling the request coming from the driver. In the case of automated software systems, those ports represent technologies such as network protocols and ports, disc drives, databases, servers, etc.&lt;/p&gt;
&lt;p&gt;Both the Driver(s) and the Recipient(s) and the Repository(s) are configurable/swappable. We should be able to add/remove any of them without breaking anything in the system. They are configurable dependencies.&lt;/p&gt;
&lt;h2&gt;Build a hexagonal architecture-based system using TDD&lt;/h2&gt;
&lt;p&gt;The recommended way to build a system based on hexagonal architecture is to do it following the TDD discipline.&lt;/p&gt;
&lt;p&gt;Following the TDD discipline means that the first Driver of our system must be a test. A test knows about some dependency (for example, it knows about the end point, or the address, where the system — the ‘order’ window — can be reached).&lt;/p&gt;
&lt;p&gt;The test defines the precondition (‘given that I want to send this value(s)’), the trigger event (‘when I send the request to this address’), and the postcondition (‘then I expect the system to give me exactly what I ordered’). The test then runs, it fails (because the walking skeleton is not up and walking yet), and we add only as much working code as is necessary to make the test pass (it will typically mean we hardcode the values we return to the expecting test).&lt;/p&gt;
&lt;p&gt;The test now passes, and we go back to refactor our walking skeleton. We iterate while constantly running our tests. With each refactoring change to the code, we eliminate crude solution by replacing it with more sophisticated, more generic solution. Thus, hardcoded values get replaced by ‘primitive obsession’ variables (ints, strings, bools, doubles, etc.) On the next iterations some of those primitive variables get replaced by proper abstractions. Rinse, repeat until we arrive at properly designed, properly engineered working code.&lt;/p&gt;
&lt;p&gt;The next Driver (after we conscientiously test-drove our system) could be the Command Line Interface. Following that, we may add a Driver that is more visually oriented (GUI). Then we may also add a Driver that is capable of doing speech recognition. And so on — the system we’ve built is completely flexible and adaptable.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="quality"></category><category term="engineering"></category><category term="architecture"></category></entry><entry><title>Two ways to share your toolbox with your pipelines</title><link href="https://wsbctechnicalblog.github.io/share-your-toolbox-with-pipelines.html" rel="alternate"></link><published>2021-09-08T00:00:00-07:00</published><updated>2021-09-08T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-09-08:/share-your-toolbox-with-pipelines.html</id><summary type="html">&lt;p&gt;Let us review two strategies to share scripts and config files with your Azure (YAML) Pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The need to share PowerShell Scripts or configuration files is a common requirement when working with Azure Pipelines. For example, pass a configuration file to the &lt;a href="https://whitesource.atlassian.net/wiki/spaces/WD/pages/804814917/Unified+Agent+Overview"&gt;WhiteSource&lt;/a&gt; unified agent tool, or run a PowerShell script to invite Zombies created by the &lt;a href="https://stryker-mutator.io/"&gt;Stryker&lt;/a&gt; mutation tool. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Inject" src="/images/share-your-toolbox-with-pipelines-1.png"&gt;&lt;/p&gt;
&lt;p&gt;These are just two examples of a platter of common and re-usable features we need to &lt;strong&gt;inject&lt;/strong&gt; into the flow of our Azure Pipelines.&lt;/p&gt;
&lt;p&gt;Let us review two options. The first is the one we embraced on our boot-strap template, as documented in the &lt;a href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html"&gt;pipeline snowflakes&lt;/a&gt; series and the second is a simplification I will present to our pipeline working group to reduce complexity and waste.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Requirement:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As an Azure Pipeline I want to download a toolbox package, so that I can re-use tested and well-known scripts, as well as verified configuration files.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;A la Universal Artifact&lt;/h1&gt;
&lt;p&gt;&lt;img alt="UA" src="/images/share-your-toolbox-with-pipelines-2.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/azure/devops/artifacts/quickstarts/universal-packages?view=azure-devops"&gt;Universal Artifacts&lt;/a&gt; are probably one of the longest running feature previews in Azure DevOps. It allows you to store &lt;strong&gt;anything&lt;/strong&gt; up to 4TB - although you should have a serious chat with yourself if your packages start growing beyond kilobytes in size. You want small and focused packages, that can be downloaded fast and do not dump any &lt;strong&gt;waste&lt;/strong&gt; on your build agent.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/share-your-toolbox-with-pipelines-5.png"&gt;&lt;/p&gt;
&lt;p&gt;As shown above, we developed a universal artifact app-type blueprint that create a pipeline that publishes our toolbox, containing scripts and configuration files, to a development universal artifact and starts running security scans, irrespective from which branch the pipeline is triggered from. If triggered from a release/* branch, it involves our DevSecOps team in a security review and then deploys to an additional production universal artifact.&lt;/p&gt;
&lt;p&gt;In our boot-strap.yml template, we download the universal package, which requires an average of &lt;strong&gt;10 seconds&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# ===========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP TOOLBOX&lt;/span&gt;
&lt;span class="cp"&gt;# ===========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# Production Toolbox&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadDVTBox&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;runbuildingcodeonly&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceToolbox&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt; &lt;span class="n"&gt;toolbox&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;downloadDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ToolboxRuntime&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;feedsToUse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;vstsFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FEED_GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;           &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Templates&lt;/span&gt;
      &lt;span class="nl"&gt;vstsFeedPackage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PACKAGE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;toolbox&lt;/span&gt;
      &lt;span class="nl"&gt;vstsPackageVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We run scripts from the package in our pipeline, for example, to publish telemetry from the boot-strap template.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt; &lt;span class="n"&gt;Telemetry&lt;/span&gt; &lt;span class="n"&gt;START&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ToolboxRuntime&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;OperationId&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(Build.BuildNumber).$(Build.BuildId)&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;BootstrapMode&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt; 
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationType&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ApplicationBlueprint&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationBlueprint&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PortfolioName&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ProductName&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;VerboseFlag&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Previews&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ForceCheck&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;failOnStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
      &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, we pass configuration files contained in the toolbox package, such as wss-unified-agent.config, when running security scans.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- script: java -jar wss-unified-agent.jar -c $(System.DefaultWorkingDirectory)/ToolboxRuntime/Config/DevSecOps/wss-unified-agent.config -apiKey &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;} -product &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whitesourceProductName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;} -project &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;} -logLevel DEBUG
  displayName: &amp;#39;Bootstrap WhiteSource Unified Agent Scan&amp;#39;
  continueOnError: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Works like a charm!&lt;/p&gt;
&lt;p&gt;Do we need the universal artifact pipeline and the complexity of generating, publishing, and downloading the toolbox package? What happens when we &lt;strong&gt;remove&lt;/strong&gt; it from our Azure Pipeline process?&lt;/p&gt;
&lt;h1&gt;A la repository&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Code Repo" src="/images/share-your-toolbox-with-pipelines-3.png"&gt;&lt;/p&gt;
&lt;p&gt;An alternative approach is to separate the toolbox, containing scripts and configuration files, into a separate Azure Repo. We must let the system know about the external repository so that we can integrate it into our pipeline.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- repository: Toolbox&lt;/span&gt;
&lt;span class="err"&gt;  type: git&lt;/span&gt;
&lt;span class="err"&gt;  name: &amp;#39;Common/Automation.Scripts&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then &lt;strong&gt;check out&lt;/strong&gt; the contents of the external repository, relative to the agent's build directory (e.g. _work\1). Default is the directory &lt;strong&gt;s&lt;/strong&gt; and adds an average of &lt;strong&gt;3 seconds&lt;/strong&gt; processing time to our pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Waste" src="/images/share-your-toolbox-with-pipelines-6.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WASTE ALERT&lt;/strong&gt; - (10-3) = 7 seconds of waste detected in the first Universal Artifact strategy!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Toolbox&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;tool&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tweak out template(s) to pickup the artifacts, such as the configuration file for the WhiteSource Unified Agent, from a different location.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;tool&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whitesourceProductName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;logLevel&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bootstrap WhiteSource Unified Agent Scan&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Azure Repo strategy has less &lt;strong&gt;moving&lt;/strong&gt; parts, is &lt;strong&gt;faster&lt;/strong&gt; and &lt;strong&gt;simpler&lt;/strong&gt;, no?&lt;/p&gt;
&lt;h1&gt;Which option do you prefer?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Option" src="/images/share-your-toolbox-with-pipelines-4.png"&gt;&lt;/p&gt;
&lt;p&gt;I wish we had comments enabled on our technical blog, so that we could have a vibrant discussion of the two presented and other options. In the interim, please DM me on &lt;a href="www.twitter.com/wpschaub"&gt;twitter&lt;/a&gt; or &lt;a href="www.linkedin.com/in/wpschaub"&gt;linkedin&lt;/a&gt;, or better add a comment on the Twitter or LinkedIn post which nudged you to this article, to share your thoughts.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="eliminate-waste"></category></entry><entry><title>Why OODA is one of the DevOps genomes</title><link href="https://wsbctechnicalblog.github.io/ooda-one-of-the-devops-genomes.html" rel="alternate"></link><published>2021-09-01T00:00:00-07:00</published><updated>2021-09-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-09-01:/ooda-one-of-the-devops-genomes.html</id><summary type="html">&lt;p&gt;If we unpack the DevOps DNA we will find a prominent genome labeled O-O-D-A.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a href="https://opensource.com/article/18/11/analyzing-devops"&gt;analyzing the DNA of DevOps&lt;/a&gt; article I argued that waterfall, agile, and other development frameworks have not only shaped the evolution of DevOps, but that they are part of the DevOps DNA. Recent explorations of DevOps, as it evolves and matures, revealed an exciting hypothesis that OODA is another one of its numerous genomes. &lt;/p&gt;
&lt;h1&gt;DevOps is a mindset&lt;/h1&gt;
&lt;p&gt;“DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.” - (Donovan Brown, 2015). It is based on &lt;a href="https://opensource.com/article/19/5/values-devops-mindset"&gt;5 essential values for the DevOps mindset&lt;/a&gt;, creating a foundation for &lt;strong&gt;continuous&lt;/strong&gt; measure, feedback, collaboration, learning, adoption, and most importantly, delivery of value to delighted users.&lt;/p&gt;
&lt;h1&gt;Observe-Orient-Decide-Act (OODA)&lt;/h1&gt;
&lt;p&gt;During my explorations of what drives the “continuous” narrative, I remembered the exciting OODA loop, by John Boyd, a fighter pilot, strategist, and an inspiration for change. The book BOYD (Coram, 2002) covers both his extraordinary life story, as well as the history behind the infamous OODA-loop.&lt;/p&gt;
&lt;p&gt;Boyd argued that the key to victory is the ability to create situations in which one can make appropriate decisions more quickly than one's opponent. &lt;strong&gt;O&lt;/strong&gt;bserve the environment, &lt;strong&gt;O&lt;/strong&gt;rient to be in a good position, &lt;strong&gt;D&lt;/strong&gt;ecide what to do next, and &lt;strong&gt;A&lt;/strong&gt;ct accordingly. While it conceptually sounds like a loop, the following reproduced illustration from Boyd’s “an essay on winning and losing” suggests that the OODA loop is more of a continuous state machine, than a loop. Note that I am intentionally referring to states, not stages, to avoid any misguided mapping of the four stages to a linear or circular (loop) process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 1 - The modified OODA-Loop, reproduced from Boyd’s “An essay on winning and losing.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="OODA" src="../images/ooda-loop-and-devops-1.png"&gt; &lt;/p&gt;
&lt;p&gt;So, why am I talking about a strategy, that has its roots in the military and applies to aviation combat?&lt;/p&gt;
&lt;h1&gt;OODA Genome?&lt;/h1&gt;
&lt;p&gt;It is useful to remember where the OODA originated from and that its original intent was razor focused on analyzing, understanding, and improving fighter combat. However, I argue that OODA can be applied to any context outside aviation as an invaluable model in pursuit of everything &lt;strong&gt;continuous&lt;/strong&gt;, such as innovation, improvement, and learning.&lt;/p&gt;
&lt;p&gt;Here is my hypothesis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I believe that &lt;strong&gt;OODA&lt;/strong&gt;, for &lt;strong&gt;agents of change&lt;/strong&gt;, will enable &lt;strong&gt;continuous&lt;/strong&gt; innovation, improvement, and learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I will know this to be true when other engineers embrace &lt;strong&gt;OODA&lt;/strong&gt; in the context of &lt;strong&gt;DevOps&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I would go one step further and argue that if we unpack the DevOps DNA we will not only find traces of waterfall, lean thinking, agile, scrum, Kanban, and other genetic material, but also a prominent genome labeled OODA.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 2 – Slither of a DevOps DNA strand&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="OODA" src="../images/ooda-loop-and-devops-2.png"&gt; &lt;/p&gt;
&lt;p&gt;There is widespread reproach of OODA, claiming it to be out of date, military focused, and “despite its popularity, however, the OODA Loop is flawed as a model of human decision making.” (David J. Bryant) In my humble opinion, erroneous criticism predominantly from the military sector. In fact, OODA does apply outside the aviation context and it is a natural fit for the DevOps mindset to &lt;strong&gt;continuously&lt;/strong&gt; innovate and deliver &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Boyd’s enhanced OODA model of “winning or losing” can be interpreted as “pass (value) or fail (fast).” We are striving to incrementally build solutions, while learning, reducing delivery lifecycles, and continuously delivering value to our delighted end-users. We are plagued by an inherent fear of failure, which can destroy a healthy DevOps mindset like cancer, as discussed in &lt;a href="https://opensource.com/article/19/8/why-fear-failure-silent-devops-virus"&gt;why fear of failure is a silent DevOps virus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By embracing failure, through experimentation and learning, we can “pass value” or “fail fast” while continuously reiterating through shortening delivery cycles. As shown in the illustration below, both delivering &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;learning&lt;/strong&gt; through &lt;strong&gt;failure&lt;/strong&gt; are positive and invaluable outcomes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 3 – Hypothesis-driven development (HDD)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="OODA" src="../images/ooda-loop-and-devops-3.png"&gt; &lt;/p&gt;
&lt;p&gt;A major notion of DevOps is to continuously process feedback (observe), correcting and innovating (orient), experimenting and pivoting (decide), and delivering value (act). It is hard not to “observe” the synergy between OODA and a healthy DevOps mindset, which I refer to as the OODA genome of DevOps. If only Boyd had known how his OODA model would evolve and influence minds and concepts outside his original context of the fighter pilot; let alone inspire software and value stream engineers decades later.&lt;/p&gt;
&lt;p&gt;I particularly like the culture, genetic, and experience factors that Boyd introduced in the &lt;strong&gt;Orient&lt;/strong&gt; state as they are in harmony with “creating a healthy DevOps mindset requires 80% focus on people, 15% process, and 5% products.” – (Agent 13, 2020). It is about the people and the organization’s unique culture! Culture, genetics, bias, and experience plays a big role in how observations influence the orientation state, and how decisions are made, based on the analysis of all known information. &lt;/p&gt;
&lt;p&gt;Remember, DevOps is not a silver bullet or a remedy to cure all ailments and solve all problems. It is an evolving &lt;strong&gt;mindset&lt;/strong&gt; within a unique context, that enables us to continuously innovate, learn, and most importantly, deliver value to delighted users.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agent 13. (2020). Navigating DevOps through Waterfalls. TacTec. Retrieved from https://www.tactec.ca/ndtw-resources&lt;/li&gt;
&lt;li&gt;Coram, R. (2002). Boyd: The Fighter Pilot Who Changed the Art of. Library of Congress Cataloging-in-Publication Data.&lt;/li&gt;
&lt;li&gt;David J. Bryant. (n.d.). David J. Bryant. Toronto: Defence Research Development Canada.&lt;/li&gt;
&lt;li&gt;Donovan Brown. (2015, September 1). What is DevOps? Retrieved from Donovan Brown Technology Blog: https://www.donovanbrown.com/post/what-is-devops&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="devops"></category></entry><entry><title>Systems thinking</title><link href="https://wsbctechnicalblog.github.io/systems-thinking.html" rel="alternate"></link><published>2021-08-25T00:00:00-07:00</published><updated>2021-08-25T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-08-25:/systems-thinking.html</id><summary type="html">&lt;p&gt;Switch focus from monitoring and measuring activities and outputs to measuring outcomes&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Systems thinking" src="../images/systemsthinking.png"&gt;&lt;/p&gt;
&lt;p&gt;As software creation profession keeps maturing, our focus seems to be shifting toward systems thinking. For the better part of my career, I was working in environments where the main focus was on measuring &lt;em&gt;activities&lt;/em&gt; and &lt;em&gt;outputs&lt;/em&gt;. I was always expected to take orders and then provide estimates in terms of how much activity is needed to fulfill given order.&lt;/p&gt;
&lt;p&gt;Then, once the estimates got firmed up, I’d engage in software creation activities which were tracked using task tracking tools (the most ubiquitous being Atlassian Jira). The measure of success was not only in meeting those estimated and projected deadlines, but also in producing visible and measurable outputs.&lt;/p&gt;
&lt;p&gt;With continuous maturing of our profession, we’ve witnessed the shift in the focus regarding which outputs get measured. In the early, low maturity days, our productivity used to be measured by the lines of code written in a unit of time (per day, or per week, or per month). Then we started noticing that while functionality is an asset, code isn’t an asset. More likely, code is a liability. Understanding that fact, we stopped measuring number of lines of code written in a unit of time (and in some organization we switched from saying ‘number of lines of code written’ to saying ‘number of lines of code spent’). Code is a liability because it needs to be tested (waste), it needs to be maintained (waste), it needs to eventually be decommissioned (waste).&lt;/p&gt;
&lt;p&gt;Once we abandoned measuring the outputs by counting the lines of code spent, we switched our focus to other easily measurable outputs. Things like number of commits per unit of time, number of Pull Requests per unit of time, number of user stories delivered per unit of time, number of bugs fixed per unit of time, and so on.&lt;/p&gt;
&lt;h2&gt;Activities and outputs are not telling us much&lt;/h2&gt;
&lt;p&gt;The shift in the mindset started occurring when teams began to realize that measuring the activities and outputs isn’t really telling us anything about the health of the business, other than that the staff is keeping busy. We need another set of metrics to help us gauge the level of success of our business operations.&lt;/p&gt;
&lt;p&gt;While it is very easy to monitor and measure above-described activities and then summarize them in a neatly presented set of outputs, we cannot use those quantifiable metrics and view them as a measure of quality. We could say that the team had delivered 25% more story points this iteration compared to the previous iteration, for example, but that fact alone isn’t telling us much about the story points delivery contribution to the success of our business operations. We could use the process of monitoring team activities and measuring team outputs to estimate team velocity, for example, but that velocity has little or no correlation to how viable overall operation of the business is. Yes, maybe we’re noticing that the team is picking up the velocity, but the question is: velocity of what? Maybe the team is increasing the velocity in producing bugs and defects (which is never desirable).&lt;/p&gt;
&lt;h2&gt;Switching from ‘how?’ and ‘what?’ to ‘why?’&lt;/h2&gt;
&lt;p&gt;Processes of monitoring team activities and measuring team outputs are closely related to questions such as “how are we to create something?” and “what do we need to create?” But a much more important question is “why are we spending time creating something?”&lt;/p&gt;
&lt;p&gt;Any activity on the job must be justified by having a clear answer to the question “why are we doing this?” There must be a clear business case that sponsors any activity that spends company’s time, resources, good will, etc. How do we go about formulating that sponsorship?&lt;/p&gt;
&lt;p&gt;A useful vehicle seems to be the concept of a user story. A succinct three-liner, each user story begins with a role (first line) that desires some functionality (second line), and then justifies that desire (third line).&lt;/p&gt;
&lt;p&gt;Third line in a user story is the most important line. It presents the business case. If the third line is not clear and convincing, we have no valid reason to pursue the opportunity to implement the proposed user story.&lt;/p&gt;
&lt;p&gt;Third line in a user story helps us make a switch from thinking about activities and outputs to thinking about outcomes. Outcomes talk about the benefits of introducing the change into our operations. If there are no measurable benefits of the proposed change, it really makes no sense to waste time, effort, money, and other resources.&lt;/p&gt;
&lt;h2&gt;Systems thinking is based on outcomes&lt;/h2&gt;
&lt;p&gt;As any chain is as strong as is its weakest link and as any organization is as fast as its slowest department, in a similar vein our system is as powerful as are the outcomes of its operations.&lt;/p&gt;
&lt;p&gt;We may disregard the ‘big picture’ systems thinking in the pursuit of a more efficient optimization of some process that feeds the business operation. But such optimization will be wasteful. It’s of little (actually, it’s of no use) to optimize the performance of one process in the organization if some other process remains a bottleneck. Creating proverbial log jams is a surefire way to harm the business operations.&lt;/p&gt;
&lt;p&gt;It is therefore necessary to think in terms of outcomes. If, for example, the outcome of the situation where an injured worker’s claim got approved is to release the financial compensation, it’s of little use if the claims approval process is seamless unless the financial transaction also happens seamlessly.&lt;/p&gt;
&lt;p&gt;For such outcome to happen, we must pay attention to the entire system, end-to-end. We should pay special attention to identifying bottlenecks that are slowing us down, or sometimes even bringing everything to a grinding halt. Our customers only experience the outcomes of our complex business operations, and it’s no use apologizing to the frustrated customers by explaining to them how most parts of our system work flawlessly, only a few glitchy ones are making things difficult. Customers don’t care, and they shouldn’t care.&lt;/p&gt;
&lt;h2&gt;How to ensure desired outcomes&lt;/h2&gt;
&lt;p&gt;It’s easy to switch from monitoring and measuring activities and outputs and to pay full attention to outcomes: switch the focus from measuring individual productivity to measuring team productivity. None of the outcomes could ever be accomplished by a single individual. It is teamwork, and teamwork alone that delivers desired outcomes. Self-organizing teams are necessary for ensuring continuous delivery of desired outcomes. And for that to happen, it is necessary to adopt systems thinking.&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="eliminate-waste"></category><category term="agile"></category><category term="learning"></category><category term="quality"></category><category term="engineering"></category><category term="architecture"></category></entry><entry><title>Automation enables engineering to focus on value</title><link href="https://wsbctechnicalblog.github.io/automation-lesson-1.html" rel="alternate"></link><published>2021-08-21T00:00:00-07:00</published><updated>2021-08-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-08-21:/automation-lesson-1.html</id><summary type="html">&lt;p&gt;Asking yourself why you are performing a set of manual tasks again and again? If yes, automate!&lt;/p&gt;</summary><content type="html">&lt;p&gt;That is a question I ask myself a few times a day ... and too often answer with "nah, creating an automation script sounds like more work." But, is it really more work and are we true to our goals of alignment, automation, consistency, enablement, simplicity, and reduction of waste? &lt;/p&gt;
&lt;p&gt;When I picked a maintenance card, based on previous automation, from our Kanban board today, I decided to do a quick calculation of what effort ... if any ... I am saving by NOT doing the maintenance by hand.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Case Study #1: Creating Iteration Paths&lt;/h1&gt;
&lt;p&gt;Roughly every two years must add 12 program increments, each with 5 iterations to our Azure DevOps (AzDO) projects and then map them to all the AzDO Teams within the AzDO project.&lt;/p&gt;
&lt;p&gt;I decided to invest some of my personal time to get some rough estimates on how long this exercise takes. Here is a summary of effort in our sandbox:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MANUAL TASK&lt;/th&gt;
&lt;th align="right"&gt;REF&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th align="right"&gt;SECONDS&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th align="right"&gt;CLICKS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create a program increment&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;13&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create five (5) iterations under the program increment&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;65&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Map five iterations to a team&lt;/td&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="Iteration Mapping" src="../images/automation-lesson-1-5.png"&gt; &lt;/p&gt;
&lt;p&gt;So, this does not look to bad, if you make no typos. What is important to remember is that the Azure DevOps user interface only allows you to add 5 iterations to a team at a time ... not very productive, but that is a story for another post.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration Mapping" src="../images/automation-lesson-1-1.png"&gt; &lt;/p&gt;
&lt;p&gt;The number of projects and teams is volatile, but today I would have to update 257 teams across 25 projects. Does not sound too bad. Let me get &lt;strong&gt;rough&lt;/strong&gt; estimates on how many times I would have to click my keyboard and how long I would have to spend behind my laptop this weekend.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TASK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add 12 program increments, each with 5 iterations, to each project (25) and map the (12*5=60) iterations to each team (257) in each project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a visual after creating one program increment with 5 iterations:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Task" src="../images/automation-lesson-1-2.png"&gt; &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;REF&lt;/th&gt;
&lt;th&gt;CALCULATION&lt;/th&gt;
&lt;th align="right"&gt;SECONDS&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th align="right"&gt;CLICKS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td&gt;12 PIs * 25 projects * x = 300 * x&lt;/td&gt;
&lt;td align="right"&gt;3900&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;2700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;12 PIs * 25 projects * x = 300 * x&lt;/td&gt;
&lt;td align="right"&gt;19500&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;27000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td&gt;(120/5) * 257 teams  * x = 6168 * x&lt;/td&gt;
&lt;td align="right"&gt;67848&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="right"&gt;55512&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TOTALS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Seconds&lt;/strong&gt;: 91248 = 25.367 hours and &lt;strong&gt;Clicks&lt;/strong&gt; : 85212&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if I fill up my Ovomaltine mug on Saturday morning at 9AM, I will be done with the task by Sunday morning just before 11AM. A typical operational task and doable, no?!? &lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration Mapping" src="../images/automation-lesson-1-3.png"&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Compare it to our automation scripts&lt;/h1&gt;
&lt;p&gt;OK, now let us look at the facts ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Robot versus Humanoid" src="../images/automation-lesson-1-4.png"&gt; &lt;/p&gt;
&lt;p&gt;I do not believe that we need to discuss this any further for "your Penny to drop" that automation, at the right time, is &lt;strong&gt;cost effective&lt;/strong&gt;, &lt;strong&gt;productive&lt;/strong&gt;, and &lt;strong&gt;consistent&lt;/strong&gt;. Also, there is a lot less &lt;strong&gt;WASTE&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Have a great weekend!&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="eliminate-waste"></category></entry><entry><title>Get rid of redundant tests</title><link href="https://wsbctechnicalblog.github.io/remove-redundant-tests.html" rel="alternate"></link><published>2021-08-18T00:00:00-07:00</published><updated>2021-08-18T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-08-18:/remove-redundant-tests.html</id><summary type="html">&lt;p&gt;Keeping the suite of automated tests lean is an essential trait of quality software engineering. Diligently remove all tests that don't add any value.&lt;/p&gt;</summary><content type="html">&lt;p&gt;During our &lt;strong&gt;TDD Dojo session&lt;/strong&gt; on July 23, 2021, I have demonstrated the benefits of writing one test at a time before writing any implementation code. The demo was recorded and published on our &lt;strong&gt;WSBC Technical Blog&lt;/strong&gt; (&lt;a href="https://wsbctechnicalblog.github.io/dojo-tdd-getting-started-demo.html"&gt;Sensei Alex "fakes it until he makes it" in our Test-driven Development (TDD) dojo&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Due to the time limitation, I didn’t get a chance to demonstrate another benefit of writing one test at a time and doing mutation testing – the ability to keep the entire suite of tests lean. This episode takes a closer look into the importance of preventing the test suite from becoming bloated.&lt;/p&gt;
&lt;h2&gt;Tests are non-productive&lt;/h2&gt;
&lt;p&gt;No one hired us to write tests. We write them because that is the best way to speed up the delivery. Still, we need to keep in mind that tests are not a product we could sell. No customer would ever agree to pay someone to write tests; customers are only interested in paying for the finished product.&lt;/p&gt;
&lt;p&gt;Another downside of tests (besides being expensive to write) is that tests consume the time to run. Tests also consume the time needed for the maintenance. As such, we view tests as a liability.&lt;/p&gt;
&lt;p&gt;With that in mind, we should cultivate the attitude that tests are a necessary evil, and therefore must be kept at a bare minimum. Kent Beck famously wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"I get paid for code that works, not for tests, so my philosophy is to test as little as possible to reach a given level of confidence."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The challenge now becomes how do we make sure we only produce minimum number of tests while retaining high level of confidence in our tests? Proliferation of tests is highly undesirable, but how do we know when to stop adding more tests?&lt;/p&gt;
&lt;p&gt;The question also pertains to knowing how to get rid of the tests that are already written but serve no purpose? Let’s investigate some code examples to illustrate how to keep the proliferation of unnecessary tests at bay.&lt;/p&gt;
&lt;h2&gt;Tests help grow the quality design&lt;/h2&gt;
&lt;p&gt;One of the main reasons we are doing &lt;strong&gt;Test-Driven Development (TDD)&lt;/strong&gt; is due to the demonstrable ability of that method to guide us in producing quality design. For example, how did the design of the &lt;em&gt;Tip Calculator&lt;/em&gt; (as presented in our TDD Dojo hands-on session that was published in the above &lt;strong&gt;WSBC Technical Blog&lt;/strong&gt;) grow from following the TDD method?&lt;/p&gt;
&lt;p&gt;The first step we did when designing the &lt;em&gt;Tip Calculator&lt;/em&gt; is to stop and think about the simplest expectation: we’d like our automated service to recognize that there is such thing as ‘Terrible’ rating. Once we have formulated that expectation, we rolled up our sleeves and wrote our first test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Fact]&lt;/span&gt;
&lt;span class="na"&gt;public void TerribleRatingIsValid()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var expectedResponseForTerribleRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true;&lt;/span&gt;
&lt;span class="s"&gt;    var actualResponseForTerribleRating = tipCalc.IsRatingValid(&amp;quot;Terrible&amp;quot;);&lt;/span&gt;
&lt;span class="s"&gt;    Assert.Equal(expectedResponseForTerribleRating, actualResponseForTerribleRating);&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The test &lt;em&gt;TerribleRatingIsValid&lt;/em&gt; describes the expectation that when we give the string “Terrible” to our application, asking it if that rating is valid, it will respond with true. That means that we must teach our application to be able to look for the ratings stored somewhere on the system and tell us either that it found the rating we asked it to look for (by returning true), or that is couldn’t find it (by returning false).&lt;/p&gt;
&lt;p&gt;After we’ve implemented that capability, we turned our attention to the next expectation. We are expecting our app to be able to tell us the percentage tip for the “Terrible” rating, and that percentage tip is expected to be 0%. We then created a new test (&lt;em&gt;TerribleRatingIs0Tip&lt;/em&gt;) in which we ask the &lt;em&gt;Tip Calculator&lt;/em&gt; to tell us what the tip for the rating “Terrible” is. If the app returns 0, the test will pass, otherwise the test fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Fact]&lt;/span&gt;
&lt;span class="na"&gt;public void TerribleRatingIs0Tip()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var expectedTipForTerribleRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0;&lt;/span&gt;
&lt;span class="s"&gt;    var actualTipForTerribleRating = tipCalc.TipForRating(&amp;quot;Terrible&amp;quot;);&lt;/span&gt;
&lt;span class="s"&gt;    Assert.Equal(expectedTipForTerribleRating, actualTipForTerribleRating);&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last thing we did to fulfill the scenario 1 specified in the &lt;em&gt;Tip Calculator&lt;/em&gt; user story was to create the expectation that the app will correctly calculate the grand total if given the bill total and the service rating. We created the test &lt;em&gt;TerribleRatingFor100Is100&lt;/em&gt;, in which we stated that if the bill total is $100.00 and the rating is “Terrible”, the calculated grand total should be $100.00 (meaning, no tip, or more precisely, 0% tip):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Fact]&lt;/span&gt;
&lt;span class="na"&gt;public void TerribleRatingFor100Is100()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var expectedTotalForTerribleRatingFor100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;100.00;&lt;/span&gt;
&lt;span class="s"&gt;    var actualTotalForTerribleRatingFor100 = tipCalc.CalculateGrandTotal(100.00, &amp;quot;Terrible&amp;quot;);&lt;/span&gt;
&lt;span class="s"&gt;    Assert.Equal(expectedTotalForTerribleRatingFor100, actualTotalForTerribleRatingFor100);&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we got scenario 1 implemented, we moved to scenario 2 – calculate grand total for $100.00 bill total and “Poor” service rating. The stated expectation is that in such scenario the grand total should be $105.00, which means that “Poor” rating is calculated with the 5% tip.&lt;/p&gt;
&lt;p&gt;In designing the processing of the “Poor” rating we followed the same design that guided us in designing the “Terrible” rating. We now proceeded to design the “Poor” rating by crafting three tests:&lt;/p&gt;
&lt;p&gt;1) Check if “Poor” rating is valid&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Fact]&lt;/span&gt;
&lt;span class="na"&gt;public void PoorRatingIsValid()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var expectedResponseForPoorRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true;&lt;/span&gt;
&lt;span class="s"&gt;    var actualResponseForPoorRating = tipCalc.IsRatingValid(&amp;quot;Poor&amp;quot;);&lt;/span&gt;
&lt;span class="s"&gt;    Assert.Equal(expectedResponseForPoorRating, actualResponseForPoorRating);&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2) Check if “Poor” rating is calculated with 5% tip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Fact]&lt;/span&gt;
&lt;span class="na"&gt;public void PoorRatingIs5Tip()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var expectedTipForPoorRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;5;&lt;/span&gt;
&lt;span class="s"&gt;    var actualTipForPoorRating = tipCalc.TipForRating(&amp;quot;Poor&amp;quot;);&lt;/span&gt;
&lt;span class="s"&gt;    Assert.Equal(expectedTipForPoorRating, actualTipForPoorRating);&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3) Check if grand total for the bill total $100.00 and rating “Poor” is $105.00&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Fact]&lt;/span&gt;
&lt;span class="na"&gt;public void PoorRatingFor100Is105()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;var expectedTotalForPoorRatingFor100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;105.00;&lt;/span&gt;
&lt;span class="s"&gt;    var actualTotalForPoorRatingFor100 = tipCalc.CalculateGrandTotal(100.00, &amp;quot;Poor&amp;quot;);&lt;/span&gt;
&lt;span class="s"&gt;    Assert.Equal(expectedTotalForPoorRatingFor100, actualTotalForPoorRatingFor100);&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’ve also completed the app by implementing similar designs for the “Good”, “Great” and “Excellent” service rating. But for the purposes of this discussion, we’ll limit the analysis to only two ratings: “Terrible” and “Poor”.&lt;/p&gt;
&lt;h2&gt;All tests pass, no mutants survive&lt;/h2&gt;
&lt;p&gt;When we run tests, they are all in green!&lt;/p&gt;
&lt;p&gt;&lt;img alt="6 tests green" src="/images/6testsgreen.png"&gt; &lt;/p&gt;
&lt;p&gt;We feel good knowing that our design is delivering as expected. However, prudent engineering demands that we examine our design more thoroughly, so we will now run mutation testing:&lt;/p&gt;
&lt;p&gt;&lt;img alt="6 mutants killed" src="/images/6mutantskilled.png"&gt;&lt;/p&gt;
&lt;p&gt;Mutation testing tool created 6 mutants and none of those mutants survived. Our design is indeed airtight!&lt;/p&gt;
&lt;h2&gt;Do we have bloated tests?&lt;/h2&gt;
&lt;p&gt;And now for the punchline: just because we have a solution where all tests are passing and no mutants survived, it does not mean that our solution is not bloated. We may have some redundant tests, which is never good. Redundant tests are slowing the test suite runtime, and they’re also adding unwanted noise to our code. Every line of code (including tests) must be maintained, and that maintenance requires spending extra cycles. Such potential waste reduces our precious bandwidth and is to be avoided.&lt;/p&gt;
&lt;p&gt;So, how do we check for bloated tests?&lt;/p&gt;
&lt;p&gt;We must perform some housekeeping duties. Thanks to the mutation testing tool, the chore will most likely be very light. What is advisable to do now that we have an airtight solution is to try and get rid of some tests. We must go one test at a time. Let’s first eliminate the first test (&lt;em&gt;TerribleRatingIsValid&lt;/em&gt;) and pay attention to see if mutation testing discovers any surviving mutants. After running mutation testing without having the first test, we see that our solution still has killed all mutants!
Great news. Let’s carry on by removing the second test (&lt;em&gt;TerribleRatingIs0Tip&lt;/em&gt;). After running mutation testing again, we see that no mutants survive. Yay!&lt;/p&gt;
&lt;p&gt;Let’s try removing the third test (&lt;em&gt;TerribleRatingFor100Is100&lt;/em&gt;). Run mutation testing again and – uh-oh! – one mutant survives!&lt;/p&gt;
&lt;p&gt;&lt;img alt="1 mutant survived" src="/images/1mutantsurvived.png"&gt;&lt;/p&gt;
&lt;p&gt;That test was essential, so we’d better reinstate it quickly.&lt;/p&gt;
&lt;p&gt;Moving along, we can now try to remove the fourth test (&lt;em&gt;PoorRatingIsValid&lt;/em&gt;). Running mutation testing after removing that test kills all mutants. Good show. Now try to remove the fifth test (&lt;em&gt;PoorRatingIs5Tip&lt;/em&gt;). After removing this test and running mutation testing, we see that still all mutants get killed.&lt;/p&gt;
&lt;p&gt;Finally, we try to remove the last test – PoorRatingFor100Is105. After running mutation testing, we get startled: 3 mutants survived!&lt;/p&gt;
&lt;p&gt;&lt;img alt="3 mutants survuved" src="/images/3mutantssurvived.png"&gt;&lt;/p&gt;
&lt;p&gt;Oh-oh, quickly restore that last test, and we’re back to normal.&lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;In the above simple exercise, we have delivered a solid design guided by 6 micro tests. When we got all 6 tests to pass, we ran mutation testing and got additional confidence boost when no mutants have survived. We were assured that our solution is now placed on solid ground.&lt;/p&gt;
&lt;p&gt;However, just because we have a complete and solid solution doesn’t mean it is engineered properly. We demonstrated the shoddy engineering by removing some tests and seeing that despite the tests not being present, no mutants survived the execution of the mutation testing.&lt;/p&gt;
&lt;p&gt;In the end, we reached the point when we realized that only 2 tests are needed to assure highest possible quality of the solution. By eliminating 4 tests out of the total of 6 tests, we have achieved two thirds reduction of the test bloat. Major accomplishment (it always feels great when we manage to get rid of some deadwood code!)&lt;/p&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;How can we be sure that by removing a test (or several tests), we're not tossing the proverbial baby out with the dirty bathwater? I often hear that question being asked when we start getting rid of those redundant tests.&lt;/p&gt;
&lt;p&gt;We can be sure that we haven't discarded valuable tests by the virtue of the fact that removing a test did not produce a surviving mutant (or, surviving mutants). For example, we may think that &lt;em&gt;TerribleRatingIsValid&lt;/em&gt; test is offering a unique value. However, if indeed that test were unique, removing it would out of necessity produce at least one surviving mutant. Same reasoning applies to the dilemma we may experience when asked to remove &lt;em&gt;TerribleRatingIs0Tip&lt;/em&gt; test. But even after removing that test we see that no mutants survived. That means that whatever these two tests are testing, has already been tested by the third test: &lt;em&gt;TerribleRatingFor100Is100&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If we now know that &lt;em&gt;TerribleRatingFor100Is100&lt;/em&gt; test is checking both that "Terrible" rating is valid and also that "Terrible" rating has 0% tip, we should be able to understand why are &lt;em&gt;TerribleRatingIsValid&lt;/em&gt; and &lt;em&gt;TerribleRatingIs0Tip&lt;/em&gt; tests completely unnecessary. Those tests are just clutter, only adding noise and providing no value to our solution.&lt;/p&gt;
&lt;p&gt;Same discussion then apples for the "Poor" rating processing. &lt;em&gt;PoorRatingIsValid&lt;/em&gt; and &lt;em&gt;PoorRatingIs5Tip&lt;/em&gt; tests are redundant because all the testing these two tests are performing is already performed by the &lt;em&gt;PoorRatingFor100Is105&lt;/em&gt; test. It is therefore safe to reduce the number of tests from 6 down to only 2.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have seen in the above demonstration how, while writing micro tests before writing implementation code is an indispensable technique for producing solid, decoupled design, the final product oftentimes will end up not needing some of those micro tests. We can view those redundant tests as scaffolding, something we erect for the time being, while we are working on the product. But eventually the time comes when all that scaffolding isn’t needed anymore, and it is advisable to remove it. Removing the scaffolding (i.e., redundant tests) not only minimizes the noise and maximizes the signal, but also relieves the system from the burden of having to run unnecessary tests each time test suite executes.&lt;/p&gt;</content><category term="Posts"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Cultivate rapid spreading of knowledge</title><link href="https://wsbctechnicalblog.github.io/cultivate-rapid-spreading-of-knowledge.html" rel="alternate"></link><published>2021-08-05T00:00:00-07:00</published><updated>2021-08-05T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-08-05:/cultivate-rapid-spreading-of-knowledge.html</id><summary type="html">&lt;p&gt;Knowledge must be shared rapidly to enable teams to continuously deliver desired values&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;“In a beginner's mind there are many possibilities, but in the expert’s, there are few.” -Shunryu Suzuki&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Numerous studies have shown that people working in isolation prefer to enter the state known as the Flow. That state is the one of intense focus. Thanks to that intense focus, the entire problem and the solution spaces are loaded into a person’s head.&lt;/p&gt;
&lt;p&gt;It goes without saying that entering such intense state of clear focus cannot happen easily. On average, some studies claim that it takes approximately 20 minutes before a person could settle in the state of the Flow. That is in a way like sailing – before the sail is set properly and the wind picks up and the boat is effortlessly gliding, the crew needs to invest serious time to set everything up properly.
Reaching the state of the Flow is an expensive endeavor.&lt;/p&gt;
&lt;p&gt;Is the price worth paying? Perhaps. But before we jump to any conclusions, let’s also review the flip side of the coin: once in the state of the Flow, how easy is it to break it?&lt;/p&gt;
&lt;p&gt;As it turns out, nothing is easier than interrupting the state of the Flow. Any little disturbance in the environment is enough to destroy that state. A phone rings, an email notification chimes, someone coughs, etc. When that happens, we’re back to square one – another 20 or so minutes of messing around, trying to set everything up properly.&lt;/p&gt;
&lt;p&gt;We see that the state of the Flow is extremely brittle. Is the price worth paying?&lt;/p&gt;
&lt;h2&gt;Skills and Competencies&lt;/h2&gt;
&lt;p&gt;Skills and competencies aren’t interchangeable. There exist considerable differences between these two capabilities.&lt;/p&gt;
&lt;p&gt;What are the differences? In short, people can usually learn skills in a matter of months (sometimes even weeks); on the other hand, it is impossible to learn competencies in less than several years, minimum. We haven’t been able to identify any capabilities that would fall in the gap between skills and competencies.&lt;/p&gt;
&lt;p&gt;When we talk about qualifications, we must clearly specify whether we’re looking for skills or for competencies.&lt;/p&gt;
&lt;p&gt;Skills are easily shareable. Competencies aren’t. Often, competencies could even be mutually exclusive. There could be a person who is competent in following a process, but we cannot expect that person to also be competent in being creative.&lt;/p&gt;
&lt;p&gt;As a matter of fact, competencies are unique to an individual. As such, building a team around certain competencies might end up being a very challenging task.&lt;/p&gt;
&lt;h2&gt;Importance of teamwork&lt;/h2&gt;
&lt;p&gt;Software development is a social activity. It takes a team to continuously deliver software. But in every team, we find disparate levels of knowledge. There are seasoned professionals with many years of proven track record and there are junior members who are just starting in their career, and then there are also intermediate members. And as we know, a chain is as strong as its weakest link. In this case, the team may end up being only as strong as its weakest, least knowledgeable member. Or a team will be as fast as its slowest member.&lt;/p&gt;
&lt;p&gt;Every team lives or dies by their products/services (to put things a bit dramatically), which is why there is a natural push to set aside the time to onramp the slowest/weakest member(s). However, any time set aside to upgrade the skills in an asynchronous fashion robs the team of the bandwidth needed to continue delivering quality software. And yet if the weakest members are not trained properly, their inexperience will eat up a lot of the precious bandwidth.&lt;/p&gt;
&lt;p&gt;How to solve this conundrum?&lt;/p&gt;
&lt;p&gt;Embrace collective code ownership and synchronous collaboration!&lt;/p&gt;
&lt;h2&gt;Knowledge transfer&lt;/h2&gt;
&lt;p&gt;There is mounting body of evidence that shows how working in a team in real time (synchronously) is the fastest way to achieve much needed knowledge transfer.&lt;/p&gt;
&lt;p&gt;The typical objection to working in a team environment in real time is that it is literally impossible to get into the much-coveted state of Flow. Interruptions in the team environment abound, especially with novices asking all kinds of questions that seem so obvious to more experienced members. And even if the state of Flow is achieved, it is only good for getting things done, not good for transferring knowledge.&lt;/p&gt;
&lt;p&gt;That’s a valid objection and is seemingly unresolvable. Such situation is forcing us to find a different way of working synchronously in a team.&lt;/p&gt;
&lt;p&gt;The solution to the impossibility to get into and stay in the state of Flow is to abandon the focus on the Flow and to instead turn our attention to the Beginner’s Mind.&lt;/p&gt;
&lt;p&gt;How does knowledge transfer work when relying on the Beginner’s Mind (and, what is Beginner’s Mind)?&lt;/p&gt;
&lt;p&gt;Beginner’s Mind refers to an attitude of openness and the ability to see things as fresh and new. Beginner’s Mind includes both doubt and possibility. Because of that, a person with the Beginner’s Mind is open to change, eager to change, eager to try something new.&lt;/p&gt;
&lt;p&gt;When a person who is working is unsure of their boundaries, that person enters the Beginner’s Mind. That uncertainty leads the person to thoroughly test their environment. That state routinely happens whenever we find ourselves in a situation outside but near the limits of our comfort zone.&lt;/p&gt;
&lt;p&gt;For example, if I’m otherwise comfortable with my environment but I don’t understand one thing, I will tend to try stuff until I figure that one thing I don’t understand. My state of Beginner’s Mind leads me to try more approaches, and try them rapidly, therefore I am more likely to succeed at a task than a person who thinks they know how it works.&lt;/p&gt;
&lt;p&gt;The frustration brought about my insecurity of not understanding something creates a high energy cognitive state. If we now widen the scope and involve the team in the situation where everything is comfortable except on unsolved thing, the team is likely to hit the collective Beginner’s Mind. If the competence prevails over skills, one competent team member could drag the high energy cognitive state down to the lower energy state. When that happens, knowledge transfer is not possible.&lt;/p&gt;
&lt;p&gt;We see from the above that the best way to transfer knowledge in the group situation is to focus on skills and allow the team to rise to the Beginner’s Mind state.&lt;/p&gt;
&lt;h2&gt;Embrace instability (change)&lt;/h2&gt;
&lt;p&gt;Unlike the state of Flow, which depends on stability, Beginner’s Mind depends on instability. When working in a group arrangement (for example, a team doing mob programming), instability gets created by encountering a problem and instead of falling back on the competence of the more experienced team members/team leads, intentionally open the mindshare to embrace the Beginner’s Mind which allows the team to try out various approaches in rapid fire succession. We say that the team is surfing the edge of chaos.&lt;/p&gt;
&lt;p&gt;It is important to maintain the instability that leads to experimentation. How do we maintain instability in the group setting? Easy. Introduce the ‘musical chairs’ rotation. Don’t let anyone’s exploration turn into hardened competence. Rotate team members who are solving the problem; that way, knowledge transfer spreads like a forest fire and much more gets accomplished in a given timeframe.&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="xp"></category></entry><entry><title>First International TDD Conference</title><link href="https://wsbctechnicalblog.github.io/first-international-tdd-conference.html" rel="alternate"></link><published>2021-07-27T00:00:00-07:00</published><updated>2021-07-27T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-27:/first-international-tdd-conference.html</id><summary type="html">&lt;p&gt;First International TDD Conference generated a lot of good interest and traction&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="TDD Conference" src="../images/TDDconf.png"&gt; &lt;/p&gt;
&lt;p&gt;Although &lt;a href="http://agiledata.org/essays/tdd.html"&gt;Test-Driven Development (TDD)&lt;/a&gt; practice is already more than a quarter century old, it is still treated as the unloved foster child of software engineering. And while there is abundance of amazing international tech conferences on pretty much any other important software engineering practice, TDD remains ignored.&lt;/p&gt;
&lt;p&gt;As an avid TDD advocate and practitioner, I felt the urge to remedy that oversight and back in April 2021 got the idea to organize the &lt;strong&gt;First International TDD Conference&lt;/strong&gt;. My intention was to expose the usefulness of TDD practice to the wider audience in the hopes of achieving greater legitimacy of this vitally important software engineering practice.&lt;/p&gt;
&lt;p&gt;I was also impressed with the progress we are making here at &lt;strong&gt;WorkSafeBC&lt;/strong&gt; with TDD Dojos that were introduced by &lt;a href="https://www.linkedin.com/in/andrekaminski/?originalSubdomain=ca"&gt;Andre Kaminski, Director of IT&lt;/a&gt;. I thought, hey, why don’t we try to move the needle in the wider community by gathering TDD experts to present their teachings?
How to organize a tech conference?&lt;/p&gt;
&lt;p&gt;Of course, organizing an international tech conference seems like a daunting task, but in this situation, with the pandemic still going strong, it turned out that is was super simple to set everything up. The conference was held remotely, with participants joining from all over the world. The biggest challenge was to ensure quality content, but I was fortunate to have already built a strong network of TDD experts. It was a breeze to get everyone excited about the conference. It took only a few days for the talk proposals to start coming in, and in the end, we managed to organize a conference committee who selected 14 most exciting talks.&lt;/p&gt;
&lt;p&gt;Moral of the story – it is important to reach out and collaborate with our colleagues and peers, because that way we all rapidly grow.&lt;/p&gt;
&lt;h2&gt;Conference logistics&lt;/h2&gt;
&lt;p&gt;Having 14 conference talks in the can, we now turned out attention to the timing. Knowing that we have enrolled the speakers from all over the world (from Asia, Europe, South America, and North America), timing became an issue. I have originally announced that the conference starts at 9:00 am Pacific Time, but that arrangement would have put Asian and European speakers (10 of them in total) at a huge disadvantage. After some deliberation we agreed to push the conference starting time at 7:00 am Pacific Time (which meant I’d have to get up at 5:00 am to make sure everything is set up).&lt;/p&gt;
&lt;p&gt;In the end, we managed to deliver the conference in one solid block lasting over 11 hours straight!&lt;/p&gt;
&lt;h2&gt;About the conference&lt;/h2&gt;
&lt;p&gt;It came as quite a surprise to me that TDD conference would attract so much traction. Yes, admission was free, but TDD is still such marginal concept that I wasn’t expecting a lot of people to register. However, once the free registration was open, we started seeing hundreds of people registering, and quickly the total number of registrants climbed into thousands! Perhaps the reason for such brisk interest partially lies in the carefully planned schedule (the conference was scheduled on Saturday, July 10, which means people did not have to plan to take a workday off)? Also, having &lt;a href="https://wingman-sw.com/about"&gt;James Grenning&lt;/a&gt; (one of the original signatories of the Agile Manifesto) open the conference with a keynote talk must have helped a lot.&lt;/p&gt;
&lt;p&gt;I have built the conference web site in one weekend (leveraging prior experience with building WorkSafeBC technical blog; many tricks and techniques got reused, making the building of the web site a breeze). Here is the conference site:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tddconf.com"&gt;First International TDD Conference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The way the conference was organized was to direct registered participants to the TDD Conference YouTube channel, where the talks were streamed live. One of the most impressive features of the conference was the intensity and the quality of the live chats that were happening during the talks. If you watch the &lt;a href="https://www.youtube.com/watch?v=-_noEVCR__I&amp;amp;t=175s"&gt;recorded talks&lt;/a&gt;, you will see the accompanying comments, which are for the most part almost as interesting as the conference presentations!&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;In my estimation, TDD conference was a success. We received a lot of positive feedback and even today, more than two weeks later, we keep receiving thanks from all over the world. TDD community is growing, which is an auspicious sign for the quality of software delivery!&lt;/p&gt;
&lt;p&gt;In my view, the conference was overly technical and code centric. I wish I was able to attract more speakers from the executive leadership area who would give us their view on the value of TDD (Andre was interested in giving the opening keynote but then got pulled into more pressing matters; hopefully, the next conference will see Andre give us his views on TDD).&lt;/p&gt;
&lt;p&gt;Another impression was the importance of speaking directly to the audience. For example, &lt;a href="https://blog.devgenius.io/tdd-conference-2021-tdd-misconceptions-olena-borzenko-a69ce302a3e8"&gt;Olena Borzenko&lt;/a&gt; gave a great talk in which she started by looking straight at the camera and addressing the audience. That approach created a lot of positive energy until someone stepped in and warned Olena that she is not sharing her slides. She apologized and started sharing her slides, at which point the energy level dropped. To me, that was a clear sign that slides must be secondary when presenting; people came to hear and watch us deliver a talk, they may not be interested in watching us read off our slides (because people can read for themselves).&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="tdd"></category></entry><entry><title>Pipelines - Meet our second-generation app-type blueprints</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part10.html" rel="alternate"></link><published>2021-07-24T00:00:00-07:00</published><updated>2021-07-24T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-24:/yaml-pipelines-part10.html</id><summary type="html">&lt;p&gt;Our quest for continuous improvement, simplicity, consistency, enablement, and automation has taken us into a realm of Azure Pipelines that amaze even our most critical engineers.&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;In &lt;a href="/yaml-pipelines-part9.html"&gt;Self-service automation - A dream turns into reality&lt;/a&gt; we explored the nifty automation script we used to demonstrate our application-type blueprints to our engineering teams. The feedback was positive, as shown by the session score and the net performance score (NPS) for our common engineering system and sets high expectations for future innovation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stars" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-1.png"&gt; &lt;img alt="NPS" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us review the latest blueprints, we refer to as our second-generation app-type blueprints, and a checklist we use to build new ones.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;2nd Generation app-type blueprint&lt;/h1&gt;
&lt;p&gt;The diagram looks intimidating at first, but the power and simplicity will become evident as we unpack the pieces. If you have been following our adventure from the days of the generic blueprints, you will appreciate the improvement and simplicity - 18 lines of YAML and less than a handful of tokens to update that engineers must worry about.&lt;/p&gt;
&lt;p&gt;Although &lt;a href="/yaml-pipelines-part9.html"&gt;Self-service automation - A dream turns into reality&lt;/a&gt; sets up &lt;strong&gt;everything&lt;/strong&gt; for our engineers, it helps to know about all the ingredients and how they are mixed to create magic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;app-type blueprint architecture&lt;/p&gt;
&lt;p&gt;&lt;img alt="blueprints" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;( 1 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;start&lt;/strong&gt;.yml template, where * is a placeholder for azure-pipeline. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;azure-pipeline-azure-function-&lt;strong&gt;start&lt;/strong&gt;.yml template example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WorkSafeBC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Multi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Design&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Practice&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;See&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DevOps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;documentation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blueprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HOW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;USE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pipelines/azure-pipelines-&amp;lt;portfolio&amp;gt;-&amp;lt;program&amp;gt;-start.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Look&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fine&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tune&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;needed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;trigger&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;every&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Trigger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CeSTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Common-Engineering-System/AzureDevOps.Automation.Pipeline.Templates&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="nv"&gt;@CeSTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;parameters&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;netCoreVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3.1.x&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PORTFOLIO__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PRODUCT__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;azFuncProjectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_AZURE_FUNCTION_PROJECT_NAME__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CeS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AzureFunction&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;suppressCD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eng&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;( 2 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;control&lt;/strong&gt;.yml template, our new wheelhouse, and &lt;strong&gt;extends&lt;/strong&gt; the app-type &lt;em&gt;-start.yml template above. As implied by the name, the template is the app-type cookbook. It pulls the configuration from the ( 3 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;/em&gt;&lt;em&gt;config&lt;/em&gt;*.yml template, injects the continuous integration pipeline, and then the continuous deployment template.&lt;/p&gt;
&lt;p&gt;( 4 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;ci&lt;/strong&gt;.yml template, defines the continuous integration steps and injects the ( 5 ) &lt;strong&gt;boot-strap&lt;/strong&gt;.yml template, which is covered in &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt;. It is where the builds and tests are run, followed by automated scans to verify the latest codebase before opening the deployment gates. "Trust but verify" as Kevin would say.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;COFFEE BREAK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Our DevSecOps team recently decided to suspend one of the security scans, SonarQube, to rebuild their server and create a new database from scratch. Our engineers supporting our classic unified Azure Pipelines, as mentioned in &lt;a href="/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options&lt;/a&gt;, are faces with the mammoth task of updating more than 1000 pipelines. Our pipeline working group only had to update one YAML template, submit, review, and complete a pull-request ... and voila 200+ blueprint-based pipelines no longer ran the SonarQube task. Minutes versus a mind-numbing waste of time.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;( 6 ) azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;cd&lt;/strong&gt;.yml template, defines the continuous deployment steps to validate with automated tests and deploy to one or more environments. As shown in the diagram above, the template includes the ( 7 ) &lt;strong&gt;security-scans&lt;/strong&gt;.yml template, and the ( 8 ) azure-pipeline-&amp;lt; app-type &amp;gt;-cd-&lt;strong&gt;stage&lt;/strong&gt;.yml template. The latter includes the actual recipe for deployment and assumes that all environments are the same. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHAT IF ENVIRONENTS ARE DIFFERENT?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The start and control templates support the concept of injecting custom templates for the continuous integration and deployment steps. In future we will use the same concept to support default and custom QA templates. See code snippet below.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;# START OF PIPELINE&lt;/span&gt;
&lt;span class="c1"&gt;# If user overrides the customCITemplate with a custom template&lt;/span&gt;
&lt;span class="c1"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCITemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blueprint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Custom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CI&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCITemplate&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;ciParameter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCIParameter&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customCITemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blueprint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Blueprints&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeSTemplates&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;azFuncProjectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;azFuncProjectName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;forceToolbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceToolbox&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="n"&gt;loadDVTBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadDVTBox&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;( 9 ) Our &lt;strong&gt;standardisation&lt;/strong&gt;.yml line, which separates the pipeline instance, and the shared templates. Engineering is accountable for the former and the common engineering system for the latter.&lt;/p&gt;
&lt;p&gt;( 10 ) &lt;strong&gt;extends&lt;/strong&gt;, the hidden gem that empower our consistency and security guardrails. We use the &lt;a href="https://github.com/MicrosoftDocs/azure-devops-docs/blob/master/docs/pipelines/security/templates.md#set-required-templates"&gt;set required templates&lt;/a&gt; feature to verify and enforce that all our production pipelines extend from one of the &lt;em&gt;-control.yml templates stored in our AzureDevOps.Automation.Pipeline.&lt;/em&gt;&lt;em&gt;Templates&lt;/em&gt;* repo.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Building a new blueprint&lt;/h1&gt;
&lt;p&gt;&lt;img alt="blueprints" src="/images/moving-hundreds-of-pipeline-snowflakes-part10-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Now that we know the ingredients of our gourmet template stew, let us conclude with a checklist how our engineers create a new blueprint. &lt;/p&gt;
&lt;h2&gt;Cook a new blueprint&lt;/h2&gt;
&lt;p&gt;Create a new ...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Feature branch in our AzureDevOps.Automation.Pipeline.Templates repository and a DRAFT pull request to start &lt;strong&gt;collaborating&lt;/strong&gt; with the pipeline working group. It is important to use the latest and greatest ingredients and consider shared templates where possible to avoid &lt;strong&gt;waste&lt;/strong&gt;. Also use a friendly &amp;lt; app-type &amp;gt; name when creating the unique blueprint folder in our repository.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;start&lt;/strong&gt;.yml template ( feel free to copy-paste from an existing template).&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;control&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;config&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;ci&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;azure-pipeline-&amp;lt; app-type &amp;gt;-&lt;strong&gt;cd&lt;/strong&gt;.yml and an associated azure-pipeline-&amp;lt; app-type &amp;gt;-cd-&lt;strong&gt;stage&lt;/strong&gt;.yml template.&lt;/li&gt;
&lt;li&gt;Publish the pull request to trigger validation build(s), validate policies, and invite operations, security, and working group reviewers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Taste the automation&lt;/h2&gt;
&lt;p&gt;Take a few more steps further to enable automation ...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a AzureDevOps.Automation.Pipeline.Sample.&amp;lt; app-type &amp;gt; repository with a sample app-type specific sample.&lt;/li&gt;
&lt;li&gt;If you have custom tokens that need to be updated by the automation script:&lt;ul&gt;
&lt;li&gt;Create a feature branch in AzureDevOps.Automation.Scripts repository&lt;/li&gt;
&lt;li&gt;Update the /azure-devops-pipelines/demo-blueprints/drop-the-mic.ps1 script&lt;/li&gt;
&lt;li&gt;Submit a pull request.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the automation script, as covered in &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9: Self-service automation - A dream turns into reality&lt;/a&gt; to verify that the following magic happens:&lt;ul&gt;
&lt;li&gt;New repo is created in the specified Azure DevOps.&lt;/li&gt;
&lt;li&gt;New pipeline is created in the new repo.&lt;/li&gt;
&lt;li&gt;New config template is added to the Automation.Pipeline.Templates repo in the /Operations/Config folder.&lt;/li&gt;
&lt;li&gt;The sample from the AzureDevOps.Automation.Pipeline.Sample.&amp;lt; app-type  is copied to the new repository.&lt;/li&gt;
&lt;li&gt;Run new pipeline to validate the continuous integration part of the new pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simple, no?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We continue to create new blueprints to cover all our existing application-types, which include good old Cobol, and new application-types emerging from our architecture runway. &lt;/p&gt;
&lt;p&gt;Watch this space for more exciting news.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | &lt;a href="/yaml-pipelines-part9.html"&gt;Part 9&lt;/a&gt; | Part 10 |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Refactoring saves time and increases quality</title><link href="https://wsbctechnicalblog.github.io/refactoring-saves-time-and-increases-quaity.html" rel="alternate"></link><published>2021-07-22T00:00:00-07:00</published><updated>2021-07-22T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-22:/refactoring-saves-time-and-increases-quaity.html</id><summary type="html">&lt;p&gt;Design is not a static construct, it evolves by refactoring as we keep changing the code&lt;/p&gt;</summary><content type="html">&lt;p&gt;When creating an application, we feel a strong urge to envision a perfect design of the system we intend to build. After all, we have many decades of collective experience in designing systems, and why not leverage that vast body of knowledge?&lt;/p&gt;
&lt;p&gt;That line of reasoning would work perfectly if the systems we’re building were confectionary products that are standardized and normalized. However, years of experience teach us that pretty much each and every system we’re building is somehow unique. Despite many attempts to standardize and normalize software applications, we haven’t seen much useful advances in that area.&lt;/p&gt;
&lt;p&gt;It is for that reason that we cannot blindly apply previously successful designs to a new system we are building. It is more prudent to work on the design that emerges as we are creating software.
This is not to say that the initially envisioned ‘perfect’ design is a waste; it is a good guidepost, something to inform and guide our initial reasoning. But as we proceed with the building activities, we discover that the initial design quickly becomes obsolete.&lt;/p&gt;
&lt;h2&gt;Why redesign?&lt;/h2&gt;
&lt;p&gt;Consider an example from nature: a caterpillar is perfectly designed to devour vast amounts of foliage. So, given such perfect design, why go for a redesign?&lt;/p&gt;
&lt;p&gt;Well, eating vast amounts of foliage is sufficient for survival, but not sufficient for reproduction. There is a design flaw that got discovered in the ‘perfect’ design of a caterpillar.&lt;/p&gt;
&lt;p&gt;To reproduce, a caterpillar must find a mate. And the only way a caterpillar could find a mate is if he refactors himself into a butterfly. A butterfly is designed to search the sky for others of his own species.&lt;/p&gt;
&lt;p&gt;Any design, no matter how perfect it may appear to be, sooner or later must be redesigned. Technical term for that redesign in software is refactoring.&lt;/p&gt;
&lt;h2&gt;What if we don’t refactor?&lt;/h2&gt;
&lt;p&gt;Teams often feel disdain toward refactoring because it eats up precious cycles. Wouldn’t it be more desirable to spend scarce time on building new useful features?&lt;/p&gt;
&lt;p&gt;But that line of reasoning is false economy. Churning new features as if we’re following a construction/manufacturing model and producing widgets on an assembly line doesn’t work well in software development. We are better advised to follow knowledge/service ecology models. And those models differ significantly from the manufacturing model where once established patterns are reliably repeatable. In knowledge/service ecology models, experimentation is the key and reliably repeatable patterns are a rare exception, rather than a rule.&lt;/p&gt;
&lt;p&gt;If we choose not to refactor, we quickly accumulate bad design. It doesn’t take long on a brand-new software development project to start noticing rapidly mounting redundancy. Code duplication is rampant, and that anti-pattern is a surefire signal that we are heading into a defect-and-malfunctioning territory. Before we know it, the precious time we have carved up for building new features gets completely eaten up by the time teams spend fighting fires. Not a good position to be in.&lt;/p&gt;
&lt;p&gt;So, how to fight it? There is no other way to fight treacherous redundancy but by merciless refactoring.
Another bad smell on the rapidly advancing project is unused functionality. Seemingly innocuous, this ‘deadwood code’ is actually very dangerous because it slows teams down. Makes it difficult to separate signal from the noise. Refactoring is the only way to keep mounting deadwood code from sticking around. Getting rid of the unused code is one of the most important aspects of refactoring.&lt;/p&gt;
&lt;p&gt;Designs quickly become obsolete under the pressure of newly discovered details that were unknown during the times the design was formulated. Any design, no matter how fit for purpose it may be, need to be constantly reviewed and rejuvenated.&lt;/p&gt;
&lt;p&gt;Avoid needless clutter and complexity. Make sure that everything is expressed once and only once. It is not possible to ensure that principle if we’re not refactoring.&lt;/p&gt;
&lt;p&gt;Refactoring is time well spent. Never postpone refactoring activities. Never project refactoring tasks for some time into the future. The time is now!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="code"></category><category term="devops"></category><category term="learning"></category><category term="quality"></category><category term="eliminate-waste"></category></entry><entry><title>OODA Loop and DevOps</title><link href="https://wsbctechnicalblog.github.io/ooda-loop-and-devops.html" rel="alternate"></link><published>2021-07-13T00:00:00-07:00</published><updated>2021-07-13T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-13:/ooda-loop-and-devops.html</id><summary type="html">&lt;p&gt;What is the relationship between Observe-Orient-Decide-Act Loop and DevOps.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our July 8, 2021 Navigating the Future ceremony was focused on learning, with &lt;strong&gt;Andre Kaminski&lt;/strong&gt;, &lt;strong&gt;Joo Choon&lt;/strong&gt; and &lt;strong&gt;Todd Yule&lt;/strong&gt; opening talks emphasizing the vital importance of keeping up with the accelerating changes in the world.&lt;/p&gt;
&lt;p&gt;We were fortunate to be able to invite a featured guest speaker, &lt;strong&gt;Ben Ford&lt;/strong&gt;, who specializes in applying strategic and tactical thinking for the purpose of increasing our learning potential. Ben’s amazing talk was sponsored and endorsed by the executive leadership, which is another strong message that fortifies the importance of &lt;em&gt;continuous learning&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Navigating the Future" src="../images/navigating-the-future-ben-ford.png"&gt; &lt;/p&gt;
&lt;p&gt;The title of Ben’s talk was &lt;strong&gt;“OODA (Observe-Orient-Act-Decide) Loop, the Algorithm of Adaptation”&lt;/strong&gt;. 
Ben's talk gave us a lot of food for thought and here I’d like to riff off some of Ben’s observations to elucidate how those may apply to our current problem at hand.&lt;/p&gt;
&lt;h2&gt;DevOps is not about the solution&lt;/h2&gt;
&lt;p&gt;Before DevOps entered the mainstream practice, all software delivery teams have already been delivering solutions. DevOps wouldn’t be as successful as it is today if it was yet another “me too” solution provider.&lt;/p&gt;
&lt;p&gt;DevOps is a revolutionary improvement because it is all about &lt;em&gt;changing the solution&lt;/em&gt;. No solution, regardless of how brilliant it may be, stays valid for very long. Change is inevitable, and what used to fit the bill perfectly just a few months ago, suddenly turns from being an asset to being a liability.&lt;/p&gt;
&lt;p&gt;Many organizations find themselves stuck in that land of obsolescence, where the solutions they’ve settled on a few years back have now turned into a straitjacket that is severely limiting their mobility. The solution suddenly turns into a new problem.&lt;/p&gt;
&lt;p&gt;DevOps shines in such situations. Because DevOps embraces change at the very outset by aggressively shifting left, the inevitable onslaught of changes transforms from being a stress-inducing obstacle to becoming an anti-fragile advantage. Accepting the change gladly and rolling with the punches, DevOps enables business and organizations to grow ever stronger with each potentially traumatic change.&lt;/p&gt;
&lt;h2&gt;DevOps embraces the OODA Loop&lt;/h2&gt;
&lt;p&gt;DevOps is based on Lean and on Extreme Programming (XP). Both Lean and XP are strictly empirical disciplines that eschew any Big Plan Upfront and instead focus on working in extremely small batches. DevOps is, in essence, based on rapid iterating.&lt;/p&gt;
&lt;p&gt;And so is OODA Loop. The goal of OODA/DevOps is to increase frequency of feedback. Any time we react to the circumstances and then must wait until we receive feedback, we are working in complete darkness. DevOps is an attempt to remove that scary working in darkness situation by shining the light of feedback as soon as possible. Hence the jist of the practice – shift left. Shifting left means we receive feedback the moment we make any change. We don’t wait until the change we made propagates throughout various layers of organization until we eventually get the feedback. Did the change work? Did it not work? Learning the outcome of the change late in the game is stressful, traumatic, demoralizing, sometimes even debilitating.&lt;/p&gt;
&lt;p&gt;Being empirical, DevOps insists on continuous and careful observation (the first O in the OODA Loop). Don’t assume anything, rather observe the situation as it unfolds. Once we notice something of significance, don’t act on it in a knee jerk fashion. Instead, consciously move into the orientation phase (the second O in the OODA LOOP). Orientation is the most critical phase in the OODA Loop. Again, abandon preconceived notions and assumptions. This is the phase where prior experience quickly turns from being an asset to becoming a liability. Instead of grabbing the first familiar ‘solution’ that pops to mind, we should keep our minds open. Seek fresh perspective. Cultivate the Beginner’s Mind because that’s where the highest quality solution may emerge from.&lt;/p&gt;
&lt;p&gt;A slight pause associated with the Orient phase may seem counterproductive, but it’s worth slowing down at that point because we increase our chances of finding a better solution.&lt;/p&gt;
&lt;p&gt;Once a better solution emerges, decide to do it, then act on it, and commit to our actions.&lt;/p&gt;
&lt;p&gt;Our actions create a stir and that stir is now observable, which takes us back to the beginning of the cycle – Observe. The cycle thus repeats continuously, giving the DevOps practice a long, sustainable presence.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category></entry><entry><title>Stop the context switching, reduce waste, and focus on value</title><link href="https://wsbctechnicalblog.github.io/context-switching-no-more.html" rel="alternate"></link><published>2021-07-11T00:00:00-07:00</published><updated>2021-07-11T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-11:/context-switching-no-more.html</id><summary type="html">&lt;p&gt;A work-life balance is important, however, I believe that stopping waste and focusing on value is just as pivotal!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I start working on an automation script. It has a purpose, I am starting to master my PowerShell skills, and my brain is thriving on autonomy. A pop-up on Microsoft Teams catches my attention, as three more email notifications pop-up. The phone rings ... someone's hair is on fire. I remember that I promised my colleague to send a summary of the recent 90-days of telemetry, just as I get pulled into an ad-hoc meeting without any context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Stress" src="/images/context-switching-no-more-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Can you visualize yourself in this situation? Do you realise that there were six (6) context switches in the previous relatively short example?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each context switch = loss of &lt;strong&gt;focus&lt;/strong&gt;, &lt;strong&gt;quality&lt;/strong&gt;, and &lt;strong&gt;mastery&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this brief post I will share a few recipes I am evaluating myself to stop the madness.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Context Switch&lt;/h1&gt;
&lt;p&gt;But first, let us understand what a context switch is all about. If you know the basic processor architecture and have a knowledge of assembler, you will appreciate that a context switch is not trivial. The processor is interrupted, currently executing process registers, program counters, and operating system data are saved, a new process is scheduled, and execution in a different context begins. '&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pseudocode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;movel: copy arguments from stack to memory&lt;/li&gt;
&lt;li&gt;pushl: Save registers (edp, ebc, esi, edi, ...)&lt;/li&gt;
&lt;li&gt;movel: Switch stacks&lt;/li&gt;
&lt;li&gt;popl: load new registers&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The switch saves the state of the currently executing process, so that when it is rescheduled, the state can be restored. Our digital companions have mastered the art of consistent and high-speed context switching. When the binary dust settles in my world, it often takes time to reset my mental state and energy, stress levels rise dangerously, and things of value are often omitted (forgotten). &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Stop Waste, focus on Value&lt;/h1&gt;
&lt;p&gt;I live by two leadership maxims I crafted over the past year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable and encourage everyone's creativity, passion, purpose, and strengths.&lt;/li&gt;
&lt;li&gt;Stop waste, focus on value!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a few supportive recommendations:&lt;/p&gt;
&lt;h2&gt;Email Recommendations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Email" src="/images/context-switching-no-more-3.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Close your favourite mail software when focusing. No-one will send an email if the world ends!&lt;/li&gt;
&lt;li&gt;Setup rules for incoming and outcoming emails, as per screen snippet below&lt;/li&gt;
&lt;li&gt;I delay all outgoing emails by 13min, allowing me to mull over content.&lt;/li&gt;
&lt;li&gt;Any emails where I am CC'd go into a &lt;strong&gt;Inbox CC&lt;/strong&gt;, FYI-only, and read last bucket.&lt;/li&gt;
&lt;li&gt;Any emails that may be important, such as reacting to pull request (PR) notifications, are filtered into a folder that I review after clearing my inbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Stress" src="/images/context-switching-no-more-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Phone Recommendations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Email" src="/images/context-switching-no-more-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Silence your phone and annoying "ding, ding, ding, ... " notifications when you are focusing. If urgent, users will call again, and most phones allow you to configure that 3+ repetitive calls break through the silence barrier - at least my old Pixel "1" does.&lt;/p&gt;
&lt;h2&gt;Meeting Recommendations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Meeting" src="/images/context-switching-no-more-5.png"&gt;&lt;/p&gt;
&lt;p&gt;I refined these recommendations during the Covid pandemic when most of us started working from home full-time. I stared at multiple days of end-to-end virtual calls, and dwindling opportunities to focus, innovate, or enjoy a quick break.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decline&lt;/strong&gt; all meetings that are scheduled without an agenda or context. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decline&lt;/strong&gt; regularly recurring meetings if they or my presence does not add value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decline&lt;/strong&gt; back-to-back meetings, or worse, overlapping meetings.&lt;/li&gt;
&lt;li&gt;Recommend finishing 5 minutes early for short meetings and 10 minutes for long meetings to allow attendees to &lt;strong&gt;relax&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Recommend 1-2 meeting-free days, for example Friday, so that engineers can use the day to &lt;strong&gt;focus&lt;/strong&gt; on delivering value with no interruptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we return to the office environment full- or part-time, I suggest adding another rule to host large (&amp;gt; 6 interactive attendees) meetings, such as the Program Increment Planning, in-person.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Another experiment I am running is removing Twitter, LinkedIN, Signal, News, and other applications that thrive on notifications from my (smart?!?) phone. Instead of sitting at the Fraser feverishly clicking through all the channels, I am now sitting with my feet in the water and enjoying the tranquil beauty that mother nature is spoiling us with.&lt;/p&gt;
&lt;p&gt;I hope this post gives your food for thought. &lt;/p&gt;
&lt;p&gt;Life is precious and protecting your work/life balance is important. When you take charge of &lt;strong&gt;your&lt;/strong&gt; day and realise that not every storm in someone's tea cup is an emergency, you will start to dream again, delivering innovative and quality solutions previously thwarted by context switching.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dream" src="/images/context-switching-no-more-6.jpg"&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="tips"></category></entry><entry><title>Gotchas when sharing variables with Azure DevOps stages and jobs</title><link href="https://wsbctechnicalblog.github.io/sharing-variables-with-stages-and-jobs.html" rel="alternate"></link><published>2021-07-08T00:00:00-07:00</published><updated>2021-07-08T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-08:/sharing-variables-with-stages-and-jobs.html</id><summary type="html">&lt;p&gt;Understanding and avoiding gotchas that may keep you up at 2AM, troubleshooting YAML-based Azure Pipelines&lt;/p&gt;</summary><content type="html">&lt;p&gt;I assume that you have read our &lt;a href="/sharing-variables-with-stages-and-jobs.html"&gt;How to share variables amongst Azure Pipeline agents&lt;/a&gt;, which shared a few turbulent moments we experienced while troubleshooting this feature earlier this year. With this post we continue our troubleshooting excursion to highlight a few gotchas that have caused lots of head scratching.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Core Syntax&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Syntax" src="/images/sharing-variables-with-stages-and-jobs-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are two reminders to tattoo on your forearm, when referencing variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Within a stage, map variables as: &lt;code&gt;dependencies.&amp;lt;stage&amp;gt;.&amp;lt;job&amp;gt;.outputs['&amp;lt;step&amp;gt;.&amp;lt;name&amp;gt;']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Across stages, map variables as: &lt;code&gt;stageDependencies.&amp;lt;stage&amp;gt;.&amp;lt;job&amp;gt;.outputs['&amp;lt;step&amp;gt;.&amp;lt;name&amp;gt;']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us lift the pipeline bonnet and explore.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;STEP 1: Define a variable to be shared&lt;/h1&gt;
&lt;p&gt;We define three variables, named secretValue1, secretValue2, and secretValue3 in our job called StageOneJobOne. Note that we explicitly name two of the steps and leave one as default. Sounds simple, but this will bite is later on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue1;isOutput=true]BINGO-1!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue2;isOutput=true]BINGO-2!&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue3;isOutput=true]BINGO-3!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable3&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last task, replaces the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dutchworkz.DisplayAllVariables"&gt;Display all variables&lt;/a&gt; extension, I commonly used to dump all variables. A bonus is that unlike the extension, the bash task runs on any agent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from task log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="c"&gt;BASH_SECRETVALUE2: BINGO-2!&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="c"&gt;SETVARIABLE1_SECRETVALUE1: BINGO-1!&lt;/span&gt;
&lt;span class="c"&gt;SETVARIABLE3_SECRETVALUE3: BINGO-3!&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you cannot resolve a variable, add this task to determine if and in which shape it is included. As you may have noted our three variables are mapped slightly differently. The two generated  by the explicitly names step have inherited the step names &lt;code&gt;SetVariable1&lt;/code&gt; and &lt;code&gt;SetVariable3&lt;/code&gt;, whereas the other assumed the default task name, &lt;code&gt;Bash&lt;/code&gt;. Assumptions one of the evil roots of the infamous 2AM-calls!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;STEP 2: Reference variable in another job with the same stage&lt;/h1&gt;
&lt;p&gt;Next we reference  the variables in another job and echo their values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;# Gotcha #1&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secretValue2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking at the stage log, we immediately notice that our first &lt;code&gt;var1&lt;/code&gt; variable has been resolved as expected, the second &lt;code&gt;var2&lt;/code&gt; variable is blank?!?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Gotcha1" src="/images/sharing-variables-with-stages-and-jobs-1.png"&gt;
If you refer to your forearm and look at the tattoo for mapping a variable within the stage, you realise we are missing the step name. It is fairly easy to pinpoint this GOTCHA when you use the tools at your disposal, such as the &lt;code&gt;- bash: 'env | sort'&lt;/code&gt; task and the trustworthy log files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;STEP 3: Reference variable in another job in a different stage&lt;/h1&gt;
&lt;p&gt;Next we reference the variables in another job from another stage and echo the value. The sample shows the use of a stage and a job variable and highlights the importance of using your second tattoo, which uses &lt;strong&gt;stageDependencies...&lt;/strong&gt; instead of &lt;strong&gt;dependencies...&lt;/strong&gt; we used before. In fact, the sample intentionally uses both, to welcome GOTCHA #2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwo&lt;/span&gt;
  &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOne&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwoJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking at the job's log file, we immediately notice the GOTCHA.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Gotcha2" src="/images/sharing-variables-with-stages-and-jobs-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Troubleshooting Checklist&lt;/h1&gt;
&lt;p&gt;When things go belly up with your variables, I recommend that you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Look at the job logs and check if variables have been prepared correctly.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;- bash: 'env | sort'&lt;/code&gt; to display all variables.&lt;/li&gt;
&lt;li&gt;Check that your steps creating the variables have a &lt;strong&gt;name&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Check that your steps referencing the variables use the correct &lt;strong&gt;mapping&lt;/strong&gt; as per the mapping tattoo.&lt;/li&gt;
&lt;li&gt;Use the new YAML-pipeline editor and highlight the stage, job, task, and variable names. It highlights reoccurrences very nicely. Saved me a lot of time today when the highlighting, or lack thereof, made me realise that job was named job&lt;strong&gt;e&lt;/strong&gt; ... easily missed when embedded in mapping hierarchies.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Last, but not least, here is the complete sample code for the pipeline we experimented with. Enjoy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# STAGE ONE&lt;/span&gt;
&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOne&lt;/span&gt;
  &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 1&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue1;isOutput=true]BINGO-1!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue2;isOutput=true]BINGO-2!&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##vso[task.setvariable variable=secretValue3;isOutput=true]BINGO-3!&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SetVariable3&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;

  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 2&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;# Gotcha #1&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secretValue2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_1&lt;/span&gt;

  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 3&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobThree&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BINGO-1!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;macOS-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="c1"&gt;# STAGE 1 JOB 4&lt;/span&gt;
  &lt;span class="c1"&gt;# ------------------------------------------------------------------------------------------------&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOneJobFour&lt;/span&gt;
    &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;StageOneJobTwo&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# STAGE TWO&lt;/span&gt;
&lt;span class="c1"&gt;# ##################################################################################################&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwo&lt;/span&gt;
  &lt;span class="n"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageOne&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StageTwoJobOne&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;windows-latest&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;stageDependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StageOneJobOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SetVariable1.secretValue1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env | sort&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varStage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GOTCHA_2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Self-service automation - A dream turns into reality</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part9.html" rel="alternate"></link><published>2021-07-05T00:00:00-07:00</published><updated>2021-07-05T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-05:/yaml-pipelines-part9.html</id><summary type="html">&lt;p&gt;Automate a “hello world in less than 1min”, also referred to as our “walking skeleton”.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of pipeline wizardry. We are changing gears from the nuts and bolts, to the automation we can achieve using the blueprint-based pipelines. Fasten your seat belts!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The dream&lt;/h1&gt;
&lt;p&gt;Our automation working group had a vision to build an engineering process that could generate a “Hello world in less than 1min”, aka walking skeleton, to decimate engineering process lead lines and enable our engineering teams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Option 1 - Manual and humanoid driven engineering process&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our engineering process is not unique. It starts with an idea. Engineering creates a new repository for the code artifacts, and a continuous integration and deployment pipeline. As engineers require elevated permissions to generate the repo and pipeline artifacts, other engineers and departments get engaged as part of the process to ensure consistency, security, and alignment with guardrails (governance). &lt;/p&gt;
&lt;p&gt;As frustrating as it may sound, it can take &lt;strong&gt;hours to days&lt;/strong&gt;, until the engineering team can finally start adding and building their code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Option 2 - Automated and humanoid enabled engineering process&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our envisaged engineering process is radically different. Engineering visits a self-service portal, captures data to describe what they need, and the &lt;strong&gt;click a button&lt;/strong&gt;. The engineering process should be created through automation, the repo should contain an application-type sample, and by the time the engineering team blinks, the pipelines should be running to validate the setup using the sample code. &lt;/p&gt;
&lt;p&gt;Machines (automation) can do repetitive tasks much better and faster than we can, they stick to the instructions to ensure that we do not have to validate consistency and guardrail alignment.&lt;/p&gt;
&lt;p&gt;Our dream, as mentioned, is to enable the engineering team within 1 minute. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Community View&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Option 2 - Automated and humanoid enabled engineering process&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We polled the twitter and LinkedIn community and realized that we are not alone. An average of &lt;strong&gt;33&lt;/strong&gt;% of users tolerate hours and &lt;strong&gt;36&lt;/strong&gt;% of users days to get a basic project environment assembled. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That is unacceptable!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Manual" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Our drop-the-mic demo&lt;/h1&gt;
&lt;p&gt;We demonstrated the following engineering process using a recipe of Git, Azure DevOps REST API, and a PowerShell automation script, developed and mob-reviewed by our automation working group:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Query Azure DevOps Project information&lt;/li&gt;
&lt;li&gt;Create an Azure Repo (Git)&lt;/li&gt;
&lt;li&gt;Clone our AzureDevOps.Automation.Pipeline.Templates and the app-type specific AzureDevOps.Automation.Pipeline.Sample.* repository&lt;/li&gt;
&lt;li&gt;Clone the newly created repository&lt;/li&gt;
&lt;li&gt;Add the app-type *-start.yml template to the new repo&lt;/li&gt;
&lt;li&gt;Add the app-type sample code to the new repo&lt;/li&gt;
&lt;li&gt;Push local changes to the Azure Repo&lt;/li&gt;
&lt;li&gt;Create a new pipeline, linked to the *-start.yml template in the new repo&lt;/li&gt;
&lt;li&gt;Run the new pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we shared a recording of the demo with engineering, there were a few gob-smacked faces when the penny dropped that our "less 1min dream" could evolve into a "less than 20 seconds engineering process".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello world automation demo&lt;/p&gt;
&lt;p&gt;&lt;img alt="Demo" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is our automation script we used for the demo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;CATEGORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipelines&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;LAUNCHED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CmdletBinding()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter (Mandatory= $true)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;patToken&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TIME&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Security&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;{0}:{1}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;patToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Text.Encoding&lt;/span&gt;&lt;span class="o"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Convert&lt;/span&gt;&lt;span class="o"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;ToBase64String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@{&lt;/span&gt;&lt;span class="k"&gt;Authorization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Basic {0}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameTemplates&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AzureDevOps.Automation.Pipeline.Templates&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoTemplates&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;lt;SOURCE-ORG&amp;gt;@dev.azure.com/&amp;lt;SOURCE-ORG&amp;gt;/&amp;lt;SOURCE-PROJECT&amp;gt;/_git/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameSamples&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AzureDevOps.Automation.Pipeline.Sample.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoSamples&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;lt;SOURCE-ORG&amp;gt;@dev.azure.com/&amp;lt;SOURCE-ORG&amp;gt;/&amp;lt;SOURCE-PROJECT&amp;gt;/_git/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameSamples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_git/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSamples&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameSamples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderSourceSample&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSamples&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\src&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSourceSample&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderSourceSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderTargetSample&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\src&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderPipeline&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\pipelines&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-start&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;azure-pipeline-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeSource&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\Blueprints\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\azure-pipeline-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-start.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\pipelines\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameConfigFile&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-config.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigSource&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\Blueprints\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\azure-pipeline-&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;blueprintName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-config.yml&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigTarget&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\Operations\Config\&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameConfigFile&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenPortfolio&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PORTFOLIO__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenProduct&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__TODO_PRODUCT__&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.1 - Get ID for project: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetProject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/projects/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?api-version=6.0&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projResult&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetProject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 1.1 &amp;lt;GET PROJECT ID&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AzDO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.2 - Create New Repository: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreateRepo&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/git/repositories?api-version=6.1-preview.1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreateRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;project&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;id&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;  }&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreateRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreateRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Create Repo Result: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 1.2 &amp;lt;CREATE REPO&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.1 Clone repo &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoTemplates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; to local path&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.2 Clone repo &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoSamples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; to local path&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoSamples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSamples&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2.3 Clone repo &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; to local path&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoNew&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3.1 Add app-type start template to new repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderPipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ItemType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3.2 Add config template to templates repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ItemType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Force&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startConfigTarget&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4.1 Add src folder and sample solution&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderTargetSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ItemType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathSourceSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folderTargetSample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4.2 Replace tokens with variables&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;rawFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step1File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;rawFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenPortfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step2File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step1File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;tokenProduct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startPipeTarget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;step2File&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5.1 Push all new changes to new repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathRepo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Automation: Sample source &amp;amp; app-type blueprint pipeline.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5.2 Push all new changes to new repo&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Automation: Add new product configuration.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pathWorking&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;6.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;committed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;6.1 Query repo ID&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/git/repositories/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?api-version=6.0&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriGetRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 6.1 &amp;lt;GET REPO ID&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;6.2 Create new pipeline&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/pipelines?api-version=6.0-preview.1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;quot;folder&amp;quot; : &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;quot;configuration&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;type&amp;quot; : &amp;quot;yaml&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;path&amp;quot; : &amp;quot;/pipelines/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;repository&amp;quot; : {&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;id&amp;quot; : &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;name&amp;quot; : &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;type&amp;quot; : &amp;quot;azureReposGit&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonCreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 6.2 &amp;lt;LINK PIPELINE&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##################################################################################################################&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pipelines&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devops&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;7.1 Run pipeline&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://dev.azure.com/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;orgName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/_apis/pipelines/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/runs?api-version=6.0-preview.1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{ &amp;quot;variables&amp;quot;: {      &lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;customVariable&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      }&lt;/span&gt;
&lt;span class="s1"&gt;    },&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;process&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;yamlFilename&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipelineFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;type&amp;quot;:  2&lt;/span&gt;
&lt;span class="s1"&gt;     },&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;repository&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;id&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;repoID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;type&amp;quot;: &amp;quot;TfsGit&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nameRepo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;defaultBranch&amp;quot;: &amp;quot;refs/heads/master&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;clean&amp;quot;:  null,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;checkoutSubmodules&amp;quot;:  false&lt;/span&gt;
&lt;span class="s1"&gt;    },&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;namePipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;path&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;type&amp;quot;: &amp;quot;build&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;queueStatus&amp;quot;: &amp;quot;enabled&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;project&amp;quot;:  {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;id&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;name&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;projectName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uriRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;jsonRunPipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;headerPAT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;debugMode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pipeID&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;STEP 6.2 &amp;lt;LINK PIPELINE&amp;gt; FAILURE: &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eject&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OH, OH - FATAL ERROR! &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;DATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TIME&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;micTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Timespan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;TotalSeconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From zero to hello world in &amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;micTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TotalSeconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;lt; seconds q;)&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;COPY-PASTE and REUSE at your own risk. This was a demo script and will be going through extensive mob-reviews and mob-programming to turn it into a production-ready automation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Gob-smacked?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;gob-smacked (excited) yet?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gobsmacked" src="/images/moving-hundreds-of-pipeline-snowflakes-part9-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We need to expand our library of application-type blueprints and in parallel expand the automation script to support the new app-types. In parallel we need to move the automation script to be run by Azure Pipelines to support queueing, and add a user-friendly service portal to "click the button."&lt;/p&gt;
&lt;p&gt;Watch this space for more exiting progress.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7&lt;/a&gt; | &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8&lt;/a&gt; | Part 9 | &lt;a href="/yaml-pipelines-part10.html"&gt;Part 10&lt;/a&gt; |&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="x-as-code"></category></entry><entry><title>Our quest to share our knowledge with the world, keeping it interesting and informal</title><link href="https://wsbctechnicalblog.github.io/blog-post-101.html" rel="alternate"></link><published>2021-07-02T00:00:00-07:00</published><updated>2021-07-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-07-02:/blog-post-101.html</id><summary type="html">&lt;p&gt;Understand how to navigate and create content for our technical blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As an engineer I expect that everyone has the genetic building blocks to (want to) continuously and relentlessly improve, innovate, experiment, and collaborate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Engineer" src="../images/blog-post-101-1.png"&gt; &lt;/p&gt;
&lt;p&gt;Collaboration is essential as two or more brains are better than one, exchange ideas, knowledge, experience, and to come up with better ideas and ways of solving problems for today and tomorrow.&lt;/p&gt;
&lt;p&gt;All of the above, without letting your ego get in the way, being scared to fail or ask a question, not afraid of seeking candid feedback. &lt;/p&gt;
&lt;p&gt;Our WorkSafeBC technical blog is one of many channels (or hammer) that helps us collaborate and share our experiences and knowledge with everyone. In this short post, I will focus on how to find content relevant to you, and if you are a WorkSafeBC engineer, to create your first post. &lt;/p&gt;
&lt;h1&gt;What do our categories and tags mean?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-2.png"&gt; &lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;tag&lt;/strong&gt; our technical blog posts to allow you, the reader, to find and focus on content that is relevant and valuable to you. It is important to focus on what is valuable to you and skip the "bile".&lt;/p&gt;
&lt;p&gt;Here is a list of tags we use when creating new content:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TAG&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;FOCUS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;agile&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Agile, Kanban, SAFe, and other frameworks to plan, track, and collaborate across teams.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;architecture&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Software architecture.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Automate repetitive tasks and processes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azure&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft &lt;a href="https://azure.microsoft.com"&gt;Azure&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azure-devops&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft &lt;a href="https://azure.microsoft.com/en-us/services/devops/"&gt;Azure DevOps&lt;/a&gt; services.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ceremony&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Collaboration ceremonies.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Software coding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code-quality&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Objectively measurable characteristics of the code structure.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;continuous-delivery&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Uninterrupted flow of delivery of changes from development to production&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delivery-on-demand&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ability to deliver/release changes to the system any time business demands those changes be put in front of customers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;design&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Structuring the system and the code in the most optimal fashion.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devops&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The union of people, process, and products to enable continuous delivery of value to our end users. - &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brian&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dojo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Psychologically safe place dedicated to perfecting one's skills.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eliminate-waste&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Continuous drive to avoid and reduce wasteful processes and products.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;engineering&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Software engineering.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Meetup, training, workshop, and other event gatherings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feature-flags&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Separating deploy from release through feature toggles / flags.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;innovation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Disrupting the status quo by proposing hypotheses and conducting observable/repeatable experiments to corroborate or falsify proposed hypotheses.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;journal&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Regular EDO Common Engineering journal entries to share our progress, failures, and learnings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lean&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Maintaining low inventory, slim work in progress buffer and eliminating any duplications by practicing single source of truth paradigm.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;learning&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Continuous learning.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pipelines&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Continuous integration, deployment, delivery, YAML, and other interesting topics to build, test, and deploy our software solutions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;posters&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Quick reference posters and cheat sheets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quality&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Technical excellence and quality of engineering solutions to add value, not complexity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;security&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;"Trust, but verify " to avoid and function under malicious attacks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system-programming&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Automating system operations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tdd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Test-driven Development.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;technical-excellence&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Focus on satisfying the minimum acceptable standard of quality in terms of security, safety, reliability, resilience, and performance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;testability&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Designing changes to the system in such way that they are 100% testable in a deterministic fashion.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;testing&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Test to raise the quality bar and deploy with confidence.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tips&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Tips and tricks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version-control&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Secure, version, and collaborate to build better code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;workflow&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Streamline repetitive tasks and processes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x-as-code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Virtualizing any aspect of the computing machinery.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Extreme programming ( XP) software development methodology.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The list is reviewed as we review new content. Although we are open for change, for example adding new tags or renaming existing tags, we want to keep the churn and number of tags to an absolute minimum.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Category" src="../images/blog-post-101-4.png"&gt; &lt;/p&gt;
&lt;p&gt;We are starting to also &lt;strong&gt;categorise&lt;/strong&gt; our content to add a different lens for you to use to find relevant content. Here is a list of categories we use:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CATEGORY&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;MEANING&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Events&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Specific updates covering events, such as meetups and workshops.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Posts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Updates by our engineers and other interesting individuals, sharing their knowledge with the world.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thoughts? How can we improve our tags and categories? Please ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; and help us improve our content.&lt;/p&gt;
&lt;h1&gt;Create your first post&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-3.png"&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hanselman.com/blog/blog-interesting-32-ways-to-keep-your-blog-from-sucking"&gt;Blog Interesting - 32 Ways to Keep Your Blog from Sucking&lt;/a&gt;, by Scott Hanselman!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are working with or you are a WorkSafeBC engineer, you have invaluable technical knowledge and experience to share! Here is a 7-step checklist to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand &lt;a href="https://www.markdownguide.org/"&gt;markdown&lt;/a&gt;. Our blog posts, such as this one, are developed using the simple and easy-to-use markup language.&lt;/li&gt;
&lt;li&gt;Collaborate with the &lt;strong&gt;WSBC Technical Blog Content Discussion&lt;/strong&gt; working group, which you can locate in Microsoft Teams.&lt;/li&gt;
&lt;li&gt;Clone our &lt;a href="https://github.com/wsbctechnicalblog/wsbctechnicalblog.github.io"&gt;wsbctechnicalblog-wsbctechnicalblog.github.io&lt;/a&gt; repository.&lt;/li&gt;
&lt;li&gt;Create a feature branch &lt;code&gt;&amp;lt;yourname&amp;gt;/&amp;lt;title&amp;gt;&lt;/code&gt;, for example willys/blog-post-101. Do not use your primary, 2, or 5-ID!&lt;/li&gt;
&lt;li&gt;Create a new markdown file in the &lt;code&gt;/content&lt;/code&gt;, for example &lt;code&gt;/content/blog-post-101.md&lt;/code&gt; and add the metadata header at the start, which will be used when your gem is converted to a live HTML page.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;Title: &amp;lt;catchy title&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;Date: YYYY-MM-DD&lt;/span&gt;
&lt;span class="c"&gt;Category: &amp;lt;Events|Posts&amp;gt;, as above mentioned &lt;/span&gt;
&lt;span class="c"&gt;Tags: &amp;lt;Tags&amp;gt; comma separated, as above mentioned&lt;/span&gt;
&lt;span class="c"&gt;Slug: Your &amp;lt;file-name&amp;gt; without the .md&lt;/span&gt;
&lt;span class="c"&gt;Author: &amp;lt;FirstName&amp;gt; &amp;lt;LastName&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;Summary: &amp;lt;Quick summary of what post is about&amp;gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...and finally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create your content using the editor of your choice - mine is Visual Studio Code.&lt;/li&gt;
&lt;li&gt;Create a pull request and submit your changes for review and collaboration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-5.png"&gt; &lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h1&gt;One, two, or more authors?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-6.png"&gt; &lt;/p&gt;
&lt;p&gt;Unfortunately, we can only define one author in the metadata, however, you can co-author a post with a colleague or with a member from our &lt;strong&gt;WSBC Technical Blog Content Discussion&lt;/strong&gt; working group. We are more than happy and keen to assist you, even as an unknown ghost writer. &lt;/p&gt;
&lt;p&gt;Just collaborate with us, ask questions (&lt;em&gt;the only one that is bad is the one you never ask&lt;/em&gt;), and do not hesitate to ask for help.&lt;/p&gt;
&lt;h1&gt;To conclude&lt;/h1&gt;
&lt;p&gt;Are you a reader of our technical blog post? Please do not hesitate to give us candid feedback to help us improve our content!&lt;/p&gt;
&lt;p&gt;Are a WorkSafeBC'tonian? Hopefully this post will serve as an inspiration for you to start and to keep on blogging. We are waiting for your call and/or your pull request!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tags" src="../images/blog-post-101-7.png"&gt; &lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category></entry><entry><title>Quick Reference Sheet for Pipeline Terminology</title><link href="https://wsbctechnicalblog.github.io/moving-hundreds-of-pipeline-snowflakes-qr-3.html" rel="alternate"></link><published>2021-06-13T00:00:00-07:00</published><updated>2021-06-13T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-06-13:/moving-hundreds-of-pipeline-snowflakes-qr-3.html</id><summary type="html">&lt;p&gt;Summarising the core terminology and lifetime of our pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Is my pipeline supported and aligned with our naming guidelines? This poster aims to answer these questions for you briefly. &lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Application Pipeline Terminology&lt;/p&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-3-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The four lifetime quadrants:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Circle of life" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-3-2.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Deprecated&lt;/strong&gt; - Deprecated and retired technologies that are no longer supported in our production environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sunset&lt;/strong&gt; - Technologies that are being sunset and on the verge of moving into the unsupported deprecated quadrant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production&lt;/strong&gt; - Production contains a platter of technologies that are supported in production. Make sure you consider the options recommended by the common engineering system first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emerging&lt;/strong&gt; - The working groups are always looking forward to complementing the common engineering system with emerging technologies. Emerging technologies have limited early preview support. It is imperative that you validate the limitations, prerequisites, and guidelines by DevSecOps and Common Engineering System before using any emerging technology in a production environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While we should all hover in the production quadrant, it is important to consider the &lt;strong&gt;emerging&lt;/strong&gt; technologies, experiment, familiarise yourself, and give candid feedback to the working groups.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/multi-stage-blueprint-based-pipeline-terminlogy.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enjoy and remember that we crave candid feedback to sprinkle value over these artifacts!&lt;/p&gt;
&lt;p&gt;| &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-1.html"&gt;POSTER 1&lt;/a&gt; | &lt;a href="/moving-hundreds-of-pipeline-snowflakes-qr-2.html"&gt;POSTER 2&lt;/a&gt; | POSTER 3 (this) |&lt;/p&gt;
&lt;hr&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="devops"></category><category term="pipelines"></category><category term="posters"></category><category term="x-as-code"></category></entry></feed>