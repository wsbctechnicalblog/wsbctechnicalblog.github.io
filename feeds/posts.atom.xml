<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>- Posts</title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/posts.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2021-03-19T00:00:00-07:00</updated><entry><title>Incremental and Iterative Development – what’s the diff?</title><link href="https://wsbctechnicalblog.github.io/incremental-and-iterative-development.html" rel="alternate"></link><published>2021-03-19T00:00:00-07:00</published><updated>2021-03-19T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-19:/incremental-and-iterative-development.html</id><summary type="html">&lt;p&gt;Visual example illustrating the fundamental differences between incremental and iterative development process.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I oftentimes hear people discuss development methodologies and mention incremental and iterative approaches. When I ask for further clarification, it surprises me how frequently people conflate the two methodologies. I hear “well, they’re just two words denoting the same thing”.&lt;/p&gt;
&lt;p&gt;Which is far from being true. Let’s now examine what makes one development process iterative and another development process incremental, and let’s then look into what makes them so fundamentally different.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Iterative development&lt;/h2&gt;
&lt;p&gt;According to the dictionary, to iterate implies “to perform or utter repeatedly”. Repetition is the essence of iteration. In software engineering, we often call iteration by another name – rework.&lt;/p&gt;
&lt;p&gt;This distinction sometimes gets misinterpreted, so I’d like to illustrate what is meant by the expression ‘iterative development’, and I’d like to use a series of visual examples.&lt;/p&gt;
&lt;p&gt;Let’s start with the first iteration (or a first pass). The initial draft may look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 1" src="/images/monalisa/monalisa1.png"&gt;&lt;/p&gt;
&lt;p&gt;Since the above draft is very vague and unclear, we need to revisit our first draft and do a bit of rework, in the hopes of adding some clarity:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 2" src="/images/monalisa/monalisa2.png"&gt;&lt;/p&gt;
&lt;p&gt;The picture now is a little bit clearer, but still it is obvious it needs more work (rework). So we iterate, and the third iteration looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 3" src="/images/monalisa/monalisa3.png"&gt;&lt;/p&gt;
&lt;p&gt;A bit better, yeah? Still, quite fuzzy. Let’s do the fourth iteration:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 4" src="/images/monalisa/monalisa4.png"&gt;&lt;/p&gt;
&lt;p&gt;Ah okay, maybe now with the fourth iteration some eagle-eyed people can already recognized what are we making? Still, needs more rework. On to the fifth iteration:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 5" src="/images/monalisa/monalisa5.png"&gt;&lt;/p&gt;
&lt;p&gt;Oh, that kind of looks familiar. Just to be sure, let’s do more rework; iteration 6:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 6" src="/images/monalisa/monalisa6.png"&gt;&lt;/p&gt;
&lt;p&gt;It’s a portrait of a woman, and maybe even a very famous portrait. Let’s add more details; iteration 7:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 7" src="/images/monalisa/monalisa7.png"&gt;&lt;/p&gt;
&lt;p&gt;Aha, looks like Leonardo da Vinci’s famous Mona Lisa! Definitely. But it looks quite crude – we need to do some more rework. Iteration 8:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 8" src="/images/monalisa/monalisa8.png"&gt;&lt;/p&gt;
&lt;p&gt;Now there’s no doubt – it is Mona Lisa! If we squint we can definitely be sure. But it lacks a lot of detail still. Iteration 9:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 9" src="/images/monalisa/monalisa9.png"&gt;&lt;/p&gt;
&lt;p&gt;The details are starting to emerge. Still looks amateurish. More rework; iteration 10:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 10" src="/images/monalisa/monalisa10.png"&gt;&lt;/p&gt;
&lt;p&gt;The expression on Mona Lisa’s face is now visible. Let’s keep going; iteration 11:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 11" src="/images/monalisa/monalisa11.png"&gt;&lt;/p&gt;
&lt;p&gt;Almost there! Still somewhat pixelated, we will circle back one more time to increase the resolution. Iteration 12:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Iteration 12" src="/images/monalisa/monalisa12.png"&gt;&lt;/p&gt;
&lt;p&gt;Voila! That’s it. Gradual refinement delivers the masterpiece!
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Incremental development&lt;/h2&gt;
&lt;p&gt;According to the dictionary, to increment means “an increase or addition, especially one of a series on a fixed scale”.&lt;/p&gt;
&lt;p&gt;Let’s illustrate incremental development using Da Vinci’s Mona Lisa.&lt;/p&gt;
&lt;p&gt;First increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 1" src="/images/monalisa/monalisaincrement1.png"&gt;&lt;/p&gt;
&lt;p&gt;Second increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 2" src="/images/monalisa/monalisaincrement2.png"&gt;&lt;/p&gt;
&lt;p&gt;Third increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 3" src="/images/monalisa/monalisaincrement3.png"&gt;&lt;/p&gt;
&lt;p&gt;Fourth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 4" src="/images/monalisa/monalisaincrement4.png"&gt;&lt;/p&gt;
&lt;p&gt;Fifth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 5" src="/images/monalisa/monalisaincrement5.png"&gt;&lt;/p&gt;
&lt;p&gt;Sixth increment:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mona Lisa Increment 6" src="/images/monalisa/monalisaincrement6.png"&gt;&lt;/p&gt;
&lt;p&gt;And so on…
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;What are the differences between iterative and incremental development?&lt;/h2&gt;
&lt;p&gt;I hope that the visual illustrations above are helpful in driving the salient points home. Let’s enumerate the differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unlike iterative development, which starts with the whole picture (the whole system), incremental development starts from one fixed part of the system&lt;/li&gt;
&lt;li&gt;Unlike iterative development, which outlines the whole system in very crude strokes, incremental development works on an isolated fixed part of the system until is fully done (following the Definition of Done, or DoD)&lt;/li&gt;
&lt;li&gt;Unlike iterative development, which is based on relentless rework, incremental development forbids rework, and only moves on to work on the next part of the system once the previous part is fully fleshed out and frozen for any further changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="Incremental-development"></category><category term="Iterative-development"></category><category term="Agile"></category><category term="DevOps"></category></entry><entry><title>Pipeline-as-code wrapped with Pull Requests</title><link href="https://wsbctechnicalblog.github.io/pipelines-as-code-pr.html" rel="alternate"></link><published>2021-03-13T00:00:00-08:00</published><updated>2021-03-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-13:/pipelines-as-code-pr.html</id><summary type="html">&lt;p&gt;This post attempts to give our critics some answers and scratch the surface of the possibilities and values of our new blueprint-based pipelines.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the past three program increments, which amounts to a staggering 30 iterations, or 300 days, we have been working on our quest to convert our legacy classic pipelines to YAML-based pipelines, as outlined in our &lt;a href="/why-pipelines-part1.html"&gt;Pipelines - Why bother and what are our nightmares and options&lt;/a&gt; series. More importantly, we have been working in parallel to elaborate on the value to our stakeholders. &lt;/p&gt;
&lt;p&gt;A tough challenge, because there is no visual value in continuous integration and deployment pipelines to business, our delighted end-users, or our engineers who want full control of our common engineering system. &lt;/p&gt;
&lt;p&gt;A recent awareness and prioritisation push by our &lt;a href="https://www.scaledagileframework.com/release-train-engineer-and-solution-train-engineer/"&gt;Release Train Engineers&lt;/a&gt; have raised a few interesting questions. This post attempts to give our critics some answers and scratch the surface of the possibilities and values of our new blueprint-based pipelines.&lt;/p&gt;
&lt;h1&gt;Pipelines as code ... what?&lt;/h1&gt;
&lt;p&gt;Let us start with &lt;strong&gt;infrastructure as code&lt;/strong&gt; (IaC), which manages and provisions computer data centers through machine- and human-readable configuration files. Instead of humanoids manually clicking and tweaking knobs and dials in a graphical user interface, machines read and process the code. There is no apocalyptic vision of &lt;a href="https://en.wikipedia.org/wiki/Skynet_(Terminator)"&gt;Skynet&lt;/a&gt;, only the option of &lt;strong&gt;automation&lt;/strong&gt; and &lt;strong&gt;consistent&lt;/strong&gt; deployment of our infrastructure.&lt;/p&gt;
&lt;p&gt;If you view continuous integration and deployment pipelines as infrastructure, we could stop here. However, &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; introduced the term "&lt;strong&gt;pipelines as code&lt;/strong&gt;", which is more fitting.&lt;/p&gt;
&lt;p&gt;It is a technique that treats the configuration of our continuous integration and deployment pipelines as code, placed under version control, packaged in reusable components, and automated deployment and testing ... like IaC.&lt;/p&gt;
&lt;p&gt;The YAML-based pipelines in Azure Pipelines, opened the &lt;strong&gt;golden fleece&lt;/strong&gt;, not pandoras box, for our pipelines as code adventure. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #1 - Transparency&lt;/h1&gt;
&lt;p&gt;Software engineering is complex and involves stakeholders from all walks of life. &lt;strong&gt;Transparency&lt;/strong&gt; is considered one of the core ingredients to Agile and Lean development, as well as a healthy DevOps mindset.&lt;/p&gt;
&lt;p&gt;Transparency avoids assumptions, secrets, and conspiracies - instead, it fosters trust.&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://azure.microsoft.com/en-us/services/devops/pipelines/"&gt;Azure Pipelines&lt;/a&gt; all pipeline artifacts are placed in source control repositories that can be viewed by all our engineers - there are no secrets! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers to explore what is abstracted under the covers, continuously learn, give candid feedback, and &lt;strong&gt;trust&lt;/strong&gt; our common engineering system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #2 - Everyone can contribute&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-us/services/devops/repos/"&gt;Azure Repos&lt;/a&gt;, which we used to store our pipeline code, allow us to set a wide range of branch policies to protect our master (trunk) branch that always reflects a production-ready state. One of the policies enforces the use of &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests?view=azure-devops"&gt;Pull Requests&lt;/a&gt;, which allows our common engineering team to review and give actionable and constructive feedback to all proposed pipeline code changes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More importantly, we enable our engineers to &lt;strong&gt;contribute&lt;/strong&gt; to our common engineering system by submitting pipeline changes and innovations through the pull request workflow. All without the need for elevated privileges or specialized roles, such as Super Users, which complicate the administration of our classic pipeline infrastructure and security.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #3 - Automation&lt;/h1&gt;
&lt;p&gt;When you do something twice, trice, or more times, you should invest in &lt;strong&gt;automation&lt;/strong&gt;. Machines are much better with repetitive operations than we are and empower us to focus on other, more valuable, services.&lt;/p&gt;
&lt;p&gt;The explosive growth of software and our goals for &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;simplicity&lt;/strong&gt;, and &lt;strong&gt;enablement&lt;/strong&gt; have given rise to continuous delivery pipelines that build and deploy solutions in a standard way.&lt;/p&gt;
&lt;p&gt;Our common engineering system is using YAML templates to abstract away implementation details and support our engineering practices. They inject underlying tasks to run security scans, validate our building code, and keep an eye on any binary construct moving beyond our &lt;strong&gt;guardrails&lt;/strong&gt; (more appealing term for governance).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers by injecting re-usable templates when they queue their Azure Pipelines and sprinkling the concept of &lt;strong&gt;shift-left&lt;/strong&gt; automatically and consistently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a (intentional) side-effect the pipelines as code also enables our long-term vision for self-service automation. Like a self-service kiosk, we will be able to direct our engineers to a self-service portal that displays a menu of services and facilitates actions to deploy the services in an automated, consistent, and rapid manner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We will enable our engineers to deploy pipelines and associated infrastructure on their &lt;strong&gt;own terms&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Benefit #4 - Focus engineering on business code&lt;/h1&gt;
&lt;p&gt;Lastly, the most controversial and debated benefit. As software engineers we have an inquisitive mind and an urge to tinker with everything under the bonnet. It feeds purpose, mastery, and autonomy as discussed by &lt;a href="https://www.youtube.com/watch?v=u6XAPnuFjJc"&gt;Daniel Pink&lt;/a&gt;, &lt;strong&gt;but&lt;/strong&gt; it also distracts our razor focus to continuously deliver value to our delighted end-users.&lt;/p&gt;
&lt;p&gt;I am also a software engineer at heart and have often found myself spinning off into underlying and unrelated code bases. It is like doing a search on the internet, looking for a specific piece of information, and eventually stepping back from dozens of browser tabs ... "what was I looking for?!?" Interesting, educational, but minimal value to getting the job done and an unfortunate waste of productive time.&lt;/p&gt;
&lt;p&gt;Instead, let me try using &lt;a href="https://www.informationisbeautiful.net/visualizations/million-lines-of-code/"&gt;this clean visualization&lt;/a&gt; by &lt;a href="https://informationisbeautiful.net/"&gt;Information Is Beautiful&lt;/a&gt;, and the latest number of our production pipelines to make my point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from our weekly Azure Pipelines report: 927 production CI/Build pipelines&lt;/p&gt;
&lt;p&gt;&lt;img alt="WASTE" src="/images/pipelines-as-code-wrapped-with-prs-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To define a pipeline to build, test, and scan an Azure Function requires roughly 300 lines of pipeline code. The 927 production pipelines are a mix of simpler, but also more complex pipelines, adding up to an astounding 927 * 300 = &lt;strong&gt;278,100&lt;/strong&gt; lines of pipeline code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If engineers embrace our first-generation generic blueprints, as discussed in &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt; and &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt;, the lines of pipeline code are reduced to 122 for an Azure Function pipeline. 927 * 122 = &lt;strong&gt;113,094&lt;/strong&gt; lines of pipeline code. A lot less, but still a lot of code.&lt;/li&gt;
&lt;li&gt;If engineers embrace our second-generation app-type blueprints, which @said-akram-wcbbc will discuss in the upcoming &lt;strong&gt;Part 7&lt;/strong&gt; shortly, the lines of code are reduced to a mere 28 lines of code. 927 * 28 = 25,956 lines of pipeline code.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Extract from Infographic: How Many Lines Of Code Is Your Favorite App?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Information is Beautiful" src="/images/pipelines-as-code-wrapped-with-prs-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The difference is an astounding 927 * 272 = 252,144 lines of pipeline code, which could be invested in delivering user-value or solutions such as Photoshop v1.0. We have barely scratched the surface of our continuous deployment (CD) pipelines, which is a topic for another day and a few posts; one of my goals is to increase the 28 lines of pipeline code owner by the engineering team by no more than a handful to add CD to our app-type blueprint-based pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We enable our engineers to be razor-focused on their solution and avoid investing their precious time in &lt;strong&gt;wasteful&lt;/strong&gt; pipeline code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Wrap-up&lt;/h1&gt;
&lt;p&gt;You can continue to build your own pipelines, tinker with knobs, dials, configurations, and products, and remember to innovate all pipelines continuously - do-it-yourself (DIY). &lt;/p&gt;
&lt;p&gt;Alternatively, you can focus on your business code and let the pipeline engineers focus on your pipelines - pipelines-as-a-service. The choice is &lt;strong&gt;yours&lt;/strong&gt;. &lt;/p&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category><category term="IaC"></category></entry><entry><title>Find the capabilities and IP addresses of an Azure DevOps agent</title><link href="https://wsbctechnicalblog.github.io/azure-devops-agent-capabilities.html" rel="alternate"></link><published>2021-03-12T00:00:00-08:00</published><updated>2021-03-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-12:/azure-devops-agent-capabilities.html</id><summary type="html">&lt;p&gt;How to find more information on hosted Azure DevOps agents, such as capabilities and IP addresses.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Why should we care about an Azure DevOps Agent?&lt;/h1&gt;
&lt;p&gt;To use our &lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;Azure Pipelines&lt;/a&gt;, we need the agents. Every time one of our pipelines is triggered, it comes to life on one or more jobs, which are hosted and run an agent.&lt;/p&gt;
&lt;p&gt;Azure DevOps offers two types of agents. &lt;strong&gt;Microsoft-hosted&lt;/strong&gt; agents are a software as a service (SaaS) offering, where maintenance and upgrades are taken care of for you. Our recommended type of agents!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Self-hosted agents&lt;/strong&gt; give you more control of access and installed software needed for special builds and deployments. For example, we have a self-hosted pool to service our good old &lt;strong&gt;Cobol&lt;/strong&gt; builds.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;How to determine the capabilities of an Azure DevOps Agent&lt;/h1&gt;
&lt;p&gt;We often get the question: "What software is installed on the agent?" In other words, how do we determine the capabilities of each Azure DevOPs agent.&lt;/p&gt;
&lt;p&gt;For self-hosted agents you can go to your Azure DevOps &lt;strong&gt;organizational&lt;/strong&gt; setting, Agent pools, select &lt;strong&gt;pool&lt;/strong&gt;, select &lt;strong&gt;Agents&lt;/strong&gt;, select an &lt;strong&gt;agent&lt;/strong&gt;, and finally, select &lt;strong&gt;Capabilities&lt;/strong&gt;. You will be presented with the agent's system capabilities, variables, paths, and installed software, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capabilities of a &lt;strong&gt;self-hosted&lt;/strong&gt; agent&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Details" src="/images/azuredevops-agent-info-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you select a Microsoft-hosted agent and pool, the presented capabilities are less exciting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capabilities of a &lt;strong&gt;Microsoft-hosted&lt;/strong&gt; agent&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent LAck of Details" src="/images/azuredevops-agent-info-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to visit the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted Agents&lt;/a&gt; documentation and scroll down to the &lt;strong&gt;Software&lt;/strong&gt; section. Peruse a list of hosted agents, classic pipeline editor specifications, YAML image labels, and links to software available on each type of agent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure DevOps Agent Documentation&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Documentation" src="/images/azuredevops-agent-info-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Select your agent, click on the included software hyperlink, and voila, you have a detailed report of the agent's capabilities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure DevOps Agent Capabilities Documentation&lt;/p&gt;
&lt;p&gt;&lt;img alt="AzDO Agent Capabilties Documentation" src="/images/azuredevops-agent-info-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;How to determine the IP addresses of an Azure DevOps Agent&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted Agents&lt;/a&gt; documentation also gives you information on how to identify possible IP ranges for Microsoft-hosted agents. This information is pivotal if you need to allow the agents to make their way from the public internet, through your firewall, to collaborate with one of your services.&lt;/p&gt;
&lt;p&gt;Unfortunately, you will also find some small print ... well, it is the same sized font and the note is placed on a prominent Indigo background. It is easy to miss the highlighted part, as shown below, that mentions that the IP addresses for the macOS agents are not included.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;macOS Addresses are a mystery&lt;/p&gt;
&lt;p&gt;&lt;img alt="macOS Address Mystery" src="/images/azuredevops-agent-info-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First thought is to queue a investigative pipeline on one of the macOS agents and run the &lt;strong&gt;ipconfig getifaddr en0&lt;/strong&gt; command. That only returns the private IP address of the agent, which is interesting, but not very useful to the firewall engineers.&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;task:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
  &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;targetType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;ipecho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;errorActionPreference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It reveals the public IP address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  2090  100  2090    0     0  32656      0 --:--:-- --:--:-- --:--:-- 32153
100  2090  100  2090    0     0  32656      0 --:--:-- --:--:-- --:--:-- 32153

... SNIPPED FOR BLOG POST ...

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-align: center; flex: 1; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your IP is 13.105.49.13&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

...SNIPPED FOR BLOG POST...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lastly, who owns the IP address we just found?&lt;/p&gt;
&lt;p&gt;Visit &lt;a href="https://ipinfo.io/13.105.49.13"&gt;13.105.49.13 IP Address Details - IPinfo.io&lt;/a&gt; for the answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IP address "BINGO!"&lt;/p&gt;
&lt;p&gt;&lt;img alt="IPinfo.io" src="/images/azuredevops-agent-info-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;A big thank you to &lt;a href="https://www.linkedin.com/in/lukas-wilson-8792ba172/"&gt;Lukas Wilson&lt;/a&gt;, one of our resident Azure gurus, who helped with the IP address exploration. &lt;/p&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted"&gt;Microsoft-hosted agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="AzDO"></category><category term="Azure-Pipelines"></category><category term="Tips"></category></entry><entry><title>Wandering down memory lane - feature flags</title><link href="https://wsbctechnicalblog.github.io/memory-lane-feature-flags.html" rel="alternate"></link><published>2021-03-12T00:00:00-08:00</published><updated>2021-03-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-12:/memory-lane-feature-flags.html</id><summary type="html">&lt;p&gt;Use feature flags to fine-tune each release in production.&lt;/p&gt;</summary><content type="html">&lt;p&gt;More memory lane content pulled from my personal blog, before it is deprecated in favour of this technical blog.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;DevOps vancouver Meetup January 2019&lt;/h1&gt;
&lt;p&gt;We had a really great turnout and a vibrant meetup hosted by &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/members/44231812/"&gt;Andre Kaminski&lt;/a&gt;, featuring three topics in January 2019:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entropy in DevOps Teams: Andrew Rose&lt;/li&gt;
&lt;li&gt;The Virtues of Being T-shaped: Kyle Young&lt;/li&gt;
&lt;li&gt;Progressive Exposure Using Feature Flags: &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Willy Schaub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find a copy of my feature flags presentation &lt;a href="https://1drv.ms/b/s!AoTKFn7kQntwmop6lYMUH2ki07YkpA"&gt;HERE&lt;/a&gt;. Ping me if the link is blocked by your firewall.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Top 6 FAQs from my talk&lt;/h1&gt;
&lt;h2&gt;What's DevOps and what's the link to the session?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps, by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Link to the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/257318843/"&gt;January 2019&lt;/a&gt; session and &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/photos/29645676/"&gt;photos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;When should I use rings versus feature flags?&lt;/h2&gt;
&lt;p&gt;I think of a &lt;strong&gt;package&lt;/strong&gt; when using the ring-based deployment model to deploy a release and a small &lt;strong&gt;screwdriver&lt;/strong&gt; to "tweak" feature flags to fine-tune the release. See &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;How do I manage the technical debt introduced by feature flags?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;KEEP IT SIMPLE!&lt;/strong&gt; Define technical governance to clearly define who owns the feature flags, when and how to remove feature flags and the associated technical debt,  and scenarios that are suitable for feature flags. See &lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;What's the cost of feature flags?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Who owns feature flags?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most feature flags are scoped to a business feature, backed by a business case, and delivering value, which places the ownership of the feature flag switch with the business. Some feature flags are scoped to an operational feature, which places the ownership with operations (Ops).&lt;/p&gt;
&lt;h2&gt;What do we mean with "Do not hide non-production ready code behind feature flags"?&lt;/h2&gt;
&lt;p&gt;Production ready implies hat we have met an agreed quality bar and are confident to release the feature to production. It does not mean feature ready, as we may expose a production ready minimally viable product to perform experiments and A|B testing. Risk of hiding non-production ready code behind feature flags is high - it's easy to flip a switch and expose incomplete,unstable, of security breaches by mistake.&lt;/p&gt;
&lt;h2&gt;Why the product we introduced at the meetup?&lt;/h2&gt;
&lt;p&gt;You need to investigate and create your own opinion, but here are a few highlights from our evaluation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's a Software as a Service (&lt;strong&gt;SaaS&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt; administration&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;experimentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Feature flag &lt;strong&gt;dependency management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Identify &lt;strong&gt;stale flags&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rules&lt;/strong&gt; to manage exposure and blast radius&lt;/li&gt;
&lt;li&gt;... and much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Can you tell me more about circuit breakers?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Netflix/Hystrix/wiki"&gt;Hystrix&lt;/a&gt; evolved out of resilience engineering work that the Netflix API team began in 2011. See &lt;a href="https://aka.ms/bh-ff-sos"&gt;A Rough Path&lt;/a&gt;, by Brian Harry for an example, where circuit breakers could have protected us from an Operational meltdown, caused by simply "flipping a flag".&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Two epiphanies&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-6b.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-7b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Last, but not least, our feature flag manifesto&lt;/h1&gt;
&lt;p&gt;On our common engineering site, we have a collection of verbal declaration of intentions, motives, or views of the issuer, for processes and products.&lt;/p&gt;
&lt;p&gt;Here is a copy of our feature flag manifesto.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The worlds of our &lt;a href="/why-pipelines-part1.html"&gt;pipelines&lt;/a&gt; and feature flags are likely to collide when we innovate our ability to &lt;strong&gt;release on demand&lt;/strong&gt;. See you there!&lt;/p&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Workflow-as-code</title><link href="https://wsbctechnicalblog.github.io/workflow-as-code.html" rel="alternate"></link><published>2021-03-05T00:00:00-08:00</published><updated>2021-03-05T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-05:/workflow-as-code.html</id><summary type="html">&lt;p&gt;Configuring complex workflows that govern Continuous Integration and Continuous Delivery must only be allowed by making changes to the YAML source files; GUI tools must be prohibited&lt;/p&gt;</summary><content type="html">&lt;p&gt;Majority of software applications available on the market today offer self-serve capabilities to end users. Those self-serve capabilities are mostly focused on automating the chores related to various paperwork processes. Browsing product and service catalogs, picking items and ordering them via automated checkout process. In addition to that, there are alternate automated scenarios that enable end users to cancel their actions, repeat them, request refunds, etc.&lt;/p&gt;
&lt;p&gt;A smaller portion of such typical mainstream software applications are focused on automating the workflow. Oftentimes we see that the business operations workflow is not a simple straight line from start to finish. Depending on the business policy rules, workflows may take a number of twists and turns. Automating such complex rules is no small feat, which is why we're not seeing that many self-serve workflow applications on the market today. Unlike with simple automation of the paperwork representing straightforward business transactions, workflows tend to get more convoluted.&lt;/p&gt;
&lt;h2&gt;How are self-serve business applications implemented?&lt;/h2&gt;
&lt;p&gt;Experience has shown that the majority of end users prefer to do self-serve tasks by operating a Graphical User Interface (GUI). Such interface often mimics real life paperwork (i.e. replicating paper forms in electronic format etc.)&lt;/p&gt;
&lt;p&gt;When it comes to offering workflow solutions, it has also been demonstrated that end users prefer to do the self-serve activities via Graphical User Interfaces. The flow of various documents and forms gets represented with artifacts or simulacra resembling real world pipes. Those pipes, when put together in certain configurations, form various pipelines.&lt;/p&gt;
&lt;p&gt;Many users are now getting familiar with the concept of manipulating pipelines in order to perform the self-serve activities of configuring non-trivial workflows.&lt;/p&gt;
&lt;h2&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;So far, the self-serve model we've described looks perfectly reasonable and even quite desirable. So where's the problem?&lt;/p&gt;
&lt;p&gt;While it is perfectly reasonable to hide the formalized complexities of the automation from end users (they are not trained to operate complex systems using rigorous formal reasoning), when it comes to enabling software engineers to operate complex software systems, Graphical User Interface is not a good way to do it.&lt;/p&gt;
&lt;p&gt;And yet, for some reason we see a lot of platforms drag the GUI mindset back into the inner circles of software engineering teams. And the problem then becomes the fact that software engineers get conditioned to use GUI for configuring complex workflows needed for Continuous Integration (CI) and Continuous Delivery (CD).&lt;/p&gt;
&lt;p&gt;Why is that a problem? When using GUI, engineers are directly touching the materialized infrastructure. That is a very bad idea. To illustrate, let's imagine a scenario where a software engineer would log in to the live production system that's running the application binary (compiled) code. Imagine that engineer being privileged to go directly to the live binary code, and using some GUI tool, start making changes to the live code in production!&lt;/p&gt;
&lt;p&gt;That situation will cause panic. Making untested changes to the live code is a surefire recipe for disaster.&lt;/p&gt;
&lt;p&gt;The only legitimate way software engineering teams could make changes to the production code is if they make changes not to the materialized binary code, but only to the code representation -- the actual source code.&lt;/p&gt;
&lt;p&gt;Source code by itself cannot perform any operations. It must be compiled and the compiled code must be then built first. Those operations must happen within regulated Continuous Integration and Continuous Delivery workflows. Those workflows consist of a number of strict business policy rules that govern the quality of the proposed code change. If the quality is substandard (i.e. the code does not pass all the tests that are baked into the workflow), the proposed change gets rejected.&lt;/p&gt;
&lt;h2&gt;Replace GUI with code&lt;/h2&gt;
&lt;p&gt;Workflow, that is represented by the GUI, must be removed and in its place we must put the source code. Typically, when it comes to configuring the integration and delivery workflows, we opt for YAML code.&lt;/p&gt;
&lt;p&gt;The challenge now is to retrain software engineers from knowing how to use GUIs to configure the workflow rules to mastering YAML needed to accomplish the same self-serve automation.&lt;/p&gt;
&lt;p&gt;No one should be allowed to touch the materialized computing artifact (such as the implemented workflow engine) with their 'bare hands' (by 'bare hands' we mean direct access to the implemented machinery via a GUI tool).&lt;/p&gt;
&lt;p&gt;It is therefore urgent to rush and get rid of all GUI tools that enable software engineers to perform self-serve workflow configuration activities. Instead, we must switch wholesale to learning how to use YAML properly.&lt;/p&gt;
&lt;h2&gt;What are the advantages of workflow-as-code?&lt;/h2&gt;
&lt;p&gt;Just by the virtue of disabling engineers from touching the workflow machinery directly, we ensure that any changes to the workflow get implemented through official channels. When a team decides to make changes to the workflow, they cannot do it directly. They must first create a workflow feature branch, make proposed changes in isolation, test them, then open a Pull Request (PR), proposing these changes get merged to the main trunk. The PR gets reviewed by the stakeholders on the CI/CD workflow, and if approved, the changes will get merged and then materialized as an implemented workflow.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="Agile"></category><category term="DevOps"></category><category term="infrastructure as code"></category><category term="workflow as code"></category><category term="Continuous Integration (CI)"></category><category term="Continuous Delivery (CD)"></category></entry><entry><title>Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part6.html" rel="alternate"></link><published>2021-03-02T00:00:00-08:00</published><updated>2021-03-02T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-02:/yaml-pipelines-part6.html</id><summary type="html">&lt;p&gt;Neither the bootstrap nor generic templates are rocket science, and the YAML-based pipelines are as complex as &lt;strong&gt;you&lt;/strong&gt; make them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part 1&lt;/a&gt;. After introducing the blueprint templates on &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;, it is time to emphasise that these new YAML-based pipelines are not complex if applied correctly.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why this post?&lt;/h1&gt;
&lt;p&gt;We have received feedback from the engineering teams and our inspect and adapt workshops, that YAML pipelines are complex and require a steep learning curve. &lt;/p&gt;
&lt;p&gt;Perhaps I am biased, but I disagree. My four cents (points):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YAML pipelines are more intuitive to engineers familiar with code.&lt;/li&gt;
&lt;li&gt;Apart from the visual value, the Classic pipeline editor adds no value to the editing experience. Adding a step in a YAML pipeline is as simple  (similar) as adding a step in a classic pipeline.&lt;/li&gt;
&lt;li&gt;If all else fails, create your Azure Pipeline in your editor of choice and export to YAML. That is how we started many moons ago and a great way to get familiar with the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema"&gt;YAML schema&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When you start using pre-packaged templates, covered in &lt;a href="/yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt;, &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt; and revisited herein, the adoption of YAML pipelines becomes a no-brainer. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;Simplicity is the ultimate sophistication&lt;/em&gt;" - Leonardo da Vinci&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Generic pipeline value streams&lt;/h1&gt;
&lt;p&gt;Let us take a few steps back and take a quick look at an Azure Pipeline from a high altitude. Each pipeline is made of one or more stages, each of which is a collection of related jobs, each of which is a collection of steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure Pipeline from space
&lt;img alt="Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us skip stages, zoom in, and start at the point of jobs, as shown above.&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;&lt;em&gt;&lt;em&gt;A job is a collection of steps run by an agent or on a server. Jobs can run conditionally and might depend on earlier jobs.&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;" - &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema#job"&gt;yaml-schema&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you add SonarQube to your pipeline, you know (or will find out) that the SonarQube &lt;strong&gt;Prepare&lt;/strong&gt;, &lt;strong&gt;Analyse&lt;/strong&gt;, and &lt;strong&gt;Publish&lt;/strong&gt; steps must run in the same job context as the &lt;strong&gt;build&lt;/strong&gt;. This is not a new constraint and applies to the &lt;strong&gt;Classic&lt;/strong&gt;, &lt;strong&gt;YAML out-of-the-box&lt;/strong&gt;, and our &lt;strong&gt;Blueprint-based&lt;/strong&gt; Azure Pipelines.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;simplest&lt;/strong&gt; pipeline you can configure is a single-job pipeline, which runs your &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; steps, the &lt;strong&gt;DevSecOps&lt;/strong&gt; steps (SonarQube, WhiteSource), and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps within one and the same job 1 context, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Job Pipeline
&lt;img alt="Single Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you split your pipeline into two jobs you have two separate job contexts. Similar to the single-job you could run both the &lt;strong&gt;DevSecOps&lt;/strong&gt; and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps within the same job 1 context. Alternatively, you could run the &lt;strong&gt;DevSecOps&lt;/strong&gt; in the job 1 context and the &lt;strong&gt;BuildingCode&lt;/strong&gt; steps in the job 2 context, as shown below. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dual Job Pipeline
&lt;img alt="Dual Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-2.png"&gt;
With multiple jobs you can embrace parallelism, introduce job dependencies and flows, isolate steps in separate job contexts, and run steps on different agent specifications (Linux, Windows, macOS) - all in one pipeline.&lt;/p&gt;
&lt;p&gt;Multi Job Pipeline
&lt;img alt="Multi Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember, "&lt;em&gt;with power, comes great responsibility&lt;/em&gt;". As we embrace complexity, we throw simplicity out of the window. In fact, as with the pile of LEGO blocks analogy we used in &lt;a href="/yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;, you can create really powerful, but also complex and hard to evolve and maintain pipelines. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WHAT and HOW you build is up to you...
&lt;img alt="LEGO" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-7.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Bootstrap template demystified&lt;/h1&gt;
&lt;p&gt;We covered the basics and the power of YAML templates in previous parts of this pipeline series.&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;Bootstrap&lt;/strong&gt; template is a standard YAML template with conditional statements. Visualise the internals as a &lt;strong&gt;switch&lt;/strong&gt; statement, which injects templates containing steps, based on the &lt;strong&gt;bootstrapMode&lt;/strong&gt; parameter passed.&lt;/p&gt;
&lt;p&gt;The following table summarises the currently available bootstrap &lt;strong&gt;modes&lt;/strong&gt;, the &lt;strong&gt;templates&lt;/strong&gt;, and associated &lt;strong&gt;steps&lt;/strong&gt; it injects into your pipeline at queue time.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BOOTSTRAPMODE&lt;/th&gt;
&lt;th&gt;INJECT TEMPLATE&lt;/th&gt;
&lt;th&gt;RUN STEPS&lt;/th&gt;
&lt;th&gt;TEMPLATE OWNED BY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;init&lt;/td&gt;
&lt;td&gt;DevSecOpsInit.yml&lt;/td&gt;
&lt;td&gt;SonarQube Prepare&lt;/td&gt;
&lt;td&gt;DevSecOps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devsecopsonly&lt;/td&gt;
&lt;td&gt;DevSecOps.yml&lt;/td&gt;
&lt;td&gt;SonarQube Analyse, SonarQube Publish, and WhiteSource&lt;/td&gt;
&lt;td&gt;DevSecOps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buildingcodeonly&lt;/td&gt;
&lt;td&gt;BuildingCode.yml&lt;/td&gt;
&lt;td&gt;BuildingCode Scripts, such as Stryker&lt;/td&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;DevSecOps.yml &lt;strong&gt;+&lt;/strong&gt; BuildingCode.yml&lt;/td&gt;
&lt;td&gt;SonarQube Analyse, SonarQube Publish, WhiteSource, and BuildCode&lt;/td&gt;
&lt;td&gt;DevSecOps and Engineering Practices&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a visualisation of the above table for the visual minds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bootstrap Template and Bootstrap Modes
&lt;img alt="Bootstrap" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-6.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; &lt;br/&gt;
Our Bootstrap.yml templates is a standard YAML-template, as are the templates it injects at queue time. There is no hidden cloak and dagger technology or additional complexity! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- template: Templates/Bootstrap.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    bootstrapMode:    &amp;#39;init&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    applicationType:  &amp;#39;TODO REPLACE WITH SUPPORTED TYPE&amp;#39; # dotnet, angular&lt;/span&gt;
&lt;span class="err"&gt;    applicationGuid:  $(productGuid)&lt;/span&gt;
&lt;span class="err"&gt;    portfolioName:    $(portfolioName)&lt;/span&gt;
&lt;span class="err"&gt;    productName:      $(productName)&lt;/span&gt;
&lt;span class="err"&gt;    sourcesDirectory: $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You now have the &lt;strong&gt;option&lt;/strong&gt; of including the Bootstrap.yml template instead of explicitly including SonarQube, WhiteSource, and Building Code steps. Note I say &lt;strong&gt;option&lt;/strong&gt;, not that you must do it one way or the other. &lt;/p&gt;
&lt;p&gt;Similar to Software-as-a-Service (SaaS) solutions you can delegate these steps and accountability to the Bootstrap.yml template, which is continuously enhanced, maintained and supported by our pipeline working group. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Generic Blueprint templates demystified&lt;/h1&gt;
&lt;p&gt;Our &lt;strong&gt;Azure-Pipeline-Steps.yml&lt;/strong&gt; is a generic blueprint that implements the single job pipeline we discussed and includes two calls to the &lt;strong&gt;bootstrap.yml&lt;/strong&gt; template to &lt;strong&gt;init&lt;/strong&gt;ialise the DevSecOps steps and to &lt;strong&gt;run&lt;/strong&gt; the DevSecOps and Building code steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Job Pipeline
&lt;img alt="Single Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All you need to do, is find the &lt;strong&gt;TODO&lt;/strong&gt; placeholders to update relevant parameters and insert your build and test steps. You can explore the &lt;strong&gt;Azure-Pipeline-Steps.yml&lt;/strong&gt; blueprint in &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;Azure-Pipeline-Jobs.yml&lt;/strong&gt; is a generic blueprint that implements the multi job pipeline we discussed and includes three calls to the &lt;strong&gt;bootstrap.yml&lt;/strong&gt; template to &lt;strong&gt;init&lt;/strong&gt;ialise the DevSecOps steps and run the &lt;strong&gt;devseconlyinit&lt;/strong&gt; within the same job context. Lastly, it runs the &lt;strong&gt;buildingcodeonly&lt;/strong&gt; steps in a different job context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dual Job Pipeline
&lt;img alt="Dual Job Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As with the Azure-Pipeline-Steps.yml blueprint, you then search for the &lt;strong&gt;TODO&lt;/strong&gt; placeholders and update relevant parameters and insert your build and test steps. It is that simple!&lt;/p&gt;
&lt;p&gt;The genetic blueprints work well for new pipelines. If you already have a YAML-based pipeline, you can include the bootstrap.yml template into your existing pipeline. The choice is &lt;strong&gt;yours&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Blueprint-related questions&lt;/h1&gt;
&lt;p&gt;Here are a few of the top questions we have received from engineering to date.&lt;/p&gt;
&lt;h2&gt;Q1: Who owns our pipeline blueprints?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Our common engineering system pipeline working group, a cluster of engineers representing architecture, development, operations, and security have joint forces to pursue our quest for &lt;strong&gt;automation&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;simplicity&lt;/strong&gt;, and &lt;strong&gt;alignment&lt;/strong&gt; with our guardrails (a friendlier term for governance). While we are all accountable for the blueprints and templates discussed herein, DevSecOps owns the DevSecOps*.yml templates and Engineering Practices the BuildingCode templates and associated scripts.&lt;/p&gt;
&lt;h2&gt;Q2: How can engineers make changes to the blueprints?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-9.png"&gt;&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests"&gt;pull request&lt;/a&gt; workflow, engineers can discuss blueprint and template changes and agree to merge them once all stakeholders approve. We strive for complete transparency, allowing everyone to view the blueprints and associated templates, and contribute towards the continuous innovation of our YAML templates.&lt;/p&gt;
&lt;h2&gt;Q3: Why are we so fixated on the consistency and simplicity goals?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Pull Request" src="/images/moving-hundreds-of-pipeline-snowflakes-part6-10.png"&gt;&lt;/p&gt;
&lt;p&gt;Infrastructure as code (IaC) is typically associated with the process of managing and provisioning computer data centers through machine-readable configuration files. The aim is to deprecate physical hardware configuration and interactive configuration tools. &lt;/p&gt;
&lt;p&gt;Within the context of our common engineering system, we are striving to use infrastructure as code to provision our continuous delivery pipelines and associated services as well. While the classic Azure Pipelines are powerful and well established, they are configured using a graphical configuration tool and tend to become hard to maintain and enhance over time.&lt;/p&gt;
&lt;p&gt;The switch to YAML-based Azure Pipelines is enabling us to version control and store the pipelines as machine- and human-readable configuration code. We refer to this as &lt;strong&gt;pipeline as code (PaC)&lt;/strong&gt;. If and only if we manage to create a consistent infrastructure of pipelines, using templates and blueprints, we not only enable our engineering teams, but take the first steps towards self service automation.&lt;/p&gt;
&lt;p&gt;But, that is a vast topic for another day. Back to our YAML pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we all agree that neither the bootstrap nor generic templates are rocket science, and that YAML-based pipelines are as complex as &lt;strong&gt;you&lt;/strong&gt; make them, we can move ahead with the adoption of our new pipelines. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[X] Consistent pipelines&lt;/li&gt;
&lt;li&gt;[X] Enable engineers&lt;/li&gt;
&lt;li&gt;[X] Simple pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But wait, there is more ... in the next part 7, my colleague Said will introduce the next generation of blueprints which are even simpler, supporting our goals for consistency and enablement. &lt;/p&gt;
&lt;p&gt;See you in part 7 (coming soon).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | Part 6 | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>WorkSafeBC DevOps Celebrate 100th Sprint</title><link href="https://wsbctechnicalblog.github.io/wsbc-devops-celebrate-hundredth-sprint.html" rel="alternate"></link><published>2021-02-19T00:00:00-08:00</published><updated>2021-02-19T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-02-19:/wsbc-devops-celebrate-hundredth-sprint.html</id><summary type="html">&lt;p&gt;WorkSafeBC DevOps 100th sprint celebration coincided with the 20th anniversary of the Agile Manifesto&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Navigating the Future&lt;/h2&gt;
&lt;p&gt;A happy coincidence of celebrating WorkSafeBC DevOps 100th sprint at the same time when we are celebrating 20th anniversary of the Agile Movement, provided an opportunity to host &lt;a href="https://wingman-sw.com/about"&gt;James Grenning&lt;/a&gt;, the original signatory of the Agile Manifesto.&lt;/p&gt;
&lt;p&gt;A regular &lt;strong&gt;Navigating the Future&lt;/strong&gt; session, which DevOps is holding every PI, served as a good platform to usher the celebrations.&lt;/p&gt;
&lt;p&gt;The celebration started with WorkSafeBC &lt;strong&gt;IT Director&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/andrekaminski/"&gt;Andre Kaminski&lt;/a&gt; describing his journey to Agile and DevOps. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Andre Kaminski" src="/images/Andre_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Andre explained how in the early days his relentless focus on value delivery to the customer led him to search for ways that are not heavily based on the process and on producing copious documentation. As soon as Agile arrived on the scene, Andre was an early adopter; he was also a pioneer with adopting early stages of DevOps. Andre concluded his presentation by saying that after successfully embracing Agile and DevOps, he never looked back.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Indispensable Value of Technical Excellence&lt;/h2&gt;
&lt;p&gt;Our guest of honour, James Grenning, generously spent one hour sharing his journey from the early days of switches and toggles programming, all the way to the present day of Agile DevOps and Continuous Delivery. James had repeatedly potentiated that it is important to strive to avoid getting stuck in the 'Do' loop, where we have mastered some skills and reached the plateau. It's the 'Expert Beginner' stage that is the bottleneck slowing us down and preventing us from reaching our full potential.&lt;/p&gt;
&lt;p&gt;&lt;img alt="James Grenning" src="/images/James_Grenning.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;The only way to prevent the 'Expert Beginner' impasse is to focus on &lt;em&gt;technical excellence&lt;/em&gt;. And the most effective way to pursue technical excellence is adopting &lt;strong&gt;Extreme Programming (XP)&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Service Virtualization&lt;/strong&gt; and &lt;strong&gt;SOLID principles&lt;/strong&gt; and &lt;strong&gt;design patterns&lt;/strong&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Finally, &lt;a href="https://www.linkedin.com/in/todd-yule-4679646/"&gt;Todd Yule&lt;/a&gt; (our &lt;strong&gt;Head of Innovation and Chief Digital Officer&lt;/strong&gt;) tied everything together by highlighting the salient points of our DevOps progress, which he had originally instigated and is now leading. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Todd Yule" src="/images/Todd_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Todd repeated James' advice to use &lt;strong&gt;Scrum&lt;/strong&gt; as a practice that points out deficiencies which need to be solved by using &lt;strong&gt;XP&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Agile Mindset&lt;/strong&gt; and &lt;strong&gt;Continuous Delivery&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="Agile"></category><category term="DevOps"></category></entry><entry><title>Part 5: Pipelines - Blueprints to fuel consistency and enablement</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part5.html" rel="alternate"></link><published>2021-01-28T00:00:00-08:00</published><updated>2021-01-28T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-28:/yaml-pipelines-part5.html</id><summary type="html">&lt;p&gt;Think of &lt;strong&gt;blueprints&lt;/strong&gt; and associated &lt;strong&gt;templates&lt;/strong&gt; as re-usable LEGO blocks, ranging from a bag of "do it yourself" blocks, to complex and detailed kits, such as the Imperial Star Destroyer.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to another installment of our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part 1&lt;/a&gt;. After covering some of the gems and magic in &lt;a href="/yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt; we will peek at our pipeline blueprints.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What do we mean with pipeline blueprints?&lt;/h1&gt;
&lt;p&gt;If you ask 13 software engineers to cook a continuous delivery pipeline, you are likely to get more than 13 variations. Although this enables innovation, it distracts the engineers from their core responsibility to continuously delivering functional code and value. More concerning the variations of artworks (pipelines) hamper reuse and bloat support and maintenance costs.&lt;/p&gt;
&lt;p&gt;Like the building-blueprint counterpart, our &lt;strong&gt;generic&lt;/strong&gt; and &lt;strong&gt;application-type&lt;/strong&gt; pipeline blueprints define templates that allow rapid and consistent creation of unlimited number of continuous delivery pipeline copies. Let us have a look at a few of our blueprints.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Generic blueprints&lt;/h1&gt;
&lt;p&gt;We have defined two generic blueprints. One defines a one stage, multiple jobs pipeline, allowing parallel runs on separate agents, each with multiple steps. The simpler and more recommended blueprint defines a one stage, one job, with multiple steps pipeline. It keeps things simple, running everything on one agent. &lt;/p&gt;
&lt;p&gt;Both blueprints call our &lt;strong&gt;bootstrap&lt;/strong&gt; template, which injects other templates introducing DevSecOps scans such as SonarQube and WhiteSource, as well as custom built &lt;strong&gt;building code&lt;/strong&gt; scripts and products, based on queue-time parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Steps.yml flow
&lt;img alt="Azure-Pipeline-Steps.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the blueprint defines a pipeline that runs within the same &lt;strong&gt;job&lt;/strong&gt; context, in a single &lt;strong&gt;stage&lt;/strong&gt;. It injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with an &lt;strong&gt;init&lt;/strong&gt; parameter, to inject initialisation templates, with tasks such as &lt;strong&gt;SonarQube Prepare&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: SonarQube Prepare for .NET applications&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# SONARQUBE - dotnet&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SonarQubePrepare&lt;/span&gt;&lt;span class="mi"&gt;@4&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SonarQube&lt;/span&gt; &lt;span class="n"&gt;Prepare&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;SonarQube&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeService&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;scannerMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;MSBuild&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;projectKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeProjectKey&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nl"&gt;projectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sonarQubeProjectName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the end of the continuous integration (CI) part of the pipeline, the blueprints injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with a &lt;strong&gt;run&lt;/strong&gt; parameter, to inject tasks such as &lt;strong&gt;SonarQube Analyze&lt;/strong&gt;, &lt;strong&gt;SonarQube Publish&lt;/strong&gt;, &lt;strong&gt;WhiteSource&lt;/strong&gt;, and &lt;strong&gt;Building Code&lt;/strong&gt; validations. Single jobs are the most efficient as dependencies, such as source code, extensions, and the bootstrap toolbox only need to be loaded once.&lt;/p&gt;
&lt;p&gt;Here is the latest version of this blueprint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Steps.yml source code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="nl"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;

&lt;span class="cp"&gt;# Semantic version as per Azure DevOps Naming Conventions.&lt;/span&gt;
&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceBranchName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# Configure the default agent pool and image to use for your pipeline&lt;/span&gt;
&lt;span class="nl"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                 &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Azure&lt;/span&gt; &lt;span class="n"&gt;Pipelines&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# Variables&lt;/span&gt;
&lt;span class="nl"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;BuildConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;Release&lt;/span&gt;
  &lt;span class="nl"&gt;BuildPlatform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt; &lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;templateVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;1.0.9&lt;/span&gt;
  &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PORTFOLIO&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PRODUCT&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;NEW&lt;/span&gt; &lt;span class="n"&gt;GUID&lt;/span&gt; &lt;span class="n"&gt;WITHOUT&lt;/span&gt; &lt;span class="n"&gt;BRACKETS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# Repository resources&lt;/span&gt;
&lt;span class="nl"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="cp"&gt;# =======================================================================&lt;/span&gt;
  &lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CDTemplates&lt;/span&gt;
    &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Common&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Engineering&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AzureDevOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Automation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="cp"&gt;# =======================================================================&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# START OF BUILD and TEST STAGE&lt;/span&gt;
&lt;span class="cp"&gt;# - GitVersion task looks at your Git history and works out the semantic &lt;/span&gt;
&lt;span class="cp"&gt;#   version of the commit being built.&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="nl"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Continuous&lt;/span&gt; &lt;span class="n"&gt;Integration&lt;/span&gt;
  &lt;span class="nl"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ContinuousIntegration&lt;/span&gt;
    &lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
      &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;
      &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;versionSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gitversion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
      &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;GitVersion&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# PREREQUISITES&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps that have to run before the build here, for example NPM, NuGet&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert your scripts, steps, and tasks here and remove this comment&lt;/span&gt;

&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP VALIDATION, STAGE: CI_BOOTSTRAP_INIT&lt;/span&gt;
&lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDTemplates&lt;/span&gt;
      &lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nl"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;SUPPORTED&lt;/span&gt; &lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angular&lt;/span&gt;
        &lt;span class="nl"&gt;applicationGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# CONTINUOUS INTEGRATION BUILD&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps/tasks to build your solution here. &lt;/span&gt;
&lt;span class="cp"&gt;# - Move initialisations (NPM, NuGet,...) to PREREQUISITES section&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#  TODO Insert your scripts, steps, and tasks here and remove these comments&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# CONTINUOUS INTEGRATION TEST&lt;/span&gt;
&lt;span class="cp"&gt;# - Run steps/tasks to test your solution here&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert your scripts, steps, and tasks here and remove this comment&lt;/span&gt;

&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;# PUBLISH&lt;/span&gt;
&lt;span class="cp"&gt;# - Publish the build and test artifacts&lt;/span&gt;
&lt;span class="cp"&gt;# --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cp"&gt;#   TODO Insert build and test artifact publication tasks&lt;/span&gt;

&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;span class="cp"&gt;# BOOTSTRAP VALIDATION, STAGE: CI_BOOTSTRAP&lt;/span&gt;
&lt;span class="cp"&gt;# SKULL &amp;amp; CROSS-BONES - DO NOT COMMENT OUT, OR REMOVE THIS SECTION&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDTemplates&lt;/span&gt;
      &lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nl"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="nl"&gt;applicationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="n"&gt;REPLACE&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;SUPPORTED&lt;/span&gt; &lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angular&lt;/span&gt;
        &lt;span class="nl"&gt;applicationGuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productGuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nl"&gt;sourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourcesDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;# ==========================================================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Engineers can &lt;strong&gt;copy-paste&lt;/strong&gt; this blueprint into their application repository, look for &lt;strong&gt;TODO&lt;/strong&gt;s, update and fine-tune the pipeline as needed. Sections which should not be deleted or changed are enclosed in skull &amp;amp; cross-bones markers. &lt;strong&gt;Simple!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The other &lt;strong&gt;generic&lt;/strong&gt; template, Azure-Pipeline-Jobs.yml, enables engineers to craft multi-job pipelines, enabling features such as parallelism. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Jobs.yml flow
&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, the blueprint defines two jobs, one including the &lt;strong&gt;initialisation&lt;/strong&gt; and &lt;strong&gt;build&lt;/strong&gt; sections, and the other the &lt;strong&gt;test&lt;/strong&gt; section. Some tasks, such as the &lt;strong&gt;SonarQube&lt;/strong&gt; tasks have to run within the same job context, which is why the blueprint injects the bootstrap template three times. As before, the first injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with an &lt;strong&gt;init&lt;/strong&gt; parameter, to inject initialisation templates, with tasks such as &lt;strong&gt;SonarQube Prepare&lt;/strong&gt;. The second injects the &lt;strong&gt;bootstrap&lt;/strong&gt; template with a &lt;strong&gt;devsecopsonly&lt;/strong&gt; parameter, which magically injects all of the DevSecOps scans, such as &lt;strong&gt;SonarQube Analyse&lt;/strong&gt;, &lt;strong&gt;SonarQube Publish&lt;/strong&gt;, and &lt;strong&gt;WhiteSource&lt;/strong&gt;. The remaining templates, such as the &lt;strong&gt;Building Code&lt;/strong&gt; are only injected at the end when the third call is made to the &lt;strong&gt;bootstrap&lt;/strong&gt; template with the &lt;strong&gt;buildingcodeonly&lt;/strong&gt; parameter.&lt;/p&gt;
&lt;p&gt;To summarise, we are trying to simplify our pipeline environment and empower both development and operations with these blueprints. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, we can do better!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;App-type Blueprints&lt;/h1&gt;
&lt;p&gt;With application-type, in short app-type, blueprints we are taking the continuous integration (CI) pipelines light-years further in terms of our goals for &lt;strong&gt;simplicity&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt;, &lt;strong&gt;enablement&lt;/strong&gt;, and &lt;strong&gt;consistency&lt;/strong&gt;. Each app-type blueprint, based on our pipeline champion Said Akram's (@said-akram-wcbbc) ingenious proof-of-concept, consists of a &lt;strong&gt;starter&lt;/strong&gt; template, an &lt;strong&gt;app-type&lt;/strong&gt; template, and a reference &lt;strong&gt;sample&lt;/strong&gt; implementation, as shown below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;App-type blueprint parts&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;starter&lt;/strong&gt; template allows our engineers to configure their continuous integration pipeline, after they &lt;strong&gt;copy-paste&lt;/strong&gt; it into their application repository. This is the only moving part that is copied and becomes part of the application code base.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SAMPLE - Azure Function &lt;strong&gt;starter&lt;/strong&gt; template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Trigger&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt;

&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CDAppTemplates&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;git&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;Common-Engineering-System/AzureDevOps.Automation.Pipeline.AppTemplates&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Semantic&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;Common&lt;/span&gt; &lt;span class="n"&gt;Engineering&lt;/span&gt; &lt;span class="n"&gt;Naming&lt;/span&gt; &lt;span class="n"&gt;Conventions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITVERSION_MAJORMINORPATCH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yyyyMMdd&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;HHmmss&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SourceBranchName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;VARIABLES&lt;/span&gt;
&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PORTFOLIO NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;StarWars&lt;/span&gt;
  &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH PRODUCT NAME&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Imperial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Star&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Destroyer&lt;/span&gt;

&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;&lt;span class="sr"&gt;/AzureFunction/&lt;/span&gt;&lt;span class="n"&gt;azureFunctionTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CDAppTemplates&lt;/span&gt;
  &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;updateAssemblyInfo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Whether&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;AssemblyInfo&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
    &lt;span class="n"&gt;netCoreVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH .NET CORE VERSION&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;applicationGuid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;TODO REPLACE WITH A NEW GUID WITHOUT BRACKETS&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;257929&lt;/span&gt;&lt;span class="n"&gt;e89c69471083efb51899b42bdb&lt;/span&gt;
    &lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;restoreBuildProjects&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;**/*.csproj&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;vstsFeed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;               &lt;span class="s1"&gt;&amp;#39;11111111-2222-3333-4444-555555555555&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;_NuGet&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;
    &lt;span class="n"&gt;buildConfiguration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;Release&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;starter&lt;/strong&gt; template &lt;strong&gt;extends&lt;/strong&gt; the pipeline with the &lt;strong&gt;app-type&lt;/strong&gt; template, in our example the azureFunctionTemplate.yml. With this &lt;strong&gt;magic&lt;/strong&gt; we introduce the template &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/security/templates?view=azure-devops#use-extends-templates"&gt;&lt;strong&gt;extend&lt;/strong&gt;&lt;/a&gt; feature, which sprinkles a dash of &lt;strong&gt;security&lt;/strong&gt; on our pipelines, as we can now check that a pipeline is extended from a trusted template in &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;environment&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml"&gt;service connection&lt;/a&gt; approvals and checks. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Required template checks&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;app-type&lt;/strong&gt; template is visible, but not modifiable for the owner of the pipeline. We abstract the entire continuous integration (CI) process from the engineers, which promotes &lt;strong&gt;consistency&lt;/strong&gt;, delegates &lt;strong&gt;responsibility&lt;/strong&gt; for the implementation to our common engineering system team, and &lt;strong&gt;encourages&lt;/strong&gt; engineers to be razor-focused on their application. The complexity of injecting our &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates, task sequence, stage and job context, and pipeline plumbing we discussed in previous parts, is abstracted (hidden). &lt;/p&gt;
&lt;p&gt;Let us briefly review this with a visual.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure-Pipeline-Steps.yml Custom Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;strong&gt;custom&lt;/strong&gt; blueprints the starter template presents a much larger exposure area, where we can observe template drift, vulnerability injections, and complexity that the engineering teams should not have to worry about. As discussed, the latest &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates are pulled from the &lt;code&gt;*.Templates&lt;/code&gt; repository and injected into the pipeline instance at queue time.&lt;/p&gt;
&lt;p&gt;Time to reiterate ... we can do better!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AzureFunctionTemplate.yml Starter Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="Azure-Pipeline-Jobs.yml" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;strong&gt;app-type&lt;/strong&gt; blueprints, the starter template has a much smaller exposure area. The latest &lt;strong&gt;app-type&lt;/strong&gt; template is pulled from the &lt;code&gt;*.AppTemplates&lt;/code&gt; repository, which in turn injects the latest &lt;strong&gt;bootstrap&lt;/strong&gt; and associated templates from the &lt;code&gt;*.Templates&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;You should appreciate the magic of the YAML pipelines by now!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Enabling continuous innovation and rapid change&lt;/h1&gt;
&lt;p&gt;We always start our YAML awareness and training workshops with the following scenario and question: "&lt;em&gt;Assume we have 1000 classic pipelines and 1000 YAML pipelines, and we need to make a change to one of the pipeline tasks that takes approximately 1 minute. How long will it take us to change all of the classic pipelines and all of the YAM pipelines?&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;We then give everyone 5 minutes to discuss and place their bets. Discussions vary, but usually include reference to mind-numbing classic pipeline editor, &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops"&gt;Task groups&lt;/a&gt;, code search and replace, followed by vibrant debates and eventually stunned silence ... the proverbial "room full of crickets."&lt;/p&gt;
&lt;p&gt;It is a trick question, because it depends on how the pipelines are designed, which can vary from minutes to days of effort. &lt;/p&gt;
&lt;p&gt;What should be evident, however, is that any change will be &lt;strong&gt;faster&lt;/strong&gt;, &lt;strong&gt;simpler&lt;/strong&gt;, and &lt;strong&gt;safer&lt;/strong&gt; to make if the &lt;strong&gt;consistency&lt;/strong&gt; of our pipelines is high, and the &lt;strong&gt;exposure area&lt;/strong&gt; is small. &lt;/p&gt;
&lt;p&gt;We recently received a request from DevSecOps to change all our pipelines to always run the DevSecOps scans, instead of just as part of pull request validation builds. It literally took us minute to create a feature branch, tweak the bootstrap template, and validate the change with a collaborative pull request. Once merged into the *.Templates repository, all new pipeline instances showcased the new default behaviour. DevSecOps were happy and the engineering teams unaware of any change.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Enabling automation&lt;/h1&gt;
&lt;p&gt;Lastly, we realised that our self-service automation goal is also no longer a distant dream. The app-type templates enable us to ask the engineering teams a few questions, then run automation that creates a new application repository and pipeline in seconds - and consistently! That, however, is a story for another day in Part 7: Self-service automation - A dream turns into reality q;)&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;We have now covered the continuous integration (CI), also referred to as build, pipeline though the lens of YAML. You can think of the &lt;strong&gt;blueprints&lt;/strong&gt; and associated &lt;strong&gt;templates&lt;/strong&gt; as re-usable LEGO blocks, ranging from a bag of "do it yourself" blocks, to complex and detailed kits, such as the Imperial Star Destroyer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LEGO Imperial Star Destroyer kit&lt;/p&gt;
&lt;p&gt;&lt;img alt="LEGO Image" src="/images/moving-hundreds-of-pipeline-snowflakes-part5-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we will explore continuous deployment (CD). See you in part 6 (coming soon).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | Part 5 | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 4: Pipelines - Magic of queue time assembly</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part4.html" rel="alternate"></link><published>2021-01-13T00:00:00-08:00</published><updated>2021-01-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-13:/yaml-pipelines-part4.html</id><summary type="html">&lt;p&gt;We can use the power of the new multi-stage YAML pipelines to make even our most critical security engineers smile from ear to ear.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to our exciting pipeline journey, as outlined in &lt;a href="/why-pipelines-part1.html"&gt;part1&lt;/a&gt;. It is time to move from theory to practice and explore some of the magic that is pushing us from the classic to the new YAML-based Azure Pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Re-usable Templates&lt;/h1&gt;
&lt;p&gt;In &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt; we covered YAML pipelines and why they are so exciting. Ardent classic pipeline supporters will argue that &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops"&gt;Task Groups&lt;/a&gt; offer the same feature as YAML templates - I would argue similar, but not the same. Why? Both allow us to abstract pipeline logic into re-usable containers, which can be included in pipeline definitions.&lt;/p&gt;
&lt;p&gt;Where the YAML-template take us a huge stride further is magic #2 we are covering later in this post and the fact that template are version controlled and exposed to change, review, and collaboration through &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-requests?view=azure-devops"&gt;Pull Requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, when we plan to make fundamental and potentially pipeline breaking changes to our pipelines, we can build and test the change continuously, while collaborating with the rest of the pipeline working group in an all-embracing pull request. Only once all guardrails are met and everyone is satisfied that we have a quality change, will the pull request be approved, and the changes merged into our master branch to be consumed.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #1 - Parameter driven pipeline&lt;/h1&gt;
&lt;p&gt;Let us start looking at some of the magic, starting with a small, yet powerful feature of parameters.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-3.png"&gt;&lt;/p&gt;
&lt;p&gt;You can define parameters in your main template, as shown in the above illustration on the left. As discussed in &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; we define parameters as key/value paid and optionally add a list of values, as well as a default.&lt;/p&gt;
&lt;p&gt;The magic appears when you run the pipeline. As shown on the right in the above illustration, the parameter(s) are included as run-time and editable pipelines values. So cool!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #2 - Queue Time Pipeline Assembly&lt;/h1&gt;
&lt;p&gt;With classic pipelines what you design and what you see in the pipeline editor, is what you will queue and what the agent pools get to process. And yes, we can add conditional steps by using custom conditions, such as &lt;code&gt;ne(variables['Agent.JobStatus'], 'SuceededWithIssues)&lt;/code&gt;, but whether the conditions are met, the tasks will be included in the queued pipeline.&lt;/p&gt;
&lt;p&gt;With the multi-stage pipelines this is where magic #2 enters the building, because conditional expressions are validated at queue time to &lt;strong&gt;inject&lt;/strong&gt; or &lt;strong&gt;ignore&lt;/strong&gt; parts of the templates. The following image shows the &lt;strong&gt;same&lt;/strong&gt; pipeline queued - on the left (1) it runs with 14 steps and on the right (2) with 24 steps. The same pipeline ... what is going on?!?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Same pipeline, same definition, different context!
&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Upon closer inspection we notice a (3) &lt;strong&gt;Bootstrap Validation Suppression Alert&lt;/strong&gt; in the first (1) pipeline run, which is our current behaviour for builds run outside a pull request. On the right we see the same pipeline run (2) within the context of a pull request validation build, which &lt;strong&gt;injects&lt;/strong&gt; (4) SonarQube, (5) WhiteSource, and (6) our Building Code. It is important to emphasise that the pipeline on the left does not include the additional steps, optimising the runtime processing and keeping the logs focused and simple.&lt;/p&gt;
&lt;p&gt;The magic is based on conditional expressions, as the following extract I pulled from our bootstrap template. It instructs the Azure Pipeline queuing feature to only inject the template if ( we are in the "run" mode, and ( the source branch is "merge" or forceCheck is true ) ). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrapMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;run&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;merge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SampleFolder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SampleTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the conditional expression is not met, the template is &lt;strong&gt;not&lt;/strong&gt; injected, and the template contents omitted from the queued pipeline. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Magic #3 - Cannot override guardrails&lt;/h1&gt;
&lt;p&gt;Remember &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/deploy-multiple-branches?view=azure-devops#:~:text=Azure%20Pipelines%20%7C%20Azure%20DevOps%20Server%202019%20Artifact,stage%20only%20when%20those%20filter%20conditions%20are%20met."&gt;artifact filters&lt;/a&gt;? A great way to protect deployment stages in classic pipelines from artifacts built from untrusted branches - "&lt;em&gt;Applying the artifact filter to a specific branch results in the artifact deploying to a specific stage only when those filter conditions are met.&lt;/em&gt;" - docs.microsoft.com&lt;/p&gt;
&lt;p&gt;Unfortunately, as our security engineers remind us on a regular basis, these can be overridden by users with the right permission. Something that promises to be and should be immutable, can mutate as needed - not cool!&lt;/p&gt;
&lt;p&gt;Looking forward, however, we can use the power of the new multi-stage YAML pipelines to make even our most critical security engineers smile from ear to ear ... and that is no easy feat!&lt;/p&gt;
&lt;p&gt;Watch this quick video for a demo of the power, sorry magic, of the new pipelines.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/DWuDqCM1t6A"&gt;&lt;img alt="Master PR Merge" src="/images/moving-hundreds-of-pipeline-snowflakes-part4-2.png"&gt;&lt;/a&gt; [1:52]&lt;/p&gt;
&lt;p&gt;Here is an extract from our demo pipeline. Note that unlike in prior examples, we have no conditional expression to determine whether to inject the template or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# DEV Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStage.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Development&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Development&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Development Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# SY Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStage.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_System_Test&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD System Test&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;windows-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP System Test Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# ST Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStageR.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Stage&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Stage&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Stage Environment&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;# PROD Stage&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;# EXAMPLE - INJECT STAGE&lt;/span&gt;
&lt;span class="err"&gt;- template: Templates/Samples/DeploymentStageR.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;  parameters:&lt;/span&gt;
&lt;span class="err"&gt;    stageID:         &amp;#39;CD_Production&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    stageName:       &amp;#39;CD Production&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    vmImage:         &amp;#39;macOS-latest&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    envName:         &amp;#39;DPMSDP Production Environment&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;The last deployment uses the macOS pool, which created a few migraines for us that are worth pointing out. If you peruse &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml#networking"&gt;Microsoft-hosted agents&lt;/a&gt; you will note two potential issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&lt;em&gt;Agents that run macOS images are provisioned on Mac pros. These agents always run in US and Europe irrespective of the location of your Azure DevOps organization. If data sovereignty is important to you and if your organization is not in one of these geographies, then you should not use macOS images&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;em&gt;Our Mac IP ranges are not included in the Azure IPs above, though we are investigating options to publish these in the future.&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not a DevSecOps friendly agent pool - we have an open support ticket. If you want to know more or have more information, ping me!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case we are using conditional expressions in the DeploymentStage&lt;strong&gt;R&lt;/strong&gt;.yml template, which protects the higher environments ending with &lt;strong&gt;Stage&lt;/strong&gt; and &lt;strong&gt;Production&lt;/strong&gt; from all branches other than the &lt;strong&gt;release&lt;/strong&gt; branch. In the following conditional expression example we only allow deployments to the higher environments from the release branch. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Stage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Build.SourceBranchName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}}:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Alert" src="/images/alert-tiny.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are using release/* as your release branch, for example release/1.0.13, you need to change the last part of the conditional statement to something like &lt;code&gt;startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Combined with &lt;strong&gt;Approvals and checks&lt;/strong&gt; of &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml"&gt;Service connections&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;Environments&lt;/a&gt; the demonstrated magic allows us to align our pipelines with all our goals, such as alignment, consistency, enablement, and &lt;strong&gt;security&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Simplicity is a goal that will drive our future pipeline endeavors and define our success, because with all the power and flexibility of YAML, it is all too easy to create another ocean of complex and potentially unmaintainable pipelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we appreciate the power and some of the magic, we can shift gears to our blueprints. See you in &lt;a href="yaml-pipelines-part5.html"&gt;part 5&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | Part 4 | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part3.html" rel="alternate"></link><published>2021-01-04T00:00:00-08:00</published><updated>2021-01-04T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-01-04:/yaml-pipelines-part3.html</id><summary type="html">&lt;p&gt;With the support from all &lt;strong&gt;people&lt;/strong&gt;, YAML templates support our five (5) core goals and pillars of our common engineering system.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back to the world of pipelines. In &lt;a href="/why-pipelines-part1.html"&gt;part1&lt;/a&gt; we discussed "why" pipelines are valuable and introduced the new Azure DevOps YAML-based pipelines in &lt;a href="/yaml-pipelines-part2.html"&gt;part2&lt;/a&gt;. In this post we explore templates as invaluable building blocks and telemetry to gather essential insights.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is a YAML template?&lt;/h1&gt;
&lt;p&gt;Templates allow us to define reusable content, logic, and parameters, keeping our main pipeline definitions razor focused on the application and sharing common logic. Another advantage of templates, which we will exploit in part 7 of this adventure, is the ability to script and assemble pipelines at “queue” time.&lt;/p&gt;
&lt;p&gt;Essentially, we can define reusable code in separate templates. We can include templates within templates and define four types of templates:
- &lt;strong&gt;Stage&lt;/strong&gt; to define a set of stages of related jobs
- &lt;strong&gt;Job&lt;/strong&gt; to define a collection of steps run by an agent
- &lt;strong&gt;Step&lt;/strong&gt; to define a linear sequence of operations for a job
- &lt;strong&gt;Variable&lt;/strong&gt; as an alternative to hard coded values or variable groups&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Azure Pipelines currently support a maximum of 50 unique template files in a pipeline.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an example template, that defines the reusable code to download a universal artifact containing configuration files, download and run the &lt;a href="https://www.whitesourcesoftware.com/"&gt;WhiteSource&lt;/a&gt; unified code scanning agent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;urlUnifiedAgent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="nl"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UniversalPackages&lt;/span&gt;&lt;span class="mi"&gt;@0&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Download&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="n"&gt;universal&lt;/span&gt; &lt;span class="n"&gt;artifact&lt;/span&gt;
  &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;downloadDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Artifact&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;feedsToUse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;vstsFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;automation&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;
    &lt;span class="nl"&gt;vstsFeedPackage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GUID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;             &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;toolbox&lt;/span&gt;
    &lt;span class="nl"&gt;vstsPackageVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LJO&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlUnifiedAgent&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Download&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;WhiteSource&lt;/span&gt; &lt;span class="n"&gt;Unified&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Artifact&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apiKey&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiKeyAPI&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;WorkSafeBC&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portfolioName&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productName&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;WhiteSource&lt;/span&gt; &lt;span class="n"&gt;Unified&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Including the reusable code in your pipeline is simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;  - template: Templates/DevSecOps/Whitesource.yml@AzDOTemplates&lt;/span&gt;
&lt;span class="err"&gt;    parameters:&lt;/span&gt;
&lt;span class="err"&gt;      portfolioName: &amp;#39;DEMO.Samples&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;      productName:   &amp;#39;WhiteSource&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Why are we excited about YAML templates?&lt;/h1&gt;
&lt;p&gt;As discussed at the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093/"&gt;DevOps Vancouver Meetup: April 2020&lt;/a&gt;, anyone going through a digital transformation will acknowledge that we need to focus on products, process, and people. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.&lt;/em&gt;” – Donovan Brown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our mandate is to &lt;strong&gt;empower&lt;/strong&gt; people, standardize on the best products, and continuously improve processes to raise quality and security bars, efficiency, and reliability. We considered three options to drive a culture change with our continuous delivery pipeline infrastructure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rules Apply" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-1.png"&gt; We can enforce strict governance, standards, and rules, quickly stifling innovation and personal satisfaction.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rebellion" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-2.png"&gt; We can continue to promote complete autonomy, leading to a product and process rebellion and creating a pile of technology mess that is hard and expensive to maintain.&lt;/p&gt;
&lt;p&gt;&lt;img alt="YingYang" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-3.png"&gt; We can listen to what motivates and enables our Agile teams and work together to embrace organizational governance.&lt;/p&gt;
&lt;p&gt;We opted for the latter to enable and inspire engineering teams to learn, grow, and innovate by sharing and encouraging proven patterns and practices through guardrails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS Balance" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-4.png"&gt;&lt;/p&gt;
&lt;p&gt;But, let us get back to the core question - "&lt;em&gt;Why are we excited about YAML templates?&lt;/em&gt;". &lt;/p&gt;
&lt;p&gt;With the support from all &lt;strong&gt;people&lt;/strong&gt;, which implies down (organizational leadership) and bottom up (engineering), YAML templates support our five (5) core goals and pillars of our common engineering system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Continuously &lt;strong&gt;innovate&lt;/strong&gt; and enable users, with alignment to architecture, security and development &lt;strong&gt;guardrails&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt; to provide speed, consistency, and repeatable processes.
 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enable&lt;/strong&gt; and &lt;strong&gt;empower&lt;/strong&gt; users to create business value from ideation to production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Align with &lt;strong&gt;security&lt;/strong&gt; guardrails to minimize vulnerabilities and enforce a secure collaboration and engineering system.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it &lt;strong&gt;simple&lt;/strong&gt; to create a system that can be supported, maintained, and improved with ease. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reusable templates&lt;/h1&gt;
&lt;p&gt;As shown in the illustration below, from my rough notes, we defined two base blueprints. One that defines one stage, &lt;strong&gt;multiple jobs&lt;/strong&gt; allowing parallel runs on separate agents, each with multiple steps.&lt;/p&gt;
&lt;p&gt;The simpler and more recommended blueprint defines one stage, one job, with &lt;strong&gt;multiple steps&lt;/strong&gt;.** It keeps things simple, running everything on one agent within the same context.&lt;/p&gt;
&lt;p&gt;We are working on application-type specific quick-start blueprints, for example Angular, .NET Core, iOS application, and Azure Function application to make it even easier to get started and to encourage consistency.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blueprints and Templates Sketch" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-5.png"&gt;&lt;/p&gt;
&lt;p&gt;All our blueprints inject and rely on several templates, which are maintained in a secure repository - anyone can view, and anyone can suggest a change through a pull request.&lt;/p&gt;
&lt;p&gt;Like the WhiteSource sample mentioned before, we have two &lt;strong&gt;DevSecOps.yml&lt;/strong&gt; and &lt;strong&gt;DevSecOpsInit.yml&lt;/strong&gt; templates which define the use of Dev&lt;strong&gt;Sec&lt;/strong&gt;Ops tasks, such as SonarQube and WhiteSource tasks.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;BuildingCode.yml&lt;/strong&gt; template defines the use of building code validations, such as duplicate code, end of life validations, and detection of surviving &lt;a href="https://stryker-mutator.io/"&gt;Stryker&lt;/a&gt; mutants.&lt;/p&gt;
&lt;p&gt;Lastly, the &lt;strong&gt;bootstrap&lt;/strong&gt; template is the HEART of our new pipelines, using parameters and expressions to call the right validations for the known application types, which in turn injects the relevant templates and tasks when a pipeline is queued.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    - template: Templates/Bootstrap.yml@CDTemplates&lt;/span&gt;
&lt;span class="err"&gt;      parameters:&lt;/span&gt;
&lt;span class="err"&gt;        bootstrapMode:    &amp;#39;init&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;        applicationType:  &amp;#39;dotnet&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;        applicationGuid:  $(productGuid)&lt;/span&gt;
&lt;span class="err"&gt;        portfolioName:    $(portfolioName)&lt;/span&gt;
&lt;span class="err"&gt;        productName:      $(productName)&lt;/span&gt;
&lt;span class="err"&gt;        sourcesDirectory: $(Build.SourcesDirectory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Remember to keep it simple&lt;/h1&gt;
&lt;p&gt;The power of YAML enables us to create invaluable pipeline definitions and abstract re-usable code in templates, as discussed. &lt;strong&gt;BUT&lt;/strong&gt; we always urge our pipeline working group and our pipeline users to keep things &lt;strong&gt;SIMPLE&lt;/strong&gt;, to ensure that we can innovate, scale, maintain the new world of continuous delivery pipelines, and empower both development and operations.&lt;/p&gt;
&lt;p&gt;We hide the complexity in our bootstrap.yml template, which can be embraced in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with one of our blueprints and insert … COPY PASTE … the application specific YAML code.&lt;/li&gt;
&lt;li&gt;Insert the blueprint template calls into existing YAML pipeline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Blueprints and Context" src="/images/moving-hundreds-of-pipeline-snowflakes-part3-6.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GOTCHA&lt;/strong&gt; -There is a need to run specific tasks within the same context. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is one of the reasons we call the blueprints differently in single-job and multi-job sample blueprints, as shown above. We need to ensure that SonarQube tasks, for example, run within the same job context as the build, and the building code after the test. When we run within the same context, we can also be more efficient by loading dependencies, such as source code, extensions, and configuration once.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Telemetry gives us insight&lt;/h1&gt;
&lt;p&gt;To monitor, troubleshoot, and understand the flow of value in our continuous delivery pipelines we explored a few ways to extend the Azure Pipeline analytics with metrics from our pipeline blueprints and templates. The telemetry will enable us to measure &lt;strong&gt;lead time&lt;/strong&gt;, &lt;strong&gt;cycle time&lt;/strong&gt;, and &lt;strong&gt;efficiency&lt;/strong&gt;, uncover waste, and continuously improve as discussed in &lt;a href="https://www.tactec.ca/value-stream-mapping-vsm/"&gt;value stream mapping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We opted for Azure &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview"&gt;Application Insights&lt;/a&gt;, calling a reusable PowerShell Core script in our templates to send the pipeline events, actions, and other data for future analysis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PowerShell&lt;/span&gt;&lt;span class="mi"&gt;@2&lt;/span&gt;
    &lt;span class="nl"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;SonarQube&lt;/span&gt; &lt;span class="n"&gt;Duplicate&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Validation&lt;/span&gt; &lt;span class="n"&gt;Telemetry&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nl"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Toolbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;AI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;logBootstrapEventToAI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;OperationId&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;$(Build.BuildNumber).$(Build.BuildId)&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;         &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Duplicate&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
                 &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DuplicateCode&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$(SQDCVars.codeMetricesTaskVar)&amp;quot;&lt;/span&gt;
      &lt;span class="nl"&gt;pwsh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="nl"&gt;continueOnError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - The extract above shows how we use conditional &lt;code&gt;${{ if ... }}&lt;/code&gt; to introduce previews into our operational pipelines. If &lt;code&gt;parameters.previews&lt;/code&gt; is set to true, indicating that we are embracing preview logic, the telemetry script is included in our pipeline and called at run-time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Now that we understand templates, we will look at the magic that has our Sec, in DevSecOps, smiling from ear to ear. See you in &lt;a href="yaml-pipelines-part4.html"&gt;part 4&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | Part 3 | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 2: Pipelines - Introduction, variables and why spaces matter</title><link href="https://wsbctechnicalblog.github.io/yaml-pipelines-part2.html" rel="alternate"></link><published>2020-12-21T00:00:00-08:00</published><updated>2020-12-21T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-12-21:/yaml-pipelines-part2.html</id><summary type="html">&lt;p&gt;The new Azure DevOps YAML pipelines have been the focus of innovation, enabling engineering to treat pipelines as code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We continue our continuous delivery pipeline journey by switching gears from the unified pipelines to the new YAML-syntax pipelines. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why the YAML course change?&lt;/h1&gt;
&lt;p&gt;Do not get me wrong, the Unified pipelines introduced in &lt;a href="/why-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options&lt;/a&gt; are phenomenal and will continue to serve us for quite some time. However, we realised that the unified pipelines are based on the json-based user interface pipelines. Microsoft refers to these pipelines as &lt;strong&gt;classic interface&lt;/strong&gt; and there have been no improvements for many sprints in the Azure DevOps &lt;a href="https://docs.microsoft.com/en-us/azure/devops/release-notes/features-timeline"&gt;timeline&lt;/a&gt;. This is a &lt;strong&gt;RISK&lt;/strong&gt; as the technology is becoming stale.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Classic Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-1.png"&gt;&lt;/p&gt;
&lt;p&gt;In turn, the new Azure DevOps YAML-syntax pipelines have been the focus of innovation, enabling engineering to treat pipelines as code, use templates to promote consistency, efficiency, innovation, and quality, and last, but not least, combine continuous integration and deployment into one pipeline.&lt;/p&gt;
&lt;p&gt;&lt;img alt="YAML Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-2.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;YAML Overview&lt;/h1&gt;
&lt;p&gt;YAML is a mature human-readable data-serialization language, originally proposed by Clark Evans in 2001. It is often referred to as “yet another markup language” and “YAML ain’t markup language.&lt;/p&gt;
&lt;p&gt;When we look at the &lt;a href="https://aka.ms/yaml"&gt;Azure DevOps YAML&lt;/a&gt; pipelines, the pipeline configuration language has been kept structurally YAML. That is exciting!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BOOKMARK the gem &lt;a href="https://aka.ms/yaml"&gt;https://aka.ms/yaml&lt;/a&gt; URL!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;YAML Basics&lt;/h1&gt;
&lt;p&gt;Let us ask Azure Pipelines for a new YAML-syntax pipeline to explore. By default, Azure DevOps generates the following starter pipeline for us:&lt;/p&gt;
&lt;h2&gt;Our first pipeline&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Starter&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Start&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;minimal&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;

&lt;span class="k"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;vmImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Run a one-line script&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;aka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;
  &lt;span class="n"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Run a multi-line script&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is evident that:
- It is triggered on changes on the &lt;strong&gt;master&lt;/strong&gt; branch.
- It is queued on the latest &lt;strong&gt;ubuntu&lt;/strong&gt; agent pool - other options include macOS and Windows.
- It runs two steps, hosted in one stage, containing one job.&lt;/p&gt;
&lt;p&gt;Simple!&lt;/p&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;Next, we will explore two key YAML topics: &lt;strong&gt;Variables&lt;/strong&gt; and &lt;strong&gt;Parameters&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every variable is really a key:value pair.&lt;/li&gt;
&lt;li&gt;Simple variable syntax example
    &lt;code&gt;yml
    variables:
      name: WSBC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Explicit key:value syntax example
    ```yml
    variables:&lt;ul&gt;
&lt;li&gt;name:  myvariable
  value: WSBC 
```&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The key is the name of the variable, and it has a &lt;strong&gt;string&lt;/strong&gt; value. &lt;/li&gt;
&lt;li&gt;The variable is processed at &lt;strong&gt;run&lt;/strong&gt; time.&lt;/li&gt;
&lt;li&gt;To dereference a variable, simply wrap the key in &lt;code&gt;$()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There are several types of variables, whereby pipelines do not distinguish between these types. &lt;/li&gt;
&lt;li&gt;Inline variables&lt;/li&gt;
&lt;li&gt;Variable groups&lt;/li&gt;
&lt;li&gt;Template variables&lt;/li&gt;
&lt;li&gt;Pipeline variables&lt;/li&gt;
&lt;li&gt;Predefined Azure DevOps agent and build &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;amp;tabs=yaml"&gt;variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Explicit syntax is required when you mix variable types. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yml
 variables:
 - name:     myvariable
   value:    WSBC
 - group:    myVariableGroup
 - template: myVariableTemplate.yml&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Parameters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parameters can be used in templates and pipelines. They allow us to deal with complex objects and combine parameters and expressions to create complex scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yml
  parameters:
  - name: parameterSample
    type: string
    default: sunshine
    values:
    - sunshine
    - moonlight
    - aurora&lt;/code&gt;
- Unlike variables, parameters are defined as key value pairs where the value can be of &lt;strong&gt;any type&lt;/strong&gt;.
- To dereference a parameter, simply wrap the key in &lt;code&gt;${{}}&lt;/code&gt;.
- The variable is processed at &lt;strong&gt;queue&lt;/strong&gt; time.&lt;/p&gt;
&lt;p&gt;Powerful magic!&lt;/p&gt;
&lt;h2&gt;Our second YAML pipeline&lt;/h2&gt;
&lt;p&gt;Now that we understand variables and parameters, let us create our second YAML pipeline and first template. No need to panic, you have not missed anything - we will explore templates in more detail in Part 3 of this series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bingo!&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;keyFinal&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you notice that we assigned the value to the keyFinal variable, but are using keyRef throughout the sample? By using the queue-time ${{}} resolution, we are changing the first script to the following during queue time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bingo!&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;keyFinal&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyFinal&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;keyFinal&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;keyFinal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Our first template&lt;/h2&gt;
&lt;p&gt;Like parameters the template is injected and processed at &lt;strong&gt;queue&lt;/strong&gt; time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defaultKey&amp;#39;&lt;/span&gt;  

&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;

  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;KeyRef&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="o"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I recommend that you create the sample pipeline and run it. Does it display what you expected? If yes, you can skip the YAML Gotchas, otherwise read on.&lt;/p&gt;
&lt;h2&gt;Generated echo output&lt;/h2&gt;
&lt;p&gt;Take note of the fourth, fifth, and sixth echo in the template. You may expect that the output will be the same ... but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fourth &lt;code&gt;echo $(keyRef)&lt;/code&gt; displays &lt;code&gt;keyFinal&lt;/code&gt; as expected.&lt;/li&gt;
&lt;li&gt;Fifth  &lt;code&gt;echo $( keyRef )&lt;/code&gt; displays &lt;code&gt;command not found&lt;/code&gt; ... too many spaces. &lt;/li&gt;
&lt;li&gt;Sixth  &lt;code&gt;echo $( KeyRef )&lt;/code&gt; displays &lt;code&gt;command not found&lt;/code&gt; ... YAML is case-sensitive and too many spaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;... command not found&lt;/span&gt;
&lt;span class="err"&gt;here we go&lt;/span&gt;
&lt;span class="err"&gt;keyFinal&lt;/span&gt;
&lt;span class="err"&gt;... command not found&lt;/span&gt;
&lt;span class="err"&gt;keyFinal&lt;/span&gt;
&lt;span class="c"&gt;keyRef: command not found&lt;/span&gt;
&lt;span class="c"&gt;KeyRef: command not found&lt;/span&gt;
&lt;span class="err"&gt;keyFinal command not found&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;span class="err"&gt;Bingo!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;YAML Gotchas, such as spaces&lt;/h1&gt;
&lt;p&gt;For example, alignment of your definition is critical. Just like in the Cobol and Fortran days, a space too many or too few will throw errors, that are often difficult to decipher. As shown in the simple example, these two statements look the same, however, the second has too many spaces and fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, the following example looks innocent at a quick glance, but the first and third script will fail as it is indented few and one too many spaces respectively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyRef&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yaml is a very positional and pedantic language!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Use the &lt;strong&gt;validate&lt;/strong&gt; feature in the Azure Pipeline editor to help you unearth some of the gremlins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="YAML Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part2-4.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Common language&lt;/h1&gt;
&lt;p&gt;With the various names popping up - classic, unified, YAML, and multi-stage - it is important to define and use a common language when talking about pipelines. Within the context of Azure DevOps pipelines, we suggest and use the following in these technical blogs:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TERMINOLOGY&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Classic Unified Pipeline&lt;/td&gt;
&lt;td&gt;Unified pipeline design practice, defined by WSBC, based on the user interface (Classic) Azure Pipeline to promote a consistent CICD pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-stage YAML-syntax Pipeline&lt;/td&gt;
&lt;td&gt;Unified YAML experience to create an Azure Pipeline to do CI, CD, or CI and CD, and store the pipeline configuration as part of the source code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-stage Blueprint-based Pipeline&lt;/td&gt;
&lt;td&gt;Unified pipeline design practice, defined by WSBC, based on the multi-stage YAML-syntax pipeline to promote a consistent, secure, and extensible CI/CD pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Exploration (CE)&lt;/td&gt;
&lt;td&gt;Continuous analysis of an idea or hypothesis, customer feedback, or market research through rapid prototyping. OODA – Observe, Orient, Decide, Act.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Integration (CI)&lt;/td&gt;
&lt;td&gt;Continuously collaboration, validation, and merging of code changes. Also known as a continuous and automated “Build”.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Deployment (CD)&lt;/td&gt;
&lt;td&gt;Ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one&lt;/strong&gt; environment automatically – for example, deploy straight to production.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Continuous Delivery (CD)&lt;/td&gt;
&lt;td&gt;Ability to use the output from the CI to build and deploy the new known good build to &lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;more&lt;/strong&gt; environments automatically – for example, deploy to multiple rings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release on Demand (RoD)&lt;/td&gt;
&lt;td&gt;Ability to make changes available to customers all at once, or selectively in response to feedback or business needs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;If erroneous spaces do not rattle you, we are ready to jump into &lt;a href="yaml-pipelines-part3.html"&gt;part 3&lt;/a&gt; to explore the power of templates and how we are cooking up a storm of re-usable magic.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | &lt;a href="/why-pipelines-part1.html"&gt;Part 1, TOC&lt;/a&gt; | Part 2 | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Part 1: Pipelines - Why bother and what are our nightmares and options?</title><link href="https://wsbctechnicalblog.github.io/why-pipelines-part1.html" rel="alternate"></link><published>2020-12-19T00:00:00-08:00</published><updated>2020-12-19T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-12-19:/why-pipelines-part1.html</id><summary type="html">&lt;p&gt;Pipelines enable engineering to continuously deliver value, map and improve their processes and workflows, promoting consistency and reliability across the organisation.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this series we are going to invite you on our journey of grappling with hundreds of inconsistent and often conflicting continuous delivery pipelines, to evolving to unified pipelines, template-driven pipelines, and eventually self-service automation. We will break down our journey into these multiple parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: Pipelines - Why bother and what are our nightmares and options? (this)&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part2.html"&gt;Part 2: Pipelines - Introduction, variables and why spaces matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part4.html"&gt;Part 4: Pipelines - Magic of queue time assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coming soon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/li&gt;
&lt;li&gt;Part TBD: Pipelines - From CI to CD and beyond in one pipeline&lt;/li&gt;
&lt;li&gt;Part TBD: Self-service automation - A dream turns into reality&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Why Pipelines?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Continuous Delivery Pipeline Value Stream Mapping The Continuous Delivery Pipeline (CDP) represents the workflows, activities, and automation needed to shepherd a new piece of functionality from ideation to an on-demand release of value to the end user."&lt;/em&gt; - © Scaled Agile, Inc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As eluded to by the quote from Scaled Agile, we are not talking about pipelines to carry oil, but pipelines that help us automate continuous integration and delivery tasks. Examples include the automation of guardrail automations, such as SonarQube, WhiteSource, and Building Code scans and validations.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Pipelines enable engineering to continuously deliver value, map and improve their processes and workflows, promoting consistency and reliability across the organisation.&lt;/p&gt;
&lt;h1&gt;Snowflakes&lt;/h1&gt;
&lt;p&gt;A healthy DevOps mindset promotes the line of autonomy. Above the line the organization defines its vision and governance to ensure alignment with regulatory, legal, and other requirements. Below the line the engineering teams own their process, with full autonomy to plan WHO, WHEN, and HOW they will accomplish their work.&lt;/p&gt;
&lt;p&gt;If, however, there is a lack of blueprints, design practices, and governance, each team will design and develop their pipelines slightly differently. &lt;/p&gt;
&lt;p&gt;The outcome are unique &lt;strong&gt;snowflakes&lt;/strong&gt; that promote rapid evolution (positive) and a diversity of pipelines that can become hard to maintain, support, and innovate (negative).&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With hundreds of continuous delivery pipelines the &lt;strong&gt;Sec&lt;/strong&gt; and &lt;strong&gt;Ops&lt;/strong&gt; in DevSecOps began to buckle detecting and fixing vulnerabilities and other guardrail leaks.&lt;/p&gt;
&lt;h1&gt;Emergence of Unified Pipelines&lt;/h1&gt;
&lt;p&gt;In 2018 we decided to grab the pipelines by their valves to tackle the spread of unique pipeline patterns by defining an &lt;strong&gt;Unified&lt;/strong&gt; &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops#:~:text=%20Does%20Azure%20Pipelines%20work%20with%20my%20language,code%20to%20multiple%20targets.%20Targets%20include...%20More%20"&gt;Azure Pipeline&lt;/a&gt; design pattern. The pattern promoted the following principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate everything automatable&lt;/li&gt;
&lt;li&gt;Build once&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We encourage engineering teams to create a &lt;strong&gt;release&lt;/strong&gt; build artifact, with debug symbols published to our symbol server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Continuous integration and delivery&lt;/li&gt;
&lt;li&gt;Continuous streamlining and improvement&lt;/li&gt;
&lt;li&gt;Maintain one build definition&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of a developer and release pipeline, create &lt;strong&gt;one&lt;/strong&gt; unified pipeline that locks down the higher environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Maintain one release pipeline definition&lt;/li&gt;
&lt;li&gt;Scan for vulnerabilities early, often, and fail fast&lt;/li&gt;
&lt;li&gt;Streamlined approvals&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;By optimising our approvals, we cut down on the complexity and delay, we inherited from previous years, decades, ... &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Test early, often, and fail fast&lt;/li&gt;
&lt;li&gt;Traceability and observability of releases&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nobody wants a &lt;em&gt;"where did this build come from"&lt;/em&gt; treasure hunt when joining a 2AM incident call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What followed was a mind-numbing and expensive era of aligning all snowflakes to the unified design pattern, using the Azure Pipelines GUI editor to manipulate the pipeline json-based configuration. Even though we are using re-usable &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops#:~:text=In%20Azure%20Pipelines%2C%20you%20can%20version%20your%20own,is%20appended%20to%20the%20task%20group%20version%20number."&gt;Task Groups&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&amp;amp;tabs=yaml"&gt;Variable Groups&lt;/a&gt; we had to invest thousands of error-prone clicks - there has to be a better way!?!&lt;/p&gt;
&lt;p&gt;We managed to persue our goals of &lt;strong&gt;aligning&lt;/strong&gt; with architecture and security guardrails; &lt;strong&gt;consistency&lt;/strong&gt; through design practices, automation, and collaboration; &lt;strong&gt;simplicity&lt;/strong&gt; to create maintainable pipelines; and &lt;strong&gt;enabling&lt;/strong&gt; and &lt;strong&gt;empowering&lt;/strong&gt; our common engineering system.&lt;/p&gt;
&lt;h1&gt;Hackathon triggers a course change&lt;/h1&gt;
&lt;p&gt;A radical hackathon idea in 2019 investigated latest technology trends that promised pipeline-as-code, templates, and other facinating features that promise to enable our ultimate goal of self-service automation. Our hackathon idea was not amongst the winners, but is one of the few ideas that continued to simmer and change the world of our continuous delivery pipelines.&lt;/p&gt;
&lt;p&gt;It triggered a pipeline working group, awareness workshops, and even four laptop stickers to highlight unified pipeline, multi-stage, CI+CD, and self-service automation champions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CICD Pipeline" src="/images/moving-hundreds-of-pipeline-snowflakes-part1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Welcome YAML based pipelines, which we will introduce in &lt;a href="yaml-pipelines-part2.html"&gt;part 2&lt;/a&gt; of this series.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Series Bread Crumbs | Part 1, TOC | &lt;a href="/yaml-pipelines-part2.html"&gt;Part 2&lt;/a&gt; | &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3&lt;/a&gt; | &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4&lt;/a&gt; | &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5&lt;/a&gt; | &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6&lt;/a&gt; | &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="Azure-Pipelines"></category><category term="DevOps"></category></entry><entry><title>Shift LEFT and RIGHT to take yourself off the humbling 2AM calls</title><link href="https://wsbctechnicalblog.github.io/shift-left-2am-call.html" rel="alternate"></link><published>2020-10-24T13:13:00-07:00</published><updated>2020-10-24T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-24:/shift-left-2am-call.html</id><summary type="html">&lt;p&gt;We need to avoid the infamous 2AM call!&lt;/p&gt;</summary><content type="html">&lt;p&gt;During the &lt;strong&gt;Getting started with a DevOps mindset session&lt;/strong&gt; at the CSI Lab in January 2019, we discussed a number of epiphanies. Three referenced the 2AM call, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Epiphanies" src="/images/two-am-call-1.png"&gt;&lt;/p&gt;
&lt;h1&gt;What is the 2AM call?&lt;/h1&gt;
&lt;p&gt;When a user reports an issue, telemetry insights identifies an anomaly, or a circuit breaker detects a potential overload, an incident is generated. On detection of the incident a call is initiated to engineers on call, also referred to as designated response individuals, who jump on the call to identify the root cause, capture vital evidence, work on a mitigation hot fix, document the incident transparently, and work with the feature teams (pods, tribes,...) to ensure that the incident never re-occurs. The reason it is called the &lt;strong&gt;2AM call&lt;/strong&gt; is that it usually happens when we are entering the REM sleep at 2AM.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 2 - The 2AM Call is a great motivation for quality&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is obvious that no one wants to wake up at 2AM. Experiencing the 2AM call once or twice, is typically enough motivation for any of us to look for ways to improve our solution and avoid getting the dreaded call.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 3 - Teams that take ownership of features from ideation to deprecation are typically involved in the least 2AM calls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Why does SHIFT LEFT + SHIFT RIGHT reduce the 2AM calls?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Epiphanies" src="/images/two-am-call-2.png"&gt;&lt;/p&gt;
&lt;h2&gt;SHIFT LEFT&lt;/h2&gt;
&lt;p&gt;The core idea is to perform tasks such as testing, security scanning, user experience reviews, and code reviews as early as possible in the continuous integration and deployment life cycle as possible. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Quick Poll" src="/images/two-am-call-3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snapshot of our quick poll - What is important to automate for a healthy DevOps environment?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Automation is key to the &lt;strong&gt;SHIFT LEFT&lt;/strong&gt; practice allowing us to integrate the tasks seamlessly in the engineering system.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quick Poll" src="/images/two-am-call-4.png"&gt;&lt;/p&gt;
&lt;p&gt;The above snippet is from a pull request validation build that shows that 71,283 unit tests were validated in less than 7 minutes. It can be done!&lt;/p&gt;
&lt;p&gt;Similarly, continuous integration builds can perform credential, security, and other scans, allowing us to validate the quality of a feature early and continuously, identify issues early, and either fix or fail fast before we commit ourselves to a deployment.&lt;/p&gt;
&lt;h2&gt;SHIFT RIGHT&lt;/h2&gt;
&lt;p&gt;Contrary to practices such as testing and security scanning, which we want to perform as early and often as possible, we want to defer the configuration deployments as long as possible - &lt;strong&gt;SHIFT&lt;/strong&gt; configuration &lt;strong&gt;RIGHT&lt;/strong&gt;. Explore how to generate &lt;strong&gt;ONE&lt;/strong&gt; build, deploy to &lt;strong&gt;MANY&lt;/strong&gt; environments, simplify build artifact traceability and remote debug, as needed ... it is possible!&lt;/p&gt;
&lt;h2&gt;BUT, WHY DOES IT REDUCE THE 2AM CALL?&lt;/h2&gt;
&lt;p&gt;PEOPLE are the hardest part of any transformation! Innovating continuously to improve the &lt;strong&gt;PROCESS&lt;/strong&gt; and &lt;strong&gt;PRODUCTS&lt;/strong&gt; (tools) is the easy part. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EPIPHANY 3 - We need to ensure that engineers see the value for SHIFT LEFT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you SHIFT LEFT with testing and security, the engineers, the &lt;strong&gt;PEOPLE&lt;/strong&gt;, will initially push back as the pull request validation builds take longer and associated logs and alert noise increase dramatically.  However, running 70,000 unit tests with every build, as shown above, eventually raises the quality of the solution. It is like a train that takes a while to pick up speed. Once in motion, the momentum will dramatically improve key performance indicators (KPI), such as &lt;strong&gt;lead time for change&lt;/strong&gt;, &lt;strong&gt;mean time to recover&lt;/strong&gt;, and especially &lt;strong&gt;change failure rate&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; - KPIs are often not meaningful to all stakeholders. For example, mentioning a 2,604 times &lt;strong&gt;faster mean time to recover&lt;/strong&gt; metric is probably viewed with more skepticism than excitement by many business stakeholders.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Endangered" src="/images/two-am-call-5.png"&gt;&lt;/p&gt;
&lt;p&gt;A reduction in incidents and 2AM calls, however, is an easy one to unpack and understand - especially for on-call engineers now snoozing next to silent pagers and mobile phones.&lt;/p&gt;</content><category term="Posts"></category><category term="DevOps"></category><category term="DevOps-Mindset"></category></entry><entry><title>Don’t let your code talk to strangers</title><link href="https://wsbctechnicalblog.github.io/dont-let-your-code-talk-to-strangers.html" rel="alternate"></link><published>2020-10-24T10:20:00-07:00</published><updated>2020-10-24T10:20:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-24:/dont-let-your-code-talk-to-strangers.html</id><summary type="html">&lt;p&gt;Closer look into the principle of least knowledge&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have discussed the crucial effect that cost of change has on the quality of the delivered business value. If the delivered value is expensive to change, it loses its attractiveness. In such cases, it quickly morphs from an asset into liability. We certainly don’t want to find ourselves in such disadvantageous position.&lt;/p&gt;
&lt;p&gt;Generally speaking, the most frequent cause of unchangeable code is tight coupling. During the early stages of development, coupling comes naturally, almost spontaneously. And at that stage, it appears quite harmless. We continue adding capabilities to our solution, and things appear to be going swimmingly.&lt;/p&gt;
&lt;p&gt;But there often comes a moment when we realize that we need to rearrange our code due to the newly arrived requirements or findings. It is at that point that tight coupling rears its ugly head and makes us realize that we have all but painted ourselves into a proverbial corner.&lt;/p&gt;
&lt;p&gt;Tight coupling has many underlying causes and anti-patterns. Today, we are going to take a closer look into one such anti-pattern – code talking to strangers.&lt;/p&gt;
&lt;h2&gt;Principle of least knowledge&lt;/h2&gt;
&lt;p&gt;Tight coupling happens when our code knows way more than is needed in order to do the job. At a first glance, knowing more than is needed doesn’t sound undesirable. What could be wrong with possessing excessive knowledge?&lt;/p&gt;
&lt;p&gt;Let’s try to illustrate what could get wrong by indulging in excessive knowledge by following a trivial example. Suppose we have a line of code that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objectA.GetObjectB().GetObjectC().DoSomeSpecificThing();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the line above, we see &lt;code&gt;objectA&lt;/code&gt; (i.e. an instance of &lt;code&gt;classA&lt;/code&gt;) getting &lt;code&gt;objectB&lt;/code&gt; (an instance of &lt;code&gt;classB&lt;/code&gt;). That’s perfectly fine, but the issue now arises due to the fact that &lt;code&gt;objectA&lt;/code&gt; is using &lt;code&gt;objectB&lt;/code&gt; not because &lt;code&gt;objectB&lt;/code&gt; can provide some useful capability/service to &lt;code&gt;objectA&lt;/code&gt; (which would be the normal case). &lt;code&gt;objectA&lt;/code&gt; is getting &lt;code&gt;objectB&lt;/code&gt; merely in order to expressly get to &lt;code&gt;objectC&lt;/code&gt;. Once &lt;code&gt;objectA&lt;/code&gt; gets a handle on &lt;code&gt;objectC&lt;/code&gt;, it can ask &lt;code&gt;objectC&lt;/code&gt; to do some specific thing.&lt;/p&gt;
&lt;p&gt;Why is that problematic? Granted, it is obvious that to &lt;code&gt;objectA&lt;/code&gt; a once or twice removed &lt;code&gt;objectC&lt;/code&gt; is a stranger. We do we say that &lt;code&gt;objectC&lt;/code&gt; is a stranger to &lt;code&gt;objectA&lt;/code&gt;? If &lt;code&gt;objectC&lt;/code&gt; was a friend to &lt;code&gt;objectA&lt;/code&gt;, there clearly would be no need for &lt;code&gt;objectA&lt;/code&gt; to get to talk to &lt;code&gt;objectC&lt;/code&gt; by first talking to &lt;code&gt;objectB&lt;/code&gt;. But in this case, objectA can only engage in a ‘friend of a friend’ type of interaction. And that’s when the problem with tight coupling begins!&lt;/p&gt;
&lt;p&gt;We see therefore that tight coupling materializes when we endow our code with unnecessary knowledge. In our code, objectA has the absolutely necessary knowledge of how to talk to its friend, &lt;code&gt;objectB&lt;/code&gt;. But instead of leaving it like that, we succumbed to the temptation to teach our code that there exists another object, &lt;code&gt;objectC&lt;/code&gt;, and although that object is not immediately available to our &lt;code&gt;objectA&lt;/code&gt;, it is available via our network of friends. So now our objectA gets saddled with excessive knowledge of having to know how to get to &lt;code&gt;objectC&lt;/code&gt; and how to ask it to perform some specific action.&lt;/p&gt;
&lt;p&gt;This is too much knowledge, and such excessive knowledge is making things tightly coupled, bloated and brittle.&lt;/p&gt;
&lt;h2&gt;Where is brittleness coming from?&lt;/h2&gt;
&lt;p&gt;In the above example, we perceive tight coupling in the form of an underlying assumption: every &lt;code&gt;objectB&lt;/code&gt; has access to &lt;code&gt;objectC&lt;/code&gt;. That is a dangerous assumption, as we may discover later on, after we’ve created a lot of code that relies on the above chaining of method calls that in some instances &lt;code&gt;objectB&lt;/code&gt; may not have access to &lt;code&gt;objectC&lt;/code&gt;. Maybe someone had refactored the code and had completely removed the association between &lt;code&gt;objectB&lt;/code&gt; and &lt;code&gt;objectC&lt;/code&gt;. Having to go and find all instances of the legacy code and adjust them to the new situation is a potential breeding ground for bugs. Often times there are slight variation in how are instantiated objects called (no one is guaranteeing that every developer will consistently name instance of &lt;code&gt;classA&lt;/code&gt; &lt;code&gt;objectA&lt;/code&gt; etc.) No regex on earth could be crafted that will guarantee to fish all these minor variations out. So we’d be left to manually pour over reams of code, trying to find all instances of such chained calls and then fix them manually.&lt;/p&gt;
&lt;p&gt;That’s brittleness to the umpteenth degree. And a vast breeding ground for all kinds of bugs.&lt;/p&gt;
&lt;h2&gt;Only talk to your immediate friends&lt;/h2&gt;
&lt;p&gt;To avoid the terrible anti-pattern of promiscuously talking to strangers, our code should embrace a very important constraint – talk only to your immediate friends.&lt;/p&gt;
&lt;p&gt;In the above case, &lt;code&gt;objectA&lt;/code&gt; should only confine itself to talking to objectB. If there is some useful capability/functionality that some stranger (e.g. &lt;code&gt;objectC&lt;/code&gt;) possesses that &lt;code&gt;objectA&lt;/code&gt; desperately needs, let &lt;code&gt;objectB&lt;/code&gt; be the broker between &lt;code&gt;objectA&lt;/code&gt; and &lt;code&gt;objectC&lt;/code&gt;. That way, our code becomes simple, future proof, unperturbable (and also easy testable).&lt;/p&gt;
&lt;p&gt;Let’s indulge in another quick example. Suppose we have an instance of a class &lt;code&gt;Driver&lt;/code&gt;, and that driver is steering an instance of a class &lt;code&gt;Vehicle&lt;/code&gt;). The way we implement steering is to allow the driver to talk to strangers; for example, if the driver wants to steer left, the code looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;driver.GetVehicle().GetSteeringMechanism().SteerLeft();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;driver&lt;/code&gt; is talking to its immediate friend (&lt;code&gt;vehicle&lt;/code&gt;) in order to gain access to a stranger (an instance of the class &lt;code&gt;SteeringMechanism&lt;/code&gt;), so that the driver can directly manipulate the steering mechanism by sending it the command to steer left.&lt;/p&gt;
&lt;p&gt;This is the illustration of tight coupling in action. Suppose later on the instance of class SteeringMechanism (which was an instance of an automobile steering mechanism) gets replaced by an instance of a sail boat. On a sail boat, the steer left command has the opposite effect from the same command sent to a steering wheel in the car. Which means, we have inadvertently created a bug.&lt;/p&gt;
&lt;p&gt;So it is important to avoid tight coupling. Always limit the amount of knowledge your objects have. That way, your code will be clean, testable, deterministic and bug free.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="TDD"></category><category term="CI"></category></entry><entry><title>Collective code ownership</title><link href="https://wsbctechnicalblog.github.io/collective-code-ownership.html" rel="alternate"></link><published>2020-10-22T16:24:00-07:00</published><updated>2020-10-22T16:24:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2020-10-22:/collective-code-ownership.html</id><summary type="html">&lt;p&gt;Teams share collective responsibility and therefore collectively own the code&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;"In XP we don't do what we believe, we do what our measurements tell us.”&lt;/em&gt; Ron Jeffries&lt;/p&gt;
&lt;p&gt;Value stream delivery is largely based on automating business processes. In order to continuously deliver value, businesses invest in functionality. DevOps engineers are largely responsible for implementing desired functionality.
So we see that functionality is an asset. Businesses are willing to invest heavily in optimizing that asset. And the way the asset (i.e. functionality) is delivered is via shipping code.&lt;/p&gt;
&lt;p&gt;Now for the twist of lime: while functionality is obviously an asset, shipping code isn’t. Not only is shipping code not an asset, it is actually a liability. Once shipped, code needs constant babysitting. If code is not engineered properly, babysitting the shipped code may result in spiraling costs. No business will ever feel comfortable with such liability.&lt;/p&gt;
&lt;p&gt;In Extreme Programming (XP) we have a slightly different mantra (that basically talks about the same equation): Code is nothing, stories are everything.&lt;/p&gt;
&lt;h2&gt;Who does the code belong to?&lt;/h2&gt;
&lt;p&gt;In DevOps, code belongs to the product (i.e. a bundle of functionalities). Code never belongs to an individual engineer. Code may shortly belong to a project, but a product typically outlives any project, so it’s more accurate to say that code belongs to the product.
Collective ownership is often a counter-intuitive concept in software engineering, as it annuls the authorship. In traditional software development shops, workload is divvied up among engineers, and each engineer writes their own code in complete isolation. And because they write their own code, they are responsible for it, they own it, they run with it, they live and die by it.&lt;/p&gt;
&lt;p&gt;In software development shops that have evolved from the traditional shops, workload is not compartmentalized into mini silos. No silos, no turfs, no fiefdoms. In such shops, workload is centered on user stories. And each user story belongs to the entire team. That way, we avoid painting ourselves in a corner by isolating engineers from each other and then having to herd cats (with all the frightening overhead of coordinating, overseeing, synchronizing, judging and implementing correctional actions).&lt;/p&gt;
&lt;p&gt;And since each user story belongs to the team (i.e. there is no individual, named author of a user story), the code implementing that user story also belongs to the team. That way, there are no individual authors of any line of code, of any code statement.&lt;/p&gt;
&lt;h2&gt;How does that work in daily practice?&lt;/h2&gt;
&lt;p&gt;Collective code ownership may play out in variety of scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Engineers work in isolation&lt;/li&gt;
&lt;li&gt;Engineers engage in pair programming (each pair works in isolation)&lt;/li&gt;
&lt;li&gt;Engineers engage in mob programing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case where engineers work in isolation (i.e. each engineers goes away and spends some time coding in complete isolation from the team), collective ownership manifests in the full freedom to access, open and modify any block of code in the product repo. There are no silos, no barriers – we are talking full blown open source paradigm.&lt;/p&gt;
&lt;p&gt;In case of pair programming, similar concept applies: the repo is fully open for examination, modification and merging the changes. Same as an individual engineer doesn’t own any part of the code pulled from the repo, a pair of engineers also do not own any part of the code.
In case of mob programming, collaboration between engineers happens in real time. Coding happens in brief spurts (governed by the ‘musical chairs’ rotation where the person making the changes by typing and the person navigating the changes typically spend no more than 5 minutes per mini session). As the driver (i.e. person entering the changes) and the navigator (person, or persons instructing the driver) keep rotating, at the end of the coding session pretty much every team member has touched the code. Collectively, the team has made the most optimal decisions regarding which changes to the code to commit, push and merge to the trunk. Authorship becomes moot in such practice.&lt;/p&gt;
&lt;h2&gt;What are the prerequisites of collective code ownership?&lt;/h2&gt;
&lt;p&gt;It may not be advisable to jump in head first into collective code ownership before establishing rules of the game. In a nutshell, here are the minimum requirements for teams to successfully engage in collective code ownership:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The team has collectively created and agreed upon the coding standards&lt;/li&gt;
&lt;li&gt;The team is fully committed to using code management tool (git!)&lt;/li&gt;
&lt;li&gt;The team is doing full-on TDD, ideally also doing stringent mutation testing&lt;/li&gt;
&lt;li&gt;The team is using powerful IDE (Visual Studio or VS Code)&lt;/li&gt;
&lt;li&gt;The team is actively pursuing continuous integration (CI)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the above, it is important for all engineers on the team to agree to participate/contribute to the work needed to implement aspects of the functionality that may not be everyone’s area of interest. For example, a back-end engineer may not be interested in some front-end technologies, but is agreeable to participate and pick up some skills by working with domain experts on the team. Cross-training/cross-pollination goes a long way toward creating a highly performing team.&lt;/p&gt;
&lt;p&gt;Collective code ownership works best for small size teams, famously described as “two pizzas teams”. Any team that cannot be fed with two pizzas brings along added complexity; the overhead needed for maintaining team cohesion may exceed the benefits of cultivating collective code ownership.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;DevOps software engineering discipline is founded on the team concept. A team is not a group. A team is based on the concept of collective responsibility. And since each team works with user stories and turns those stories into shipping code, team collectively owns user stories as well as the code that implements them.
In a healthy team, when something goes wrong it is never “I thought SHE was going to take care of that!” Rather, it is “What do we have to do to fix that/take care of that?”&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Posts"></category><category term="DevOps"></category><category term="code"></category></entry></feed>