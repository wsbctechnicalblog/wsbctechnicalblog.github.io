<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>- Posts</title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/posts.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2022-09-07T00:00:00-07:00</updated><entry><title>Visualizing work item dependencies in Azure Boards</title><link href="https://wsbctechnicalblog.github.io/azure-devops-dependencies.html" rel="alternate"></link><published>2022-09-07T00:00:00-07:00</published><updated>2022-09-07T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-07:/azure-devops-dependencies.html</id><summary type="html">&lt;p&gt;We want to plan and manage dependencies across multiple teams areas, providing awareness of the dependencies in a simple way.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post summarizes the findings from our working group that focused on finding better, simpler, and more reliable ways to plan, manage, and track dependencies in product development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Rocket" src="../images/azure-devops-dependencies-1.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am using a hypothetical scenario of two teams in our &lt;strong&gt;Delivery Teams&lt;/strong&gt; Azure DevOps project who have been tasked to build a rocket with two stages and boosters. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stage 1 must be built first and includes a SpaceX Raptor 1 engine. &lt;/li&gt;
&lt;li&gt;Stage 2 is built next and includes a SpaceX Raptor 2 engines for Vacuum conditions. &lt;/li&gt;
&lt;li&gt;The boosters with SpaceX Merlin engines are built last. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All engines are supplied by the &lt;strong&gt;Build Engines&lt;/strong&gt; team in another &lt;strong&gt;Common Services&lt;/strong&gt; Azure DevOps project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Team" src="../images/azure-devops-dependencies-2.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When creating the team backlogs, we use the &lt;strong&gt;predecessor&lt;/strong&gt; and &lt;strong&gt;successor&lt;/strong&gt; work item link types to craft the dependency tree and guide the teams through a turbulence free development phase. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Links" src="../images/azure-devops-dependencies-11.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown above, the 1-stage Feature (489406) work item has two &lt;strong&gt;successor&lt;/strong&gt; links, defining that 1-stage must be completed first. It also has a &lt;strong&gt;predecessor&lt;/strong&gt; link to the Raptor v1 engine, which must be available before the 1-stage can be completed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Refer to &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/link-type-reference?view=azure-devops"&gt;Reference guide for link types used in Azure DevOps and Azure Boards&lt;/a&gt; for details on link types. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Delivery Team 1 - Using Dependency Query&lt;/h1&gt;
&lt;p&gt;Delivery team 1 has opted to create one Story Enabler work item for the Raptor v1 engine they need from the Build Engines team and link it to the &lt;strong&gt;1-stage&lt;/strong&gt; Feature (489406), as shown above. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - The delivery team &lt;strong&gt;1&lt;/strong&gt; creates the dependency work item, collaborates with the common services &lt;strong&gt;Engines&lt;/strong&gt; team, and once the requirements are clearly defined the work item is &lt;strong&gt;pulled&lt;/strong&gt; by the common services team to their backlog. Teams only create work items on their own backlogs and never &lt;strong&gt;push&lt;/strong&gt; work items to other backlogs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog 1" src="../images/azure-devops-dependencies-3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at their team backlog there is no visual evidence of the Raptor v1 engine dependency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query" src="../images/azure-devops-dependencies-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team uses a &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/wiql-syntax?view=azure-devops"&gt;WIQL Query&lt;/a&gt; to track and manage their and other team dependencies.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query Edit" src="../images/azure-devops-dependencies-5.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The dependency query is using the &lt;strong&gt;Work Items and direct links&lt;/strong&gt; query type and looks for &lt;strong&gt;predecessor&lt;/strong&gt; link type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;QUERY-BASED DEPENDENCY TRACKING&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PROS&lt;/li&gt;
&lt;li&gt;Their backlog and board only show what they, as team 1, are responsible to deliver.&lt;/li&gt;
&lt;li&gt;There is no noise or &lt;strong&gt;waste&lt;/strong&gt; on their Kanban board.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their dependency query has a consistent look &amp;amp; feel as their backlog view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CONS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Their backlog and board show no visual cue of the Raptor v1 engine dependency. 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Delivery Team 2 - Using Dependency Work Items&lt;/h1&gt;
&lt;p&gt;Delivery team 2 has opted to create a dependency work item (489410) and a Story Enabler (489417) work item for the Raptor v2 engine they need from the Build Engines team. The dependency work item (489410) is used as a placeholder work item on the team's backlog linked to the Story Enabler (489417) which is pulled by the Engines Common Services team to their backlog. They use the same placeholder+dependency pair process to add the Booster's dependency on Merlin engines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog 2" src="../images/azure-devops-dependencies-6.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at team 2's backlog, we note the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dependency work item (489410) for v2 Raptor engine is on the backlog, linked as a child to 2-stage Feature (489407).&lt;/li&gt;
&lt;li&gt;Raptor v2 engine Story Enabler (489417) is gone - pulled to the Engine team's backlog.&lt;/li&gt;
&lt;li&gt;Dependency work item (489411) for Merlin engine is on the backlog, linked as a child to Booster Feature (489408).&lt;/li&gt;
&lt;li&gt;Merlin engine Story Enabler (489419) is still on the team 2 backlog, which implies that the common services Engine team is not able to commit to the work item yet.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Board 2" src="../images/azure-devops-dependencies-7.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Switching to the &lt;strong&gt;Feature&lt;/strong&gt; board view, we have a visual cue on both the 2-stage and Booster cards that they have dependencies. Users can click on the dependencies to get more detail and to follow the dependency links.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dependency Extension" src="../images/azure-devops-dependencies-10.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team also uses the optional &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; extension to get visual information on their dependencies, timelines, and risks. The extension is not for the faint hearted but delivers phenomenal dependency details when used currently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CARD-BASED DEPENDENCY TRACKING&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PROS&lt;/li&gt;
&lt;li&gt;Their backlog and board show what they &lt;strong&gt;and&lt;/strong&gt; common services teams are responsible to deliver.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their backlog and board show visual cues of the Raptor v2 and Merlin engine dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CONS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;We need a custom dependency work item type.&lt;/li&gt;
&lt;li&gt;There is noise and &lt;strong&gt;waste&lt;/strong&gt; on their Kanban board for work their team is not responsible for.&lt;/li&gt;
&lt;li&gt;While common services team are unable to commit, we have two (often confusing) cards on the backlog for each dependency.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="NOTE" src="../images/azure-devops-dependencies-13.png"&gt;&lt;/p&gt;
&lt;p&gt;Personally I prefer how team 1 deals with their dependencies. It is simple, it avoids the noise and complexity of custom and multiple dependency cards and can be combined with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; extension or the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plans&lt;/a&gt; to create visual cues.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Common Services Team - Building Rockets&lt;/h1&gt;
&lt;p&gt;Let us switch focus to the common services Azure DevOps project and the &lt;strong&gt;Engines&lt;/strong&gt; team.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Backlog" src="../images/azure-devops-dependencies-12.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at their backlog we see the two Raptor engine Story Enablers (489417, 489418) dependencies and a Spike. They could use &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/queries/add-tags-to-work-items?view=azure-devops"&gt;Tags&lt;/a&gt; to create visual cues that two of the work items are dependencies, or they too could consider a custom Dependency work item type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Query" src="../images/azure-devops-dependencies-8.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using a similar WIQL query as the delivery team 2, as above, the Engines team visualize and manage their dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Delivery Plan" src="../images/azure-devops-dependencies-9.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last, but not least the team uses a &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; to visualize their Feature and Requirement backlogs, as well as those of the teams they serve. The Delivery Plan provides provide an interactive visual view of multiple team backlogs and the dependencies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - The Delivery Plan only draws a dependency line for dependencies which has both the successor and predecessor cards visually shown on the plan.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Other extensions to consider include the &lt;a href="https://marketplace.visualstudio.com/items?itemName=solidify.solidify-scale"&gt;@Scale&lt;/a&gt; extension, which delivers a program board on steroids.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Summary of recommended approach&lt;/h1&gt;
&lt;p&gt;&lt;img alt="NOTE" src="../images/azure-devops-dependencies-13.png"&gt;&lt;/p&gt;
&lt;p&gt;Personally I prefer how the &lt;strong&gt;Delivery Team 1 - Using Dependency Query&lt;/strong&gt; defines their dependencies. Here is a high-altitude overview of their process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delivery team identifies a dependency X (Merlin engine) in feature A (booster).&lt;/li&gt;
&lt;li&gt;Delivery team opens feature A and runs dependency &lt;a href="https://marketplace.visualstudio.com/items?itemName=mohitbagra.witoneclickactions"&gt;one-click&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Merlin engine is the &lt;strong&gt;predecessor&lt;/strong&gt; (must be done first)&lt;/li&gt;
&lt;li&gt;Booster is the &lt;strong&gt;successor&lt;/strong&gt; (must be done after Merlin engine)&lt;/li&gt;
&lt;li&gt;One-click creates work item X&lt;/li&gt;
&lt;li&gt;Adds &lt;strong&gt;parent-child&lt;/strong&gt; to Feature (parent) &lt;/li&gt;
&lt;li&gt;Adds &lt;strong&gt;successor/predecessor&lt;/strong&gt; link to Feature (successor)&lt;/li&gt;
&lt;li&gt;Team collaborates with common services &lt;strong&gt;Engines&lt;/strong&gt; team to define the WHAT, WHY, and WHEN in X.&lt;/li&gt;
&lt;li&gt;Actionable description.&lt;/li&gt;
&lt;li&gt;Realistic acceptance criteria.&lt;/li&gt;
&lt;li&gt;Information on WHEN and priority.&lt;/li&gt;
&lt;li&gt;When common services team is ready to commit, they pull the work item X to their backlog.&lt;/li&gt;
&lt;li&gt;Everyone should "Follow" the work item to be notified of changes.&lt;/li&gt;
&lt;li&gt;Common services optionally changes work item to be parented to one of their Features.&lt;/li&gt;
&lt;li&gt;At this time the work item X vanishes off the backlog as a work item on delivery side.&lt;/li&gt;
&lt;li&gt;Once assigned to an iteration, the work item X will appear on the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt; showing the delivery and common services teams.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;SIMPLE&lt;/strong&gt; and no duplicate or confusing cards.&lt;/p&gt;
&lt;p&gt;Everyone then uses the dependency queries we covered herein, and/or &lt;a href="https://marketplace.visualstudio.com/items?itemName=solidify.solidify-scale"&gt;@Scale&lt;/a&gt;, and/or &lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/plans/add-edit-delivery-plan?view=azure-devops"&gt;Delivery Plan&lt;/a&gt;, and/or &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-eswm.dependencytracker"&gt;Dependency Tracker&lt;/a&gt; to visualize extension.&lt;/p&gt;
&lt;p&gt;How are you dealing with dependencies in Azure DevOps? &lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category></entry><entry><title>Trunk-based branching strategy without the bells and whistles</title><link href="https://wsbctechnicalblog.github.io/branching-trunk-based.html" rel="alternate"></link><published>2022-09-02T00:00:00-07:00</published><updated>2022-09-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-09-02:/branching-trunk-based.html</id><summary type="html">&lt;p&gt;Keeping it simple and avoiding the soul quenching politics&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pickup from the &lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt; virtual chat, where we discussed &lt;a href="/pull-requests-friend.html"&gt;pull requests&lt;/a&gt; and briefly touched on trunk-based development. This article is based on a script I prepared for an upcoming innovation workshop, where we will lift the bonnet to explore our blueprints and&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Why" src="/images/branching-trunk-based-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is one of many branching strategies, our recommended strategy, and the norm with our &lt;a href="./yaml-pipelines-part10.html"&gt;application-type blueprint&lt;/a&gt;-based pipelines to enable &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Reasons" src="/images/branching-trunk-based-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By merging &lt;strong&gt;small&lt;/strong&gt; and &lt;strong&gt;frequent&lt;/strong&gt; updates (short-lived feature branches) to a core &lt;strong&gt;trunk&lt;/strong&gt;, master, or main branch, we streamline merging, integration of code, enable continuous integrations, automated tests, continuous code reviews, and automated validations. We guard the trunk to maintain a &lt;strong&gt;green&lt;/strong&gt; source of truth, ready to deploy at any commit.&lt;/p&gt;
&lt;p&gt;Trunk-based development is a proven and common practice among high-performing DevOps teams, often complemented by feature flags and/or ring-deployments to deploy continuously and release on demand – our future vision. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trunk" src="/images/branching-trunk-based-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We start with a trunk, that has a hypothetical version of MAJOR 0, MINOR 1, and PATCH 0, aka &lt;strong&gt;0.1.0&lt;/strong&gt;. At some point we create a feature branch to build a new feature and another feature branch to address a bug.&lt;/p&gt;
&lt;p&gt;When we are ready to deploy we merge our changes back to the &lt;strong&gt;stable&lt;/strong&gt; trunk. As discussed in &lt;a href="/branching-pull-request.html"&gt;Why we use pull requests with our trunk-based branching strategies&lt;/a&gt;, we are stopped by the branch policies that demand a code review by one or more reviewers, closed comments, linked work items, a clean validation build, and healthy code and security scans.&lt;/p&gt;
&lt;p&gt;We could, but we will not, argue that with trunk-based development we should be able to commit directly to the &lt;strong&gt;trunk&lt;/strong&gt;. Theoretically &lt;strong&gt;yes&lt;/strong&gt; - if we are part of a high-performance and high-trust team we can commit &lt;strong&gt;directly&lt;/strong&gt; to the trunk, however, in my 35+ years of engineering I have had the privilege of working for such a team two or three times.have a small, mature, and experienced team that &lt;strong&gt;trusts&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;When our code has been proven GREEN the changes are merged to the trunk and versioned 0.1.1, followed by the bug fix changes, versioned 0.1.2.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Release branch&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Trunk+Release" src="/images/branching-trunk-based-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we are ready to deploy, we create a label and a release branch from the label, which triggers our continuous integration and delivery pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hotfix-1" src="/images/branching-trunk-based-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After we deploy to production the unthinkable happens ... we detect a bug! &lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;not&lt;/strong&gt; serious, we add it to our technical debt and to be fixed with the next feature work.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Hotfix - Option 1&lt;/h1&gt;
&lt;p&gt;If &lt;strong&gt;serious&lt;/strong&gt;, we create a HOTFIX on the trunk and merge it back to the release branch, which in turn triggers another production deploy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that you can perform the merge to trunk and the release branch with one pull request, using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=1ESLighthouseEng.pr-multi-cherry-pick"&gt;PR Multi-Cherry-Pick&lt;/a&gt; extension, developed by the Microsoft Office team. This tool allows you to use the git cherry-pick operation to apply changes to multiple branches.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Hotfix - Option 2&lt;/h1&gt;
&lt;p&gt;Another option is to apply the hotfix to the release branch and then merge it back to &lt;strong&gt;trunk&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Hotfix-2" src="/images/branching-trunk-based-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which option is better? You decide and you pick your strategy!&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;trunk-based&lt;/strong&gt; branching strategy is straight-forward, well-suited for the 2-pizza sized product team, and lays a solid foundation for our quest for continuous delivery and release on demand. &lt;/p&gt;
&lt;p&gt;Remember, as with everything else, keep it &lt;strong&gt;SIMPLE&lt;/strong&gt;!&lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="version-control"></category></entry><entry><title>Automation and the great unknown</title><link href="https://wsbctechnicalblog.github.io/automation-task-group-learning.html" rel="alternate"></link><published>2022-08-05T00:00:00-07:00</published><updated>2022-08-05T00:00:00-07:00</updated><author><name>Daniel Broderick</name></author><id>tag:wsbctechnicalblog.github.io,2022-08-05:/automation-task-group-learning.html</id><summary type="html">&lt;p&gt;Inadvertently restricting access to thousands of pipelines with a simple automated task group insertion.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The problem: How can the security team run all the tasks like the scans they need to run? &lt;/p&gt;
&lt;p&gt;The idea was simple inject an empty security review task group into the release pipelines, the security team can update the task group whenever they please. Providing a central location for the security items. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Simple idea" src="../images/automation-task-group-learning-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Automation to the rescue&lt;/h1&gt;
&lt;p&gt;The automation was written, fired off by a YAML pipeline and the empty task group was injected. Over 3000 pipelines were updated. The injection automation runs weekly to inject the task group to any new pipelines that may be created.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Automation 2 the rescue" src="../images/automation-task-group-learning-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the REST API all that had to be done was create the JSON payload and send it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
    &amp;quot;environment&amp;quot;: {},
    &amp;quot;refName&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;enabled&amp;quot;: true,
    &amp;quot;alwaysRun&amp;quot;: true,
    &amp;quot;taskId&amp;quot;: &amp;quot;$TaskGroupID&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.*&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;$TaskGroupName&amp;quot;,
    &amp;quot;continueOnError&amp;quot;: true,
    &amp;quot;timeoutInMinutes&amp;quot;: 0,
    &amp;quot;retryCountOnTaskFailure&amp;quot;: 0,
    &amp;quot;definitionType&amp;quot;: &amp;quot;metaTask&amp;quot;,
    &amp;quot;overrideInputs&amp;quot;: {},
    &amp;quot;condition&amp;quot;: &amp;quot;succeededOrFailed()&amp;quot;,
    &amp;quot;inputs&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Job done – or so it was thought.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Users cannot edit&lt;/h2&gt;
&lt;p&gt;The team got a call a few weeks later that some users could no longer edit their releases, there was an error saving due to an issue with the security review stage.&lt;/p&gt;
&lt;p&gt;How strange? Users could edit before, a quick check of the permissions yield no results as to why. &lt;/p&gt;
&lt;p&gt;After working with a user we discovered the steps that allowed editing and steps to invoke the error. &lt;/p&gt;
&lt;p&gt;What was not known at this stage was why. What was causing this? The security review task group was working, the release pipeline was working. Saving – nope.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Exporting and comparing&lt;/h2&gt;
&lt;p&gt;The pipeline JSON definition was exported before and after changes that enabled users to edit – low and behold a variable that the security team were using in one of the tasks was a parameter in the task group. This was not present when injecting the empty security task group.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;The automation was not injecting this parameter into the definition. This caused the error when certain users saved. The automation was Injecting an empty task group though this task group was no longer empty. &lt;/p&gt;
&lt;p&gt;The automation needed to reflect this. &lt;/p&gt;
&lt;p&gt;A quick edit of the automation and users are back in business.&lt;/p&gt;
&lt;p&gt;Below one can see the input field that is required when using the REST API.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;environment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;taskId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$TaskGroupID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$TaskGroupName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;refName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alwaysRun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;continueOnError&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timeoutInMinutes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;retryCountOnTaskFailure&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;definitionType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;metaTask&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;overrideInputs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;succeededOrFailed()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;inputs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;variableName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;variableValue&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Lesson learnt&lt;/strong&gt;, anytime a new variable or parameter is required the automation will have to be modified to add this input in.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Back to happy customers!!!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy Customers" src="../images/automation-task-group-learning-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This goes to show that automation and improvement is a continuous process. It would have been easy to abandon the automation and go back to what works. With any automation there will be bumps in the road however it’s important to navigate past these. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy automation" src="../images/automation-task-group-learning-4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Happy automation!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="automation"></category><category term="learning"></category><category term="tips"></category><category term="azure-devops"></category></entry><entry><title>Automation Mayhem and Angst is normal</title><link href="https://wsbctechnicalblog.github.io/automation-churn-and-angst.html" rel="alternate"></link><published>2022-07-29T00:00:00-07:00</published><updated>2022-07-29T00:00:00-07:00</updated><author><name>Willy Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-07-29:/automation-churn-and-angst.html</id><summary type="html">&lt;p&gt;Doing a manual and mind-numbing task twice or more? Automate!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The simplest form of automation replaces meek, rudimentary, and manual tasks with digitized processes. While automation is part of the deoxyribonucleic acid (DNA) of a healthy DevOps mindset, we should continue to “strive to innovate and improve beyond repeatable processes and frameworks” – &lt;a href="https://www.tactec.ca/devops-core-values"&gt;Core DevOps Values&lt;/a&gt;. Therefore, instead of focusing on examples of automation we have introduces to help us maintain 2000+ continuous delivery pipelines and associates services, I will focus on the emotional side of automation in this brief post. The automation samples and “gotchas” will follow soon.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Angst Chart" src="../images/automation-churn-and-angst-3.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Brace yourself for instability and churn&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Churn" src="../images/automation-churn-and-angst-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After we identify, analyze, and prioritize a manual and mind-numbing task we &lt;strong&gt;BUILD&lt;/strong&gt; our automation code, as shown in the “Automation Angst” illustration. After &lt;strong&gt;BUILD&lt;/strong&gt;, follows &lt;strong&gt;VALIDATE&lt;/strong&gt;, during which we validate the automation script, the pre- and post-automation state, and the overall outcome of the automation exercise. &lt;/p&gt;
&lt;p&gt;There is usually an initial spike of churn as the automation &lt;strong&gt;failures&lt;/strong&gt; due to unexpected outliers or when we realize that a task that is super easy for a human is a not suited for our binary machines.&lt;/p&gt;
&lt;p&gt;What follows are a few less dramatic spikes as we revise and fine &lt;strong&gt;TUNE&lt;/strong&gt; the automation. There are new feature requests, triggered by new improvement ideas, refactoring, and revisions to reduce technical debt – until we finally make the &lt;strong&gt;GO-FOR-LAUNCH&lt;/strong&gt; call.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Turn it off" src="../images/automation-churn-and-angst-3.png"&gt;&lt;/p&gt;
&lt;p&gt;This type of Microsoft Teams chat message is not uncommon as you flip the automation from dormant to active and it is tempting to disable the automation as requested. However, to be able to fine tune the automation, I urge you not to flip the switch back to dormant. Instead work with the stakeholders, especially the agitated ones, to continuously improve the automation – there is never a good time to action the automation churn! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNINGS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remain critical&lt;/strong&gt; to identify and promote the automation that add value, and to deprecate unviable automation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not despair&lt;/strong&gt; when automation takes time and effort to fine-tune and integrate into our existing processes. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;“Angst” that will never really go away&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Angst" src="../images/automation-churn-and-angst-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The major turbulence we experience while working on process automation is the “Angst” when we realize the potential of the automation on our operational environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Oops" src="../images/automation-churn-and-angst-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As highlighted in the "Automation Angst” illustration the fear of &lt;strong&gt;FAILURE&lt;/strong&gt; spikes at the start and declines gradually as we make progress with fine-tuning and continuous improvement of our automation. The Angst is normal - embrace it as your guardian of built-in quality and embrace the continuous &lt;strong&gt;FAILURES&lt;/strong&gt; to advance your automation.&lt;/p&gt;
&lt;p&gt;While I have no recipe for sleepless nights where you mull over thousands of lines of config-as-code, wake up in a sweat dreaming of scrum masters and engineers pounding on your door after breaking their pipeline, or pondering over when to click the launch button, I can reassure you that my entire team is still intact and promoting automation as a pivotal pillar. At some point you simply have to click on the &lt;strong&gt;ENTER&lt;/strong&gt; button and watch the action q-;) &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LEARNINGS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FAILURE is an option here. If things are not failing, you are not innovating enough.&lt;/strong&gt; - Elon Musk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gradually increase the blast radius&lt;/strong&gt;. Use feature flags or other strategies to gradually increase the area of impact (blast radius) of your automation. The &lt;strong&gt;big bang&lt;/strong&gt; strategy is not only bold, but mote t minimizes your chance to continuously automate, observe, learn, and refine.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What are your automation experiences?&lt;/h1&gt;
&lt;p&gt;What are your automation stories? I am looking for the good, the bad, and the ugly 😊 Ping me on &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/wpschaub/"&gt;LinkedIN&lt;/a&gt; until we enable the commenting feature below.&lt;/p&gt;</content><category term="Posts"></category><category term="automation"></category><category term="learning"></category></entry><entry><title>Stop the email overload!</title><link href="https://wsbctechnicalblog.github.io/stop-the-email-hell.html" rel="alternate"></link><published>2022-05-27T00:00:00-07:00</published><updated>2022-05-27T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-05-27:/stop-the-email-hell.html</id><summary type="html">&lt;p&gt;Our quest to optimize email and associated WASTE&lt;/p&gt;</summary><content type="html">&lt;p&gt;Email was born around 1978 and has been the backbone of communication ever since. Unfortunately, when you start to &lt;a href="/optimize-and-track-emails.html"&gt;track&lt;/a&gt; your actual email volume or consider options to &lt;a href="/optimize-and-avoid-emails.html"&gt;optimize&lt;/a&gt; after a well deserved vacation, you realize that enough is enough. Similar to &lt;a href="/stop-the-meeting-hell.html"&gt;stop the meeting overload&lt;/a&gt; we will discuss strategies to optimize your use of email and reduce the amount of email and &lt;strong&gt;WASTE&lt;/strong&gt; thereof.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt;? Well, I receive an average of 154 emails per working day. I have time to read about 20%, skimming the rest as I context switch between meetings, work, and breaks. &lt;strong&gt;NOT&lt;/strong&gt; efficient!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Communication" src="../images/stop-the-email-hell-0.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;A few email anti-patterns to avoid at all costs!&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Communication" src="../images/stop-the-email-hell-1.png"&gt;&lt;/p&gt;
&lt;p&gt;As discussed in &lt;a href="TBD"&gt;Navigating DevOps through Waterfalls&lt;/a&gt;, act 4 STORM - Building a better Boat, communication complexity becomes unproductive and &lt;strong&gt;WASTE&lt;/strong&gt;ful as the number of members in the collaboration thread increases. Looking at the simple illustration above, it is evident that five or more members introduces duplication, split (separate) discussions, inherent quality issues, a flood of emails that impedes our productivity.&lt;/p&gt;
&lt;p&gt;Let us look at some email practices you should avoid to drastically reduce the amount of collaboration &lt;strong&gt;noise&lt;/strong&gt; for your colleagues.&lt;/p&gt;
&lt;h2&gt;The duplicate and split email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Duplicate and Split" src="../images/stop-the-email-hell-2.png"&gt;&lt;/p&gt;
&lt;p&gt;When you send an email to a shared mailbox, as shown above, you may inadvertently send an email to Willy in his private mailbox and an email through the shared mailbox. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Duplicate and Split Noise" src="../images/stop-the-email-hell-2b.png"&gt;&lt;/p&gt;
&lt;p&gt;A minor annoyance, but also an unfortunate opportunity to create a split in collaboration, or worse duplication of effort if the team reacts to the message in the shared mailbox and Willy to the message in his mailbox.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #1&lt;/strong&gt; - **When addressing an email to a shared mailbox, do not add individual users of the same team!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The planetary email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Planetary" src="../images/stop-the-email-hell-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Avoid sending an email to hundreds of users using broad distribution lists without discouraging reply-all.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Planetary Noise" src="../images/stop-the-email-hell-3b.png"&gt;&lt;/p&gt;
&lt;p&gt;If only a fraction of recipients "reply all" you inadvertently create a brushfire of split collaboration threads and an inbox from hell for everyone. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #2&lt;/strong&gt; - Think twice before "replying all" to an email with one or more distribution lists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The meta morphed email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Problem X" src="../images/stop-the-email-hell-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Recognize this type of email response? "&lt;em&gt;Thank you for your help. I have another question ...&lt;/em&gt;" - completely unrelated to the email subject. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Problem Y with Subject X" src="../images/stop-the-email-hell-4b.png"&gt;&lt;/p&gt;
&lt;p&gt;Not only is this confusing but creates a major headache when searching for an email with the solution to the subsequent discussions months later. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #3&lt;/strong&gt; - Stick to the subject! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The empty subject email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Empty Subject" src="../images/stop-the-email-hell-5.png"&gt;&lt;/p&gt;
&lt;p&gt;It happens to all of us, but please try not to send an email with no subject.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty Subject" src="../images/stop-the-email-hell-5b.png"&gt;&lt;/p&gt;
&lt;p&gt;Not only is it bad email etiquette, but it breaks email rules and workflow automation, forcing the recipient to read the email to get an idea of context and priority.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASK #4&lt;/strong&gt; - Use meaningful and actionable email subjects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The fire and forget email&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Fire and forget" src="../images/stop-the-email-hell-6.png"&gt;&lt;/p&gt;
&lt;p&gt;The last example is one that I have started to intentionally deprioritize, and I urge everyone to do the same. User encounters an issue, for example, user is unable to deploy latest release, and decides to send us an email to ask for help. For good measure user also loops in management, after which user disappears (coffee break, lunch, or end-of-day).&lt;/p&gt;
&lt;p&gt;The result is a firestorm with everyone wanting to understand the issue, resolution, and status. Instead of focus on finding the root cause and a speedy remediation, we are shrouded by stress, context switching, duplication of effort, and a work:life imbalance that will taint any future vibrant collaboration.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;A few collaboration strategies that work for us&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Options" src="../images/stop-the-email-hell-7.png"&gt;&lt;/p&gt;
&lt;p&gt;As a team, we looked at three options. (1) No more email, (2) less email, and (3) using different collaboration channels. We opted for a hybrid option, generating less email, and switching to Microsoft Teams for all our team internal and immediate stakeholder collaboration. Essentially we are trying to replicate the in-person environment where we used to have a quick chat on a whiteboard, made our own notes (OneNote, Notepad, ...), and seldom used email to collaborate with stakeholders in our line of sight.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Some users love, some hate email. Some users love, some hate Teams. It is a personal preference - find the sweat spot for your &lt;strong&gt;team&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are three of our core collaboration guardrails:&lt;/p&gt;
&lt;h2&gt;Use email for broad one-way notifications&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Options" src="../images/stop-the-email-hell-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Use email for broad notifications, clearly stipulating that recipient(s) should &lt;strong&gt;not&lt;/strong&gt; reply-all.  &lt;/p&gt;
&lt;h2&gt;Use email where process dictates&lt;/h2&gt;
&lt;p&gt;Use email where an existing process dictates the use of email or is optimized for the use of emails.&lt;/p&gt;
&lt;h2&gt;Use teams collaboration for everything else&lt;/h2&gt;
&lt;p&gt;For everything else, use another collaboration channel, such as Microsoft Teams. &lt;/p&gt;
&lt;p&gt;Email promotes costly context switches. Send email, wait for response, switch context, focus on something else, response email notification, and another context switch is triggered. Interruptive, costly, and stressful!&lt;/p&gt;
&lt;p&gt;In comparison Microsoft Teams gives use a cue if you are available, busy, or out of the office. Gone are the guessing days and impatiently waiting for a reply. Instead, we can ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a chat to exchange ideas, share video to add virtual (v) face to vFace social cues, and share our desktops or a virtual whiteboard to inject visual feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Use named Team Chats and Teams Channels to focus collaboration on a specific context and improve discoverability of shared content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Easily share files, data, and knowledge, stored on SharePoint.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; - Share files by reference, not a copy thereof. This allows everyone part of the collaboration to revise and observe the content real-time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search for discussions and content in one place. Gone are the days of brittle and time-consuming Outlook searches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate Microsoft Teams with Microsoft PowerApps, Azure DevOps, and other 3rd party products, to create an efficient collaboration ecosystem that empower us to move forward &lt;strong&gt;together&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope you enjoyed this quick chat. Good luck optimizing your &lt;a href="/stop-the-meeting-hell.html"&gt;meetings&lt;/a&gt; and &lt;strong&gt;collaboration&lt;/strong&gt; - focus on what is important!&lt;/p&gt;
&lt;p&gt;Please share your thoughts on email, Microsoft Teams, and other collaboration solutions.&lt;/p&gt;</content><category term="Posts"></category><category term="eliminate-waste"></category></entry><entry><title>Can government agencies be innovative?</title><link href="https://wsbctechnicalblog.github.io/can-government-agencies-be-innovative.html" rel="alternate"></link><published>2022-05-24T13:13:00-07:00</published><updated>2022-05-24T13:13:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-05-24:/can-government-agencies-be-innovative.html</id><summary type="html">&lt;p&gt;How WorkSafeBC changed my perception.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was a sunny day in July 2018, when I found myself standing on Westminster Highway, gazing at the WorkSafeBC entrance sign. &lt;/p&gt;
&lt;p&gt;&lt;img alt="WSBC" src="../images/can-government-agencies-be-innovative-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Performing the 4x4x4x4 breathing technique, I was calming myself down to be focused.  After years of working as a consultant at government agencies, including in Bahrain and Kuwait, I was at two minds whether to show up for the interview at the provincial agency. To me, government contracts smell of rigid management, mind-numbing processes, regulations, lackluster and non-innovative engineering – right?&lt;/p&gt;
&lt;p&gt;I started my career as an electrical engineer and fell in love with programming when I was introduced to debugging assembler code at the hardware level and spent my weekends tinkering with my &lt;a href="https://en.wikipedia.org/wiki/Zilog_Z80"&gt;ZX Spectrum&lt;/a&gt; at home in the early 80s. My career was a mind-blowing adventure of more processes and products that I can remember, such as Assembler, Basic  , Cobol, C++, C#, Fortran, and PL/M programming, analysis, design, research, and management, with a strong focus on being an individual contributor – an engineer at heart.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Engineering is the closest thing to magic that exists in the world." ~ Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In early 2018, after a phenomenal 9-year stint at Microsoft, I was burnt-out. My passion for technology, energy, and health were at an all-time low. I opted for a personal sabbatical and switched off all electronic devices for 6 months, focusing on my family, the stunning beauty of British Columbia, and a pile of unread books.&lt;/p&gt;
&lt;p&gt;By July, I started to get restless as my passion for bits and bytes began to reboot my systems and   working on my work:life balance. At the same time, I got a call from a local vendor, looking for an experienced Scrum Master for WorkSafeBC. I walked past the entrance sign, up the parking lot hill, walked past the concrete complex, and signed in at the main reception.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agent9" src="../images/can-government-agencies-be-innovative-2.png"&gt; &lt;/p&gt;
&lt;p&gt;The interview was not what I expected. Instead of formality, I enjoyed a behavioural and informal interview. I met Agent of Change #9 from &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; for the first time, as well as a manager that not only contradicted my perception of government organizations but pivoted from the Scrum Master role to Cloud Systems Engineering – very Agile! On my way back to the main reception I was mesmerized by a poster with WorkSafeBC’s noble vision: “&lt;em&gt;British Columbians free from workplace injury, disease, and death.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;Less than a month later, I joined the Cloud Operations team and found myself in an environment buzzing with an Agile and emerging DevOps mindset, and one that had an open ear for many of the improvement ideas I shared with engineering and management.  I became an advocate for simplicity, chiseling at complex, expensive and manual processes, expecting to be shown the main entrance door sooner than later. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Simplicity is a great virtue, but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.” – Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast forward 1.5 years and I joined the organization full-time. Other than benefits and payroll, nothing changed  . I was empowered to start the common engineering idea on the side of my desk, continuously experimenting, innovating, and collaborating across the organization   through informal working groups and communities of practice. &lt;/p&gt;
&lt;p&gt;Agile and DevOps transformations, Scaled Agile Framework (SPC), SAFe DevOps, Azure and Azure DevOps services, Visual Studio, PowerShell, continuous integration and delivery automation, shift-left, shift-right, guardrail stewardship, collaborate on manifestos, working groups, dojos, communities of practice, centers of enablement, config-as-code, pipeline-as-code, automating everything automatable, reducing waste, optimizing meetings, writing blogs, articles, and even co-authoring a book was a sprinkle of the amazing exposure to people, process, and products I enjoyed during this period.  &lt;/p&gt;
&lt;p&gt;I also had the privilege of completing the emerging leadership program. What I learned about myself during the program was both thrilling and chilling. I was flabbergasted by how others viewed me. I received lots of positive feedback, but it was the candid feedback that revealed unsettling challenges that had played a major role in my 2018 burnout - my obsession to be a perfectionist, my inability to achieve a work/life balance, and my acute allergy for command&amp;amp;control micro-managers. During the program, and especially in my final assignment, I highlighted the need for more collaboration, trust, the willingness to fail, and to create a fun working environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Failure is an option here. If things are not failing, you are not innovating enough." - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast-forward another 1.5 years, I find myself working with colleagues who are embracing Agile, continuously working on its DevOps mindset, moving from a project to a product approach, inspiring continuous learning, continuous improvement, continuous experimentation, and encouraging everyone to embrace failure as an opportunity to reflect and learn. Vibrant collaboration, forward-thinking, and innovation have become the norm. It is gratifying to see leadership   not only actioning industry trends and driving the bottom line, but actively listening to its people. &lt;/p&gt;
&lt;p&gt;Today, I am leading the now official Enterprise Development and Operations (EDO) Common Engineering team, filled with passionate, exceptionally smart, and down-to-earth engineers, collaborating with management that walks-the-talk, trusts, and supports our drive for simplicity, consistency, security, empowerment, and unrestricted collaboration to continue to build connections. Around me, I have observed     a growth in servant leaders, who appreciate the value of people and the importance of collaboration and empowering everyone to become a leader. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Bosses demand respect, delegate and hold people accountable. Leaders collaborate and hold themselves accountable.” – Willy Schaub&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are an empowered team, focused and serious when we must be, brainwashed by SpaceX and Elon’s infamous quotes (my doing), always reminding each other of our quest for a healthy work:life balance and the importance of having fun.  You can peruse Why are we a (the) place to work for? to get an insight into our team.&lt;/p&gt;
&lt;p&gt;I recently stood at the same spot, looking at the entrance sign. It dawned on me that a mere 3.5 years has passed. The phenomenal change is not only exciting but obliterates any doubts and concerns I had when I was calming myself down for my interview. I see how our innovation and technology work not only supports our overall  organizational vision but will take us places we may not have dreamt of.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“As a leader I want to serve and protect my team, and encourage and empower everyone’s creativity, passion, purpose, and strengths. I want to leave an empowered team and not be missed.” – Willy Schaub&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="journal"></category><category term="learning"></category></entry><entry><title>Improving DORA metrics</title><link href="https://wsbctechnicalblog.github.io/improving-dora-metrics.html" rel="alternate"></link><published>2022-04-29T13:13:00-07:00</published><updated>2022-04-29T13:13:00-07:00</updated><author><name>Shay Vannery</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-29:/improving-dora-metrics.html</id><summary type="html">&lt;p&gt;We would like to plan how to track and empower engineering to increase deployment frequency, and reduce lead time for change, MTTR, and change failure rates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Streamlining software delivery can seem deceptively simple. Technology consultants (like myself) are quick to tout the trending new tool or methodology that can magically solve all of an organization’s woes. Though tools, automations and practices can help to a large extent, there is no alternative to holistically and critically examining one’s own organizational practices and value streams.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;1.0 Map the value stream for each application&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;value stream&lt;/strong&gt; is the set of actions that take place to add value to a customer from the initial request through realization of value by the customer.&lt;/p&gt;
&lt;p&gt;Every organization has a somewhat unique set of actions that must occur to get a user story from the Ideation phase into the hands of the end-user. This value stream has likely been developed over many years, by several groups of people with differing priorities. It is imperative to examine said value stream periodically to ensure it is free of redundancies; and updated to better fit present-day organizational priorities and goals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Tip&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Applications come in different shapes, sizes and forms. It is worthwhile to re-examine your value streams on an application/ component level; as what works for a highly-visible, complex end-user facing application might be overkill for a simpler, back-end service or job.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;2.0 Measure baseline metrics for each application &amp;amp; set SMART goals&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;What is not measured, cannot be improved.&lt;/strong&gt; What is not improved, is always degraded.&lt;/p&gt;
&lt;p&gt;Before embarking upon an improvement journey, it is critical to examine where we currently stand. The purpose of this baselining activity is to assess current levels, and to be able to articulate where we’re headed; with real quantitative data.  Enthusiastic teams have a tendency to aspire for grandiose goals like “Zero defects in Production”. Though admirable; it is best to set goals that are Specific, Measurable, Achievable, Realistic and Time-bound at this stage.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;3.0 Analyze commonalities and patterns&lt;/h1&gt;
&lt;p&gt;Real data obtained from steps 1.0 and 2.0 above will undoubtedly reveal commonalities and patterns. Some of these may have been obvious; but now we have proof and can make decisions driven by data. This data can help identify bottlenecks and repetitive manual tasks ripe for automation. Such an approach will ensure maximum return on investment.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;4.0 Identifying barriers&lt;/h1&gt;
&lt;p&gt;Now, let’s assume that the organization has bought into the efficacy of DORA metrics; and the teams consider it a worthwhile endeavor to try and improve upon them. 
Each organization and each team must ask themselves some questions. These are just indicative examples:&lt;/p&gt;
&lt;h2&gt;4.1 Deployment Frequency&lt;/h2&gt;
&lt;p&gt;Increasing deployment frequency has its benefits. Teams deploying changes to Production frequently stand to benefit from quicker end-user feedback, quicker detection of bugs and defects, fewer conflicts, and easier recovery from unintended consequences. Reducing batch sizes is the easiest way teams can achieve more frequent deployments. However, this might not be a viable option for (say) monolithic legacy applications. Answering some of these questions could likely reveal the path to increasing deployment frequency:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are we slicing feature stories finely enough? Can we slice them finer?&lt;/li&gt;
&lt;li&gt;Are there application architecture constraints?&lt;/li&gt;
&lt;li&gt;Are there infrastructure/ test environment constraints? &lt;/li&gt;
&lt;li&gt;Are there resource/ staffing constraints?&lt;/li&gt;
&lt;li&gt;Is there a lot of rework happening? Why?&lt;/li&gt;
&lt;li&gt;Any external factors?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Deployment Frequency is by far the easiest metric to measure. This information could be gathered manually at the team level, or in an automated fashion from the deployment pipeline. Task tracking tools like JIRA or Azure Boards have effective tagging, filtering and reporting mechanisms to simplify gathering and disseminating this metric at scale. &lt;/p&gt;
&lt;h2&gt;4.2 Lead time for change&lt;/h2&gt;
&lt;p&gt;There are different ways to scope lead time for change. For the sake of this conversation; let’s assume lead time begins the moment a developer starts working on a change; and ends the moment the change is available to an end-user. Reducing lead time allows an organization to pivot quickly, and act upon changing requirements with agility. Answering some of these questions could help identify barriers to reduce lead times:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;See 4.1.2 &amp;amp; 4.1.3. (architecture/ infrastructure constraints)&lt;/li&gt;
&lt;li&gt;Is the DEV/TEST methodology conducive to quick lead times?&lt;/li&gt;
&lt;li&gt;Is the delivery pipeline automated? Are there further opportunities to automate?&lt;/li&gt;
&lt;li&gt;Are there redundancies in the pipeline?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Change Lead time can be tracked manually at the team level. It can also be broadly measured with the help of the deployment pipeline. If set up correctly, the deployment pipeline can also provide deeper and more granular insights into the lead times at various pipeline stages. &lt;/p&gt;
&lt;h2&gt;4.3 Change Failure Rate (CFR)&lt;/h2&gt;
&lt;p&gt;Change failure rate is the percentage of deployments that lead to downtime, or serious issues in a given time period. The definition of “failure” may vary from team to team. For the sake of this conversation, let’s assume a failed deployment refers to a deployment that had to be rolled back from production, or required a hotfix to resolve a high-severity incident. Though it is easy to guess root cause of failures by relying on anecdotal evidence or gut-feel, it is best to make improvements by asking questions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are testing best practices consistently followed across the SDLC?&lt;/li&gt;
&lt;li&gt;Are test cases comprehensive enough to detect issues in lower environments?&lt;/li&gt;
&lt;li&gt;Are lower environments similar enough to production to allow for reliable test results? &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on how a rollback is initiated, Change Failure Rate can potentially be tracked at the repository level. This would require each hotfix/ remediation build to be labelled as such in (say) GitHub. However, if the rollback protocol is not managed via the deployment pipeline, or if the failure is remediated using a manual hotfix; service management tools like ServiceNow can help record and measure CFR. &lt;/p&gt;
&lt;h2&gt;4.4 Mean Time To Recovery (MTTR)&lt;/h2&gt;
&lt;p&gt;Mean time to Recovery or Mean time to Resolution is the average amount of time required to recover from a failure. For the sake of continuity; let’s define failure as explained in 4.3 (CFR). If the application requires high-availability and high-resiliency, MTTR becomes the most important metric to track and improve. Answering some of these questions could help identify barriers to improving MTTR:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How are issues (errors/ defects/ outages) detected today?&lt;/li&gt;
&lt;li&gt;How are incidents routed to the appropriate resolution teams?&lt;/li&gt;
&lt;li&gt;Do development teams have expected Service Levels objectives and indicators codified?&lt;/li&gt;
&lt;li&gt;Are resolution teams aware of the mitigation protocol?&lt;/li&gt;
&lt;li&gt;Are resolution teams empowered to resolve issues and make quick decisions?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Similar to Change Failure Rate, MTTR can be complex to measure. At the risk of oversimplifying this nuanced process, teams may rely on monitoring and observability platforms to capture the start and end times of an incident. Depending on the nature of the issues; Application Insights within Azure Monitor or even PagerDuty can be leveraged to measure MTTR. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;5.0 Prioritize and eliminate barriers&lt;/h1&gt;
&lt;p&gt;As a proponent of a data-driven decision making culture, I have avoided prescriptive approaches to improving DORA metrics. It is best to contemplate the barriers on a team level, or better still, an application level; and focus on dismantling these barriers in a methodical and purposeful way guided by priority and return on investment. &lt;/p&gt;
&lt;p&gt;That said, most of the identified barriers can likely be classified into the following categories (in order of difficulty):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Skill/Knowledge constraints&lt;/li&gt;
&lt;li&gt;Process constraints&lt;/li&gt;
&lt;li&gt;Budgetary constraints&lt;/li&gt;
&lt;li&gt;Architecture/ Infrastructure limitations&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;6.0 Conclusion&lt;/h1&gt;
&lt;p&gt;It is likely that some of the barriers we encountered can be eliminated by coaching team members on existing organizational protocols and widely accepted engineering best practices around development, testing, deployment, monitoring, error detection and mitigation. Communities of Practice must make continuous learning a key priority, and time must be allocated for learning and teaching.&lt;/p&gt;
&lt;p&gt;If it emerges that changes to processes are required, these changes must be meticulously recorded, observed and measured as an experiment. The results must be peer reviewed and widely distributed within the organization, so as to foster a culture of experimentation and continuous improvement.&lt;/p&gt;
&lt;p&gt;Organizations must examine time and investment budgets and ensure there are appropriate allocations for learning, experimentation, knowledge sharing and technical debt. If required, monolithic applications must be pared down and eventually replaced with micro-services that are conducive to modern-day technological advances. It is now possible to achieve levels of uptime and resiliency that were unheard of even 5 years ago. Let’s work together to ask questions, celebrate successes and failures alike, and continue to deliver exceptional value to our end users on time, every time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Related References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/devops-sre/announcing-dora-2021-accelerate-state-of-devops-report"&gt;2021 Accelerate State of DevOps report addresses burnout, team performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/metrics-importance.html"&gt;Metrics importance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="devops"></category><category term="metrics"></category><category term="eliminate-waste"></category></entry><entry><title>Why are we a (the) place to work for?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-4.html" rel="alternate"></link><published>2022-04-22T00:00:00-07:00</published><updated>2022-04-22T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-22:/common-engineering-journal-4.html</id><summary type="html">&lt;p&gt;Safe and healthy workplaces. Compassionate and responsive service.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I could take a shortcut and refer you to the &lt;a href="https://reviews.canadastop100.com/top-employer-worksafebc"&gt;WorkSafeBC Top Employer 2022&lt;/a&gt; article. It showcases why WorkSafeBC was voted as a top employer in 2022, during the challenging Covid pandemic.&lt;/p&gt;
&lt;p&gt;Instead, I will emphasize the humbling mission that fuels me with energy every day - "&lt;em&gt;Prevent workplace injury, illness, and death, and support injured workers through fair compensation and effective rehabilitation.&lt;/em&gt;" - and introduce WorkSafeBC through the lens of our vibrant &lt;a href="/common-engineering-journal-2.html"&gt;EDO Common Engineering&lt;/a&gt; team.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Through the lens of the common engineering team&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Confused" src="../images/common-engineering-journal-4-3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WIIFM&lt;/strong&gt;? First, you will be part of a team that is curious but despises TLAs (three-lettered acronyms). We prefer the question "&lt;em&gt;what is in it for me&lt;/em&gt;" instead of "&lt;em&gt;WIIFM&lt;/em&gt;" - it is clear and avoids confusion, awkward pauses, and Google'ing. See &lt;a href="/why-i-hate-tlas.html"&gt;Why I loathe when engineers use TLAs, such as CD vs CD!&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We are a diverse family of engineers&lt;/strong&gt;, working in one or more of three functional roles. &lt;strong&gt;Pathfinders&lt;/strong&gt; are engineers that are part of shared services we rotate through software engineering teams to share their experience and bring real-world learnings back to our team. These rotations can last from hours to months, fostering &lt;strong&gt;curiosity&lt;/strong&gt; and &lt;a href="https://medium.com/making-meetup/t-shaped-engineering-on-meetup-pro-1e0a38df7f5b"&gt;T-shaped&lt;/a&gt; engineering. &lt;/p&gt;
&lt;p&gt;Benefits?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collaboration (SILO antidote)&lt;/li&gt;
&lt;li&gt;Continuous learning&lt;/li&gt;
&lt;li&gt;Faster delivery&lt;/li&gt;
&lt;li&gt;Productivity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other functional roles include the delivery of exceptional &lt;strong&gt;Operations&lt;/strong&gt; support and continuous innovation and improvement of our common engineering ecosystem by &lt;strong&gt;Platform Advancement&lt;/strong&gt;. All three functional roles are equally important - 
without a balance, we cannot continuously deliver value!&lt;/p&gt;
&lt;p&gt;&lt;img alt="EDO Ce" src="../images/common-engineering-journal-4-0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Our team is based on leadership at every level&lt;/strong&gt; of the functional role and every member of our crew, encouraged to self-organize and self-manage. We value &lt;strong&gt;autonomy&lt;/strong&gt;, &lt;strong&gt;transparency&lt;/strong&gt;, and &lt;strong&gt;simplicity.&lt;/strong&gt; For example, every engineer is empowered to question a process and experiment by removing steps that appear to add no value. One of our main pillars is &lt;strong&gt;TRUST&lt;/strong&gt; - we trust each other and what we do!&lt;/p&gt;
&lt;p&gt;Benefits?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decentralized management (Micro-management antidote)&lt;/li&gt;
&lt;li&gt;Resilience allowing team to withstand adversities, such as the Covid pandemic.&lt;/li&gt;
&lt;li&gt;Shorter lead and cycle times.&lt;/li&gt;
&lt;li&gt;Simple solutions are easier and cheaper to maintain - engineers can go home earlier and experience less annoying &lt;a href="https://opensource.com/article/18/12/blueprint-team-devops-mindset"&gt;2-AM&lt;/a&gt; calls.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Evolution" src="../images/common-engineering-journal-4-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WorkSafeBC presents a technology heaven for engineers&lt;/strong&gt;. The diverse world of &lt;strong&gt;processes&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;, ranging from the classic to bleeding edge technology, ensures that every engineer is continuously learning and pushing the boundaries of integration. &lt;/p&gt;
&lt;p&gt;Here are some of the exciting &lt;strong&gt;process&lt;/strong&gt; and &lt;strong&gt;product&lt;/strong&gt; adventures planned for 2022 as part of the common engineering ecosystem, sorted from most to least exciting (through my lens):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate everything automatable and empower with Self-Service Automation.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-ca/services/devops/"&gt;Azure DevOps&lt;/a&gt; environment that is based on self-service automation, config- and pipeline-as-code.&lt;/li&gt;
&lt;li&gt;&lt;a href="./moving-hundreds-of-pipeline-snowflakes-part10.html"&gt;Second generation Yet Another Markup Language (YAML)-based Application-Type Continuous Integration (CI)/Continuous Delivery (CD) Pipeline Blueprints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Hypothesis driven development and embrace failure as an opportunity to innovate.&lt;/li&gt;
&lt;li&gt;Embrace cloud native computing (watch this space for a related article by my colleague Sergiy), containerization and orchestration for the right workloads.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-ca/"&gt;Azure Services&lt;/a&gt; and Service Fabric Orchestrator as a development platform.&lt;/li&gt;
&lt;li&gt;More QUALITY, less WASTE!&lt;/li&gt;
&lt;li&gt;Continuous experimentation, viewing failures as an opportunity to learn.&lt;/li&gt;
&lt;li&gt;Behaviour Driven Development (BDD).&lt;/li&gt;
&lt;li&gt;Domain Driven Design (DDD).&lt;/li&gt;
&lt;li&gt;Test-driven Development (TDD).&lt;/li&gt;
&lt;li&gt;Reducing waste and &lt;a href="/stop-the-meeting-hell.html"&gt;optimizing meetings&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;SHIFT &amp;lt;&amp;lt; Left, empowering delivery teams and performing validation scans, such as security, quality, and guardrails, as early as possible.&lt;/li&gt;
&lt;li&gt;SHIFT Right &amp;gt;&amp;gt;, using configuration-as-code and committing to delivery configuration as late as possible.&lt;/li&gt;
&lt;li&gt;People first mindset.&lt;/li&gt;
&lt;li&gt;Vibrant collaboration, creating invaluable bridges and busting SILOs.&lt;/li&gt;
&lt;li&gt;Using animated whiteboard software to create crisp, informative, and fun process and product awareness videos.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Programming Interface (API), Mobile, Performance, and User Interface testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flutter-based mobile apps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Bleeding Edge" src="../images/common-engineering-journal-4-2.png"&gt;&lt;/p&gt;
&lt;p&gt;When you rotate into the role of &lt;strong&gt;Platform Advancement&lt;/strong&gt; you are not only automating everything automatable, running continuous experiments, but also spending a lot of time with &lt;strong&gt;forward&lt;/strong&gt; and &lt;strong&gt;long-term&lt;/strong&gt; thinking. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Smile" src="../images/common-engineering-journal-4-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Crafting tomorrow's world is often a daunting task - however, there is no better feeling to see your idea being launched and creating a smile on every stakeholder's face. &lt;/p&gt;
&lt;p&gt;We have an ambitious vision to empower all engineers and to practice and promote the mindset of &lt;strong&gt;continuous experimentation&lt;/strong&gt; where failure is viewed as a positive opportunity to learn and innovate.&lt;/p&gt;
&lt;p&gt;You will find this and other Elon's quotes all over our blogs, presentations, portals, and documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;Failure is an option here. If things are not failing, you are not innovating enough.&lt;/em&gt;" - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Failure" src="../images/common-engineering-journal-3-5.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Last, but not least - we have the option to work at the &lt;strong&gt;office&lt;/strong&gt;, at &lt;strong&gt;remotely&lt;/strong&gt; from home, or both. Autonomy, self-organization, self-management, and flexibility!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope that this has given you a sneak peek into our team and the world of engineering in our group at WorkSafeBC.&lt;/p&gt;
&lt;h2&gt;We are looking for flexible and passionate engineers&lt;/h2&gt;
&lt;p&gt;Interested in our world? If yes, we currently have position in our &lt;strong&gt;Platform Advancement&lt;/strong&gt; area for an &lt;strong&gt;Software Engineering Practices Lead&lt;/strong&gt; and &lt;strong&gt;Quality Assurance Lead&lt;/strong&gt;. In both cases you would enable our common engineering ecosystem, to shift across multiple disciplines to create a place where the highest standards are maintained, and provide vision, direction, and guardrails (governance). &lt;/p&gt;
&lt;p&gt;Keep an eye on my &lt;a href="https://twitter.com/wpschaub"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/wpschaub"&gt;LinkedIn&lt;/a&gt; channels for posts such as &lt;a href="https://www.linkedin.com/posts/wpschaub_azuredevops-devops-mindset-activity-6889783742718722048-xXaa"&gt;this&lt;/a&gt; for more details on the opportunity. &lt;/p&gt;
&lt;p&gt;Ping me any time - I would love to &lt;strong&gt;collaborate&lt;/strong&gt; with you!&lt;/p&gt;</content><category term="Posts"></category><category term="agile"></category><category term="devops"></category><category term="journal"></category></entry><entry><title>Common Engineering - To Standardize or Not to Standardize, view from a directors point</title><link href="https://wsbctechnicalblog.github.io/standardize-or-not-to-standardize.html" rel="alternate"></link><published>2022-04-06T00:00:00-07:00</published><updated>2022-04-06T00:00:00-07:00</updated><author><name>Andre Kaminski</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-06:/standardize-or-not-to-standardize.html</id><summary type="html">&lt;p&gt;Which is better, standardization or experimentation?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have to admit that I don’t like going shopping, so I leave it mostly to my wife. If I have to go to a store, I want to finish this exercise as quickly as possible, as … I find it boring.&lt;/p&gt;
&lt;p&gt;The biggest frustration I have is when my wife sends me to a supermarket, and suddenly I realize that they changed location of aisles with specific products. This is most probably one of the very few occasions when you can hear me swearing, and where I pray for standardization. Standardization makes our lives so much easier and efficient.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="shopping" src="../images/standardize-or-not-to-standardize-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now I have to navigate through the aisles and shelves, still swearing, trying to find what I have on my list.
But guess what. Sometimes, unexpectedly I get lost in an unknown aisle and find some new ethnic produce that I have never tried. Since I am a risk taker, quite often I discover a new food that extends my cooking abilities and menu horizon (which mostly, but not always, is pleasing to my wife and kids).&lt;/p&gt;
&lt;p&gt;This is actually a great example of benefits and limitations of standardization versus experimentation.&lt;/p&gt;
&lt;p&gt;Standardization allows us to be more efficient and faster in the Cynefin framework parlor - simple or complicated processes. In this case finding a standard product that I have used in the past, and which my wife put on the list, is way easier and faster. However the cost of this efficiency is a loss of creativity. While being focused on collecting what I need, I mostly miss the discovery part.&lt;/p&gt;
&lt;p&gt;Henri Fayol and Henry Ford mastered the standardization and repeatability of processes to perfection. But again, manufacturing of widgets or cars belongs to simple (T-Model) or complicated domains (Tesla).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="manufacturing" src="../images/standardize-or-not-to-standardize-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When it comes to innovation however, this stops working. Rigidity of processes and penalizing those who try to break them, negatively impacts our ability to find new solutions to existing problems.&lt;/p&gt;
&lt;p&gt;So here are two ways to win in the market. One is to be more efficient than competitors, the other is to find a better solution but at the cost of initial speed of delivery. The problem with the former is that you can optimize the process only to certain level after which, you will plateau. You can be efficient only to a point. Although initially you might win over the competitors, eventually they are going to catch up. The optimization of the process has its limits.&lt;/p&gt;
&lt;p&gt;On the other hand, innovation brings intellectual property into the picture, that cannot be easily replicated. Yes, the competitors will eventually catch up where you are right now, but it will take them much longer (think Porter’s strategies). As a matter of fact, if you continue innovating, your competitors will always try to catch up, and will always be behind. Innovation doesn’t have limit, it doesn’t have plateau, as long as you keep inflow of new ideas.&lt;/p&gt;
&lt;p&gt;But there is another problem with innovating - it doesn’t guarantee success. As a matter of fact more that 90% of ideas are not going to work, and most probably will be waste of time. So the effectiveness disappears in a puff of smoke.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="effectiveness" src="../images/standardize-or-not-to-standardize-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, it is the 10% of those ideas that make difference, and elevate the companies to the top. This is not just linear growth, but rather exponential rocket launch pad.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="phone in hand" src="../images/standardize-or-not-to-standardize-4.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, both approaches have advantages and failings.&lt;/p&gt;
&lt;p&gt;Which one is better? &lt;/p&gt;
&lt;p&gt;As a consultant would say - ‘it depends’.&lt;/p&gt;
&lt;p&gt;It depends on ‘personality’ and culture of your organization, risk tolerance, desperation to succeed. This is the reason why start-ups are more innovative (they have nothing to lose), while well established companies are more cautious and focus more on efficiency and process improvement by standardization (middle management tries to limit the risks). But then many established companies survive, while 90% of startups fail.&lt;/p&gt;
&lt;p&gt;I believe that the best approach, rather than trying to standardize, is to provide guardrails. Guardrails would define when you should standardize, while still keeping open options for projects and products that are just a hypothesis. Both approaches are viable, but which side of the spectrum you want to be, will depend on what you are trying to achieve. &lt;/p&gt;
&lt;p&gt;In organization that I work - WorkSafeBC, we decided exactly to do this - find balance.
A few years back we created a Common Engineering (Ce) team whose responsibility is to enable our engineering community to collaborate and agree on best practices that then become set of guardrails for our teams. A team can select one of the standards within the portfolio, but without locking them down to a particular way of solving a problem. The teams can still come up with different, innovative solution, which could be added to our portfolio library or pattern for re-usability. Common Engineering team is a custodian of these guardrails, providing information about existing standards, and at the same time enabling teams to on-board new best practices. We use few instruments for this, that are facilitated by Ce.&lt;/p&gt;
&lt;p&gt;&lt;a href="/ceremony-center-of-enablement.html"&gt;&lt;strong&gt;Centers of Enablement (CoE)&lt;/strong&gt;&lt;/a&gt;
These are small (5-9 people), cross functional, long living groups that provide overall governance and direction to a specific function. They meet frequently, facilitating development of best practices and standards through Communities of Practice (CoPs) and Working Groups (WGs).&lt;/p&gt;
&lt;p&gt;&lt;a href="/ceremony-community-of-practice.html"&gt;&lt;strong&gt;Communities of Practice (CoP)&lt;/strong&gt;&lt;/a&gt;
CoPs are larger groups of people with common interests, but the membership is not fixed. They focus on providing feedback to practices proposed by CoEs and suggesting new solutions. Creativity and feedback through diversity of opinions and experiences.&lt;/p&gt;
&lt;p&gt;&lt;a href="/ceremony-working-group.html"&gt;&lt;strong&gt;Working Groups (WG)&lt;/strong&gt;&lt;/a&gt;
These are temporary, fixed membership groups called to solve a specific problem. They are small, focused, and as soon as problem is solved, they disband and reform with new members to address next problem in the priority backlog.&lt;/p&gt;
&lt;p&gt;If you would ask me about advice which way to go, this would be my answer.&lt;/p&gt;
&lt;p&gt;There is no right or wrong way. It is a &lt;strong&gt;spectrum&lt;/strong&gt;, as every organization is different, and different levels of standardization, consistency or innovation might be needed. I have to admit that personally I am inclined to be rather on innovation side (the discovered products in the ethnic foods stay with me for life, while my wife’s list is just once off thing, that I will forget the minute I leave the supermarket).&lt;/p&gt;
&lt;p&gt;So here is the set of questions that we should ask ourselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;are we in regulated industry and need to conform to specific audit requirements? If so, standardization and gated processes are better choice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how innovative we want to be? If innovation is our primary goal, we will want to leave as much freedom to the teams as possible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;are we working on a product that nobody did before? Again, you will want to experiment with as little constraints as possible (your company’s survival could depend on it after all)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how new the technology is that we are intending to use? If it is new, we want to experiment and innovate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how difficult it will be to maintain the product in the future? If this is our concern, we will want to standardize more&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how easy is to acquire talent with needed skills? Again, if it is difficult to find skilled resources, moving towards standardization might be the right answer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how complicated the product is going to be? The more complicated integration will be, the more we want to standardize in order to balance the speed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bottom line is that the choice is yours. As I mentioned earlier, my personal preference is to be on the innovation side, but due to the role at my organization, I need to carefully evaluate options and find balance, before providing recommendations (here comes the servant leadership part). 
I hope that the set of questions above can help with the decision. Good luck!&lt;/p&gt;
&lt;p&gt;And by the way, we always look for innovative, inspiring people who push boundaries. If you are one of them, please reach out to me.&lt;/p&gt;</content><category term="Posts"></category><category term="journal"></category><category term="innovation"></category></entry><entry><title>Why we use pull requests with our trunk-based branching strategies</title><link href="https://wsbctechnicalblog.github.io/branching-pull-request.html" rel="alternate"></link><published>2022-04-01T00:00:00-07:00</published><updated>2022-04-01T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-04-01:/branching-pull-request.html</id><summary type="html">&lt;p&gt;Busting a few process myths around branching strategies and pull-requests&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you want to ignite a debate in a pub, casually start chatting about politics. In a [virtual] room of software engineers, gently mention branching strategies and pull requests. In both scenarios you can sit back and enjoy the vibrant chain reaction of experiences, opinions, and myths. In this brief article I will share our experience, our &lt;a href="/consistency-standardization.html"&gt;standardization&lt;/a&gt; of branching strategies, our use of &lt;a href="/pull-requests-friend.html"&gt;pull requests&lt;/a&gt; and bust a few myths along the way.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Branching Strategies&lt;/h1&gt;
&lt;p&gt;There are many, such as &lt;a href="https://trunkbaseddevelopment.com/"&gt;trunk-based&lt;/a&gt;, &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"&gt;GitFlow&lt;/a&gt;, &lt;a href="https://githubflow.github.io/"&gt;GitHubFlow&lt;/a&gt;, and derivations as documented by the former &lt;a href="https://vsardata.blob.core.windows.net/projects/TFS%20Version%20Control%20Part%201%20-%20Branching%20Strategies.pdf"&gt;Microsoft ALM/DevOps Rangers&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops"&gt;Microsoft Docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We have been experimenting with GitFlow and Trunk-based branching strategies and are supporting both as part of our common engineering ecosystem and associated guardrails (aka governance). Based on a push for consistency and standardization we are recommending the &lt;a href="https://trunkbaseddevelopment.com/"&gt;trunk-based&lt;/a&gt; branching strategy, with release branches, as used by the Azure DevOps product team.&lt;/p&gt;
&lt;p&gt;WHY?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is simple.&lt;/li&gt;
&lt;li&gt;It has been adopted by our engineering teams.&lt;/li&gt;
&lt;li&gt;It fits well with our &lt;a href="/yaml-pipelines-part10.html"&gt;app-type blueprint&lt;/a&gt; initiative.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="TIP" src="../images/branching-pull-request-1.png"&gt; 
I am NOT saying that is the best strategy but based on experimentation it fits our &lt;strong&gt;people&lt;/strong&gt;, &lt;strong&gt;process&lt;/strong&gt;, and &lt;strong&gt;products&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 1 - One branching strategy is better than another!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There is no silver bullet! Avoid the debates and invest time to experiment with a few of the common branching strategies, to determine the best fit for your PEOPLE, PROCESS, and PRODUCTS.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://trunkbaseddevelopment.com/branch-for-release/"&gt;trunk-based release from branch&lt;/a&gt; for the variant that we are using, based on learning from the &lt;a href="https://medius.studios.ms/Embed/Video/THR2017?sid=THR2017"&gt;Microsoft Azure DevOps&lt;/a&gt; team. It is a strategy that works well for the 1-2 pizza sized teams, as well as product teams with hundreds to thousands of engineers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 1 - Trunk-based branching strategy is suited only for small and experienced teams!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The &lt;a href="https://medius.studios.ms/Embed/Video/THR2017?sid=THR2017"&gt;Microsoft Azure DevOps&lt;/a&gt; and &lt;a href="https://devblogs.microsoft.com/devops/improving-azure-devops-cherry-picking/"&gt;Microsoft Office&lt;/a&gt; are two very large teams that demonstrate the trunk-based branching strategy scales from small and rapid experimentation and innovation teams, to large product-based teams.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The takeaway for you is that the answer to "&lt;em&gt;what branching strategy is ideal for you?&lt;/em&gt;" is "&lt;em&gt;it depends on the outcome of your experiments!&lt;/em&gt;"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Pull Requests&lt;/h1&gt;
&lt;p&gt;Which brings us to pull requests (PRs), which enable us to change, review, and merge code. You can add policies to your PRs to enable code quality in key branches using policies, validation builds, code-quality and security scans. I trust you all want to protect key branches such as trunk/master/main, which should always be stable and deployable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 3 - Pull-requests slow down your continuous integration value stream!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A pull request takes as long as you and your process allow it to sit in a corner to gather dust. We encourage our engineers to track the lead and cycle times of pull requests using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=OneLuckiDev.prApprovalReport&amp;amp;targetId=dc216ba3-25e9-46a8-823a-fb77a81f2a9f"&gt;Pull Request Completion Report&lt;/a&gt; and to &lt;strong&gt;collaborate&lt;/strong&gt; with their peers to ensure that pull requests do not go stale.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Make sure you have a working agreement for pull requests, because &lt;strong&gt;you&lt;/strong&gt; decide how long the average lead and cycle times are for your pull requests. In our case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code-quality&lt;/strong&gt;, &lt;strong&gt;security-scans&lt;/strong&gt;, and &lt;strong&gt;validation build(s)&lt;/strong&gt; take minutes at the worst. &lt;/li&gt;
&lt;li&gt;Code review for &lt;strong&gt;learning&lt;/strong&gt; can be done in parallel without affecting the lead and cycle times, so no delays.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branch policy checks&lt;/strong&gt;, such as must be linked to work items and all comments must be addressed, is instantaneous.&lt;/li&gt;
&lt;li&gt;If feature branches are &lt;strong&gt;short-lived&lt;/strong&gt;, &lt;strong&gt;collaboration&lt;/strong&gt; is healthy, and code changes constrained to agreed feature(s), the code reviews are also in the territory of minutes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, we are talking about minutes to add immense value and ensure that the changes we commit to trunk/master/main branch are quality and will not break. If your average pull request lead time is in the hours to days, you need to map your pull request value stream and find the &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 4 - Pull-requests are manual gates&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In theory a pull request (in Azure DevOps) could be all automated, based on policies, validation builds, and other validations. It is as manual and/or automated as YOU decide to configure your policies and guardrails.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you wonder whether it is a sin to use pull requests with trunk-based branching strategies, read &lt;a href="https://trunkbaseddevelopment.com/continuous-review/"&gt;continuous code review&lt;/a&gt; and watch the &lt;a href="https://medius.studios.ms/Embed/Video/THR2017?sid=THR2017"&gt;trunk-based development&lt;/a&gt; video. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MYTH 5 - Trunk-based branching strategy and use of pull requests is a NO-NO!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"In theory" the trunk-based strategy is based on short-lived feature branches and merging changes directly with the trunk/master/main branch. Using a pull request as a pre-merge validation does not change the strategy, it merely injects a final countdown checkpoint before you commit your code changes to the "always deployable" trunk/master|main branch. It is an opportunity to move your scale of &lt;strong&gt;trust&lt;/strong&gt;, not a matter of changing the branching strategy.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;For branching strategies and the use of pull requests there is no silver bullet. Once you realize that consistency and standardization trumps personal preference and variations, you can pick the branching strategy and the use of pull-requests (or not) that empowers your engineers and organization. &lt;/p&gt;</content><category term="Posts"></category><category term="engineering"></category><category term="version-control"></category></entry><entry><title>WHY are we pushing consistency and standardization?</title><link href="https://wsbctechnicalblog.github.io/consistency-standardization.html" rel="alternate"></link><published>2022-03-28T00:00:00-07:00</published><updated>2022-03-28T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-03-28:/consistency-standardization.html</id><summary type="html">&lt;p&gt;Balancing autonomy with consistency and standardization.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt; do we keep mentioning &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt; like a broken record in &lt;a href="/common-engineering-journal-1.html"&gt;Journal 1 - What is origin of our common engineering team?&lt;/a&gt; and many other posts? &lt;/p&gt;
&lt;p&gt;Before we explore the answer, let us explore our understanding of consistency and standardization.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Consistency&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt; is coherence, a key pillar in engineering. It empowers a unified whole, such as a common engineering system or a complex solution that is maintainable and extensible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-1.png"&gt; &lt;/p&gt;
&lt;p&gt;The previous illustration shows twelve &lt;strong&gt;consistent&lt;/strong&gt; squares that have the same height, width, and colouring. A great example of consistency is &lt;a href="https://www.lego.com/"&gt;LEGO&lt;/a&gt; which offers us an assortment of consistent building blocks, with which we can follow directions or experiment in creating simple or complex objects, based on consistent building blocks.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Standardization&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Standardization&lt;/strong&gt; is another pillar of engineering. It is the process of observing guidance, guardrail, standard, or governance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Standardization" src="../images/consistency-standardization-2.png"&gt; &lt;/p&gt;
&lt;p&gt;In the illustration, above, we have defined a guardrail that the height and width of the rectangle must be equal and that all lines are straight and parallel - a recipe to create a rectangle, also known as a square.&lt;/p&gt;
&lt;p&gt;Standardization is pivotal with designs, producing &lt;strong&gt;consistent&lt;/strong&gt; interfaces, solutions, and uniformity that empowers people to be more effective.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the question ... why do we promote consistency and standardization?&lt;/h1&gt;
&lt;p&gt;Why we love consistency and standardization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency improves adoption&lt;/strong&gt; - Once we become familiar with a process or product, resistance to explore and embrace others will evaporate. For example, if you know how to use Office 365 Word, you can navigate yourself around Office 365 Excel or PowerPoint with familiarity and without friction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency reduces cost and time&lt;/strong&gt; - Usability and learnability improves with consistency, which empowers engineering to deliver value quicker and continuously. Reducing time and anomalies, reduces cost - a favourable side-effect for investors and researchers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency empowers automation&lt;/strong&gt; - We frequently say that "&lt;em&gt;if you do something twice or thrice, consider automation!&lt;/em&gt;" While this is solid guidance, automation becomes a lot easier if you have a consistent process and products at your disposal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standardization reduces cost and time&lt;/strong&gt; - By adopting industry standards we improve upgrades, maintenance, migrations, security, and scalability of our solutions. By standardizing &lt;strong&gt;processes&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;, we improve clarity and productivity, because engineers can focus on delivering value in a predefined way without the need to master a platter of variations.  As with consistency, a reduction in cost with a rise in quality, repeatability, and security is a well-received side effect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standardization promotes consistency&lt;/strong&gt; - As shown in the previous example of drawing rectangles based on a standard, we can produce consistent squares and Lego can continue to produce a treasure chest of building blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, once we have a &lt;strong&gt;standardized&lt;/strong&gt; process to produce rectangles with equal sides, aka squares, we can hand it to a machine to automate, and repeat to create &lt;strong&gt;consistent&lt;/strong&gt; squares continuously.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-3.png"&gt; &lt;/p&gt;
&lt;p&gt;The reason we want to &lt;strong&gt;automate&lt;/strong&gt; these types of mind-numbing tasks is that they are well suited for machines. If we ask a humanoid to repeat the same &lt;strong&gt;standardized&lt;/strong&gt; process we will end up with inconsistent squares, as shown.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MY 2-CENTS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Humans are not suited for mind-numbing and repetitive work. Context switching, distractions, and mental fatique will affect quality &lt;strong&gt;sooner&lt;/strong&gt; than later. &lt;/li&gt;
&lt;li&gt;Machines, on the other hands, thrive on repetitive work and deliver continuously and consistently, as long as there is power.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-4.png"&gt; &lt;/p&gt;
&lt;p&gt;Although it appears like a trivial issue, when we aggregate the process into a more complex solution that expects &lt;strong&gt;consistent&lt;/strong&gt; squares, the &lt;strong&gt;failure rate&lt;/strong&gt; for the manually created squares will be much higher than the squares created through automation. In fact, although both sets of objects look like squares, we will observe a 100% versus 25% pass rate for the automated and manual processes respectively. In this simple example, this implies a 75% WASTE!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Consistency" src="../images/consistency-standardization-5.png"&gt; &lt;/p&gt;
&lt;p&gt;Last, but not least, we acknowledge that autonomy, mastery, and purpose is the secret sauce that drives information workers (See &lt;a href="https://youtu.be/u6XAPnuFjJc"&gt;Pink&lt;/a&gt; for details). It is important that we balance &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;standardization&lt;/strong&gt; with &lt;strong&gt;autonomy&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MY 2 CENTS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The smaller your organization the more you can pivot to autonomy.&lt;/li&gt;
&lt;li&gt;The bigger your organization and rotation of engineers, the more you can pivot to consistency and standardization. &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We, for example, empower our engineers to contribute to our common engineering system and our supporting (not enforcing) guardrails through &lt;a href="/ceremony-overview.html"&gt;centers of enablement and associated working groups&lt;/a&gt;, to empower all engineers to do end-to-end tasks more efficiently, while nurturing their mastery and purpose. A win:win!&lt;/p&gt;</content><category term="Posts"></category><category term="eliminate-waste"></category><category term="technical-excellence"></category></entry><entry><title>Stop the meeting overload!</title><link href="https://wsbctechnicalblog.github.io/stop-the-meeting-hell.html" rel="alternate"></link><published>2022-03-09T00:00:00-08:00</published><updated>2022-03-09T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-03-09:/stop-the-meeting-hell.html</id><summary type="html">&lt;p&gt;My personal crusade to optimize meetings and associated WASTE&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thank you for the opportunity to collaborate on a very important topic, that will help us raise productivity and lower stress … as well as errors caused by excessive context switching.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Intro" src="../images/stop-the-meeting-hell-1.PNG"&gt;&lt;/p&gt;
&lt;p&gt;To start, I would like to get rid of my pet peeve of our new remote and video conferencing era. No-one with a healthy meeting etiquette would barge into the following meeting environment to ask you to join another meeting. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Meeting" src="../images/stop-the-meeting-hell-2.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Correct?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Meeting Interruption?" src="../images/stop-the-meeting-hell-3.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Then why are we using the worst Microsoft Teams feature to call a colleague who is busy in another scheduled event to join your meeting?&lt;/p&gt;
&lt;p&gt;This context switching and causes interruptions for all … be right back … Willy what do you think … Willy? … back … What did I miss? These interruptions drive me insane. &lt;/p&gt;
&lt;p&gt;For the person being teleported out of the meeting it means a context switch … and I, for example, start making mistakes and forgetting things when I battered by context switching.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Decision" src="../images/stop-the-meeting-hell-4.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Back to the actual topic … can we stop the meeting madness? So, what is the actual problem?&lt;/p&gt;
&lt;p&gt;We must choose whether we want to improve productivity and balance work:life, or continue the multi-tasking, context-switching overload. &lt;/p&gt;
&lt;p&gt;The choice is yours … my team and I are taking the right turn!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snippets of madness" src="../images/stop-the-meeting-hell-5.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Here are a few examples of OUR calendars … on a good day. &lt;/p&gt;
&lt;p&gt;Let us look at one and spot the challenges.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Core Issue" src="../images/stop-the-meeting-hell-6.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Looking at this example we will notice a few things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have back-to-back meetings. Context-switching hell, with few opportunities to take a break.&lt;/li&gt;
&lt;li&gt;Double and triple booked meetings … how many clones of me are you expecting to join your meetings?&lt;/li&gt;
&lt;li&gt;Meetings booked after working hours ... unthought of in the days of people walking out of the office to catch their last bus.&lt;/li&gt;
&lt;li&gt;Everyone is working extra hours to try to catch-up with their commitments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This person spend most of the day going from meeting to meeting without a break. That is not healthy and NOT sustainable. &lt;/p&gt;
&lt;p&gt;In our regular stress-o-meter polls the feedback clearly points to one worrying outcome of this madness, namely “STRESS”.&lt;/p&gt;
&lt;p&gt;&lt;img alt="What we are doing" src="../images/stop-the-meeting-hell-7.PNG"&gt;&lt;/p&gt;
&lt;p&gt;However, the eye of the storm is not just the number of meetings, but the quality of our meetings.&lt;/p&gt;
&lt;p&gt;As per our team working agreement, we are trying hard to …&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finish meetings 5-minutes early, instead of bleeding into other meetings.&lt;/li&gt;
&lt;li&gt;Have a meeting free Friday, by blocking our Friday and, by not scheduling meetings on a Friday.&lt;/li&gt;
&lt;li&gt;If there is no agenda, purpose, or we add or receive no value, we eject ourselves from the meeting.&lt;/li&gt;
&lt;li&gt;We expand all three lettered acronyms when speaking to ensure we create no time wasting confusion.&lt;/li&gt;
&lt;li&gt;Conclude every meeting with actionable notes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, I have asked my team to block out their lunch hours and decline double bookings to reduce the context switching and associated stress. In terms of double bookings, I am not referring to meetings we have not committed to, but keep in our calendars for reference, but instead to an ask or expectation to commit to be in two calls at the same time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="What we should all do" src="../images/stop-the-meeting-hell-8.PNG"&gt;&lt;/p&gt;
&lt;p&gt;In my humble opinion, we need an organizational working agreement, which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourages a respectful meeting etiquette that raises the quality and reduces the number of meetings&lt;/li&gt;
&lt;li&gt;Fosters collaboration&lt;/li&gt;
&lt;li&gt;Focuses on productivity&lt;/li&gt;
&lt;li&gt;Enables a healthy work:life balance&lt;/li&gt;
&lt;li&gt;Pivots our culture from ”just another meeting” to collaboration, leadership, and delivery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for listening. Thoughts? Questions?&lt;/p&gt;</content><category term="Posts"></category><category term="eliminate-waste"></category></entry><entry><title>Continuous Delivery in the enterprise</title><link href="https://wsbctechnicalblog.github.io/continuous-delivery-in-the-enterprise.html" rel="alternate"></link><published>2022-03-04T00:00:00-08:00</published><updated>2022-03-04T00:00:00-08:00</updated><author><name>Shay Vannery</name></author><id>tag:wsbctechnicalblog.github.io,2022-03-04:/continuous-delivery-in-the-enterprise.html</id><summary type="html">&lt;p&gt;Continuous Delivery is no silver bullet and requires persistence, discipline and effort.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Businesses have been adopting a Digital-first approach to interact with their customers since the advent of the internet. The global pandemic of 2019 further accelerated this trend. Today, it has become more important than ever before for a service-based organization to have a robust web presence. Customer expectations are at all-time highs; and organizations are expected to be highly-available; highly-accessible; and provide an online experience comparable to high-tech ecommerce &amp;amp; content streaming companies. This requires organizations to make quick, seamless transitions when faced with security concerns &amp;amp; changing business priorities.&lt;/p&gt;
&lt;p&gt;The answer is &lt;strong&gt;Continuous Delivery&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Continuous Delivery" src="../images/continuous-delivery-in-the-enterprise-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is Continuous Delivery anyway?&lt;/h1&gt;
&lt;p&gt;In his book on Continuous Delivery, author Martin Fowler defines Continuous Delivery as “a software development discipline where you build software in such a way that the software can be released to production at any time”.&lt;/p&gt;
&lt;p&gt;In layperson’s terms; Continuous Delivery is the ability to get changes of all types into the hands of end-users, quickly, safely &amp;amp; seamlessly; thereby making production releases routine non-events. &lt;/p&gt;
&lt;p&gt;I like to think of continuous delivery as replacing components of an airplane while it is in-flight and full of passengers. Or performing an organ transplant on an athlete while she is running a marathon. &lt;/p&gt;
&lt;p&gt;Amusing metaphors aside, Continuous Delivery makes it possible to continuously make changes to software as required by the end-user or the business.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why do WE need this?&lt;/h1&gt;
&lt;p&gt;Traditional organizations with legacy footprints often make the mistake of ignoring cutting edge software engineering methodologies; thinking of it as unnecessary or overkill. However, the benefits of Continuous Delivery can be observed &amp;amp; measured quickly in organizations of all sizes, in all industry verticals. Some of these benefits are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Minimized risk&lt;/strong&gt; – Smaller, more frequent releases reduce risk. The chances of bugs creeping into production, or features not functioning as intended are far lower. It also becomes possible to quickly identify &amp;amp; remediate any errors without outages or degraded performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Quality&lt;/strong&gt;– When cross-functional teams work together, leverage automation, test and integrate changes frequently; overall quality improves. Teams are able to avoid re-work and focus on delivering value to the customer. They can also get quicker, timely feedback and focus on building a better, more relevant product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Predictability&lt;/strong&gt; – By following a predictable &amp;amp; standardized sequence of activities (sometimes known as deployment pipeline) teams can avoid surprises caused by human error, code, integration or environmental issues. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lowered Costs&lt;/strong&gt; – Automating repeatable &amp;amp; manual tasks can lead to significant cost savings. In theory, teams can avoid working over-time after business hours. As releases become non-events, teams can move away from war-rooms, incident mitigation protocols and the massive amount of coordination effort these require. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved work-life balance&lt;/strong&gt; – Less panic, less fire-fighting, leads to a more fruitful employee experience, free of blame and unnecessary stress caused by fear of the unknown and looming deadlines. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Admittedly, Continuous Delivery is no silver bullet. Just like diet, exercise and meditation; Continuous Delivery requires persistence, discipline and effort. It is imperative for all organizations today to examine the way they perform work, where they invest time and effort, and make data-driven investments in their delivery pipeline; so they may continue to be relevant in our rapidly changing world.  &lt;/p&gt;</content><category term="Posts"></category><category term="continuous-delivery"></category><category term="delivery-on-demand"></category></entry><entry><title>DevOps Analytics Strategy</title><link href="https://wsbctechnicalblog.github.io/devops-analytics-strategy.html" rel="alternate"></link><published>2022-02-25T00:00:00-08:00</published><updated>2022-02-25T00:00:00-08:00</updated><author><name>Aditya Chourasiya</name></author><id>tag:wsbctechnicalblog.github.io,2022-02-25:/devops-analytics-strategy.html</id><summary type="html">&lt;p&gt;Objective, Method and Maturity model for business analytics across an enterprise.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a business user, I want to make sense of all the data coming from my production system and make sure my product meets business requirements. This article summarizes different maturity model and action-sequence to achieve snow-ball effect for typical organization.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vision" src="../images/vision.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let's start with Why&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;To continue DevOps and Agile development and leverage one of the DevOps principles – “to measure”&lt;/li&gt;
&lt;li&gt;To understand the current baseline and be able to measure progress&lt;/li&gt;
&lt;li&gt;To answer common question of - how close we are to 'done'?&lt;/li&gt;
&lt;li&gt;To raise awareness and instill team wide 'measure' from the very inception&lt;/li&gt;
&lt;li&gt;To give stakeholders and senior management on-demand visibility into systems dev and ops&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Objective" src="../images/objective.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To promote Business objectives of measurements and organization wide 'manifesto'&lt;/li&gt;
&lt;li&gt;To define metrics for each group of stakeholders&lt;/li&gt;
&lt;li&gt;To develop best practices for measurements&lt;/li&gt;
&lt;li&gt;To define delivery methods for metrics&lt;/li&gt;
&lt;li&gt;To define measurement and metric delivery cadence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Methods" src="../images/methods.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 1 of 4 (Awareness)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Descriptive analytics capabilities, which can help answer: “What has happened?"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release Dashboard- Showing all releases went/going to prod&lt;/li&gt;
&lt;li&gt;Teams assessment / DoD dashboard- Are teams doing well in assessment/ meeting DoD &lt;/li&gt;
&lt;li&gt;Data Stewards rollout - Identifying who is responsible for keeping data updated/correct&lt;/li&gt;
&lt;li&gt;Standard Team dashboards - Same dashboards across teams with auto login and rotation enable&lt;/li&gt;
&lt;li&gt;Analytics Strategy awareness - CoPs, Demo, micro learnings and Lunch and Learns about Analytics in DevOps&lt;/li&gt;
&lt;li&gt;CoP - PowerBI - PowerBI CoP establish and monthly meeting scheduled&lt;/li&gt;
&lt;li&gt;Team Business Objectives [PI/Sprint Goals] Dashboard - PI and Sprint goal dashboards from AzDo Enabler to experimental releases&lt;/li&gt;
&lt;li&gt;Business value dashboard requirement gathering - Need to gather requirement for business value reporting (Enabler for business value)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 2 of 4 (Desire)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Diagnostic analytics capabilities, which can help answer the question, “Why did it happen?"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Experimental release support&lt;/li&gt;
&lt;li&gt;SAFe Metrics rollout&lt;/li&gt;
&lt;li&gt;Focus on and communication of DevOps Strategy&lt;/li&gt;
&lt;li&gt;Gamification of Team's matrices&lt;/li&gt;
&lt;li&gt;Analytics as a code&lt;/li&gt;
&lt;li&gt;Business value delivery prediction&lt;/li&gt;
&lt;li&gt;Make data accessible so people can play with it freely and innovate&lt;/li&gt;
&lt;li&gt;Relevant messaging and alerts through reports&lt;/li&gt;
&lt;li&gt;ROAMing Risks and Risk Registry&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 3 of 4 (Knowledge)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Predictive Analytics capabilities, which can help answer the question, “What could happen?”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business value delivery confirmation&lt;/li&gt;
&lt;li&gt;Continuous analytics delivery through automated pipelines&lt;/li&gt;
&lt;li&gt;DevOps Program Risk (ROAM) analytics&lt;/li&gt;
&lt;li&gt;Building people skills for digital transformation based on Risk area&lt;/li&gt;
&lt;li&gt;Establish Standards and Practices for Analytics&lt;/li&gt;
&lt;li&gt;Skill requirement based recruitment&lt;/li&gt;
&lt;li&gt;Big Data integration for better analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Phase 4 of 4 (Ability)&lt;/h1&gt;
&lt;p&gt;This phase is focused on developing Prescriptive Analytics capabilities, which can help advise on possible outcomes and answer: “What should we do?”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Skill based resource movement&lt;/li&gt;
&lt;li&gt;Machine learning integration to other then business value delivery&lt;/li&gt;
&lt;li&gt;Analytics Governance body&lt;/li&gt;
&lt;li&gt;Business requirement generation through analytics&lt;/li&gt;
&lt;li&gt;Measure how analytics is changing business&lt;/li&gt;
&lt;li&gt;Strategic decision making through automation&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Summary and invite&lt;/h1&gt;
&lt;p&gt;This article was intended to be written in &lt;a href="https://www.salesforce.com/blog/how-to-create-alignment-within-your-company/"&gt;V2MoM&lt;/a&gt; format, however due to different organizational structure and needs, it will vary a lot. Based on my experience in different government and non-government organizations, the above holds true. Please feel free to submit a pull request to suggest any changes. Thank you for reading.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="metrics"></category><category term="devops"></category></entry><entry><title>Understanding key metrics for a healthy DevOps mindset</title><link href="https://wsbctechnicalblog.github.io/metrics-importance.html" rel="alternate"></link><published>2022-02-18T00:00:00-08:00</published><updated>2022-02-18T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-02-18:/metrics-importance.html</id><summary type="html">&lt;p&gt;Without real-time evidence, OODA never comes to life.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/John_Boyd_(military_strategist)"&gt;John Boyd&lt;/a&gt; argued that the key to victory is the ability to create situations in which one can make appropriate decisions more quickly than one's opponent. &lt;strong&gt;O&lt;/strong&gt;bserve the environment, &lt;strong&gt;O&lt;/strong&gt;rient to be in a good position, &lt;strong&gt;D&lt;/strong&gt;ecide what to do next, and &lt;strong&gt;A&lt;/strong&gt;ct accordingly. His OODA state machine is based on real-time feedback, gathered while observing the environment.&lt;/p&gt;
&lt;p&gt;Similarly, hypothesis-driven development (HDD) relies on feedback to be in a position to evaluate the experiment, decide if it is a FAIL or PASS, and learn from it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="HDD" src="../images/ooda-loop-and-devops-3.png"&gt; &lt;/p&gt;
&lt;p&gt;Both &lt;strong&gt;OODA&lt;/strong&gt; and &lt;strong&gt;HDD&lt;/strong&gt; become worthless black holes if we remove the &lt;strong&gt;feedback&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Clueless" src="../images/metrics-importance-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Your dream to fail-fast, continuously learn and improve evaporates before your very eyes. Stuck in a nebulous cloud, you will embark on a nightmare journey, without clues, insight, or early-warnings. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Feedback is fuel for your DevOps mindset&lt;/h1&gt;
&lt;p&gt;To compete in an ever-changing industry, we must find ways to be more effective, deliver quicker, and further delight our customers continuously. This requires us to understand the health of our ecosystem, value we deliver, and detect smoke before we are dealing with a raging fire. &lt;/p&gt;
&lt;p&gt;Use a blend of market research, production telemetry, surveys, unsolicited feedback, customer visits, and when possible the invaluable &lt;a href="https://kanbanize.com/lean-management/improvement/gemba-walk"&gt;Gemba walk&lt;/a&gt; to gather and measure everything that is measurable ... and meaningful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;The art of fine-tuning what and how you measure data without inundating everyone with reports and notifications is an art and a necessity for a healthy DevOps mindset.&lt;/em&gt;" - &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Metrics" src="../images/metrics-importance-2.png"&gt;&lt;/p&gt;
&lt;p&gt;As recommended by the &lt;a href="https://www.tactec.ca/devops-core-values"&gt;Core DevOps Values&lt;/a&gt; should not get engrossed with our solution, but instead use &lt;strong&gt;Systems Thinking&lt;/strong&gt; to "&lt;em&gt;define metrics for measuring performance, accountability and effectiveness, using application of outcomes and shared learnings&lt;/em&gt;" across our organization.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Systems Thinking" src="../images/metrics-importance-5.png"&gt;&lt;/p&gt;
&lt;p&gt;In other words, take a holistic approach to focus on, measure, and improve your organization (planet), not just a few, or worse, one of your solutions (countries).&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Metrics we are observing in our common engineering ecosystem&lt;/h1&gt;
&lt;p&gt;We now understand that we must view and understand the haystack, before we start looking for the needle. It is time to identify metrics to measure impact and continuous improvement of teams, engineering practices, and our common engineering ecosystem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FAILURE EXAMPLE&lt;/strong&gt; - When we developed our generic pipeline blueprints, we included logging in the continuous integration pipeline. We have been logging verbose details to Application Insights for each and every Azure Pipeline that triggered since. However, the only time the metrics has been viewed, was for the demo of the telemetry. A &lt;strong&gt;WASTE&lt;/strong&gt; of resources and I am convinced that no-one would notice if we turn off the logging.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Big Bang" src="../images/metrics-importance-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Instead of the "big bang" approach to measure everything measurable, we opted to focus on three buckets of data to measure our common engineering ecosystem - DevOps, Guardrails, and Engineering Practices. We also use weather symbols instead of referring to low, medium, high, and elite performers, as is common practice in the DevOps reports.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BUCKET&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th&gt;METRIC&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th&gt;WHY? VALUE?&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Storm" src="../images/metrics-importance-storm.png"&gt;&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Rain" src="../images/metrics-importance-rain.png"&gt;&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Overcast" src="../images/metrics-importance-overcast.png"&gt;&lt;/th&gt;
&lt;th&gt;--&lt;/th&gt;
&lt;th align="center"&gt;&lt;img alt="Sun" src="../images/metrics-importance-sun.png"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Deployment frequency&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Deployments that are more frequent allow earlier introduction of new value.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; once/6-months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Once/month – once/6-months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Once/week - once/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;On-demand&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Lead time for changes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Shorter lead times enable faster feedback and the ability for us to respond to outages more effectively.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt; 6 months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;1 month – 6 months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;1-7 days&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; 1 hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Time to restore services&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Faster time to mitigate failures gives our users higher availability.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt; 6 months&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;1-7 days&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; 1 day&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt; 1 hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Change failure rate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;More successful changes cut rework and allow us to focus on new value.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;30%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;30%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;16-30%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0-15%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guardrails&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Repo S/R failures&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Solid repositories enable consistency and standardization, reducing GIGO and WASTE.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;=20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;10% failures /month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0 failures/month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guardrails&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Pipeline S/R  failures&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Solid pipelines enable consistency and standardization, reducing value stream total lead time.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;gt;=20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;20% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;&amp;lt;10% failures/month&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0 failures/month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Duplicate code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Code duplication is identified in the industry as one of the reasons teams tend to author bugs. Reducing/eliminating duplicate code removes the opportunity to introduce bugs when adding/modifying/removing code.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;30%+ of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 20% and 29% of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 10% and 19% of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Less than 5% of the code in the repo is found to be duplicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Cyclomatic Complexity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Complex code is hard to read, hard to understand, hard to reason about, and hard to modify. Such complexity is identified as one of the main reasons teams tend to introduce bugs when modifying code. Reducing/eliminating cyclomatic complexity removes the opportunity to introduce bugs when adding/modifying/removing code.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;40+ cyclomatic complexity identified in methods&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 20 and 40 cyclomatic complexity identified in methods&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 10 and 20 cyclomatic complexity identified in methods&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Less than 10 cyclomatic complexity identified in methods&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Percentage of surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Just because all tests pass doesn’t mean that the implemented code is tested. Mutation testing uncovers areas of code which, even if covered by tests, haven’t been assessed for meeting or failing the expectations. That omission indicates shoddy software design. Minimizing/eliminating surviving mutants is the only way to ensure correct implementation.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;20+% surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 10% and 19% surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Between 5% and 9% surviving mutants&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;Less than 5% surviving mutants&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Engineering Practices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Maintainability index&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Once written, code needs to be maintained. The ease/difficulty of maintaining the code determines the quality of the system.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;0 to 9 indicates low ability to easily perform maintenance&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;10 to 19 indicates modest ability to perform maintenance&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;20 to 49 indicates moderate ability to perform maintenance&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align="center"&gt;50 to 100 indicates good ability to perform maintenance&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; The table below was out first baseline recommendation and has likely evolved since we published this blog. Fine-tune your metrics continuously to ensure you focus on actionable outcomes, not vanity data.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Weather" src="../images/metrics-importance-4.png"&gt;&lt;/p&gt;
&lt;p&gt;We are currently capturing and fine-tuning these buckets manually, in parallel to developing automated gathering and display processes. Our view is set at the common engineering ecosystem level, but we allow groups and teams to drill-down to analyse and improve their own health.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Avoid focusing on teams and/or individuals to avoid the misuse of the metrics to influence performance reviews. We succeed or fail as one!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What are your views on metrics?&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="metrics"></category><category term="devops"></category></entry><entry><title>Having a sound Technology Adoption Process is pivotal to innovation</title><link href="https://wsbctechnicalblog.github.io/technology-adoption-program.html" rel="alternate"></link><published>2022-02-15T13:13:00-08:00</published><updated>2022-02-15T13:13:00-08:00</updated><author><name>Laurent Blain</name></author><id>tag:wsbctechnicalblog.github.io,2022-02-15:/technology-adoption-program.html</id><summary type="html">&lt;p&gt;Selecting a new process or product without surprising or blindsiding anyone.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Co-author: &lt;a href="https://wsbctechnicalblog.github.io/author/willy-peter-schaub.html"&gt;Willy Schaub&lt;/a&gt;, from Common Engineering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Autonomous&lt;/strong&gt; teams have organizational latitude to establish their own internal goals and work practices. Combined with &lt;strong&gt;Master&lt;/strong&gt; and &lt;strong&gt;Purpose&lt;/strong&gt; these teams can be very effective, as outlined by Daniel Pink in &lt;a href="https://www.bing.com/videos/search?q=Drive%3a+The+Surprising+Truth+About+What+Motivates+Us"&gt;What Motivates Us&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 1 - The wrong way!
&lt;img alt="Waste" src="../images/technology-adoption-program-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Typical, but not recommended way for an autonomous team to acquire new processes and products:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assume the right of self-organization and self-management.&lt;/li&gt;
&lt;li&gt;Acquire processes or products in isolation.&lt;/li&gt;
&lt;li&gt;Release the solution, using products unknown to the rest of the organization - a Unicorn.&lt;/li&gt;
&lt;li&gt;The solution fails during deployment, or worse in production impacting end-users.&lt;/li&gt;
&lt;li&gt;Operations are alerted, but ill-equipped to assist, as they are caught completely off-guard by the new technology used.&lt;/li&gt;
&lt;li&gt;Infamous 2AM call is triggered, focused on determining and remediating the root cause, maintaining a customer-focus and value-first mindset.&lt;/li&gt;
&lt;li&gt;Due to the isolated way the autonomous team operated, and the mystical Unicorn detected (too) late in the continuous delivery phase, the collaboration between development, operation, and other stakeholders becomes unproductive and toxic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Do you recognize this practice?&lt;/strong&gt; If yes, you are familiar with &lt;strong&gt;WASTE&lt;/strong&gt;ful deployment delays, unexpected costs, and a frequent loss of &lt;strong&gt;TRUST&lt;/strong&gt; between engineering teams.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why we need to do better!&lt;/h1&gt;
&lt;p&gt;To ensure that we can continuously deliver value to delighted end-users, we must find a better way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 2 - The right way!
&lt;img alt="Value" src="../images/technology-adoption-program-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Assume the right of self-organization and self-management but operate within organizational guardrails.&lt;/li&gt;
&lt;li&gt;Acquire processes or products in collaboration with all stakeholders, such as architecture, operations, site reliability engineering, and &lt;a href="https://wsbctechnicalblog.github.io/common-engineering-journal-2.html"&gt;common engineering&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Release the solution, using known processes and products, operating within guardrails that ensure consistency, standardization, security, and simplicity.&lt;/li&gt;
&lt;li&gt;Instead of dealing with 2AM calls, engineering can raise the awareness of the new processes and products, sharing the value with the rest of the organization through &lt;a href="https://wsbctechnicalblog.github.io/dojo-events.html"&gt;dojos&lt;/a&gt; and &lt;a href="https://wsbctechnicalblog.github.io/ceremony-community-of-practice.html"&gt;communities of practice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Likewise, &lt;a href="https://wsbctechnicalblog.github.io/ceremony-working-group.html"&gt;working groups&lt;/a&gt; can be productive and preemptive, empowering engineering with re-usable blueprints to make the adoption of new processes and products simple.&lt;/li&gt;
&lt;li&gt;Collaboration becomes vibrant, based on &lt;strong&gt;TRUST&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The core difference between the two ways of adopting new processes and products boils down to collaboration, trust, and guardrails that guide, not limit innovation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Technology Adoption Program (TAP)&lt;/h1&gt;
&lt;p&gt;Enterprise Architecture introduced the Technology Adoption Program (TAP), as shown below, which guides us to adopt, assess, approve, and embrace new technology (processes and products). Instead of re-inventing the wheel, our Common Engineering Center of Enablement decided to base our process and product adoption program on the existing Technology Adoption Program (TAP) - &lt;strong&gt;re-use&lt;/strong&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 3 - Technology Adoption Program (flow)
&lt;img alt="Value" src="../images/technology-adoption-program-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The TAP lights up when combined with our common engineering ecosystem, in which the &lt;a href="https://wsbctechnicalblog.github.io/ceremony-center-of-enablement.html"&gt;centres of enablement&lt;/a&gt; (CoE) provide thought leadership, vision, direction, guardrails, and sponsor vibrant and laser focused working groups to &lt;strong&gt;ASSESS&lt;/strong&gt;, &lt;strong&gt;TRIAL&lt;/strong&gt;, and &lt;strong&gt;ADOPT&lt;/strong&gt; new technologies. Both the CoE and sponsored Working Groups are based on people from different disciplines, encouraging vibrant collaboration and awareness amongst all stakeholders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;COLLABORATION FROM THE START&lt;/strong&gt; - we can ensure that new technology is supported by the innovation programs, such as pipeline blueprints and self-service, once organizational approval is received. This ensures that we can empower engineering to “hit the ground running” with new technologies.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the time a process or product is approved, it is neither unknown, nor a mystical Unicorn. Instead, awareness and self-service automation programs are aware and supportive of the new technology, which not only enables and empowers engineering, but reduces &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;How do you balance autonomy and standardization in your organization?&lt;/p&gt;</content><category term="Posts"></category><category term="architecture"></category><category term="devops"></category><category term="technical-excellence"></category></entry><entry><title>Journal 3 - Explore the trajectory of our Common Engineering (Ce) ecosystem</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-3.html" rel="alternate"></link><published>2022-01-28T13:13:00-08:00</published><updated>2022-01-28T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-28:/common-engineering-journal-3.html</id><summary type="html">&lt;p&gt;Looking at our common engineering team through the management (leader) lens&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is an informal journal to share our &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/"&gt;DevOps Vancouver Meetup&lt;/a&gt; session, titled &lt;em&gt;"Explore the trajectory of our Common Engineering ecosystem"&lt;/em&gt;, in which I spoke about my experience in setting up our new common engineering system team, which are related to the previous &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093"&gt;Common Engineering System at WorkSafeBC&lt;/a&gt; and &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555"&gt;Why we should (not) care about Pipelines!?!&lt;/a&gt; meetup talks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Overview" src="../images/common-engineering-journal-3-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Roadmap&lt;/h1&gt;
&lt;p&gt;It was a real pleasure to share an update on our efforts to establish a common engineering system to empower our engineering teams and strive for consistency, standardization, security, and continuous innovation at WorkSafeBC. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Roadmap" src="../images/common-engineering-journal-3-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As shown, we have an ambitious vision to empower every engineer by standardizing our engineering practices and tools and enable continuous delivery of value to delight end-users. &lt;/p&gt;
&lt;p&gt;From early 2019 we operated like the Rebel Alliance on the ice planet Hoth, focusing on creating manifestos and guardrails that enabled engineering to build consistent, secure, and simple solutions. We innovated our continuous integration and delivery pipelines, as discussed at the meetup in &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555"&gt;June 2021&lt;/a&gt;, and released our &lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;WorkSafeBC Technical blog&lt;/a&gt; allowing us to share all our failures, learnings, and innovation with the community.  &lt;/p&gt;
&lt;p&gt;Everything changed in September 2021 when I got the opportunity to launch an official common engineering team, with a leadership mandate to empower every engineer by standardizing practices and products, and stewarding guardrails to promote engineering consistency, enablement, security, and simplicity.&lt;/p&gt;
&lt;p&gt;For the first 90-days we focused on establishing an efficient system of highways that enable both our business and engineering and ensure that our common engineering ecosystem has a common and sound vision, vibrant collaboration, and an atmosphere that encourages failure, learning, and continuous innovation. We achieved three major milestones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Self-service automation&lt;/strong&gt;, often referred to as the “walking skeleton”, which creates an Azure Repo, injects an app-type sample, configures, and injects a YAML-based Azure Pipeline, and queues the pipeline as a final validation of the setup … in less than 10 seconds!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working agreements&lt;/strong&gt; to guide how to work together to create positive, productive processes.&lt;/li&gt;
&lt;li&gt;Started a war on &lt;strong&gt;WASTE&lt;/strong&gt; and &lt;strong&gt;Silos&lt;/strong&gt;, by fostering collaboration through centers of enablement, working groups, dojos, and community of practices. See our technical blog for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the next 90-days we plan to switch to implementation mode. We will:
- Enable, foster, steward &lt;strong&gt;guardrails&lt;/strong&gt; and &lt;strong&gt;collaboration&lt;/strong&gt;
- Monitor and learn from &lt;strong&gt;baseline metrics&lt;/strong&gt;
- &lt;strong&gt;Open-source&lt;/strong&gt; our application-type YAML-based pipeline blueprints
- &lt;strong&gt;Automate&lt;/strong&gt; everything automatable.&lt;/p&gt;
&lt;p&gt;Thereafter let your imagination soar, for example &lt;strong&gt;chaos engineering&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;No more silos! Collaborate!&lt;/h1&gt;
&lt;p&gt;Here is a snapshot of the extend of collaboration we achieved during the first 90-days. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Collaboration" src="../images/common-engineering-journal-3-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The variety of teams, the vibrance of collaboration, and the focus on outcomes give me reassurance that we are on the right track and hope that we can achieve the unthinkable as an organization.&lt;/p&gt;
&lt;p&gt;Erasing the silos, avoiding them to regrow like weeds, establishing &lt;strong&gt;TRUST&lt;/strong&gt;, and getting all the stakeholders to collaborate was one of the big tests to date. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Challenges&lt;/h1&gt;
&lt;p&gt;Which brings me to the challenge of launching such a team, especially when you are, like I, a software engineer at heart and want to remain involved “hands-on” with the continuous experimentation, learning, and innovation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Challenges" src="../images/common-engineering-journal-3-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apart from the people management, dealing with rigid and time-consuming processes, a lack of resources in the local market … our team has existing operational support, and quality assurance responsibilities. Balancing these with our quest for bold change and continuous innovation, has challenging. Creating a harmonious team, where everyone takes responsibility for their actions, where we have a work:life balance, and where everyone is a leader is not ea walk in the park.&lt;/p&gt;
&lt;p&gt;Another anomaly that keeps me awake at night, is how to ensure that everyone has an innovation mindset, the time, and the grit to take a chance. I find that many engineers can spend hours talking about a problem, but often have no time to make changes. Hopefully you can give me guidance here.&lt;/p&gt;
&lt;p&gt;My personal mission statement, which I stare at every morning, is to “&lt;strong&gt;encourage everyone’s creativity, passion, purpose, and strengths&lt;/strong&gt;.”&lt;/p&gt;
&lt;p&gt;I am experimenting with a variety of guidance from David Marquet, carrying around his book – Turn the ship around – wherever I go.&lt;/p&gt;
&lt;p&gt;I always remind myself to foster autonomy, mastery, and purpose, as discussed by Daniel Pink.&lt;/p&gt;
&lt;p&gt;Inspired by Elon Musk and SpaceX’s phenomenal innovation, I encourage my team to simplify everything, automate everything automatable, and question all processes, often provoking colleagues when I ask the five WHYs and rip parts out of an inefficient process.&lt;/p&gt;
&lt;p&gt;Last, but not least, I remember everyone to have FUN to combat today’s stressful days of isolated and remote engineering, and to remind us of the need to balance work and life. A reason our most recent quarterly update looked more like a newspaper than a formal report.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;FAILURE is good!&lt;/h1&gt;
&lt;p&gt;I work hard to create a mindset to continuously experiment, embrace FAILURE as an opportunity to learn, and innovate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Challenges" src="../images/common-engineering-journal-3-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will soon see the round red sticker appearing on our laptops to encourage everyone else to follow suit.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Dream Team&lt;/h1&gt;
&lt;p&gt;To be successful you need a DREAM TEAM …&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dream Team" src="../images/common-engineering-journal-3-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;... a self-organizing, self-managing, and cohesive team!&lt;/p&gt;
&lt;p&gt;In my humble opinion the secret sauce is &lt;strong&gt;TRUST&lt;/strong&gt;. You must trust each other, your leadership, your stakeholders, your end-users, and vice versa! No &lt;strong&gt;TRUST&lt;/strong&gt;, no dream!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Working Agreement&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="EDO Ce" src="../images/common-engineering-journal-3-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We live and breathe by our &lt;a href="https://wsbctechnicalblog.github.io/dream-team-working-agreement-poster.html"&gt;working agreement&lt;/a&gt;, with an emphasis on optimizing meetings … another Elon Musk inspiration … and inspire an Agile, Kanban, and DevOps mindset, as well as DevOps core values.
Our working agreement has triggered a range of other working agreements, such as starting a center of enablement or rotating through our common engineering team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;THANK YOU&lt;/h1&gt;
&lt;p&gt;... for reading (listening)!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="EDO Ce" src="../images/common-engineering-journal-3-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Catch me on &lt;a href="https://www.twitter.com/wpschaub"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/wpschaub"&gt;LinkedIn&lt;/a&gt; to discuss the session.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;REFERENCES&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/ceremony-overview.html"&gt;Collaboration - Centers of Enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="ttps://www.tactec.ca/devops-core-values"&gt;DevOps Core Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/283168484/"&gt;DevOps Vancouver Meetup - January 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="X"&gt;DevOps Vancouver Meetup - January 2022 Recording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnbc.com/2018/04/18/elon-musks-productivity-rules-according-to-tesla-email.html"&gt;Elon Musk’s 6 productivity rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093"&gt;Meetup - Common Engineering System at WorkSafeBC&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555"&gt;Meetup - Why we should (not) care about Pipelines!?!&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.ca/Around-Story-Turning-Followers-Leaders/dp/1591846404"&gt;Turn the Ship Around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/devops/what-is-devops-donovan"&gt;What is DevOps?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/wpschaub"&gt;Willy-Peter Schaub LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/pulse/summary-some-my-publications-willy-peter-schaub"&gt;Willy-Peter Schaub Publications&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitter.com/wpschaub"&gt;Willy-Peter Schaub Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsbctechnicalblog.github.io/index.html"&gt;WSBC Technical Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category><category term="event"></category></entry><entry><title>When should we automate tests</title><link href="https://wsbctechnicalblog.github.io/when-should-we-automate-tests.html" rel="alternate"></link><published>2022-01-26T00:00:00-08:00</published><updated>2022-01-26T00:00:00-08:00</updated><author><name>Aditya Chourasiya</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-26:/when-should-we-automate-tests.html</id><summary type="html">&lt;p&gt;This article is gist of brainstorming session among Quality Assurance (QA) team.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Automation is advised when tests are &lt;strong&gt;prone to human error&lt;/strong&gt; or &lt;strong&gt;complex&lt;/strong&gt; or if they need &lt;strong&gt;repeating&lt;/strong&gt;, &lt;strong&gt;reporting&lt;/strong&gt; , &lt;strong&gt;execution speed&lt;/strong&gt; and off course fetch good &lt;strong&gt;return on investment&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;On the contrary, test cases for aesthetics, accessibility, one-time, urgent non-regression(hotfixes), exploratory, with unpredictable results and/or with less return on investment,  should not be automated. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Navigating the Future" src="../images/chapline-automation.gif"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let's dive in reasons and examples&lt;/h1&gt;
&lt;p&gt;These are few reasons to automate (not in order)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repeating&lt;/strong&gt; - Apart from typical regression suite this will include running large number of tests, multi platform, multi browser, performance tests, overnight tests or tests with big set of data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Critical path&lt;/strong&gt; - If the user action sequence / path or application function is critical to your business, it's recommended to automate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prone to human error&lt;/strong&gt; - large number of data fields, complex technical steps like Database test, Security tests should be automated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reporting&lt;/strong&gt; - Legal, audit, low confidence or high stake tests should be automated for reporting and logs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execution speed&lt;/strong&gt; - parallel and automated execution can help run all sort of test much faster, however planning, automation, triage may take more time depending on type of tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Return on investment&lt;/strong&gt; - While there is no exact number, as a rule of thumb anytime you're saving more money with automation, you should.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are few reasons not to automate (not in order)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aesthetics&lt;/strong&gt; - User experience , look and feel, colour and images verification require complex human context and interpretation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt; - Similar to aesthetics, accessibility, usability, language, grammar, etc should be verified manually&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-time&lt;/strong&gt; - Urgent non-regression hotfix, non-critical, or very small changes can/may be manually verified  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unpredictable results&lt;/strong&gt; - Exploratory, time delay tests, random tests can/will rely on manual execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inadequate return on investment&lt;/strong&gt; - Automated test for short lived products, small scale development, duplicate tests should be avoided &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Summary and invite&lt;/h1&gt;
&lt;p&gt;While ability and enthusiasm to automate is important, it is more important to know when to automate and avoid &lt;a href="https://en.wikipedia.org/wiki/Gold_plating_(project_management)"&gt;gold plating&lt;/a&gt;. I will link the video for discussion in next commit. Thank you for reading. Please feel free to submit a pull request to suggest any changes.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="testing"></category><category term="devops"></category></entry><entry><title>Work-about-work</title><link href="https://wsbctechnicalblog.github.io/work-about-work.html" rel="alternate"></link><published>2022-01-25T00:00:00-08:00</published><updated>2022-01-25T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-25:/work-about-work.html</id><summary type="html">&lt;p&gt;Avoid the overhead of work-about-work and adopt real time collaboration&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Work" src="../images/hard-work-pays-off-meme.jpg"&gt;&lt;/p&gt;
&lt;p&gt;When running a business, we must rely on some resources. Those resources are not free. We keep paying for the office space, the hydro and other utility bills, internet connectivity, office supplies, plus the payroll and other expenses. It is easy to calculate precisely how much is one hour of operations costing us. The money keeps flowing out the door as we’re staying in business. It is not enough to rake in hefty revenue – we need to stay on top of our expenses too. Only that way can we not only break even, but also turn a little bit of profit on top.&lt;/p&gt;
&lt;p&gt;Since we are paying all those bills anyway, there is a tendency to maximize the utilization of resources that are at our disposal. But that could be a slippery slope. In this article I’ll try to explain some of the potential pitfalls that may await when we strive to maximize the utilization of our resources.&lt;/p&gt;
&lt;h2&gt;Divvy up the workload&lt;/h2&gt;
&lt;p&gt;Whenever there is task to be done, the first thing that comes to mind tends to be: is there a way to divvy up the workload and spread it around? We are hoping to fully utilize the workforce we are paying for. Instead of giving the task to one staff member to work on, the thinking is that giving parts of the task to multiple members will enable them to work in parallel. That in turn will result in the task getting done much sooner. If it takes one person five days to complete the task, divvying it up to five people will take one day to complete the task.&lt;/p&gt;
&lt;p&gt;The above way of thinking is what we sometimes call false math. Why? We call it false math because it willfully ignores newly emerged tasks that get created by divvying up the original task. If we have given the task to a single staff member, they would focus on finishing it on time. No other activities around that task would be necessary.
However, the moment we start gunning for the work-in-parallel, we are creating brand new activities on top of the original task. Which activities? Activities we call work-about-work.&lt;/p&gt;
&lt;h2&gt;What is work-about-work?&lt;/h2&gt;
&lt;p&gt;When a single staff member starts working on a task, the situation is very clear. The worker is now focused on the task at hand, and there isn’t anything else vying for their attention. But when multiple people start working on parts of the task, they cannot afford to only focus on their chunk of work. They need to every now and then sync up with other workers to make sure their work fits properly into the overall goal. Furthermore, the team working on different parts in parallel suddenly demand an oversight. A considerable and significant effort toward coordination, synchronization, and potential corrective actions must be put in place. That means hiring additional staff who will act as supervisors, managers, foremen on the site.&lt;/p&gt;
&lt;p&gt;The false math kicks in, and we quickly learn that maximizing resource utilization turns into fool’s gold. Instead of completing the task in one fifth of the time, we end up spending twice as much time as we would’ve spent if we were to leave a single worker with their task.&lt;/p&gt;
&lt;p&gt;So, we see that work-about-work can be exorbitantly costly.&lt;/p&gt;
&lt;p&gt;On the other hand, the conundrum remains: how do we keep all our staff occupied, if not by divvying up the workload? We cannot agree to ask them to work sequentially. We do not want to have some team members idling for days on end while they wait on some other busy members to finish their tasks.&lt;/p&gt;
&lt;h2&gt;Collaboration over communication&lt;/h2&gt;
&lt;p&gt;When we examine work-about-work, we find that it’s all about communication. Communicating where are we at in the project trajectory, communicating where are other members at, then communicating on what kind of additional work is needed to synchronize various pieces of the task, and so on. Communication is the most expensive way to work. It eats up a lot of cycles while at the same time never produces anything deliverable to the customer. As such, it should be viewed as waste.&lt;/p&gt;
&lt;p&gt;Collaboration, on the other hand, is much superior when compared to communication. While communication is asynchronous (usually via emails, memos, wikis, reports, chats, pull requests, code reviews, change management reviews, etc.), collaboration is synchronous. Collaboration can only happen in real time, face to face.&lt;/p&gt;
&lt;p&gt;When working in real time, face to face, there is no need for spending time on doing extra communication chores. Everything that needs to be explained or clarified is right there, in front of the team doing the work. Once the team finishes the work, there is no need to spend time reviewing the work. The team knows what shape the work is in, and no one other than the team itself is more qualified to make that judgment call.&lt;/p&gt;
&lt;p&gt;It is for that reason that we should strive to minimize work-about-work, minimize time spent on asynchronous communication, and maximize collaboration.&lt;/p&gt;</content><category term="Posts"></category><category term="collaboration"></category><category term="team-building"></category></entry><entry><title>Selling technical excellence is the most challenging job</title><link href="https://wsbctechnicalblog.github.io/selling-technical-excellence.html" rel="alternate"></link><published>2022-01-24T00:00:00-08:00</published><updated>2022-01-24T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-24:/selling-technical-excellence.html</id><summary type="html">&lt;p&gt;Technical excellence is best practiced by collaborating in real time&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Life insurance" src="../images/lifeinsurance.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;I’ve joined WorkSafeBC DevOps department in February 2019 (almost three years ago). My mandate was to introduce and cultivate technical excellence by acting as the Software Development Practice Lead. In my mind, it reads as a sales job – try to sell the need for raising the bar on technical excellence. I knew it was going to be a challenging job.
Fast forward to today, and looking back, I can gather some of my observations and impressions. How did the sales job go?&lt;/p&gt;
&lt;h2&gt;Some misconceptions about the resistance to technical excellence&lt;/h2&gt;
&lt;p&gt;Whenever I discuss the challenges of selling the need for technical excellence, I keep hearing incorrect opinions regarding why it is such an uphill battle. Basically, many people seem to think that the pushback is solely coming from the non-technical areas of the company. In my experience, nothing could be farther from the truth. During my tenure at WorkSafeBC (and in many of my previous jobs), executives, upper management, middle management, product owners, and Scrum Masters have always been in full support of introducing and cultivating technical excellence. I’ve never experienced anyone from those roles ever asking me to abandon my attempts to introduce and cultivate technical excellence.&lt;/p&gt;
&lt;h2&gt;Where is the resistance to technical excellence coming from?&lt;/h2&gt;
&lt;p&gt;Whenever we talk about introducing new principles, processes, and practices in support of cultivating heightened technical excellence, those new practices only affect teams who are creating and releasing software. It is not surprising that oftentimes the biggest push is coming from those departments.&lt;/p&gt;
&lt;p&gt;Non-technical departments are never affected by the new practices dedicated to technical excellence; therefore, it doesn’t make much sense for those areas to push back on it. But because teams that are responsible for creating and releasing software are directly affected by the introduction of practices that pursue technical excellence, it is to be expected that they will raise all kinds of concerns.&lt;/p&gt;
&lt;p&gt;What are some of those concerns?&lt;/p&gt;
&lt;h2&gt;Sticking to the winning strategy&lt;/h2&gt;
&lt;p&gt;There is a saying that if it ain’t broke, don’t fix it. Oftentimes we see teams that are delivering on a cadence and staying in the game. To some, that’s a good enough proof that there is no need to change the winning team. The fact that team members continue getting a paycheck and keep their position, to them means that insisting on introducing technical excellence is nothing but an academic exercise.&lt;/p&gt;
&lt;h2&gt;Change is perceived as a threat&lt;/h2&gt;
&lt;p&gt;Introducing change is often viewed as being potentially risky. There are always a few worrisome questions that people keep getting in the back of their head. Such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What if it turns out I cannot acquire the new skill as quickly as my peers?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I invest time in learning new skills but then there is a reorganization, so all that time ends up being a waste?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if I agree to learn the new skill, but then I end up not having the time to do it?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to fix the stalemate?&lt;/h2&gt;
&lt;p&gt;In my experience, the best way to make a breakthrough and avoid the above-described stalemate is to promote real time collaboration. The main advantage of real time collaboration is in the shifting of the focus from measuring and tracking individual team members performance, to focusing on the team performance as the smallest unit of measure. When the team is working together on preparing and delivering value, individual contributions meld into a more holistic way of working. That way, many of the above concerns simply melt away and disappear. Working together in real time is also the best opportunity for acquiring new knowledge and new skills. Simply by attending collaboration sessions, each team member upgrades their level of expertise, and it feels like fun doing so.&lt;/p&gt;
&lt;p&gt;It is therefore highly recommended to provide the context and the conditions for full collaboration in real time. Doing that will enable teams to embrace and fully cultivate technical excellence without being concerned about any negative consequences.&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category></entry><entry><title>Make your pipeline badges more compact and meaningful</title><link href="https://wsbctechnicalblog.github.io/pipelines-badges.html" rel="alternate"></link><published>2022-01-17T00:00:00-08:00</published><updated>2022-01-17T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-17:/pipelines-badges.html</id><summary type="html">&lt;p&gt;Tired of cluttering your dashboards with duplicated waste?&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have dashboards with multiple pipeline badges to keep an eye on our Azure DevOps pipelines. I often wondered why we cannot change the "Azure Pipelines" label to reduce the duplication (WASTE) and make our dashboards more compact.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipeline-badges-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Well, if you change ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//dev.azure.com/demo-org/demo-proj/_apis/build/status/Reporting/Azure%20Pipelines%20Totals?branchName=master)](https://dev.azure.com/demo-org/demo-proj/_build/latest?definitionId=1818)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;... to ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//dev.azure.com/demo-org/demo-proj/_apis/build/status/Reporting/Azure%20Pipelines%20Totals?branchName=master&amp;amp;label=PIPELINE%20TOTALS)](https://dev.azure.com/demo-org/demo-proj/_build/latest?definitionId=1818)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;... by adding &lt;code&gt;&amp;amp;label=&amp;lt;TEXT&amp;gt;&lt;/code&gt;, you can enjoy a more compact version of your dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SpaceX" src="../images/pipeline-badges-2.png"&gt;&lt;/p&gt;
&lt;p&gt;I stumbled over this tweak in a recent Azure DevOps community chat and realized that I must read the Azure DevOps REST API documentation a bit more carefully. See &lt;strong&gt;URI Parameters&lt;/strong&gt; in &lt;a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/build/status/get?view=azure-devops-rest-6.0"&gt;Status Get&lt;/a&gt; and notice "&lt;em&gt;Replaces the default text on the left side of the badge.&lt;/em&gt;"&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>The problem with big batches</title><link href="https://wsbctechnicalblog.github.io/the-problem-with-big-batches.html" rel="alternate"></link><published>2022-01-11T00:00:00-08:00</published><updated>2022-01-11T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-11:/the-problem-with-big-batches.html</id><summary type="html">&lt;p&gt;Improve the predictability of delivering business value by reducing the utilization rates&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Big batch" src="../images/batch.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article is largely a summary of the &lt;a href="https://twitter.com/d_stepanovic/status/1480941814895063045"&gt;brilliant thread&lt;/a&gt; by &lt;a href="https://twitter.com/d_stepanovic"&gt;Dragan Stepanovic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are learning how to transform organizational culture from focusing on measuring and tracking &lt;strong&gt;outputs&lt;/strong&gt; to focusing on measuring and tracking &lt;strong&gt;outcomes&lt;/strong&gt;. Immature practices tend to focus on measuring and tracking outputs for the simple reason that outputs are much easier to measure and track. Traveling along the trajectory of the least resistance, our need to &lt;strong&gt;reduce uncertainties&lt;/strong&gt; and &lt;strong&gt;increase predictability&lt;/strong&gt; is leading us to latch onto whatever is immediately available for measuring and tracking.&lt;/p&gt;
&lt;p&gt;However, we slowly but surely learn that outputs almost never correlate to or map on to outcomes. For example, if we are measuring and tracking number of lines of code that a software development team produces in a unit of time, we will have hard time proving that the more lines of code the team produces, the better the outcomes.&lt;/p&gt;
&lt;p&gt;Similar reasoning applies to measuring and tracking number of work items completed, number of user story points delivered, number of stories closed, number of features shipped, and so on.&lt;/p&gt;
&lt;p&gt;If we agree that outcomes matter far more than outputs, we are faced with the challenge: how do we measure outcomes?&lt;/p&gt;
&lt;h2&gt;Business value&lt;/h2&gt;
&lt;p&gt;A useful &lt;strong&gt;Key Performance Indicator (KPI)&lt;/strong&gt; for measuring the outcomes is often referred to as &lt;strong&gt;business value&lt;/strong&gt;. What is business value?&lt;/p&gt;
&lt;p&gt;Maybe it’s easier to say what business value is not. For example, it is clearly obvious that number of lines of code produced in the unit of time cannot by any stretch of imagination be viewed as being business value. Same goes for number of work items completed, number of user story points completed, and so on.&lt;/p&gt;
&lt;p&gt;Business value needs to be associated or correlated with measurable impacts. Such as, for example, improved customer satisfaction. Or increased revenue stream. Or improved profit margins. Or reduced cost of doing business. Or enhanced reputation on the market.&lt;/p&gt;
&lt;h2&gt;Delivery of Business Value&lt;/h2&gt;
&lt;p&gt;Once we set our sights on delivering business value, we naturally strive to maximize the throughput of said value. If a little bit of business value is desirable, then naturally more business value is much more desirable.&lt;/p&gt;
&lt;p&gt;Now, that way of thinking could turn into a slippery slope. And it all has to do with &lt;strong&gt;batch sizes&lt;/strong&gt;. Humour me for a few moments.&lt;/p&gt;
&lt;p&gt;Sizeable business value immediately suggests a big chunk of work. A big chunk of work immediately suggests big risk. But since we’re talking value, the risk may be worth taking, after all.&lt;/p&gt;
&lt;p&gt;And so, we go back to the problem of increasing predictability. Predictability is tightly coupled with the uncertainty of “when will desired business value be delivered?” No one has the crystal ball, and since we live in the world riddled with &lt;strong&gt;V&lt;/strong&gt;olatility, &lt;strong&gt;U&lt;/strong&gt;ncertainty, &lt;strong&gt;C&lt;/strong&gt;omplexity, and &lt;strong&gt;A&lt;/strong&gt;mbiguity (&lt;strong&gt;VUCA&lt;/strong&gt;), we know that predictability is a tricky proposition.&lt;/p&gt;
&lt;p&gt;Knowing that, how do we commence work needed to deliver business value? We tend to &lt;strong&gt;maximize resource utilization&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Where is the problem in that? The problem is potentially twofold.&lt;/p&gt;
&lt;h2&gt;Are big batches chockful of value?&lt;/h2&gt;
&lt;p&gt;One assumption when maximizing the business value is that loading up various features and functionality into a single batch means that we’re expecting customers to find everything we deliver in a big batch valuable.&lt;/p&gt;
&lt;p&gt;That is a risky assumption. Without receiving customer feedback, we cannot be sure if the functionalities and features we delivered are being perceived as valuable by the customers.&lt;/p&gt;
&lt;p&gt;And because customers will get presented with a big batch of changes, it will be difficult at that point to collect much needed, precise feedback. The change is overwhelming.&lt;/p&gt;
&lt;p&gt;More likely than not, some of the features and functionality delivered in the big batch will not make any impact (some sources quote that around 60% of big batches contain dubious value, on average). Which, in the final analysis, reads as waste.&lt;/p&gt;
&lt;p&gt;Not everything shipped in the big batch is going to be valuable to the customers. That being the case, why bother cramming so much assumed value in?&lt;/p&gt;
&lt;p&gt;We may spend some time in our office daydreaming about the features and functionalities our customers may find valuable. But without shipping those hypothetical features and functionality into customers’ hands and collecting feedback from them, we have no way of knowing.&lt;/p&gt;
&lt;h2&gt;Is high utilization rate the quickest way to deliver value?&lt;/h2&gt;
&lt;p&gt;It may make sense to organize the system in such a way that all resources at our disposal are utilized to the maximum. Never a dull moment may appear as the most prudent way to go. After all, we are employing top shelf experts and products, tools, and platforms. Why not take advantage of that phenomenal potential, and go full bore when creating business value?&lt;/p&gt;
&lt;p&gt;That approach, as common-sense as it appears to be, poses certain challenges. The nature of work in a fully loaded organization is such that it results in a lot of &lt;strong&gt;wait time&lt;/strong&gt;, instead of resulting in a lot of &lt;strong&gt;work time&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is for that reason that it is not recommended to strive toward a fully loaded organization.&lt;/p&gt;
&lt;p&gt;Value stream delivery crews quickly recognize this problem (too much idling time in a fully loaded organization). It is not difficult to spot long wait times. To deliver almost any change, the requesting teams are instructed to “take a number” and patiently wait for their number to be called.&lt;/p&gt;
&lt;p&gt;Another problem with that arrangement is related to measuring and tracking. Most tools and practices are geared toward only measuring the &lt;strong&gt;work time&lt;/strong&gt;. None of the existing processes seem keen on capturing and tracking &lt;strong&gt;wait times&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That bias gives a skewed perspective on how the work is progressing. In the end, the entire operation gets perceived as being &lt;strong&gt;extremely unpredictable&lt;/strong&gt;, because wait times don’t prominently figure in the tracking reports. Everyone’s eyes seem to be glued to tracking the time spent working, not tracking time spent waiting.&lt;/p&gt;
&lt;p&gt;We see that high utilization rates create a lot of speed bumps in the process (everyone is fully loaded; requests need to wait for their turn). Those speed bumps contribute to the unpredictability of the delivery. High utilization rates are not the best way for the quickest delivery of desired value.&lt;/p&gt;
&lt;h2&gt;Dealing with unpredictability&lt;/h2&gt;
&lt;p&gt;Unpredictability of delivery is highly undesirable. How do we deal with that?&lt;/p&gt;
&lt;p&gt;We ask people who work in a fully loaded system to give us &lt;strong&gt;estimates&lt;/strong&gt;. The thinking is that precise estimates will enable us to better predict when will the desired business value be shipped to the customers.&lt;/p&gt;
&lt;p&gt;When we ask for estimates, what we mean is estimates of &lt;strong&gt;effort&lt;/strong&gt;, not of the wait time. However, seeing how unpredictable wait times are in a fully loaded system, estimates of effort cannot deliver any reasonable degree of predictability. We often hear “your guess is as good as mine” when asking some team to tell us when will the value be delivered. The team is not being difficult when they reply in that fashion; they are merely signaling the undeniable fact that wait times in a fully loaded system are grossly unpredictable.&lt;/p&gt;
&lt;p&gt;And if we switch the focus and ask the teams to estimate the wait times instead of estimating the effort, that would be a losing proposition, because no one can estimate that with any degree of accuracy.&lt;/p&gt;
&lt;p&gt;This impasse creates problems. We expect teams to provide estimates and in that way, we put them between the rock and the hard place. Teams know that, due to the nature of working in a fully loaded system, whatever estimate they come up with, will be incorrect. That knowledge damages psychological safety and erodes the trust in the organization.&lt;/p&gt;
&lt;p&gt;Estimating the effort needed to deliver business value in a fully loaded system is therefore poor person’s attempt to achieve predictability and minimize/eliminate uncertainty. As such, it always delivers poor results.&lt;/p&gt;
&lt;h2&gt;What’s the solution?&lt;/h2&gt;
&lt;p&gt;The only leverage point for reducing uncertainty and increasing predictability lies in &lt;strong&gt;reducing the utilization rates&lt;/strong&gt; in the system.&lt;/p&gt;
&lt;p&gt;What is achieved by reducing the utilization rates (i.e., by avoiding setting up a fully loaded system)? Reduction in the utilization rates increases the &lt;strong&gt;flow through the system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How do we reduce the utilization rates? By reducing the batch sizes!&lt;/p&gt;
&lt;p&gt;Instead of daydreaming of building and delivering a big splash product that will woo the market, it is advisable to switch focus on very small hypotheses. Each small hypothesis proposes hypothetical value that we can swiftly deliver, probe, and test on the market.&lt;/p&gt;
&lt;p&gt;By following that model, we preempt the unpleasant question “when will it be done?” If we are releasing in very short bursts (almost daily), no one will have the time to stop and ask for estimates. Why? Because we’re too busy working, delivering value.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="eliminate-waste"></category><category term="agile"></category><category term="devops"></category><category term="no-estimates"></category></entry><entry><title>Make yourself interruptible</title><link href="https://wsbctechnicalblog.github.io/make-yourself-interruptible.html" rel="alternate"></link><published>2022-01-05T00:00:00-08:00</published><updated>2022-01-05T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2022-01-05:/make-yourself-interruptible.html</id><summary type="html">&lt;p&gt;Adopt humble approach when creating software products by making yourself open to interruptions&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Interrupt" src="../images/Interrupt.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's take one simple example: suppose I'm a programmer writing code and I use Notepad to do it. I can lock myself in my office and keep writing code in the Notepad for hours without being interrupted. I'm a professional programmer and I know what I'm doing, right?&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade from Notepad to a sophisticated code editor. If I continue writing code the way I used to do with Notepad, I will start getting interrupted. Why? Because sophisticated code editors are opinionated and will push back if I attempt to write syntactically incorrect code. Notepad, on the other hand, couldn't care less if the code I wrote is correct or not.&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade to an even more sophisticated code editor that on every diff runs all tests in the background. The moment any test fails, the editor interrupts my coding session and demands that I fix the failing test.&lt;/p&gt;
&lt;p&gt;Suppose now I upgrade to an even more sophisticated code editor that on every diff runs all tests in the background, and when all tests pass it runs mutation testing. If there are any surviving mutants, it interrupts my coding session and demands that I kill all surviving mutants before I could continue writing code.&lt;/p&gt;
&lt;p&gt;All those interruptions are extremely desirable if we care at all about the quality of our work.&lt;/p&gt;
&lt;h2&gt;Are interruptions slowing us down?&lt;/h2&gt;
&lt;p&gt;Common sense thinking is prone to viewing interruptions as a speed bump. If I know exactly what I’m doing, what’s the point in me being interrupted? My flow will slow down, and the delivery will inevitably suffer.&lt;/p&gt;
&lt;p&gt;Few years ago, I went to IKEA and purchased a large bookshelf. Brought it home, unpacked it, and studied the instruction sheet. Since I’m an engineer by training, I was confident that I completely understood the prescribed process of assembling the shelf.&lt;/p&gt;
&lt;p&gt;I jumped into action and spent a few hours working on the big shelf without any interruptions. When I was finished and stood the shelf up, I realized that I have assembled it incorrectly – it looked the way a normal shelf would look when viewed in a mirror! Obviously, the shelf was not safe to use in such botched shape, so I had to disassemble it and then reassemble it following the instruction sheet very carefully.&lt;/p&gt;
&lt;p&gt;So, what was happening now that I realized the importance of respecting and following the instruction sheet to the letter? I started getting many, many interruptions while I was working on it. Those interruptions were slowing down the flow of work. I had to stop my work, put down the tools and the parts of the shelf I was holding in my hands, bring the instruction sheet up to my attention, and study it carefully before making the next decision. That took some extra time.&lt;/p&gt;
&lt;p&gt;However, overall, I finished the shelf in less than half the time it took me originally to assemble it, realize it was botched, disassemble it, and then waste time on few expletives.&lt;/p&gt;
&lt;p&gt;I now apply the same approach to creating software. I welcome interruptions. Any time I make a change to the code, I invite the system to run and let me know if my change broke anything. If it did, I reset the system to its previous working state, and try again. If it didn’t break anything, I continue confidently, knowing that the software I’m creating is always in its fully functional state.&lt;/p&gt;
&lt;p&gt;And that, in my experience, is the fastest way to work and release software.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="TDD"></category><category term="eliminate-waste"></category><category term="agile"></category><category term="devops"></category></entry><entry><title>DevOps value proposition</title><link href="https://wsbctechnicalblog.github.io/devops-value-proposition.html" rel="alternate"></link><published>2021-12-30T00:00:00-08:00</published><updated>2021-12-30T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-30:/devops-value-proposition.html</id><summary type="html">&lt;p&gt;DevOps introduces simultaneous focus on expectations, architecture, design, testing, building, releasing, and running the system&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="DevOps Yoda" src="../images/DevOps.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Software engineering consists of four distinct activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Envisioning software&lt;/li&gt;
&lt;li&gt;Creating software&lt;/li&gt;
&lt;li&gt;Releasing software&lt;/li&gt;
&lt;li&gt;Running software&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Traditionally, those four activities were compartmentalized into four distinct divisions/departments/teams. There are departments and teams that work on envisioning/hypothesizing and gathering the requirements. There is a hand-off from those upstream departments to the downstream software creation departments (consisting of software architects, modelers, designers, coders, and testers).&lt;/p&gt;
&lt;p&gt;There is a hand-off from those upstream software creation departments to downstream software release departments. Those departments consist of release engineers who are concerned with mitigating risks via proper change control processes.&lt;/p&gt;
&lt;p&gt;There is a hand-off from those upstream software release departments to downstream sustainment and reliability departments. Those teams are responsible for running the released software and keeping the lights on.&lt;/p&gt;
&lt;p&gt;The above arrangement has proven inefficient when it comes to competing on the mainstream market. Any change necessary for improving the quality of the service takes way too long, due to the gated phases and asynchronous “take a number” approach to attending to the process. Value stream delivery tends to be very choppy and unpredictable following the traditional software engineering model.&lt;/p&gt;
&lt;h2&gt;There is room for improvement&lt;/h2&gt;
&lt;p&gt;The proposed improvement arrived in the form of Extreme Programming, Agile Manifesto, and DevOps. In a nutshell, the proposed change starts with the suggestion to remove the above four silos and to combine all four distinct activities (envisioning, creating, releasing, and running) into a single activity. DevOps is a discipline that is based on doing all those four activities simultaneously. DevOps teams engage in envisioning, creating, releasing, and running software as part of their daily activities.&lt;/p&gt;
&lt;p&gt;What would be the advantages of this newfangled approach? The constraints of being expected to perform all four activities at once forces organizations to focus on reducing the average batch sizes and limiting the number of items being worked on at the same time (limited Work in Progress).&lt;/p&gt;
&lt;p&gt;As a result, it gets easier to ensure technical excellence and overall quality of the value delivered to the paying customers, because issues and errors caught tend to be small, with a very limited blast radius.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="eliminate-waste"></category><category term="devops"></category></entry><entry><title>How to tame your vacation email traffic</title><link href="https://wsbctechnicalblog.github.io/optimize-and-avoid-emails.md.html" rel="alternate"></link><published>2021-12-24T00:00:00-08:00</published><updated>2021-12-24T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-24:/optimize-and-avoid-emails.md.html</id><summary type="html">&lt;p&gt;How to ensure you are not confronted by hundreds of emails when you are back-to-work.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We pick up from the &lt;a href="/optimize-and-track-emails.html"&gt;How to track (and optimize) your email traffic&lt;/a&gt; post, where we have discussed the tsunami wave of emails we receive and process every day. I would like to focus on avoiding the &lt;strong&gt;WASTE&lt;/strong&gt;ful first day back at work, when we spend hours processing hundreds of emails we received while we were away on a well-deserved vacation.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Why should we avoid the return-to-work flood of emails?&lt;/h1&gt;
&lt;p&gt;We have all had the terrifying welcome back to work experience, when we opened our favourite email client and stared at hundreds of emails seeking our attention. After hours of reading dated and often redundant emails, we have a brief sense of achievement when the inbox is finally empty - similar to sorting bottle tops into respective colours.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Emails" src="../images/optimize-and-avoid-emails-0.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, we just wasted hours of precious time we could have used for more productive work and often find ourselves behind schedule and stressed out after the first day of work. What is important to realize is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email that has been sitting in your inbox for days or weeks is most likely &lt;strong&gt;outdated&lt;/strong&gt; by the time you read it.&lt;/li&gt;
&lt;li&gt;Many emails are fire-and-forget type communication and will be &lt;strong&gt;rotting&lt;/strong&gt; by the time you read them.&lt;/li&gt;
&lt;li&gt;Users will automatically loop other users into their email thread if they realise you are out of office or touch base with you again when you return.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Every second you spend on outdated email is &lt;strong&gt;WASTE&lt;/strong&gt;!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Create a vacation rule&lt;/h1&gt;
&lt;p&gt;I recommend you create a vacation rule which automatically moves all inbound email to a bucket you can reference, not process, in future.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Rule" src="../images/optimize-and-avoid-emails-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This ensures that you can hit the ground running when you return to work, rather than sorting through a pile of junk for hours first.&lt;/p&gt;
&lt;p&gt;More importantly, it discourages you from "quickly" checking your email during precious family time in order to avoid the inbox from hell. To achieve a &lt;strong&gt;work-life balance&lt;/strong&gt; you must &lt;strong&gt;STOP&lt;/strong&gt; mixing the two!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Set the expectations in your out of office message&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Rule" src="../images/optimize-and-avoid-emails-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I go away for a longer period, I enable both the &lt;strong&gt;Archive OOO&lt;/strong&gt; email rule and create an out of office message. You will notice in the red text, that I set a clear expectation with senders that I will &lt;strong&gt;not&lt;/strong&gt; process their email.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Last, but not least, your phone is a phone!&lt;/h1&gt;
&lt;p&gt;Oh, how I hate my mobile device at times. It started as a handy text + phone device with a short-lived and huge battery in the 90's but evolved into an ever-lasting digital device that follows you to the end of the world, interrupts your precious family time, and encourages you to keep track of email.&lt;/p&gt;
&lt;p&gt;Please note that I have uninstalled business email, business collaboration, and social channels such as Facebook from my mobile "phone".&lt;/p&gt;
&lt;p&gt;Worst case you can drag your business phone and laptop with you on vacation, but intentionally leave your chargers at home. That gives you a few hours of distraction at worst.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;With that, I wish everyone a safe, warm, and festive holiday season, as well as a jump into a successful new year!&lt;/p&gt;
&lt;p&gt;C (see) U (you) in 2022!&lt;/p&gt;</content><category term="Posts"></category><category term="tips"></category></entry><entry><title>How to minimize queueing</title><link href="https://wsbctechnicalblog.github.io/how-to-minimize-queueing.html" rel="alternate"></link><published>2021-12-23T00:00:00-08:00</published><updated>2021-12-23T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-23:/how-to-minimize-queueing.html</id><summary type="html">&lt;p&gt;Adopt the humble approach to only work in smallest possible batches with limited work-in-progress&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Queue" src="../images/queue.png"&gt;&lt;/p&gt;
&lt;p&gt;In my previous post &lt;a href="https://wsbctechnicalblog.github.io/flow-of-work.html"&gt;Systems thinking and the flow of work&lt;/a&gt;, I tried to describe the sluggish/unpredictable software delivery caused by queueing and looping. Adding speed bumps introduces unwanted wait time that is exacerbated by frequent requests for retries. A gated phase, a quality inspection gate, often finds fault with proposed changes and asks the authoring team to try again. Those retries add significant amount of waste to the process.&lt;/p&gt;
&lt;p&gt;How to avoid such unwanted delays? There are a few ideas that may help:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Insist on getting clear expectations&lt;/li&gt;
&lt;li&gt;Insist on vertically slicing the expected delivery&lt;/li&gt;
&lt;li&gt;Insisting on starting together, working together, finishing together&lt;/li&gt;
&lt;li&gt;Insist on smallest possible batches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s examine these ideas.&lt;/p&gt;
&lt;h2&gt;Insist on getting clear expectations&lt;/h2&gt;
&lt;p&gt;While it may seem obvious that clear expectations are needed, every now and then we receive expectations that are somewhat muddled. By muddled I mean not carefully thought through. The rationale is that it is quicker to start building the hypothesized solution than it is to spend extra time hammering out the expectation.&lt;/p&gt;
&lt;p&gt;The problem is that oftentimes it is a false math to assume so. Rushing to implement a half-baked expectation tends to result in bloat. We will see later in this article why is bloat extremely wasteful.&lt;/p&gt;
&lt;p&gt;Another problem is that muddled expectation may send us off on a wild geese chase. I will use an example from my career to illustrate that pattern (names will be withheld to protect the innocent):&lt;/p&gt;
&lt;p&gt;I was once consulting for a large organization whose Credit department was experiencing series of issues. To cut the long story short, that department somehow could not properly balance their books. The ledger was for some reason always off, and that was causing a lot of churn.&lt;/p&gt;
&lt;p&gt;I did initial interview with stakeholders and was informed that the reason the processing in their department was often so wrong boiled down to inadequate software system they were using at that time, as well as down to staff errors – ‘fat fingers’ data entry mistakes and so on. They would like me to help them design better software solution that would preclude human data entry errors and also set the books straight.&lt;/p&gt;
&lt;p&gt;Makes sense. So, I started drilling deeper into the business domain, to understand business policy rules and document the expectations with regards to various use cases.&lt;/p&gt;
&lt;p&gt;That’s where the muddled expectations started entering the picture. I was getting several half-baked, imprecise use cases. Such muddled use cases could not be tested, and as such could not be automated.&lt;/p&gt;
&lt;p&gt;Naturally, I pressed upon the stakeholders to provide me with clearer expectations. To which I started receiving annoyed responses, such as “I don’t know; you are the software developer, you figure it out!”&lt;/p&gt;
&lt;p&gt;It was clear to me, at that point, that the entire project was a no go, and I gracefully bowed out.&lt;/p&gt;
&lt;p&gt;Moral of the story – insisting on crisp and clear expectations is necessary. Without it, we cannot even know if it makes sense to continue being engaged on the project.&lt;/p&gt;
&lt;h2&gt;Insist on vertically slicing the expected delivery&lt;/h2&gt;
&lt;p&gt;Once the expectation is clearly stated, it is important to abstain from overbidding. Instead of knee-jerk agreeing to implement the expectation as it is stated, it is more prudent to investigate the possibility of vertically slicing it. Commit to delivering the solution iteratively, rather than in one big fell swoop. Explain to the stakeholders that the intention is to engage them in swift and frequent delivery. Such approach is needed to gather quick and valuable feedback from them.&lt;/p&gt;
&lt;p&gt;In my experience, stakeholders tend to appreciate such transparency and such proactive engagement. The upside is that it will give the delivery team much better chances of attaining predictive delivery of value.&lt;/p&gt;
&lt;h2&gt;Insisting on starting together, working together, finishing together&lt;/h2&gt;
&lt;p&gt;Once the expectation has been vertically sliced, abstain from assigning individual tasks to individual team members and asking them to scatter and work in parallel, in isolation. Instead, attempt to start as a whole team. Look into the vertically sliced expectation, decide which aspect of the implementation is of the highest priority, then get together and start working on it as a team. Every member who has the so-called ‘skin in the game’ should be present from the get-go. This is important so that every member has a full understanding and a complete grasp of what is going on in the process of building.&lt;/p&gt;
&lt;p&gt;Continue working in such fashion. The ideal model is synchronous collaboration, sometimes called ‘keyboardless programming’. In this mode of collaboration, decisions regarding the design of the system are made by team members who are &lt;strong&gt;not&lt;/strong&gt; sitting at the keyboard. The implementation of those decisions is performed by the so-called “driver”. Another important aspect of such mode of working is &lt;strong&gt;continuous rotation&lt;/strong&gt;; every 5 minutes or so, the driver gets up and joins the navigators, while someone else steps in and becomes the driver.&lt;/p&gt;
&lt;p&gt;Eventually, the mob programming session described above reaches the stage where all team members agree that the solution has reached the “shippable state”. At that point, they finish together and move on to working on the next slice.&lt;/p&gt;
&lt;h2&gt;Insist on smallest possible batches&lt;/h2&gt;
&lt;p&gt;The secret sauce to avoiding queuing and retries is in the art of crafting small batches. Let’s first define what is meant by ‘batch’:&lt;/p&gt;
&lt;p&gt;A batch is defined as a group of items that move together from one step to the next step in the process.&lt;/p&gt;
&lt;p&gt;What is meant by ‘item’? Typically, an item denotes a unit of change that affects the system. It could be a code diff or a configuration diff.&lt;/p&gt;
&lt;p&gt;The more of these items (i.e., diffs) we bundle up and push into the integration and delivery workflow, the larger the batch we must deal with.&lt;/p&gt;
&lt;p&gt;Consider a smallest possible batch: a single item comprising a single diff (such as, for example, a one-line correction in the code syntax). When such batch arrives for inspection, it is so light-footed and innocuous that it will be a breeze to approve.&lt;/p&gt;
&lt;p&gt;Compare that with a large batch that contains hundreds of items, each item consisting of dozens or even hundreds of diffs. Obviously, when such bloated batch arrives at the inspection gate, it will cause a lot of consternation. And rightly so. Alarm bells go off, red flags are raised, and the inspection crew now need to roll up their sleeves and pour over the minutia of that batch. They now have their work cut out for them, and it may take days, even weeks, until the batch either gets cleared (“good to go to the next gated phase”) or gets sent back for a retry (“better luck next time!”).&lt;/p&gt;
&lt;p&gt;And of course, such large batch necessitates long wait queuing times. While the inspection crew is heads down examining the bloated batch, nothing else is moving in the queue. We now have a serious bottleneck.&lt;/p&gt;
&lt;h2&gt;Benefits of small batches&lt;/h2&gt;
&lt;p&gt;There are numerous benefits of working in small batches. Here I will quickly list some of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduction in errors&lt;/li&gt;
&lt;li&gt;Faster feedback&lt;/li&gt;
&lt;li&gt;Reduction in deployment risk&lt;/li&gt;
&lt;li&gt;Increase in frequency of delivering customer value&lt;/li&gt;
&lt;li&gt;Reduction in mean time to recover in case of defects&lt;/li&gt;
&lt;li&gt;Improvement in psychological safety
​​​​​​​&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small batches introduce small, localized changes. That approach reduces the risk of damaging the system operations, as the small change is contained, and the blast radius is quite limited.&lt;/p&gt;
&lt;p&gt;Customers also benefit as they get to enjoy the value sooner than they would if the teams worked with large batches.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="eliminate-waste"></category><category term="estimates"></category></entry><entry><title>Exploring the concept of mob-ownership</title><link href="https://wsbctechnicalblog.github.io/mob-ownership.html" rel="alternate"></link><published>2021-12-23T00:00:00-08:00</published><updated>2021-12-23T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-23:/mob-ownership.html</id><summary type="html">&lt;p&gt;We succeed or fail as a team (mob), not as individuals!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mob-programming, which is the art of an entire team working on the same thing, at the same time, in the same space, and at the same keyboard/monitor, has been on our radar for a while. My colleague &lt;a href="https://wsbctechnicalblog.github.io/author/alex-bunardzic.html"&gt;AlexB&lt;/a&gt; has been driving the software development approach with vigour, demonstrating a drop in &lt;strong&gt;WASTE&lt;/strong&gt; and surge of &lt;strong&gt;shared learning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mob programming" src="../images/mob-ownership-1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What about Mob-ownership?&lt;/h1&gt;
&lt;p&gt;You will find several posts on this blog that emphasize my loathing for &lt;a href="https://wsbctechnicalblog.github.io/tag/eliminate-waste.html"&gt;&lt;strong&gt;WASTE&lt;/strong&gt;&lt;/a&gt;, promotion for continuous learning, improvement, and experimentation, ownership of features from ideation to deprecation, and the courage to &lt;a href="/ooda-one-of-the-devops-genomes.html"&gt;&lt;strong&gt;FAIL&lt;/strong&gt;&lt;/a&gt; as one of the genomes of our healthy DevOps mindset.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Toxic" src="../images/mob-ownership-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The one thing we have not discussed yet, but makes me boil on a regular basis, is the art of toxic “finger pointing.” In other words: “&lt;em&gt;this is not my problem, it must have been caused by [X], in team (silo) [Y].&lt;/em&gt;” &lt;/p&gt;
&lt;p&gt;&lt;img alt="Finger-Point and Waste" src="../images/mob-ownership-2.png"&gt;&lt;/p&gt;
&lt;p&gt;It is another form of &lt;strong&gt;WASTE&lt;/strong&gt; and is extremely &lt;strong&gt;TOXIC&lt;/strong&gt; for things we value, such as collaboration, improvement, learning, and team-work.&lt;/p&gt;
&lt;p&gt;I therefore would like to propose &lt;strong&gt;mob-ownership&lt;/strong&gt;, which extends the concept of &lt;strong&gt;mob-programming&lt;/strong&gt; for people to collaborate to own, analyze, remediate, and learn from one challenge at a time. The challenge could be an experiment, proof-of-concept, program bug, a live site incident, an anomaly in telemetry, or a disagreement in guardrails that protect us from violation company policies or governance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Change “&lt;em&gt;this is not my problem, it must have been caused by [X], in silo [Y]&lt;/em&gt;" to "&lt;em&gt;this is our problem as a team, let us analyse and remediate.&lt;/em&gt;"
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By sharing and collaborating within a joint(mob)-ownership, we not only solve communication problems, enable decision making, avoid toxic politics and harmful context switching, but more importantly accept shared responsibility for every adventure. The “them and us” and associated “finger-pointing” fades away as we grow as a team, fueled by delighted end-users.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mob programming" src="../images/mob-ownership-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="quality"></category><category term="eliminate-waste"></category></entry><entry><title>Journal 2 - Why do we need our common engineering team?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-2.html" rel="alternate"></link><published>2021-12-20T13:13:00-08:00</published><updated>2021-12-20T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-20:/common-engineering-journal-2.html</id><summary type="html">&lt;p&gt;Introducing the voice of reason and stewards of guardrails&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are T+74 calendar days into the journey of our EDO Common Engineering team and it is time to share and update our team journal, post 2. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changing the culture and mindset of engineers and business stakeholders of an organization based on stringent security policies, processes, and segregation of duties takes grit, tenacity, a thick skin, and lots of patience. It often feels like trying to change course of a massive oil-tanker travelling through heavy seas at full speed. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our EDO Common Engineering Team?&lt;/h1&gt;
&lt;p&gt;We want everyone to embrace a healthy DevOps mindset to empower development and operations collaboration and enable us, as an organization, to “delight our end-users”, most importantly our BC employers and workers, our WorkSafeBC workers, and IT engineers. It is important we shift the focus from creating technological marvels and snowflakes, to reducing waste, automate everything automable, and delivering value to our end-users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you boarded your last cross-Atlantic flight, were you interested in how the plane was assembled and which processes or products were used? I believe your response is "NO". What you cared about was the outcome, landing safe and on time at your destination.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, our goal is not just automation and enabling technology, but to deliver &lt;strong&gt;value&lt;/strong&gt;. Any innovation, transformation, or measured value is worthless, unless we can continuously deliver value to our end-users. It is important to understand that DevOps is not a silver bullet, nor is it a product we can buy and install. It is a mindset that enables people to &lt;strong&gt;collaborate&lt;/strong&gt; and follow a known &lt;strong&gt;process&lt;/strong&gt; enabled by &lt;strong&gt;products&lt;/strong&gt; to deliver &lt;strong&gt;value&lt;/strong&gt; to our end users.&lt;/p&gt;
&lt;p&gt;Also, instead of starting with a focus on our burning platform, our team agreed to focus on establishing an efficient system of highways, roads and railroads that enable both our business and engineering teams to focus on outcomes that delight our end-users. Automated circuit-breakers and smoke detectors monitor the health of our ecosystem, while we continuously improving outcomes.&lt;/p&gt;
&lt;p&gt;We need to empower engineers and products to integrate and shift-left security, create quality governance guardrails and documentation, leverage the Azure cloud to its fullest potential, encourage experimentation, and a tolerance for failure to fuel innovation.&lt;/p&gt;
&lt;p&gt;Noble goals, but back to our core question: "&lt;em&gt;WHY do we need the EDO Common Engineering team?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;As mentioned in &lt;a href="https://wsbctechnicalblog.github.io/common-engineering-journal-1.html"&gt;"what is origin of our common engineering team"&lt;/a&gt; we are the catalyst to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourage and enable everyone’s creativity, passion, purpose, and strengths!&lt;/li&gt;
&lt;li&gt;Empower all stakeholders to continuously deliver quality &lt;strong&gt;value&lt;/strong&gt; to our &lt;strong&gt;delighted end-users&lt;/strong&gt;, while stewarding our guardrails to promote &lt;strong&gt;consistency&lt;/strong&gt;, &lt;strong&gt;standardization&lt;/strong&gt;, and &lt;strong&gt;security&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Declare war on WASTE, such as cycle time, excessive meetings, complexity, and manual processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;WHAT is the goal of our 90-day Roadmap?&lt;/h1&gt;
&lt;p&gt;When we lit the candle of our team's first stage, our goal for the first 90-days after launch was to lay the foundations and ensure that we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A common and sound &lt;strong&gt;vision&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Vibrant &lt;strong&gt;collaboration&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An atmosphere encouraging &lt;strong&gt;failure&lt;/strong&gt;, &lt;strong&gt;learning&lt;/strong&gt;, and continuous &lt;strong&gt;innovation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A healthy &lt;strong&gt;DevOps&lt;/strong&gt; mindset - "&lt;em&gt;DevOps is the union of people, process, and products to enable continuous delivery of value to our end users&lt;/em&gt;", by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we have a foundation, we plan to enable, foster, and steward &lt;strong&gt;COLLABORATION&lt;/strong&gt;, engineering &lt;strong&gt;PRACTICES&lt;/strong&gt;, and &lt;strong&gt;QUALITY&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;HOW have we fared after 74 days?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Falcon Heavy" src="../images/common-engineering-journal-2-5.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The team took off like a &lt;a href="https://www.spacex.com/vehicles/falcon-heavy/"&gt;SpaceX Falcon Heavy&lt;/a&gt; and it is extremely difficult to cherry-pick from our running list of achievements linked to our backlog of &lt;strong&gt;culture&lt;/strong&gt;, &lt;strong&gt;collaboration&lt;/strong&gt;, &lt;strong&gt;innovation&lt;/strong&gt;, &lt;strong&gt;practices&lt;/strong&gt;, and &lt;strong&gt;kaizen&lt;/strong&gt; work. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BURNOUT!&lt;/strong&gt; - Although everyone loves to watch teams take off and perform at maximum capacity, we must ensure that we throttle back to avoid inevitable &lt;strong&gt;stress&lt;/strong&gt; and &lt;strong&gt;burnout&lt;/strong&gt; which will impact &lt;strong&gt;quality&lt;/strong&gt; and &lt;strong&gt;health&lt;/strong&gt; negatively.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will pick the top 3 on my personal favourites list and invite my colleagues to add another journal entry with their favourites.&lt;/p&gt;
&lt;h2&gt;LITE Self-Service Automation&lt;/h2&gt;
&lt;p&gt;The first preview of our self-service automation prototype which creates an Azure Repo, inserts an application-type specific sample, an Azure Pipeline based on an application-type CI|CD YAML-based blueprint, and queues the pipeline ... in a mere 8 seconds! &lt;/p&gt;
&lt;h2&gt;EDO Ce Common Engineering Center of Enablement&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We launched the collaboration program to dog|cat-food our working agreements, checklists, and ceremony portal for the &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies.&lt;/p&gt;
&lt;p&gt;The EDO Ce Center of Enablement triggers the &lt;strong&gt;Common Language&lt;/strong&gt;, &lt;strong&gt;Containerization&lt;/strong&gt;, and &lt;strong&gt;Crank-it-up-board v2&lt;/strong&gt; working groups, with a few more such as &lt;strong&gt;Healthy mindset for continuous delivery and release on demand&lt;/strong&gt;, &lt;strong&gt;Automate everything automatable for Azure DevOps governance printing&lt;/strong&gt; using &lt;a href="https://github.com/vinijmoura/Azure-DevOps"&gt;vinijmoura/Azure-DevOps&lt;/a&gt;, and &lt;strong&gt;Application-type CICD blueprint&lt;/strong&gt; rolling onto the launch pad.&lt;/p&gt;
&lt;h2&gt;WAR on Silos!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we started with the common engineering system in 2019, we experienced turbulence created by our siloed culture and stringent processes. The latter will raise its head again when we discuss how we &lt;strong&gt;improve our value streams&lt;/strong&gt; and &lt;strong&gt;innovate&lt;/strong&gt; supporting processes and products in future. &lt;/p&gt;
&lt;p&gt;Organizational silos exist for a number of reasons, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating &lt;strong&gt;isolated&lt;/strong&gt; groups with common interests and experiences.&lt;/li&gt;
&lt;li&gt;Creating working relationships, based on personal experiences - we typically favour working with colleagues with whom we have had positive experiences and &lt;strong&gt;isolate&lt;/strong&gt; ourselves from those that are associated with turbulence.&lt;/li&gt;
&lt;li&gt;Reorganizations that create a churn in the organizational culture - we often go "heads down" and focus on our work as the organization changes, &lt;strong&gt;isolating&lt;/strong&gt; ourselves from the noise and fallout.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="T+73" src="../images/common-engineering-journal-2-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For us to &lt;strong&gt;innovate&lt;/strong&gt; and be &lt;strong&gt;productive&lt;/strong&gt; we must eradicate &lt;strong&gt;isolation&lt;/strong&gt; and foster a culture based on &lt;strong&gt;trust&lt;/strong&gt;, &lt;strong&gt;exchange of ideas&lt;/strong&gt; and &lt;strong&gt;collaboration&lt;/strong&gt;. The reason I am smiling from ear to ear, is that our EDO Ce Center of Enablement and associated EDO Working Groups is enabling and demonstrating &lt;strong&gt;vibrant collaboration&lt;/strong&gt; with (in no specific order) Enterprise Architecture, Solution Architecture, Sustainment, Site Reliability Engineering, DevSecOps, Development, Cloud Operations, Innovation, Release Management, and EDO Common Engineering.&lt;/p&gt;
&lt;p&gt;The appetite and interest in continuous &lt;strong&gt;innovation&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Standardization&lt;/strong&gt;, and the removal of &lt;strong&gt;waste&lt;/strong&gt; and associated &lt;strong&gt;snowflakes / accidental complexity&lt;/strong&gt; is both exciting and refreshing! &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Feedback from my colleagues&lt;/h2&gt;
&lt;p&gt;Alex's favourite part and I quote: &lt;em&gt;"My favourite part of our first 90 days journey (which hasn't ended yet) is formulating clear expectations coming from the stakeholders. That creates clarity in my mind, which is very important to me."&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That is it for today. Ping me on &lt;a href="https://www.twitter.com/wpschaub"&gt;twitter&lt;/a&gt; if you have any questions. &lt;/p&gt;
&lt;p&gt;See you next journal update!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category></entry><entry><title>Why can I not just create a working group?</title><link href="https://wsbctechnicalblog.github.io/ceremony-focus-single-source.html" rel="alternate"></link><published>2021-12-17T13:13:00-08:00</published><updated>2021-12-17T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-17:/ceremony-focus-single-source.html</id><summary type="html">&lt;p&gt;It all depends on the context - [CoE] Working Group&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we launched our &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies, we triggered vibrant collaboration (which is good) and created confusion (which is bad) with working groups. In the &lt;a href="/ceremony-overview.html"&gt;An overview of our key collaboration ceremonies&lt;/a&gt; we described the difference between the ceremonies, the importance of the terms of reference (why are we here), and the process of creating one or more of the ceremonies.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is the difference between a working group and a CoE Working group?&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;working group&lt;/strong&gt; is a group of people working together to collaborate and achieve specified goals. The lifespan of a working group can last anywhere between minutes to years, although we strongly recommend &lt;strong&gt;the shorter the better&lt;/strong&gt; mindset. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are referring to this generic type of working group, you can spin one up whenever you need to.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;CoE working group&lt;/strong&gt; is sponsored by one or more Centers of Enablement, its terms of reference (vision, goals, hypothesis) a subset of and supporting the CoE terms of reference. In other words, there is a strong dependency between a sponsoring and other collaborating CoEs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are referring to the CoE working group, you need a CoE to spin up a short-lived CoE Working Group.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="F1" src="../images/ceremony-focus-single-source-0.png"&gt; &lt;/p&gt;
&lt;p&gt;Think of the CoE as the Ferrari racing team (long-lived) and the CoE Working Group  as the team that performs one of the pit stops (short-lived). The CoE cannot succeed without the CoE Working Group and relies heavily on their feedback to improve.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Let us look at the CoE flow of value&lt;/h1&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-focus-single-source-1.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; - A Centre of Enablement (CoE) is created to assemble people from different disciplines to collaborate and enable our organization to shift across multiple disciplines to create a place where the highest standards are maintained. Every CoE is a coalition for change, made of these pillars: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide thought leadership, vision, and direction.&lt;/li&gt;
&lt;li&gt;Provide good practice and guardrails (aka governance).&lt;/li&gt;
&lt;li&gt;Establish collaboration with key stakeholders and other CoEs to abolish silos.&lt;/li&gt;
&lt;li&gt;Trigger working groups, dojos, and community of practices to implement research, education, and outcomes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; - All CoE synchronize on a regular basis to exchange learnings, failures, and ensure that as a whole, the CoEs bubble up to a common vision for the organization.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Group" src="../images/ceremony-focus-single-source-2.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; and &lt;strong&gt;(4)&lt;/strong&gt; - The CoE triggers one or more CoE working groups, each focused on a subset of the CoE goals, their backlogs linked to he CoE backlog, and their vision supporting the CoE's vision. Every CoE working group is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short-lived!&lt;/strong&gt; - The working group's lifetime is limited to the CoE's lifetime and a maximum of 2 program increments (10 weeks). See FAQ for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Laser focused!&lt;/strong&gt; - Focus on experiments, (dis)prove hypothesis, make recommendations, and minimal viable products.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A slice!&lt;/strong&gt; - Take baby steps, focus on a vertical slice, and do &lt;strong&gt;not&lt;/strong&gt; try to solve the world's problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Flow" src="../images/ceremony-focus-single-source-3.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5)&lt;/strong&gt; and &lt;strong&gt;(6)&lt;/strong&gt; - Information flows from the CoE Working Group back to the CoE, where it is vetted and consolidated into the CoE knowledgebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(7)&lt;/strong&gt; - Each CoE will synchronize and exchange the learnings from the working groups during the Co&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;h2&gt;What happens when a CoE is terminated?&lt;/h2&gt;
&lt;p&gt;When we terminate a CoE, all associated CoE Working Groups, CoE Dojos, and CoE Community of Practices are terminated as well. All learnings, failures, etc. are maintained for future reference.&lt;/p&gt;
&lt;h2&gt;What happens when a CoE Working Group's lifetime expires?&lt;/h2&gt;
&lt;p&gt;We terminate the working group, perform a retrospective, and &lt;strong&gt;optionally&lt;/strong&gt; spin up a new working group to complete the work, if and only if it still deemed valuable. THe intentionally limit the lifetime of working groups to keep them focused and energized.&lt;/p&gt;
&lt;h2&gt;What happens at a +1 Townhall?&lt;/h2&gt;
&lt;p&gt;We present the overall health of our collaboration, experimentation, and innovation ecosystem, as well as an update and optional demos by each active CoE.&lt;/p&gt;
&lt;p&gt;Any other questions?&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category></entry><entry><title>Systems thinking and the flow of work</title><link href="https://wsbctechnicalblog.github.io/flow-of-work.html" rel="alternate"></link><published>2021-12-15T00:00:00-08:00</published><updated>2021-12-15T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-15:/flow-of-work.html</id><summary type="html">&lt;p&gt;Speeding up software development may not speed up the delivery&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Yoda" src="../images/yoda.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everyone is busy and yet few things are ever finished.&lt;/em&gt; -Anonymous&lt;/p&gt;
&lt;p&gt;Delivery of the planned workload often appears unpredictable. Let’s examine what processes contribute to that lack of reliable predictability.&lt;/p&gt;
&lt;h2&gt;How reliable are the estimates?&lt;/h2&gt;
&lt;p&gt;If the expected delivery fails to materialize, usually the first suspect is poor estimates. If the team bids on a certain feature and estimates it at one timeboxed cycle (i.e., one iteration), but the feature gets delivered after three or four iterations, the team’s ability to accurately estimate is placed under suspicion.&lt;/p&gt;
&lt;p&gt;However, the team is only one component of a larger system, and the delivery workflow travels throughout the entire system. A team cannot reliably predict how will the workflow get processed throughout the system.&lt;/p&gt;
&lt;p&gt;A larger, more holistic system view is needed if we are to understand the overall delivery process. Without gaining such insights, we will continue to be somewhat mystified why is our workflow slow and unpredictable.&lt;/p&gt;
&lt;h2&gt;Ask developers to work faster&lt;/h2&gt;
&lt;p&gt;Because of the lack of the insight into the overall working of the entire system, the bottlenecks may get wrongly identified. What we see typically happen is development gets erroneously perceived as the bottleneck. The slowness of delivery gets attributed to the pace of software development. Management attempts to address these ‘bottlenecks’ by either hiring more staff, or by purchasing more advanced tools, or by retraining the staff, or the combination thereof.&lt;/p&gt;
&lt;p&gt;What that amounts to is basically asking software development staff to work faster. The thinking is that if the developers were to pick up the speed by certain level of magnitude (say, by 50%), then the value delivery will improve in speed by 50%.&lt;/p&gt;
&lt;p&gt;A good time to take a closer look into this line of reasoning.&lt;/p&gt;
&lt;h2&gt;Software delivery queues&lt;/h2&gt;
&lt;p&gt;Software development is always done in isolation. The reason is that changes done to the software code are always assumed to be somewhat faulty. It is much more likely that a change made to the source code is less than optimal. Because of that, we instigate processes in the form of delivery queues. These queues/quality gates are created to make sure software does not get released without inspection.&lt;/p&gt;
&lt;p&gt;Queues are, by their very nature, speed bumps. Their only job is to slow down the delivery.&lt;/p&gt;
&lt;p&gt;Why the need to slow down? As mentioned, we don’t trust raw changes to the software, and thus enforce points of inspection.&lt;/p&gt;
&lt;h2&gt;Software delivery loops&lt;/h2&gt;
&lt;p&gt;Putting speed bumps on the road to releasing software improves our chances of delivering quality products. However, to blindly assume a happy path and smooth sailing, where all changes get carefully inspected and vetted by the gatekeepers, would be overly optimistic and naïve. More likely than not, the inspection will catch some issues with the proposed changes. When that happens, the proposed change gets sent back to authors. This sendoff then creates a loop.&lt;/p&gt;
&lt;p&gt;It would also be overly optimistic to assume that it’s always a single loop. Not every request for a fix gets done to the gatekeepers’ satisfaction. We often see the loop (i.e., back to the authors) occur more than once. Try again!&lt;/p&gt;
&lt;h2&gt;Queues and loops eat up the cycles&lt;/h2&gt;
&lt;p&gt;The inspection process is never instantaneous. When the requested change arrives at the inspection queue, it is extremely unlikely that the gatekeepers responsible for inspecting the change are immediately available to look at it. They’re busy servicing other requests. The newly arrived change request must “take a number” and then wait in the queue for the number to be called.&lt;/p&gt;
&lt;p&gt;How long will the wait be? There is no definitive, precise answer to that question. It depends on many things, most of them completely unpredictable.&lt;/p&gt;
&lt;p&gt;The team who is planning to release their changes is now forced to leave their changes alone; they then either start idling (which causes the management to frown – low utilization rates), or they get to work on something else. The wait time spent in the queue is wasting precious cycles. Not only are the teams waiting, but customers are also waiting for the new functionality/feature/fix.&lt;/p&gt;
&lt;p&gt;What happens when the gatekeepers finally get to work on the request? They will spend some time examining it, and that time could be substantial. The outcome could be positive (i.e., everything a-okay, go to the next gated phase), or negative (i.e., “we found a defect, sending it back to the team who authored it and now need to fix it”).&lt;/p&gt;
&lt;p&gt;Now we have a loop. The team who authored the defect receives the request for fixing it, and places it on their queue (“take a number”). Since they are busy working on something else, the request needs to wait for the team to free up their time and attend to it.&lt;/p&gt;
&lt;p&gt;How long is that wait time going to be? There is no definitive, precise answer. It depends on many things, many of those things also unpredictable.&lt;/p&gt;
&lt;h2&gt;Will speeding up the development make a significant impact?&lt;/h2&gt;
&lt;p&gt;If we were to trace the time spent on handoffs (i.e., idling in the queue, waiting for the next available inspectors, reassigning the team to work on something else while they’re waiting) as well as trace the time spent on examining/inspecting the change, plus the time spent on looping back with requests to fix the discovered issues, we will notice that it tends to be of a higher order of magnitude larger compared to the time spent developing software.&lt;/p&gt;
&lt;p&gt;Since any time spent waiting in the queue is unproductive time, we should go ahead and label it as waste (waste of time). Waste is to be avoided, however in the current model of software development process, such waste seems unavoidable. Our challenge then is to try to reduce it. Reduce the unproductive time.&lt;/p&gt;
&lt;p&gt;The added stress caused by this mode of working causes another waste – cognitive dissonance that arises from the frequent context switching. The flow of the work gets interrupted, teams get frustrated, customers place additional pressure by complaining about the sluggish speed of delivery.&lt;/p&gt;
&lt;p&gt;Is it possible to speed up the development process? Definitely – there is always room for improvement. But is that going to make a significant dent in the overall speed of delivery? Probably not.&lt;/p&gt;
&lt;p&gt;The real improvement will happen when we focus on reducing the unproductive idling. Instead of investing time and effort in finding ways to speed up the development, it may be better to work on reducing the queue wait time, eliminating the loops, and minimizing the context switching stress.&lt;/p&gt;
&lt;p&gt;Once we remedy the queuing, inspecting, and looping time waste, speeding up the development process will start showing significant improvements. But not before the remedial intervention.&lt;/p&gt;
&lt;h2&gt;Would more precise estimating help?&lt;/h2&gt;
&lt;p&gt;The assumption that every development task can be precisely estimated still leaves the problem of unpredictable idling time caused by queues and loops. As we’ve seen, the grand total time spent on making the change and then seeing that change in production is quite unpredictable. It doesn’t really help knowing how long predictable activities will take if we have no way of knowing how long unpredictable activities will take.&lt;/p&gt;
&lt;h2&gt;What is the solution?&lt;/h2&gt;
&lt;p&gt;The only plausible solution to this challenge is to strive to reduce, minimize, or even eliminate queues and loops. If we get to the point where we do not need handoffs, there would be no need for queues caused by asynchronous inspection. Once that happens, estimating individual software development tasks will make more sense, as it will offer closer approximation of the delivery time.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category><category term="estimates"></category></entry><entry><title>How to track (and optimize) your email traffic</title><link href="https://wsbctechnicalblog.github.io/optimize-and-track-emails.md.html" rel="alternate"></link><published>2021-12-13T00:00:00-08:00</published><updated>2021-12-13T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-13:/optimize-and-track-emails.md.html</id><summary type="html">&lt;p&gt;How to stop the insane volume of emails and WASTE!&lt;/p&gt;</summary><content type="html">&lt;p&gt;As mentioned in &lt;a href="/common-engineering-journal-1.html"&gt;What is origin of our common engineering team&lt;/a&gt; we have declared war on &lt;em&gt;WASTE&lt;/em&gt; and are fighting that battle on multiple fronts. On the meeting frontline we are reducing the number of meetings, dropping off meetings when our presence adds no value or we add no value to the meeting, avoiding repetitive meetings, and enjoying a meeting free Friday. I recommend you try to optimize your meetings - it is extremely liberating q;-) &lt;/p&gt;
&lt;p&gt;But, I am drifting, because in this email I want to focus on the tsunami wave of emails we receive and process every day. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my case I receive an average of &lt;strong&gt;149 emails per day&lt;/strong&gt; - too much to process to remain productive! &lt;/li&gt;
&lt;li&gt;In response I send an average of &lt;strong&gt;21 emails per day&lt;/strong&gt; - time I could invest more productively!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what are we doing to combat the email &lt;strong&gt;WASTE&lt;/strong&gt;?&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Prioritize (and ignore) incoming emails&lt;/h1&gt;
&lt;p&gt;I am using Outlook rules to separate and prioritize incoming email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Emails" src="../images/optimize-and-track-emails-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I process emails from most important to least important, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox&lt;/strong&gt; contains email sent directly to me (I am on the &lt;strong&gt;To&lt;/strong&gt; list).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inbox Mentions&lt;/strong&gt; contains email notifications generated by Azure DevOps where I am @ mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Mentions" src="../images/optimize-and-track-emails-2b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox PR&lt;/strong&gt; contains incoming email notifications generated by Azure DevOps where I need to review a Pull Request (PR).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="PR" src="../images/optimize-and-track-emails-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox AzDO&lt;/strong&gt; contains all the other email notifications generated by Azure DevOps services.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Mentions" src="../images/optimize-and-track-emails-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbox CC&lt;/strong&gt; contains email sent to me indirectly (I am on the &lt;strong&gt;Cc&lt;/strong&gt; list).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="CC" src="../images/optimize-and-track-emails-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I focus on the first three when I have time to check my emails. The &lt;strong&gt;Inbox CC&lt;/strong&gt; seldom makes it onto my radar as I "assume" CC == FYI only.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Noise" src="../images/optimize-and-track-emails-0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emails I regards as noise:&lt;/strong&gt;
- Any email is sent to me as a &lt;strong&gt;Cc&lt;/strong&gt; - I assume it is for my information only.
- Any Azure DevOps work item notification where I am not explicitly @ mentioned - I assume it is for my information only.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Defer outgoing email&lt;/h1&gt;
&lt;p&gt;Ever sent an email and regretted it 10 seconds later? Well, I defer all emails I send that are not priority for 13 minutes. It give me time to tweak the content and reconsider sending it in the first place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="13min" src="../images/optimize-and-track-emails-6.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Qualifiers&lt;/h1&gt;
&lt;p&gt;Something we used in the ALM/DevOps Ranger era and which I have noticed making a comeback in our group the use of qualifiers in the email subject.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[INFO] This is an information-only email sample email subject&lt;/li&gt;
&lt;li&gt;[NOTIFICATION] This is an important notification email sample email subject&lt;/li&gt;
&lt;li&gt;[ALERT] Someone's hair is on fire sample email subject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a &lt;strong&gt;consistent&lt;/strong&gt; list of qualifiers, users can create email rules and take action on emails, based on their qualifier tag.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use more productive collaboration channels&lt;/h1&gt;
&lt;p&gt;Instead of email, consider using Microsoft Teams, Slack, or some other collaboration service that allows you to collaborate with your peers and stakeholders far more effectively. It avoids the misunderstandings and the frustrating and often time consuming conversations that split and drift from the conversation topic.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;25% email reduction challenge&lt;/h1&gt;
&lt;p&gt;I just challenged my team to reduce the email we send as individuals and as a team by 25% in 2022. We will track the challenge using a Search Folders.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Email Challenge" src="../images/optimize-and-track-emails-7.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Email Sent by me in 2021 shows the total number of emails&lt;/strong&gt; I sent in 2021.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email Send by me in 2022 tracks the number of emails&lt;/strong&gt; I sent in 2022.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us walk through the process of creating one of these search folders.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right click on &lt;strong&gt;Search Folders&lt;/strong&gt;, scroll to bottom of list, and a choose &lt;strong&gt;Create a new search folder&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Custom Search" src="../images/optimize-and-track-emails-8.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Criteria&lt;/strong&gt; and set &lt;strong&gt;Sent To&lt;/strong&gt; to your email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Sent To" src="../images/optimize-and-track-emails-9.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;Advanced&lt;/strong&gt; tab and add two &lt;strong&gt;Sent&lt;/strong&gt; date filters to limit search folder to 2002.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Dates" src="../images/optimize-and-track-emails-10.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Click OK a few times to save all the changes you have made to the search folder.&lt;/li&gt;
&lt;li&gt;Right Click on the search folder, select &lt;strong&gt;Properties&lt;/strong&gt;, and change view to &lt;strong&gt;Show total number of items.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Count of items" src="../images/optimize-and-track-emails-11.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Simple! Now you can track the emails sent in 2021 and 2022.&lt;/p&gt;
&lt;p&gt;My hypothesis for the challenge is: "&lt;em&gt;I believe that by sending 25% less email the EDO Ce team will achieve a drastic reduction in incoming email and associated WASTE created as a bi-product of replies and split email conversations.&lt;/em&gt;" &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="2023" src="../images/optimize-and-track-emails-12.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C U in 2023 to disprove or prove my hypothesis q;-)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Anything else that helps you to manage your emails?&lt;/p&gt;</content><category term="Posts"></category><category term="tips"></category></entry><entry><title>Replace road maps with sea charts</title><link href="https://wsbctechnicalblog.github.io/replace-roadmaps-with-seacharts.html" rel="alternate"></link><published>2021-12-10T00:00:00-08:00</published><updated>2021-12-10T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-10:/replace-roadmaps-with-seacharts.html</id><summary type="html">&lt;p&gt;Adopt more modest planning strategy by treating the journey as if sailing trecherous waters&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/seachart.png"&gt;&lt;/p&gt;
&lt;p&gt;Roadmaps are a familiar way to represent a strategic vision. We start from our current position, we then pinpoint our strategic goal/destination, and then map our projected journey by placing strategic milestones to be hit along the way.&lt;/p&gt;
&lt;p&gt;Roadmaps are very useful in situations that are predictable and free of hazards. However, we live in the world that is not so predictable. The challenges are manifold, including global challenges such as the unpredictable pandemics, climate changes, economic turmoil, and so on. As our world is becoming more global and the blast radius of various changes keeps attaining ever wider reach, we are starting to recognize and acknowledge that we live in the so-called &lt;strong&gt;VUCA&lt;/strong&gt; world.&lt;/p&gt;
&lt;h2&gt;What is &lt;strong&gt;VUCA&lt;/strong&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Volatility%2c_uncertainty%2c_complexity_and_ambiguity"&gt;&lt;strong&gt;VUCA&lt;/strong&gt;&lt;/a&gt; is an acronym first used in 1987; it stands for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;olatility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U&lt;/strong&gt;ncertainty&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;omplexity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;mbiguity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we recognize and acknowledge that we operate inside such environment, we begin to realize that roadmaps are not that useful. For example, two years ago we may have mapped an ambitious roadmap which then got completely invalidated when the pandemic hit in March 2020. Less than a year ago we may have projected another roadmap that got perturbed by the unexpected regulation to provide paid sick leave for employees affected by COVID-19. And so on; examples of volatility and uncertainty abound.&lt;/p&gt;
&lt;h2&gt;Why do roadmaps tend to be imprecise?&lt;/h2&gt;
&lt;p&gt;Roadmaps assume that all factors affecting the desired outcome are understood and managed. If we chart the direction, from our current position, to the desired destination, we feel we can draw a road leading from here to there. We also feel that the road is well paved, smooth, with clearly mapped pit stops, landmarks, and milestones.&lt;/p&gt;
&lt;p&gt;In reality (as we’ve seen), &lt;strong&gt;VUCA&lt;/strong&gt; interferes without asking for our opinion or for our permission. It doesn’t even give us the slightest hint of warning. Volatility seems to appear randomly, creating uncertainty, complexity, and ambiguity.&lt;/p&gt;
&lt;p&gt;And because we’ve invested a lot of energy into producing the roadmap, the temptation to stick to it persists. We’d often rather ignore the warning signals around us than agree to cut our losses and ditch the precious roadmap.&lt;/p&gt;
&lt;p&gt;That bias leads to imprecision. By continuing on the now invalidated roadmap, we run the risk of not hitting our desired destination, and instead finding ourselves in an unfamiliar territory.&lt;/p&gt;
&lt;p&gt;When that happens, we need to act carefully. Here is an analogy: if we buy a car and sit down and drive around, after a while we may park somewhere, get out, and look around. If, at that point, we realize that we do not like the place where we’ve arrived, we should not invest in buying a new car. Instead, we should invest in making better plans that get us to the desired destination.&lt;/p&gt;
&lt;h2&gt;Why are sea charts more realistic?&lt;/h2&gt;
&lt;p&gt;When sailing a boat across the sea, we are not restricted by the rails or by the paved roads. We are not even restricted by the dirt roads. The sea is wide open for exploring.&lt;/p&gt;
&lt;p&gt;But the flexibility comes at a cost. Our sailing will be smooth if we catch the tail wind. But if we are counting and betting on the continuous presence of the tail wind, we’d be in for an unpleasant surprise. Because the weather conditions are volatile and unpredictable, we may experience head winds. Those types of winds are highly undesirable because they impede our progress by slowing us down and even pushing us off the planned course.&lt;/p&gt;
&lt;p&gt;Knowing that, we are better equipped to deal with the &lt;strong&gt;VUCA&lt;/strong&gt; situation. Yes, by agreeing to avoid charging ahead in the straight line we may appear to be losing track of our goals, but in reality we are rolling with the punches and making sure we persist in our efforts to reach our destination. That way, we never sacrifice the precision of our plans.&lt;/p&gt;</content><category term="Posts"></category><category term="strategy"></category><category term="planning"></category></entry><entry><title>Journal 1 - What is origin of our common engineering team?</title><link href="https://wsbctechnicalblog.github.io/common-engineering-journal-1.html" rel="alternate"></link><published>2021-12-06T13:13:00-08:00</published><updated>2021-12-06T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-06:/common-engineering-journal-1.html</id><summary type="html">&lt;p&gt;Learning about the genesis of our EDO Common Engineering (EDO Ce) team&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I joined the Cloud Operations and Infrastructure team in 2018, I explored the variety of snowflakes decorating continuous integration and delivery pipelines, engineering practices, repositories, and solution architectures. While I agree with &lt;a href="https://en.wikipedia.org/wiki/Drive:_The_Surprising_Truth_About_What_Motivates_Us"&gt;Daniel Pink&lt;/a&gt; that knowledge workers have a need for autonomy to self-direct and manage their own lives, it must thrive within the context of engineering guardrails and organizational governance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Daniel Pink" src="../images/common-engineering-journal-1-2.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Autonomy&lt;/strong&gt; - Works exceptionally well in an environment where an engineers owns a feature from ideation to deprecation. Healthy DevOps mindset!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RED FLAG&lt;/strong&gt; - When ownership of a feature is transferred to a sustainment, maintenance, site reliability, or any other team it is pivotal to balance autonomy with consistency and standarization. NOT a healthy DevOps mindset!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I began to poke the hornet's nest in our architecture, development, operations, and security teams, which inspired guidance I contributed to the &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; book. I highlighted the risk of &lt;strong&gt;autonomy without guardrails&lt;/strong&gt;, especially in an environment plagued by organizational silos that stifle collaboration and where ownership is transferred from team to team. We will be reflecting on this in future journals, as our common engineering team is promoting for engineers to own a feature from ideation to deprecation.  &lt;/p&gt;
&lt;p&gt;On the 21st October 2019 I chose to consolidate the guidance, frequently asked questions and answers, knowledgebase, manifestos, and guardrails in an open wiki. The contents of the wiki is based on knowledge I gathered during collaboration, troubleshooting, breakfast and lunches, and informal meetups with fellow engineers in our atrium. &lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS" src="../images/common-engineering-journal-1-3.png"&gt;&lt;/p&gt;
&lt;p&gt;To this date, the wiki remains to be our &lt;strong&gt;go-to&lt;/strong&gt; place for engineering processes, security, standardization, collaboration, as well as the manifestos that started it all.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CeS" src="../images/common-engineering-journal-1-4.png"&gt;&lt;/p&gt;
&lt;p&gt;A few months ago I became aware that there were plans to promote our informal common engineering system, to a more strategic common engineering team.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;CeS Journal, entry #1&lt;/h1&gt;
&lt;p&gt;For our journal, let us fast-forward to 6th December 2021, which marks the 67th day of our EDO Ce team, which emerged from the informal and rebellious common engineering system like a mythical Phoenix.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Journal Countdown" src="../images/common-engineering-journal-1-1.png"&gt;&lt;/p&gt;
&lt;p&gt;The EDO Ce team was launched with a leadership mandate to empower every engineer by standardizing practices and products, and stewarding guardrails to promote engineering consistency, enablement, security, and simplicity. &lt;/p&gt;
&lt;p&gt;We agreed that our formal goals are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable collaboration through active working groups, community of practices, and workshops.&lt;/li&gt;
&lt;li&gt;Steward guardrails (lightweight governance) to foster consistency, maintainability, security, and simplicity.&lt;/li&gt;
&lt;li&gt;Nurture the courage to experiment and fail, and breed a culture of continuous learning and innovation, and transparency.&lt;/li&gt;
&lt;li&gt;Empower engineering to embrace high DevOps performance.&lt;/li&gt;
&lt;li&gt;Foster the courage to tackle the status quo!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My personal leadership vision is to: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encourage and enable everyone’s creativity, passion, purpose, and strengths!&lt;/li&gt;
&lt;li&gt;Declare war on WASTE, such as cycle time, excessive meetings, complexity, and manual processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While we are all inspired by the phenomenal pace of innovation with &lt;a href="https://www.spacex.com/"&gt;SpaceX&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Elon_Musk"&gt;Elon Musk's&lt;/a&gt; mantra to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make requirements less dumb&lt;/li&gt;
&lt;li&gt;Try to delete part of the process&lt;/li&gt;
&lt;li&gt;Simplify or optimize&lt;/li&gt;
&lt;li&gt;Accelerate cycle time&lt;/li&gt;
&lt;li&gt;Automate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next journal update, I will explore &lt;em&gt;"why we need the common engineering team?"&lt;/em&gt; and how we navigate the endless friction between the demand by engineering for full autonomy and the quest to create a common (common == all of ours) engineering mindset.&lt;/p&gt;
&lt;p&gt;See you next time!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="journal"></category></entry><entry><title>Don’t debug; do TDD instead</title><link href="https://wsbctechnicalblog.github.io/dont-debug.html" rel="alternate"></link><published>2021-12-02T00:00:00-08:00</published><updated>2021-12-02T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-12-02:/dont-debug.html</id><summary type="html">&lt;p&gt;Avoid wasteful debugging activities by creating automated tests using TDD technique&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/debug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;When creating software, we often realize that the solution we’ve created does not behave the way we expect it to behave. We move into creating software with certain intentions (I call those intentions expectations). We materialize those expectations by writing code. If we are not careful when writing code, the code we wrote may end up having a few bugs. Hopefully, those bugs get identified before we release our changes to the customers. Unfortunately, that’s not always the case and sometime bugs get discovered in production, by the end users.&lt;/p&gt;
&lt;p&gt;Now we need to fix the bugs. And how do we do that? We debug. The debugging process is a technique for identifying bugs in the code.&lt;/p&gt;
&lt;p&gt;There are three different ways we debug code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We debug the code we wrote&lt;/li&gt;
&lt;li&gt;We debug the code someone else wrote and we have the source code&lt;/li&gt;
&lt;li&gt;We debug the code we wrote that uses the code someone else wrote but we don’t have their source code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In each of the above three cases, we aim at &lt;em&gt;slowing down&lt;/em&gt; the program execution. If we are not debugging, we activate the code by running the app (the program) and observing how the app behaves. If the app crashes, we have a serious defect somewhere. If the app doesn’t crash but behaves erratically (for example, displays incorrect information or takes us to an incorrect part of the app, or sends incorrect information to some other systems), we have detected that there is a bug somewhere (but we don’t know where). Now’s the time to hunt for that bug (or bugs). We typically hunt for it by slowing down the execution of the program.&lt;/p&gt;
&lt;p&gt;How do we slow down the execution? There are basically two ways to do that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We add new lines of code that print some values to the output (a console, or a printer)&lt;/li&gt;
&lt;li&gt;We add a breakpoint at some line of the code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Either of these tricks are intrusive; they make the cut into the body of the code so that the troubleshooting engineers could pry into the innards of the system.&lt;/p&gt;
&lt;p&gt;Furthermore, not only are debugging activities intrusive, but they are also wasteful. Nothing useful gets produced after spending some time debugging. The best we can hope for after a successful debugging session is to gain a better understanding of how the system works. But that understanding was achievable even without debugging, by simply reading the source code carefully.&lt;/p&gt;
&lt;p&gt;The worst part of any debugging activity is that it is 100% manual. We manually add new lines of code that output some values, or we manually add breakpoints to the code. When the program execution reaches the breakpoint, we then manually step through the code and manually inspect the produced values. Extremely tedious and error prone.&lt;/p&gt;
&lt;p&gt;As if that activity was not inefficient enough, an even worse part is that we cannot record the debugging session and reuse it later. If sometimes later the same or very similar bug returns, we need to repeat the same tedious manual process of debugging. Very wasteful, to say the least. Add to that the fact that it is literally impossible to estimate how long will any debugging session last (we are fishing for results, basically), and we get an extremely non-productive way of working (I’ve seen situations where teams sometimes waste days debugging).&lt;/p&gt;
&lt;h2&gt;How to avoid wasting time with debugging activities?&lt;/h2&gt;
&lt;p&gt;Any time we discover a bug, we realize that our expectation hasn’t been met but the running code. Rather than rolling up our sleeves and wasting time by getting immersed in tedious debugging activities (as described above), we should strive to work smarter, not harder.&lt;/p&gt;
&lt;p&gt;A much more productive approach to removing any bugs is to first formulate our expectation. If we do not take the time to formulate our expectation, we analyze program’s execution while keeping our expectation in our heads. It is of very little use being kept there. Instead, we should always insist to write our expectation down.&lt;/p&gt;
&lt;p&gt;When creating software, the best way to write our expectation down is to craft a test. A test is much simpler and easier to write than the implementation code. If done properly, a written test cannot contain any bugs (by ‘properly’ I mean the test must never contain any processing logic).&lt;/p&gt;
&lt;p&gt;Because we know exactly what we expect from the code when it runs, the test we wrote will fail (the bug in the implemented code will cause the program to fail to satisfy the expectation written in the test, which makes the test fail). Now we have the evidence that something is broken. And now is the time to work on fixing the breakage.&lt;/p&gt;
&lt;h2&gt;Why is this approach better than debugging?&lt;/h2&gt;
&lt;p&gt;To begin, notice how we did not have to make any incision into the implemented code. No need to add any output statements, nor do we have to enforce any breakpoints in the code.&lt;/p&gt;
&lt;p&gt;Secondly, we have explicitly expressed our expectation. This is useful not only in guiding our own thinking, but also facilitates successful teamwork. We can interrupt our programming session and let other team members pick up the slack and continue exactly from where we stopped, because they will be guided by the test we wrote.&lt;/p&gt;
&lt;p&gt;Thirdly, we did not have to slow the program execution down. We did not interrupt the flow. The test runs and executes the program and does not expect the program to run slower so that the automated test could examine it. That is a huge time saver and a big productivity boost.&lt;/p&gt;
&lt;p&gt;And lastly, our tests are recorded, and are repeatable to our hearts content. If later the same or a similar bug reenters the system, we don’t have to start from square one. We just let tests detect the breakage (fail early) and then use the tests to guide the process of fixing it. That way, we are safeguarded from allowing the breakage to bleed through into production.&lt;/p&gt;
&lt;p&gt;Writing tests to replace any debugging time wasters is the best strategy to safely grow our products. Everything we write must be fully testable. That way, bugs will be prevented from ever entering our codebase.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="technical-excellence"></category></entry><entry><title>Plate-emptying is not the same as Done</title><link href="https://wsbctechnicalblog.github.io/plate-emptying.html" rel="alternate"></link><published>2021-11-23T00:00:00-08:00</published><updated>2021-11-23T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-23:/plate-emptying.html</id><summary type="html">&lt;p&gt;Maximizing the utilization of the time spent on creating software is a surefire way to drive the team into a brickwall&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/plateemptying.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Back in the heady days of dotcom boom (1999 – 2000) I was hired by an e-commerce startup company as their Chief Technology Officer. It was a sudden and large leap in my career, being mostly focused on creating software and only marginally involved in managing the process of software creation.&lt;/p&gt;
&lt;p&gt;To cut the long story short, dotcom boom quickly turned into dotcom bust, and by April 2001 the company went belly up. Ran out of funding. Sad story, but it was a great learning experience for us who got involved in that venture.&lt;/p&gt;
&lt;p&gt;My duties as CTO were to build the engineering department from ground up. My department got funded to open the office in downtown Vancouver (the US to Canadian dollar exchange rate at that time made the venture look much less expensive to the US investors). We procured office space, office furniture, workstations, servers, licensed all required software, and then the race was on to hire talented engineers.&lt;/p&gt;
&lt;p&gt;One of the reasons the company hired me as a CTO was due to the fact that at that time, I was teaching software development courses at the local BCIT college, and they rightly assumed I’ll be in the position to hire talented developers from the cohorts of my students.&lt;/p&gt;
&lt;p&gt;Their bet was sound, and it didn’t take me more than a few days to hire a team of five bright, talented engineers who had just graduated the course I was teaching.&lt;/p&gt;
&lt;h2&gt;Where things started going in the wrong direction&lt;/h2&gt;
&lt;p&gt;Being young and still inexperienced, I made a serious mistake in managing my department – I took a very wrong approach to planning. When abruptly growing from a hands-on engineer into a CTO role, I missed a few important stops along the way. I had no idea what does prudent planning entail. Back then I certainly wasn’t aware of that, but in hindsight…&lt;/p&gt;
&lt;p&gt;So, what did I do wrong? I took a long hard look into the limited budget that was given to my department, looked at the expenses (office lease, licensing costs, employee salaries and benefits), and decided to maximize the time that the budget was buying us. Obviously, we had a limited runway (a stretch of time needed before the operation becomes profitable, or at least starts pulling its own weight). My bosses were very strict about money (who could blame them) and that created the air of anxiety in my mind.&lt;/p&gt;
&lt;p&gt;Basically, I decided to tailor my plans in such way to make sure every team member is super busy every minute on the job!&lt;/p&gt;
&lt;p&gt;That was a terrible mistake. I deeply regret it to this day. But I didn’t know back then the value of slack time, the value of establishing the flow.&lt;/p&gt;
&lt;p&gt;But by foolishly insisting that every task and subtask my team members were performing be done in quickest possible time (i.e., I was pushing to minimize the touch-time), I only managed to frustrate the team and it started dying of attrition.&lt;/p&gt;
&lt;h2&gt;How would I do it today?&lt;/h2&gt;
&lt;p&gt;If I had a time machine and could travel back 22 years in the past, I’d do everything differently. To begin with, I would forget about making plans to maximize the utilization of team members’ time. Experience has taught me that maximizing the utilization of resources that are at our disposal has a strong counter-productive effect. A fully utilized highway defeats its purpose, as it quickly turns into a parking lot.&lt;/p&gt;
&lt;p&gt;The secret to productivity in knowledge-based economy is ample slack time. We need to be careful when defining ‘slack time’. The danger is that some may interpret ‘slack time’ as ‘wait time’. And that’s not what is meant by ‘slack time’.&lt;/p&gt;
&lt;p&gt;When we plan for maximal utilization of workers’ time, our goal is to create some semblance of an assembly line. I may start my day by taking on a list of to-do tasks. As I’m going down the to-do list, I am handling, one-by-one, each task defined for me. Where does the maximum utilization come in?&lt;/p&gt;
&lt;p&gt;The maximum utilization mindset comes in at the task level. Under the ‘maximum utilization/everyone busy all the time’ regime, I am expected to spend the least possible amount of time on my task and promptly hand it off to the next worker in line. That worker in turn is also expected to spend the least possible amount of time handing the task passed on to them (the touch-time). If any of the workers end up spending more time than projected on handling their task, that worker gets reprimanded for not pulling their weight.&lt;/p&gt;
&lt;p&gt;On the surface, that arrangement may seem very reasonable. We have hired the team, and the crew is doing their job as prescribed. If anyone takes longer than prescribed, it only means they are not fully qualified/fully skilled to perform the duties related to the task. They’re not pulling their weight.&lt;/p&gt;
&lt;p&gt;Working under such pressure results in what has been called ‘plate emptying’. As I work, I have a lot on my plate and my job is to empty my plate as quickly as possible. Doing that, I demonstrate to my employer how valuable, how eager I am to continue working and dealing with the next full plate.&lt;/p&gt;
&lt;p&gt;Why is plate-emptying bad? It creates a mindset and a culture where workers are rewarded when giving their work short shrift by declaring early completion for work that was only partly done. In the end, the crew trades quality for apparent velocity.&lt;/p&gt;
&lt;p&gt;And that’s exactly the culture I had created back in the year 2000 with my team. Wanting to maximize the utilization of expensive staff, I set up the system that openly rewarded skillful plate-emptying. Everything looked great at first, until we started getting hit by those terrible bugs and defects. Suddenly, the blindingly fast delivery (our great velocity) got destroyed by the catastrophic defects that were almost impossible to reproduce and fix. The crew was cutting corners left and right, striving to meet my approval and pat on the back (and a hefty year-end bonuses). Little did I know how much those bonuses would end up costing us.&lt;/p&gt;
&lt;p&gt;Of course, once the ugliness of severity-one incidents started hitting the team on an almost daily basis, people started looking for a new job. The team began dying of attrition. By that time, it was too late to try to find the intervention point that would turn the ship around. We started tanking.&lt;/p&gt;
&lt;p&gt;So, how would I have done it back then if I knew what I know today? To begin, I’d abandon trying to make plans so that everyone has their plates full during the project. I’d treat the project like a race with passing the baton. Rather than keeping an eye on individual runners, I’d make plans to only keep an eye on the baton.&lt;/p&gt;
&lt;p&gt;That way, I’d be able to better manage the progress of the delivery. If the team is delivering frequently (at least once per day, ideally many times per day), I don’t need to worry whether everyone on the team is pulling their weight. The only thing that matters is continuous delivery and continuous release, and if that activity turns into an uninterrupted flow, I need not concern myself with the resource utilization/slack time. That approach would relieve team members from the futile plate-emptying race and would realign their efforts with the business priorities. Meaning, we’d improve our chances of avoiding the fiasco that was caused by the team attrition.&lt;/p&gt;
&lt;p&gt;When team members realize that completing their task or subtask does not mean they’ve reached the “done” stage, they start paying closer attention to the quality of their work. A task/feature is done only when it is deployed and released to production and is causing zero bugs or defects.&lt;/p&gt;</content><category term="Posts"></category><category term="quality"></category><category term="value"></category><category term="process"></category><category term="flow"></category><category term="lean"></category></entry><entry><title>How do we know what our customers value?</title><link href="https://wsbctechnicalblog.github.io/what-is-value.html" rel="alternate"></link><published>2021-11-17T00:00:00-08:00</published><updated>2021-11-17T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-17:/what-is-value.html</id><summary type="html">&lt;p&gt;We cannot know what customers actually value unless we expose them to our products and services. Here is how to do it in the most elegant way.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Dojo" src="../images/buffett.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Common wisdom defines value as something that customers are willing to pay for. That line of thinking is applicable to repeatable processes, such as manufacturing.&lt;/p&gt;
&lt;p&gt;When it comes to digital product development, processes are not nearly as repeatable as they are in manufacturing. In the new product development, what customers might find valuable are often unclear. In such environment, we need a new definition of value. That definition must support the discovery of who our customers are and what their needs are.&lt;/p&gt;
&lt;h2&gt;Validated learning&lt;/h2&gt;
&lt;p&gt;Since value is not known upfront, we must engage in the process of learning what value for the customer might be (“Value is what customers actually want”, Womack and Jones, Lean Thinking).&lt;/p&gt;
&lt;p&gt;Another guiding principle for finding out value is by Gerald M. Weinberg: “Value is what people are willing to pay (or do) to have their requirements met.”&lt;/p&gt;
&lt;p&gt;The only plausible way to perform the process of validated learning is to adopt the &lt;a href="https://wsbctechnicalblog.github.io/hypothesis-driven-development.html"&gt;hypothesis-driven development&lt;/a&gt;. We do not push our ideas of what customers may be willing to pay for; instead, we switch to the pull model of working.&lt;/p&gt;
&lt;p&gt;Pull means doing work in response to the immediate downstream demand.&lt;/p&gt;
&lt;p&gt;To be able to gain insight into the downstream demand, we need to propose a hypothesis and immediately implement it. Once implemented, the modified product gets placed in customers’ hands, and we collect feedback by observing customer behaviour.&lt;/p&gt;
&lt;p&gt;That feedback, collected via implemented hypothesis, is then used to validate the hypothesis. It can either corroborate the hypothesis (in the sense of “yes, we were right, that change indeed delivers value to the customer”), or it can falsify the hypothesis (“it looks like we were wrong in assuming that the change will deliver value to the customer”).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The trick to learning rapidly is creating small cheap experiments that will inform a decision you’re trying to make” -Joshua Kerievsky&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Establish the pull model of working&lt;/h2&gt;
&lt;p&gt;Once the value has been identified, the delivery of the value should be mapped into steps. Each step must contribute, in a partial way, to the delivered value. It is vitally important that the necessary steps occur in tight sequence. That way, value flows smoothly to the customers.&lt;/p&gt;
&lt;p&gt;Why is it called ‘pull model of working’? Customer behaviour (identified via hypothesis-driven development) pulls the value from the next upstream delivery. Customer behaviour determines which hypothesis will enter (will be pulled into) the value stream.&lt;/p&gt;
&lt;h2&gt;Seek perfection&lt;/h2&gt;
&lt;p&gt;Common wisdom warns us that perfect is the enemy of good. In this case, however, we seek perfection not by being dissatisfied with the good, but by eliminating waste.&lt;/p&gt;
&lt;p&gt;Well established value stream with steps necessary to implement the pull mode of working can easily be invalidated if we allow waste to enter the process and to begin festering. It is paramount to keep a watchful eye on any signs of waste and to diligently eliminate it.&lt;/p&gt;
&lt;h2&gt;What is waste?&lt;/h2&gt;
&lt;p&gt;Anything that is not positively identified as value is waste.&lt;/p&gt;
&lt;p&gt;For example, imposing an inspection gate at the final step of value stream delivery is waste. It is not possible to inspect quality into a product. Finding out that the value is defective after the value has already been implemented is completely wasteful. Garbage in, garbage out.&lt;/p&gt;
&lt;p&gt;Inspection must be eliminated and replaced with the full-fledged shift-left process that favors early and frequent failures that happen all the way upstream.&lt;/p&gt;
&lt;h2&gt;How to measure flow?&lt;/h2&gt;
&lt;p&gt;Flow is characterized by four metrics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Cycle time&lt;/em&gt; (how long does it take from starting to work on a hypothesis to fulfilling the hypothesis)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lead time&lt;/em&gt; (how long does it take from the moment we collected validated learning to fulfilling it)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Throughput&lt;/em&gt; (the number of steps completed in a fixed amount of time)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Work-in-Progress, or WIP&lt;/em&gt; (the amount of work that has started but not completed)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It should be obvious that the more we manage to eliminate waste, the smoother and tighter the flow will get. The goal is to achieve short cycles, shorten the lead time, increase the throughput while minimizing the WIP.&lt;/p&gt;
&lt;p&gt;What is this tightening of flow buying us? The short answer is &lt;em&gt;increased frequency of feedback&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Factors that threaten to slow down flow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;High WIP&lt;/em&gt; – as a leading indicator of cycle time WIP is the primary intervention point to enable us to establish, or interrupt, the flow. High WIP introduces speed bumps into the flow. Reducing the WIP speeds up the flow.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Multitasking&lt;/em&gt; – it’s a deception that maximizing the utilization of people and resources increases the throughput; fully utilized highway becomes a parking lot.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Minimize slack&lt;/em&gt; – tightening the screws and cramming more work into a queue has about the same level of effectiveness as jamming more paper into the printer hoping that will increase the speed of printing.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Making changes in how we work&lt;/h2&gt;
&lt;p&gt;We’ve been tasked with focusing on continuous improvement. It is not possible to continuously improve without experimentation and rapid learning. It is therefore useful to adopt a work discipline that is based on several principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Leave task lists behind&lt;/em&gt;. We should not focus on &lt;em&gt;things we want to do&lt;/em&gt;; instead, focus on the minimum essential completion criteria. What do we have to do to deliver this minimum essential completion sooner?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stop measuring outputs&lt;/em&gt;; only measure required &lt;em&gt;outcomes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stop starting and start finishing&lt;/em&gt;. Favor dealing with steps that are closest to the finish line. Ignore steps that are still stuck at early stages of the flow.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Set WIP ceilings&lt;/em&gt;. Each step comprising the value delivery process must have a WIP cap. Periodically revisit those WIP caps and experiment by making the WIP capacity even smaller. Did the experiment accelerate the delivery, or did it slow the delivery down?&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category><category term="quality"></category><category term="value"></category><category term="customer-centric"></category><category term="process"></category><category term="lean"></category></entry><entry><title>Streamlining your pipeline using the magic of YAML-base Azure Pipelines</title><link href="https://wsbctechnicalblog.github.io/pipelines-streamlined-approvals-new-world.html" rel="alternate"></link><published>2021-11-16T13:13:00-08:00</published><updated>2021-11-16T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-16:/pipelines-streamlined-approvals-new-world.html</id><summary type="html">&lt;p&gt;Teleport to the future, to optimize the YAML-based Azure Pipeline approvals.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the previous &lt;a href="/pipelines-streamlined-approvals.html"&gt;Streamlining your pipeline approvals, without flooding DevSecOps with noise&lt;/a&gt; post we covered streamlined approvals and the magic and challenges of artifact filters. In essence, we discussed the Jurassic era of classic Azure Pipelines.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipelines-streamlined-approvals-new-world-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In this post we will switch gears and compare it to the era of state-of-the-art YAML-based Azure Pipelines. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipelines-streamlined-approvals-new-world-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Most of the engineers I recently discussed this magic with, looked at me with the &lt;em&gt;"what are you talking about?!?"&lt;/em&gt; glazed look. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Jurassic Park" src="../images/pipelines-streamlined-approvals-new-world-5.png"&gt;&lt;/p&gt;
&lt;p&gt;A really worrying trend, because the Microsoft &lt;a href="https://aka.ms/yaml"&gt;documentation&lt;/a&gt; is comprehensive and the associated features amazing - hence this post.&lt;/p&gt;
&lt;h1&gt;Goodbye Artifact Filter Issues&lt;/h1&gt;
&lt;p&gt;Using the YAML-based Azure Pipelines we implemented the same streamlined approvals as we discussed in &lt;a href="/pipelines-streamlined-approvals.html"&gt;Streamlining your pipeline approvals, without flooding DevSecOps with noise&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Trusted Branches" src="../images/pipelines-streamlined-approvals-new-world-3.png"&gt;&lt;/p&gt;
&lt;p&gt;As shown above, the pipeline looks the same as the classic pipeline when the release artifact is created using one of the repository branches that are trusted for the Canary and Production environments.&lt;/p&gt;
&lt;p&gt;If the source branch is untrusted, the pipeline looks different - in fact, everything after the system test environment is missing. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Untrusted Branches" src="../images/pipelines-streamlined-approvals-new-world-4.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;# SECURITY REVIEW STAGE&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; ${{ if or(eq(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release&amp;#39;)&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; startsWith(variables&lt;/span&gt;&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="c"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;SourceBranch&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; &amp;#39;refs/heads/release/&amp;#39;)) }}:&lt;/span&gt;
&lt;span class="c"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt; template: /Templates/DevSecOps/azure&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;pipeline&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;security&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;review&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code extract reveals the simple trick. If the source originates from the &lt;strong&gt;release&lt;/strong&gt; branch, we inject the Security review, Canary, and Production stages. If not, Azure DevOps ignores them while assembling the run-time pipeline. If they are missing, they cannot be overridden as is the case with artifact filters, even if you are an Azure DevOps god. Simple!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Blocking untrusted templates&lt;/h1&gt;
&lt;p&gt;If you are working with Azure Pipelines I urge you to read &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;Create and target an environment&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops"&gt;Define approvals and checks&lt;/a&gt;. It is standard reading material for our engineers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untrusted Templates" src="../images/pipelines-streamlined-approvals-new-world-6.png"&gt;&lt;/p&gt;
&lt;p&gt;As shown above, if one of more of the templates used by Azure DevOps when assembling the run-time pipeline, the environment check blocks the pipeline from trundling down the deployment chain. In this case you cannot override the template check. "You shall not pass" if you are using untrusted pipelines.&lt;/p&gt;
&lt;p&gt;The magic in this case is the &lt;strong&gt;extends&lt;/strong&gt; feature, as used in the following code extract:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sr"&gt;/Blueprints/azure-function/&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;azure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;CeSTemplates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You configure the required templates in your &lt;strong&gt;Environments&lt;/strong&gt;, under &lt;strong&gt;Approvals and Checks&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untrusted Templates" src="../images/pipelines-streamlined-approvals-new-world-7.png"&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://twitter.com/jjjettrain"&gt;josh-ops'&lt;/a&gt; blog post &lt;a href="https://josh-ops.com/posts/extends-template/"&gt;Azure DevOps: Extends Template with Build and Deployment Templates&lt;/a&gt; for a great overview and example of using &lt;strong&gt;extends&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Right, if you are excited and interested in these YAML-based pipeline features, I recommend that you review our &lt;a href="/why-pipelines-part1.html"&gt;Pipeline Series&lt;/a&gt; which delves deeper into the classic and new pipelines. If not, you are likely in the wrong movie.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>An overview of our key collaboration ceremonies</title><link href="https://wsbctechnicalblog.github.io/ceremony-overview.html" rel="alternate"></link><published>2021-11-13T13:13:00-08:00</published><updated>2021-11-13T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-13:/ceremony-overview.html</id><summary type="html">&lt;p&gt;Taking a step back and digesting this week's storm of ceremony posts.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Refreshed on January 4, 2022.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During this week we launched a tsunami of blog posts focused on our &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE), &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;, &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, and &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP) ceremonies. Behind the scenes we also launched our first CoE to dogfood (evaluate our own stuff) guardrails, posters, and working agreements we created.&lt;/p&gt;
&lt;p&gt;In this post I will answer some of the questions we received to date. Plan is to update this post as we dog-food our ceremonies, with an intent to continuously improve them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Overview" src="../images/ceremonies-overview.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The overview image highlights that the heart of our ceremonies is the CoE providing vision, direction, and governance. It also serves as the steward and source of laser focused working groups, dojos, and community of practice ceremonies. For details on each of ceremonies, refer to:
- &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; (CoE)
- &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt; (CoP)
- &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;
- &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;
- &lt;a href="/ceremony-working-group.html"&gt;Working Group&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Frequently asked questions&lt;/h1&gt;
&lt;p&gt;&lt;img alt="FAQ" src="../images/automation-lesson-1-5.png"&gt;&lt;/p&gt;
&lt;p&gt;List of questions we will cover herein:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can I join a ceremony?&lt;/li&gt;
&lt;li&gt;What are the pre-requisites to initiate a ceremony?&lt;/li&gt;
&lt;li&gt;What are the outcomes of a ceremony?&lt;/li&gt;
&lt;li&gt;When and How to host a ceremony? &lt;/li&gt;
&lt;li&gt;Who creates the CoE?&lt;/li&gt;
&lt;li&gt;Why is the CoE called Center of Enablement, not Excellence?&lt;/li&gt;
&lt;li&gt;Why do we have guardrails?&lt;/li&gt;
&lt;li&gt;Why do we insist on a Terms of Reference?&lt;/li&gt;
&lt;li&gt;Why can I not just create a working group?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How can I join a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Join" src="../images/ceremony-overview-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; and &lt;a href="/ceremony-working-group.html"&gt;Working Group&lt;/a&gt; are by invitation only for the active and core members. You can request to be invited to these events as a "fly on the wall" to observe, not interrupt.&lt;/p&gt;
&lt;p&gt;The &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;, &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, and &lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt; ceremonies are open to everyone. You should be engaged and committed to collaborate when joining these events and introduce yourself to the Sensei for Dojos out of respect. &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What are the pre-requisites to initiate a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Initiate" src="../images/ceremony-overview-4.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To initiate a &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; you need a sponsor - a director and/or manager who owns the area of focus. &lt;/li&gt;
&lt;li&gt;To initiate a &lt;a href="../ceremony-working-group.html"&gt;Working Group&lt;/a&gt;, &lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;, or &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, you need a sponsoring &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; to ensure that the ceremonies are aligned with the vision, direction, and governance promoted by the CoE.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;What are the outcomes of a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Outcomes" src="../images/ceremony-overview-5.png"&gt;&lt;/p&gt;
&lt;p&gt;The following table summarizes the outcomes of the ceremonies.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CEREMONY&lt;/th&gt;
&lt;th&gt;~~&lt;/th&gt;
&lt;th&gt;OUTCOMES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CoE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Vision, Direction, and Governance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CoP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Vibrant collaboration and continuous learning.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dojo&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Vibrant collaboration and immersive learning.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Working Group&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Process and Product Guardrails. (Dis)Proven Hypothesis.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2&gt;When and how to host a ceremony?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Host" src="../images/ceremony-overview-6.png"&gt;&lt;/p&gt;
&lt;p&gt;We recommend to start with &lt;strong&gt;weekly&lt;/strong&gt; meetups, moving to &lt;strong&gt;bi-weekly&lt;/strong&gt; and &lt;strong&gt;monthly&lt;/strong&gt; when the members are laser focused and the ceremony picks up momentum. As with the ceremony overall, each meetup must have an agenda, a purpose, and survive on actions.&lt;/p&gt;
&lt;p&gt;Ceremonies must be a psychologically safe place for all in attendance and dealing with failure as an opportunity to learn and innovate. Respect those more experienced, respect those less experienced, and do not force your ideas on others. It is all about collaboration!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Who creates the CoE?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-overview-7.png"&gt;&lt;/p&gt;
&lt;p&gt;Anyone can collaborate and initiate a &lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt; and any of its related ceremonies. Our directors and managers are the &lt;strong&gt;stewards&lt;/strong&gt; to ensure we have buy-in and that each CoE provides vision, direction, and governance to the organization. &lt;/p&gt;
&lt;p&gt;When you have buy-in, you can &lt;strong&gt;announce&lt;/strong&gt; the new CoE. When you have the &lt;strong&gt;Terms of Reference&lt;/strong&gt; and committed core members, you can launch the CoE. When the CoE is active, you can launch associated COP, Working Group, and Dojo ceremonies. Always monitor the &lt;strong&gt;heart-beat&lt;/strong&gt; of all ceremonies and &lt;strong&gt;terminate&lt;/strong&gt; them when the energy, value, or intent fades.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why is the CoE called Center of Enablement, not Excellence?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-overview-7.png"&gt;&lt;/p&gt;
&lt;p&gt;On one hand the term &lt;strong&gt;Excellence&lt;/strong&gt; triggers the same alarm bells as &lt;strong&gt;Best Practices&lt;/strong&gt;. More importantly our goal is to &lt;strong&gt;enable&lt;/strong&gt; our common engineering stakeholders - therefore I LOVE our decision to pivot to &lt;strong&gt;Enablement&lt;/strong&gt;. The CoE enables by providing vision, direction, and governance, as well as stewarding laser focused working groups, dojos, and community of practices.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why do we have guardrails?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Guardrails" src="../images/ceremony-overview-8.png"&gt;&lt;/p&gt;
&lt;p&gt;Yes, the guardrails feel like we are ignoring the first value of the Agile manifesto: "&lt;em&gt;Individuals and interactions over processes and tools&lt;/em&gt;." We decided to introduce lightweight guardrails through these blog posts and the referenced overview and working agreement posters to ensure that we promote &lt;strong&gt;consistent&lt;/strong&gt; and &lt;strong&gt;laser focused&lt;/strong&gt; collaboration, with measurable outcomes, and an opportunity to drive our dream to optimize our meetings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Meetings" src="../images/ceremony-overview-1x.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why do we insist on a Terms of Reference?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ToR" src="../images/ceremony-overview-2.png"&gt;&lt;/p&gt;
&lt;p&gt;We question the value of every ceremony and every meeting we plan or attend. The minimal expectations for the terms of reference identifies the purpose, the outcomes, and a measurable hypothesis. This promotes consistency and purpose!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why can I not just create a working group?&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;working group&lt;/strong&gt; is a group of people working together to collaborate and achieve specified goals. The lifespan of a working group can last anywhere between minutes to years, although we strongly recommend the shorter the better mindset. You can create these working groups whenever you need one!&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;CoE working group&lt;/strong&gt; is short-lived and sponsored by one or more Centers of Enablement, its terms of reference (vision, goals, hypothesis) a subset of and supporting the CoE terms of reference. In other words, there is a strong dependency between a sponsoring and other collaborating CoEs.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://wsbctechnicalblog.github.io/ceremony-focus-single-source.html"&gt;Why can I not just create a working group?&lt;/a&gt; for details.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="Meetings" src="../images/azuredevop-automation-stakeholders-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Watch this space for more questions and posts by ceremony members sharing their experiences.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>How to increase collaboration</title><link href="https://wsbctechnicalblog.github.io/guest-leader.html" rel="alternate"></link><published>2021-11-12T00:00:00-08:00</published><updated>2021-11-12T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-12:/guest-leader.html</id><summary type="html">&lt;p&gt;How to improve the flow of teamwork&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Increase collaboration" src="../images/collaboration.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gerald Weinberg (Weinberg, G., “The Psychology of Computer Programming: Silver Anniversary Edition”, Dorset House, 1998) described the central role of a soda vending machine at a university’s programming helpdesk. The department administration, disturbed by the students congregating around the machine, ordered it removed. Much to their surprise, the line at the help desk suddenly became much longer. It took a while before they worked out that the students congregating around the soda machine were helping each other solve their programming problems, and thus reducing the load on the help desk staff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Weinberg’s description above is a textbook case of the usefulness of collaboration. One interesting thing on the topic of collaboration is the fact that, while there is plethora of scientific studies on the importance of communication, collaboration for some reason didn’t get that much attention. Taking the closer look into the topic of collaboration is long overdue; in this micro learning episode, I will try to shed some light on it.&lt;/p&gt;
&lt;h2&gt;Distributed cognition&lt;/h2&gt;
&lt;p&gt;In his book &lt;a href="https://www.amazon.ca/Cognition-Wild-Edwin-Hutchins/dp/0262581469"&gt;Cognition in the Wild&lt;/a&gt;, Edwin Hutchins describes the process of bringing in a large naval ship into the port. A team of merchant marines operates as though a single brain unifies many distributed components. Each crew member is busy forming a slightly different idea of what problem they are solving and how the solution should look. In the process, they may run into problems that require others to lend a helping hand.&lt;/p&gt;
&lt;p&gt;Hutchins termed this mode of working “distributed cognition”. When working in a distributed cognition mode, the problem of mental search and synchronization emerges. The skillful crew is capable of quickly resolving differing opinions and deciding whose view to accept.&lt;/p&gt;
&lt;h2&gt;Software development is distributed cognition&lt;/h2&gt;
&lt;p&gt;It is easy to recognize from the above description that software development is the activity of distributed cognition. It is exceptionally rare that software solution gets developed in its entirety by a single engineer. As soon as the development gets done by two or more team members, constraining forces of distributed cognition come into play. The process of mental search and synchronization becomes the central problem.&lt;/p&gt;
&lt;p&gt;That problem gets exacerbated when team members are working in isolation, asynchronously. Applying the &lt;em&gt;scatter-gather&lt;/em&gt; model of working introduces the problem of effective communication. The aspects of effective/ineffective communications have been heavily studied. The findings seem to be conclusive – effective communication appears to drop off at about 10 meters in distance between the team members (&lt;em&gt;Allen, T., “Managing the Flow of Technology: Technology Transfer and the Dissemination of Technological Information Within the R&amp;amp;D Organization”, The MIT Press, 1984). Turns out that most people would not bother to walk longer than the length of a school bus to ask a question (Olson, G., Olson, J., “Distance Matters”, HUMAN-COMPUTER INTERACTION, 2000, Volume 15, pp. 139–178&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The conclusion is clear: collocated teams stand better chance of doing improved collaboration.&lt;/p&gt;
&lt;p&gt;However, avoiding distributed teams by collocating the members does not remove the problem of distributed cognition – it only intensifies it. But it’s a good kind of intensification, because it creates small failures that urge the team to fix them right there, on the spot.&lt;/p&gt;
&lt;p&gt;With distributed teams, the distributed cognition problems are not usually as intense, and tend to be placed on the back burner. Which only exacerbates the situation – postponing the solutions for the differing opinions only makes it worse with the passage of time.&lt;/p&gt;
&lt;h2&gt;Promote Guest Leadership to increase successful collaboration&lt;/h2&gt;
&lt;p&gt;I remember in one of my previous jobs being invited to the company’s barbecue ceremony organized to celebrate employee contributions. The ceremony was set in such way that bosses and line managers were serving hamburgers and hot dogs to the line employees.&lt;/p&gt;
&lt;p&gt;Such activities, despite being fully collocated, are removed as far as possible from collaborative activities.&lt;/p&gt;
&lt;p&gt;During a different stint at another company, employees were invited to attend a potluck party. Everyone brought something to share, and the vertical distancing disappeared – there were no job titles on the display. Sharing and commenting on various items quickly created a very collaborative atmosphere where people were stepping forward and wholeheartedly partaking in the event.&lt;/p&gt;
&lt;p&gt;There is a semi-technical term that denotes the type of behaviour typically observed in situations where hierarchical, or vertical distancing diminishes. The term is “Guest Leader”.&lt;/p&gt;
&lt;p&gt;One of the most effective ways to increase quality collaboration is to create a situation where Guest Leaders emerge. Let’s quickly examine factors that tend to contribute to fostering the Guest Leader behavioral pattern:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure all participants in the collaborative session have ‘skin in the game’ by clearly understanding the goal(s)&lt;/li&gt;
&lt;li&gt;Make it clear that everyone in the group is invested in the outcome of the collaboration&lt;/li&gt;
&lt;li&gt;Try to create psychological safety by clearly explaining that in the collaboration session we have nothing to lose and only have a chance to gain something of value&lt;/li&gt;
&lt;li&gt;Identify possible Guest Leader champion(s) and get them to ‘warm up the room’ by stepping forward and in that way demonstrating that their participation creates immediate impact&lt;/li&gt;
&lt;li&gt;Create sense of positive urgency – we intensely desire to deliver results in this session today!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other contributing factors may be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explain that collaboration serves everyone’s self-interests&lt;/li&gt;
&lt;li&gt;Minimize the presence of anointed leaders; make official leaders recede in the background, relegating them to the role of ‘spectators’&lt;/li&gt;
&lt;li&gt;Agree with stakeholders beforehand to be permissive and not dismiss anyone’s contribution; all ideas and comments are valid&lt;/li&gt;
&lt;li&gt;Be explicit in explaining that whoever steps forward and suggests an improvement will not find themselves being stuck with the task; any agreed-upon solutions will be collectively owned&lt;/li&gt;
&lt;li&gt;Encourage rotations; participants should not feel that there are already enough people who are stepping forward and it would be rude to interfere&lt;/li&gt;
&lt;li&gt;Organizer recognizes others&lt;/li&gt;
&lt;li&gt;Organizer inquires but doesn’t contradict&lt;/li&gt;
&lt;li&gt;Organizer challenges, but adopts&lt;/li&gt;
&lt;li&gt;Organizer readily lowers their hierarchical position in the organization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Factors that may interfere with attempts to create Guest Leader atmosphere:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Announcing that failure is not an option&lt;/li&gt;
&lt;li&gt;Not explaining that proposed solutions don’t imply there will be additional workload&lt;/li&gt;
&lt;li&gt;Not dealing with the desire in some participants to stay safe by not standing out&lt;/li&gt;
&lt;li&gt;Valuing status quo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Benefits of Guest Leadership&lt;/h2&gt;
&lt;p&gt;Encouraging participants to become Guest Leaders during collaboration sessions fosters so-called ‘horizontal’ social-professional culture. It flattens the hierarchical structure (top-down chain of command) by shortening the distances between senior and junior members as well as the distance between members at different levels of management hierarchy. That approach invites and cultivates diversity, which is the strongest suit of any complex organization.&lt;/p&gt;
&lt;p&gt;When a Guest Leader emerges during a collaboration event, few beneficial patterns become prominent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Guest Leader is eager to detect when an intervention is needed (i.e., they are proactive)&lt;/li&gt;
&lt;li&gt;Guest Leader has the propensity to decide “This is something I should take care of now”&lt;/li&gt;
&lt;li&gt;Being aware of their guest status, Guest Leaders tend to understand the temporary nature of their role, and often easily step back into their previous, more passive position, thus freeing the space for the next Guest Leader to step forward&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Social dynamics brought forward by the Guest Leadership pattern tend to result in more fruitful collaboration sessions. The team is more vested in the end-goals and leaves the collaboration session energized, ready to tackle new challenges.&lt;/p&gt;</content><category term="Posts"></category><category term="collaboration"></category><category term="psychological-safety"></category></entry><entry><title>Guidelines to start and terminate the Townhall Events</title><link href="https://wsbctechnicalblog.github.io/townhall.html" rel="alternate"></link><published>2021-11-12T00:00:00-08:00</published><updated>2021-11-12T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-12:/townhall.html</id><summary type="html">&lt;p&gt;A super-event to foster systems thinking and the removal of barriers and silos&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Townhall" src="../images/townhall.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Terms of reference&lt;/h2&gt;
&lt;p&gt;Continuous improvement is not possible without firmly established systems thinking. A holistic view of the organization as a system is necessary to ensure uninterrupted stream of delivery of desirable business value. &lt;/p&gt;
&lt;p&gt;The objective of starting a series of Townhall events is to promote and foster the need for sharing knowledge and insights regarding the functioning of the system as a whole.&lt;/p&gt;
&lt;p&gt;By proposing to start a series of Townhall events, we hypothesize that the outcomes will materialize as an improved consistency of the alignment with the business priorities and the delivery of desired business value. The rationale driving this hypothesis is that regardless of how successful, advanced, or brilliant any part of the system may be, the system itself is only as performant, reliable, resilient, and secure as is its weakest, slowest part. It is therefore hypothesized that having regular ‘super events’ to share knowledge and insights will yield the overall improvement of the system’s performance by breaking potential barriers and removing silos. &lt;/p&gt;
&lt;p&gt;To avoid potential waste, we also hypothesize that any established Townhall series of events must be terminated in case the anticipated desired outcomes fail to materialize. &lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;During the regular business operations, as various ceremonies get executed, those distributed activities will be synchronized by attending the shared ‘super event’ -- Townhall. &lt;/p&gt;
&lt;p&gt;Establishing the Townhall event is rather simple: it will commence once per PI, during the Innovation &amp;amp; Planning iteration. The organizers create the Townhall wiki, the Townhall Teams channel, and publicize to the organization the opening of the Townhall. &lt;/p&gt;
&lt;h2&gt;Projected trajectory for success&lt;/h2&gt;
&lt;p&gt;Townhall events must publish the expected measurable criteria for success. That criteria could be reducing the number of recorded system defects during the next PI, or reducing the number of support calls during the next PI, etc. &lt;/p&gt;
&lt;p&gt;In addition to establishing clear, focused, and measurable criteria for success, Townhall meetings must provide the platform for collaborating on identifying the bottlenecks in the system. Those bottlenecks will be identified by sharing the findings that resulted from the regular sessions in Centers of Enablement, Working Groups, Community of Practices, and Dojos. &lt;/p&gt;
&lt;p&gt;Once bottlenecks have been identified, they must be prioritized in terms of importance/urgency, and an actionable plan must be delivered with clearly stated expected acceptance criteria. &lt;/p&gt;
&lt;p&gt;Upon executing the PI and attending to the agreed-upon elimination of prioritized bottlenecks, a retrospective session must be scheduled to assess whether the Townhall findings and recommendations yielded the expected results. &lt;/p&gt;
&lt;h2&gt;Preferred mode of working&lt;/h2&gt;
&lt;p&gt;Townhall events are envisioned as “come all, share all” happenings. Ceremonious parts of the event should be kept at a minimum, to enable lively and productive collaboration. There should be no anointed/appointed leaders of the event. Preferred mode of collaboration is by following the &lt;a href="/guest-leader.html"&gt;Guest Leaders&lt;/a&gt; model – minimize any ‘vertical distance’ between participants and encourage stepping forward and temporarily taking charge of the pressing topics. A facilitator/moderator is a must at such events. &lt;/p&gt;
&lt;p&gt;At all times, the Townhall event must be a psychologically safe place for all in attendance. To ensure smooth and effective progress, we propose the &lt;em&gt;Townhall Code of Ethics&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Respect those more experienced. Do not force your ideas on others.  &lt;/li&gt;
&lt;li&gt;Respect those less experienced. Do not force your ideas on others.  &lt;/li&gt;
&lt;li&gt;If you understand the nature of the issue and are working with someone who does not, lead them according to your understanding. Do not attempt to verbally correct or instruct others.  &lt;/li&gt;
&lt;li&gt;Upon entering the Townhall, strive to cultivate an open mind that expects to be informed by the views of others. No other concerns or discussions should be on the attendant's mind for the duration of the session.  &lt;/li&gt;
&lt;li&gt;Management and senior executives always enter the Townhall with undivided respect and gratitude to all in attendance who are ready to collaborate.  &lt;/li&gt;
&lt;li&gt;It is important to be on time for event. If you arrive late, please enter the session quietly, so as not to disturb the flow.  &lt;/li&gt;
&lt;li&gt;Participants may find themselves disagreeing with the consensus. While asking questions is part of the Townhall session, it is important to keep in mind that it is possible that not all the details have been fully presented at the moment when confusion arises in the participant's understanding. Patience is a virtue, and often what appears contradictory or incoherent becomes clearer as the collaboration session continues. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Deliverables&lt;/h2&gt;
&lt;p&gt;After each Townhall session the organizers will tally up the attendees and provide the report to the Townhall stakeholders/sponsors. &lt;/p&gt;
&lt;p&gt;Once every PI the organizers will prepare the report outlining the status of the Townhall: how many staff have attended; what is the trend of attendance; how many staff are lagging; approximate estimate as to how many more sessions may be needed to resolve all outstanding system bottlenecks. &lt;/p&gt;
&lt;p&gt;Townhall stakeholders will organize periodical celebration ceremonies. This is to recognize and award initiatives that have ‘moved the needle’ and demonstrably improved the overall system performance. &lt;/p&gt;
&lt;p&gt;Organizers will be responsible for maintaining the Townhall wiki and for collaborating on the Townhall Team channels. Organizers will be responsible for recording each Townhall session and for publishing the recordings. &lt;/p&gt;
&lt;h2&gt;Responsibilities&lt;/h2&gt;
&lt;p&gt;Townhall organizers will be responsible for preparing the handout material for all Townhall sessions. Those handouts will typically include above mentioned deliverables (reports) as well as any newly identified bottlenecks to be discussed.&lt;/p&gt;
&lt;p&gt;Attendees are responsible for the effective utilization of the time spent in the Townhall, as well as the time spent preparing any material to be presented in the Townhall. Attendees are expected to demonstrate brisk and sustained participation in the Townhall.  &lt;/p&gt;
&lt;p&gt;If the Townhall demonstrates effective progress (i.e., identified and prioritized bottlenecks are swiftly being minimized/removed from the system), organizers will be given allowances to demand more time that the staff should dedicate to identifying system-wide bottlenecks and improving the overall system performance. &lt;/p&gt;
&lt;h2&gt;Terminating the Townhall&lt;/h2&gt;
&lt;p&gt;Everything good and nice must eventually end. The desired end-state of the system as a whole is a fully flexible, secure, reliable, resilient, and anti-fragile system that perfectly aligns with WorkSafeBC business priorities. Once the system reaches that high level of performance, the Townhall should be terminated. &lt;/p&gt;
&lt;p&gt;There is also a possibility that the Townhall events may not be yielding the hoped-for results. In case of such eventuality, organizers should terminate the Townhall.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and Community of Practice (CoP) working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-townhall.pdf"&gt;Working Agreement - Townhall PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Posts"></category><category term="technical-excellence"></category><category term="ceremony"></category></entry><entry><title>What is our Community of Practice (CoP) and why do we need it?</title><link href="https://wsbctechnicalblog.github.io/ceremony-community-of-practice.html" rel="alternate"></link><published>2021-11-10T13:13:00-08:00</published><updated>2021-11-10T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-10:/ceremony-community-of-practice.html</id><summary type="html">&lt;p&gt;"People with great PASSION can make the impossible happen" - Elon Musk.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Community of Practice (CoP) is an event by people that share a concern or passion for something they do and learn how to group of people with common disciplines do it better as they interact regularly. As implied by the name, a CoP is a &lt;strong&gt;community&lt;/strong&gt;, driven by &lt;strong&gt;passion&lt;/strong&gt;, and therefore voluntary.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CoP" src="../images/ceremony-community-of-practice-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://www.scaledagileframework.com/communities-of-practice/"&gt;Community of Practice&lt;/a&gt; for details on how to organize, operate, and encourage your community. Within the context of this blog post we are referring to CoPs that are triggered by and serve our &lt;a href="/ceremony-center-of-enablement.html"&gt;Centers of Enablement (CoE)&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our Community of Practice (CoP)?&lt;/h1&gt;
&lt;p&gt;Looking through the lens of our common engineering ecosystem, we use our CoPs to bring together committed and passionate people from different areas within the organization who are inspired by quotes such as these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;“Every person is defined by the communities she belongs to.”&lt;/em&gt; – Orson Scott Card.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Constantly think about how you could be doing things better. Keep questioning yourself."&lt;/em&gt; - Elon Musk&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Really, the only thing that makes sense is to strive for greater collective enlightenment."&lt;/em&gt; - Elon Musk&lt;/li&gt;
&lt;li&gt;&lt;em&gt;“People should pursue what they’re passionate about. That will make them happier than pretty much anything else.”&lt;/em&gt; - Elon Musk&lt;/li&gt;
&lt;li&gt;&lt;em&gt;“Diversity: the art of thinking independently together.”&lt;/em&gt; – Malcolm Forbes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our core objective is to promote collaboration and share tribal knowledge, experience, and passion for processes, products, and other interesting themes that our Centers of Enablement (CoE) are focused on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CoP" src="../images/ceremony-community-of-practice-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Every CoE typically triggers one CoP, but can trigger more as needed throughout its lifetime.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Lifetime&lt;/h1&gt;
&lt;p&gt;As shown below, the Center of Enablement (CoE) typically spawns one Community of Practice (CoP), which has a long-term lifetime. Similar to the CoE the CoP starts with a terms of reference that outlines the "WHY" we need the CoP, with an inherited buy-in from the CoE. We KICKSTART the CoP and switch to IN-FLIGHT mode until the value or energy of the CoP starts diminishing. We then TERMINATE the CoP and share the final outcomes, the value, with the CoE. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Lifetime" src="../images/ceremony-community-of-practice-lifetime.png"&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bulb" src="../images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt; Something to peruse:  &lt;a href="https://workingknowledge-csp.com/wp-content/uploads/CoP_Maturity_Model_v1.pdf"&gt;Community of Practice Maturity Model&lt;/a&gt; by Bill Kaplan from Working Knowledge.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No &lt;strong&gt;flight plan&lt;/strong&gt; (terms of reference), no CoE launch!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is our secret sauce?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Secret Sauce" src="../images/ceremony-community-of-practice-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a recipe for our Community of Practice ceremonies:&lt;/p&gt;
&lt;h2&gt;Executive buy-in!&lt;/h2&gt;
&lt;p&gt;Every Working Group inherits the executive support to be empowered with a clear strategy and support where needed from its parent Center of Enablement (CoE).&lt;/p&gt;
&lt;h2&gt;Cross-discipline collaboration!&lt;/h2&gt;
&lt;p&gt;A Community of Practice relies on vibrant collaboration and respect, similar to the &lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;, in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Respect those more experienced. &lt;/li&gt;
&lt;li&gt;Do not force your ideas on others.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Consistency&lt;/h2&gt;
&lt;p&gt;Communities of Practice must monitor and motivate their members to adhere to the CoP guardrails, and use shared blueprints, working agreements, backlogs, processes, and products consistently. Consistency is pivotal to share and implement the CoP outcomes through its parent CoE and associated Working Groups.&lt;/p&gt;
&lt;h2&gt;Transparency&lt;/h2&gt;
&lt;p&gt;Transparency of hypothesis, visions, goals, and outcomes are pivotal to avoid duplication of effort, creation of &lt;strong&gt;WASTE&lt;/strong&gt;, and fuel the overall energy. The CoE-Sync and the &lt;strong&gt;Townhall&lt;/strong&gt; event are two of the key ceremonies that enable the sharing of CoP deliverables and outcomes.&lt;/p&gt;
&lt;h2&gt;Consistent guardrails!&lt;/h2&gt;
&lt;p&gt;CoPs require guardrails and a blueprint to standup and energize. Here are some of our guidelines, sorted alphabetically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Larger than the pizza sized team (3-9 members) - the more the merrier.&lt;/li&gt;
&lt;li&gt;Groomed and prioritized subset of the CoE backlog.&lt;/li&gt;
&lt;li&gt;Membership is voluntary.&lt;/li&gt;
&lt;li&gt;Long-term lifetime.&lt;/li&gt;
&lt;li&gt;Terminate if there is no remaining energy in or value for the community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terms of Reference&lt;/strong&gt; defining &lt;strong&gt;WHY&lt;/strong&gt; we are here and &lt;strong&gt;WHAT&lt;/strong&gt; are our objectives and hypothesis that defines the Working Group's existence and purpose.&lt;/li&gt;
&lt;li&gt;Triggered by CoE.&lt;/li&gt;
&lt;li&gt;Recognition of attendance.&lt;/li&gt;
&lt;li&gt;Bi-weekly or monthly cadence.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Bulb" src="../images/moving-hundreds-of-pipeline-snowflakes-part8-7.png"&gt; Something to peruse for terms of reference ideas: &lt;a href="https://view.officeapps.live.com/op/view.aspx?src=http%3A%2F%2Ftheagiledirector.com%2Fimages%2FCoPToR-examplebyEvanLeybourn.docx"&gt;Community of Practice: Terms of Reference&lt;/a&gt; by Evan Leybourn
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also have a look at our Community of Practice working agreement poster for a crisp summary of these and other guidelines. &lt;/p&gt;
&lt;h2&gt;All good things come to an end&lt;/h2&gt;
&lt;p&gt;Every CoP will go through the Forming-Storming-Norming-Performing stages, similar to &lt;a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development"&gt;Tuckman's Stages of Group Development&lt;/a&gt;, whereby it is important to continuously measure the passion, energy, and value (to members and stakeholders) of your event and members. 
If any of these metrics start dipping it is time to ask whether is is time to terminate your CoP!&lt;/p&gt;
&lt;p&gt;The Scaled Agile Framework has a great visualization of the CoP five-stage life cycle, from &lt;strong&gt;committing&lt;/strong&gt; to &lt;strong&gt;shutting down&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SAFe CoP" src="../images/ceremony-community-of-practice-safe.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Image from &lt;a href="https://www.scaledagileframework.com/communities-of-practice/"&gt;Community of Practice&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figure 4. CoPs typically follow a five-stage life cycle, from conceptualization to closure&lt;/p&gt;
&lt;p&gt;© Scaled Agile, Inc.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What are our Community of Practice deliverables?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="SDeliverables" src="../images/ceremony-community-of-practice-4.png"&gt;&lt;/p&gt;
&lt;p&gt;CoPs are responsible to report back to its parent CoE with:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regular update on terms of reference.&lt;/li&gt;
&lt;li&gt;Regular updates on associated events.&lt;/li&gt;
&lt;li&gt;Collaboration recordings.&lt;/li&gt;
&lt;li&gt;Ongoing Net Performance Score (NPS) from members and stakeholders.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and Community of Practice (CoP) working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-community-of-practice.pdf"&gt;Working Agreement - Community of Practice PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other ceremonies&lt;/h2&gt;
&lt;p&gt;Here are references to more information on ceremonies mentioned above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ceremony-working-group.html"&gt;Working Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>What is our Working Group and WHY do we need it?</title><link href="https://wsbctechnicalblog.github.io/ceremony-working-group.html" rel="alternate"></link><published>2021-11-09T13:13:00-08:00</published><updated>2021-11-09T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-09:/ceremony-working-group.html</id><summary type="html">&lt;p&gt;Union of laser-focused experts collaborating to empower its parent Center of Enablement (CoE).&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working Groups are people from different disciplines, collaborating to solve a specific problem and/or (dis)prove a hypothesis. They are empowered to research processes and products, evaluate and recommend guardrails (governance), and propose adoption and readiness plans.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Group" src="../images/ceremony-working-group-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We admit that there are many flavours and definitions of working groups. Within the context of this blog post we are referring to Working Groups that are triggered by and serve our &lt;a href="/ceremony-center-of-enablement.html"&gt;Centers of Enablement (CoE)&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our Working Group?&lt;/h1&gt;
&lt;p&gt;Looking through the lens of our common engineering ecosystem, we use our Working Group to bring together committed and appropriate subject matter experts from different areas within the organization to solve a specific problem and/or (dis)prove a hypothesis for its parent CoE. Subject matter experts from Architecture, Business, DevSecOps, Operations, Site Reliability Engineering, Innovations, and other stakeholders not only bring their tribal knowledge and experience to the table, but naturally erode organizational silos through vibrant collaboration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Working Group" src="../images/ceremony-working-group-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Every CoE can trigger one or more focused Working Groups throughout its lifetime. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Relationshiop" src="../images/ceremony-working-group-5.png"&gt;&lt;/p&gt;
&lt;p&gt;In other words, every Working Group has a CoE parent, and every CoE can have one or more short-lived Working Groups.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Lifetime&lt;/h1&gt;
&lt;p&gt;As shown below, the Center of Enablement (CoE) typically spawns one or more Working Groups, which have a short-term lifetime. Similar to a short-lived feature branch.&lt;/p&gt;
&lt;p&gt;The Working Group starts with a terms of reference that outlines the "WHY" we need the Working Group, with an inherited buy-in from the CoE. We KICKSTART the Working Group and switch to IN-FLIGHT mode until the maximum lifetime, value or energy of the CoP starts diminishing. We then TERMINATE the Working Group and share the final outcomes, the value, with the CoE. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Lifetime" src="../images/ceremony-working-group-lifetime.png"&gt; &lt;/p&gt;
&lt;p&gt;No &lt;strong&gt;flight plan&lt;/strong&gt; (terms of reference), no CoE launch!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is our secret sauce?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Secret Sauce" src="../images/ceremony-working-group-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a recipe for our Working Group ceremonies:&lt;/p&gt;
&lt;h2&gt;Executive buy-in!&lt;/h2&gt;
&lt;p&gt;Every Working Group inherits the executive support to be empowered with a clear strategy, an innovation budget, and support where needed from its parent Center of Enablement (CoE).&lt;/p&gt;
&lt;h2&gt;Cross-discipline collaboration!&lt;/h2&gt;
&lt;p&gt;Working Groups rely on cross-discipline collaboration to research and resolve a specific problem or (dis)prove a hypothesis, as requested by its parent CoE.&lt;/p&gt;
&lt;h2&gt;Consistency&lt;/h2&gt;
&lt;p&gt;Working Groups must monitor and incentivize their members to adhere to the Working Group guardrails, and use shared blueprints, working agreements, backlogs, processes, and products consistently. Consistency is pivotal to share and implement the Working Group outcomes through its parent CoE.&lt;/p&gt;
&lt;h2&gt;Transparency&lt;/h2&gt;
&lt;p&gt;Transparency of hypothesis, visions, goals, and outcomes are pivotal to avoid duplication of effort, creation of &lt;strong&gt;WASTE&lt;/strong&gt;, and fuel the overall energy. The CoE-Sync and the &lt;strong&gt;Townhall&lt;/strong&gt; event are two of the key ceremonies that enable the sharing of Working Group deliverables and outcomes.&lt;/p&gt;
&lt;h2&gt;Consistent guardrails!&lt;/h2&gt;
&lt;p&gt;Working Groups require guardrails and a blueprint to standup and energize. Here are some of our guidelines, sorted alphabetically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-pizza sized team (3-9 members).&lt;/li&gt;
&lt;li&gt;Groomed and prioritized subset of the CoE backlog&lt;/li&gt;
&lt;li&gt;Innovation charge code for members to commit their time.&lt;/li&gt;
&lt;li&gt;Membership is by invitation only.&lt;/li&gt;
&lt;li&gt;Short-term lifetime ranging from iterations to a maximum of 2 program increments (10 iterations).&lt;/li&gt;
&lt;li&gt;Terminate if problem is solved, maximum lifetime is reached, there is no energy, or there is no value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terms of Reference&lt;/strong&gt; defining &lt;strong&gt;WHY&lt;/strong&gt; we are here and &lt;strong&gt;WHAT&lt;/strong&gt; are our objectives and hypothesist that defines the Working Group's existence and purpose.&lt;/li&gt;
&lt;li&gt;Triggered by CoE.&lt;/li&gt;
&lt;li&gt;Recognition of attendance.&lt;/li&gt;
&lt;li&gt;Weekly to bi-weekly cadence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also have a look at our Working Group working agreement poster for a crisp summary of these and other guidelines.&lt;/p&gt;
&lt;h2&gt;All good things come to an end&lt;/h2&gt;
&lt;p&gt;When your Working Group reaches its maximum lifetime or it as resolved the problem, you must terminate your Working Group!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Passion" src="../images/ceremony-termination.png"&gt;&lt;/p&gt;
&lt;p&gt;Also, every Working Group will go through the Forming-Storming-Norming-Performing stages, similar to &lt;a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development"&gt;Tuckman's Stages of Group Development&lt;/a&gt;. When you find yourself in the Performing phase, it is important to continuously measure the passion, energy, and value (to members and stakeholders) of your event and members. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What are our Working Group deliverables?&lt;/h1&gt;
&lt;p&gt;&lt;img alt="SDeliverables" src="../images/ceremony-working-group-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Working Groups are responsible to report back to its parent CoE with:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Report of outcomes.&lt;/li&gt;
&lt;li&gt;Guardrail proposals, as needed.&lt;/li&gt;
&lt;li&gt;Recording of all collaboration recordings.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and Working Group working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-working-group.pdf"&gt;Working Agreement - Working Group PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other ceremonies&lt;/h2&gt;
&lt;p&gt;Here are references to more information on ceremonies mentioned above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ceremony-center-of-enablement.html"&gt;Center of Enablement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>How to create deterministic tests</title><link href="https://wsbctechnicalblog.github.io/deterministic-tests.html" rel="alternate"></link><published>2021-11-09T00:00:00-08:00</published><updated>2021-11-09T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-09:/deterministic-tests.html</id><summary type="html">&lt;p&gt;Quality of automated tests is the most important aspect of continuous delivery&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Law of Demeter" src="../images/nondeterministic.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In my previous post &lt;a href="/automate-tests.html"&gt;Do not automate anything unless you automate the tests&lt;/a&gt; I discussed the importance of having full test coverage for any automated operation in the system. This episode will elaborate on that by looking into factors that enable automated tests to run deterministically.&lt;/p&gt;
&lt;p&gt;Generally speaking. there are two types of tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exploratory tests&lt;/li&gt;
&lt;li&gt;Automated tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Exploratory tests are not part of the continuous delivery flow. Usually performed by QA engineers (in collaboration with other team members), these tests are experimental in nature and are focused on disrupting the system &lt;em&gt;status quo&lt;/em&gt;. The aim of exploratory tests is to expose potential vulnerabilities in the automated system. If vulnerabilities get discovered during the exploratory testing spike, a remedy solution gets engineered and implemented. The system thus grows more resilient, less fragile.&lt;/p&gt;
&lt;p&gt;Automated tests, on the other hand, are part and parcel of the continuous delivery flow. As a matter of fact, continuous delivery is not possible without a comprehensive suite of automated tests.&lt;/p&gt;
&lt;p&gt;Continuous delivery is only possible if automated tests that are underpinning the delivery are deterministic. If the automated tests are not 100% deterministic, engaging in continuous delivery becomes risky. If the risk compounds, we are at the danger of experiencing outages and defects caused by the continuous delivery. Once that starts happening, we would be forced to discontinue the continuous delivery, and would fall back to the slow and sluggish scheduled delivery model.&lt;/p&gt;
&lt;h2&gt;What are deterministic tests?&lt;/h2&gt;
&lt;p&gt;Deterministic tests are tests that are repeatable. If we have a test that delivers certain results when we run it, and then if we run it again it delivers different results, that test is not deterministic.&lt;/p&gt;
&lt;p&gt;Tests that are not deterministic are not only useless, but they are also harmful. They have capacity to mislead us. As such, non-deterministic tests must be avoided at all cost. It is better not having any tests than having non-deterministic tests.&lt;/p&gt;
&lt;h2&gt;How to recognize non-deterministic tests?&lt;/h2&gt;
&lt;p&gt;It is relatively straightforward to detect non-deterministic tests. If a test we are creating or modifying/examining depends on some other tests, it is a clear sign that it is a non-deterministic test.&lt;/p&gt;
&lt;p&gt;Any tests that depend on some sequence of events that are scheduled outside of the body of the test are non-deterministic. Automated tests must be immune to any sequence of events that happen in the system under test.&lt;/p&gt;
&lt;p&gt;In addition to that, any test that depends on hidden inputs is a non-deterministic test. A typical example would be a test that depends on the system clock. System clock is a hidden input, which means that at the time the test gets executed, it is impossible to predict the value of that input. A system clock provides the test with the value (usually in milliseconds). That value changes with the passage of time (every millisecond that value is different). The test whose assertion depends on that hidden value cannot ever be deterministic.&lt;/p&gt;
&lt;p&gt;Similarly, tests that rely on any other non-explicit values (entering the test via a network, or some I/O operation) are non-deterministic. Also, tests that depend on some value that is part of the shared mutable state are non-deterministic tests. Such tests must be banned from the repo.&lt;/p&gt;
&lt;h2&gt;Create only quality tests&lt;/h2&gt;
&lt;p&gt;As we’ve seen, not all automated tests are equally valuable. Some are downright harmful. Our goal is to hone our skills to only create high value, high quality automated tests. That way we will pave the way to the ultimate engineering goal – delivery on demand, not on the predefined schedule.&lt;/p&gt;
&lt;h2&gt;So, what are quality tests?&lt;/h2&gt;
&lt;p&gt;To begin with, each test must isolate &lt;strong&gt;one failure mode only&lt;/strong&gt;. A test that detects and measures two or more failure modes is low quality test.&lt;/p&gt;
&lt;p&gt;What is one failure mode? It is a single expectation of how we intend the system to behave. A quality test should never combine two or more such expectations. For example, we must never create a test that expects the system to calculate monthly installment rate AND craft the notification message to the client. Those are two separate expectations, and those expectations must have two separate automated tests.&lt;/p&gt;
&lt;p&gt;It goes without saying that the above two separate tests are completely independent of each other. We must make sure to create our expectations in such a way that the sequence of execution does not matter.&lt;/p&gt;
&lt;p&gt;Next thing to strive for is speed. As we keep creating more and more such isolated automated tests, we want to be able to run them at will. The decision when to run all tests should never be an issue. All tests must always run, without incurring any speed bumps. Ideally, any time we make any changes to our system, we must run all tests. That means that tests must be designed to run in memory. No suite of tests should take more than several seconds to run.&lt;/p&gt;
&lt;p&gt;The onus is therefore on us, the designers of automated tests, to pay close attention to how are we going to design them so that they don’t consume more than few seconds of running time. Being able to get to that level of design skills takes a lot of practice. It is therefore recommended that engineers attend TDD Dojo sessions where they can gain those skills by working together (mob programming).&lt;/p&gt;
&lt;p&gt;If we are running all tests after we make any change to our system, that implies that all tests are repeatable. Any time tests run they produce identical results. I was at one point managing a software development department that released faulty code to production. During the &lt;em&gt;postmortem&lt;/em&gt; we discovered that engineers have disabled some tests in the pipeline. When asked why, they replied that the tests were failing which was preventing them from releasing the code to production. When asked why those tests were failing, the engineers replied: “There were some TEMPORAL dependencies!”&lt;/p&gt;
&lt;p&gt;‘Temporal dependencies’ is just a fancy phrase for ‘tests are not isolated; they are not independent’. Meaning, they are poor quality tests.&lt;/p&gt;
&lt;p&gt;Moral of the story: it is crucially important to make sure that each test is completely isolated and independent from any other events in the system.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Automated tests should be viewed as the Oracle. They should be able to predict the future. If we go to the Oracle and ask: “Is it safe to release this code to production?”, the Oracle must be able to give us a clear Yes or No answer. If all tests pass, that’s the Oracle’s Yes answer. If even one test fails, that the Oracle’s No answer.&lt;/p&gt;
&lt;p&gt;If the Oracle answers with Yes (i.e., all test pass), and if we deploy to production but then the deployed code blows up, we lose confidence in the Oracle. We realize that the Oracle is flaky and is not capable of predicting the future. When that happens, we start feeling reluctant when it comes to writing automated tests. What’s the point in wasting time on writing those tests if they cannot tell us if it’s safe to proceed or not?&lt;/p&gt;
&lt;p&gt;It is for that reason that we must make our automated tests fully deterministic. Tests that always behave according to the expectations regardless of the conditions (i.e., the underlying computing machinery, the time of day, week, month, year, the network status, the I/O operations, presence of shared mutable values, etc.) are deterministic tests. They support a predictable system. Such predictable system is completely immune to any perturbations that may occur in the operating environment. The magic word that makes that happen is &lt;em&gt;isolation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Once we get to that level of technical excellence, we can safely engage in continuous delivery (a.k.a. delivery on demand).&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category><category term="delivery-on-demand"></category><category term="continuous-delivery"></category><category term="tdd"></category></entry><entry><title>What is our Center of Enablement (CoE) and WHY do we need it?</title><link href="https://wsbctechnicalblog.github.io/ceremony-center-of-enablement.html" rel="alternate"></link><published>2021-11-08T13:13:00-08:00</published><updated>2021-11-08T13:13:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-08:/ceremony-center-of-enablement.html</id><summary type="html">&lt;p&gt;It all starts with people from different disciplines to create a focused competency center and obliterating silos through vibrant collaboration!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our Center of Enablement (CoE), typically known as center of excellence, assembles people from different disciplines to collaborate and enable our organization to shift across multiple disciplines to create a place where the highest standards are maintained. Every CoE is a coalition for change, made of these pillars: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide thought leadership, vision, and direction.&lt;/li&gt;
&lt;li&gt;Provide good practice and guardrails (aka governance).&lt;/li&gt;
&lt;li&gt;Establish collaboration with key stakeholders and other CoEs to abolish silos.&lt;/li&gt;
&lt;li&gt;Trigger working groups, dojos, and community of practices to implement research, education, and outcomes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="CoE" src="../images/ceremony-center-of-enablement-1.png"&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;WHY do we need our CoE?&lt;/h1&gt;
&lt;p&gt;Looking through the lens of our common engineering ecosystem, we use our CoE to bring together committed and appropriate subject matter experts from different areas within the organization. Architecture, DevSecOps, Operations, Site Reliability Engineering, Innovations, and other stakeholders explore better ways to enable engineering to continuously deliver quality and value, through continuous process and products innovation.&lt;/p&gt;
&lt;p&gt;Every CoE is laser focused on a strategic vision, actionable goals, and made up of apt, committed, and engaged members. It solves many of the common collaboration challenges we all experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too many meetings.&lt;/li&gt;
&lt;li&gt;Large meetings that are unsuitable for strategic thinking or to make a decision.&lt;/li&gt;
&lt;li&gt;Disengaged participants - &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Lack of clarity of "&lt;strong&gt;WHY&lt;/strong&gt; are we here?".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you scale your ecosystem into a ring of interconnected CoEs, you will need to coordinate them through a CoE sync which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shares the current status and roadmap for each CoE.&lt;/li&gt;
&lt;li&gt;Collaborates on current challenges for each CoE and the organization.&lt;/li&gt;
&lt;li&gt;Identify and track dependencies between CoEs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="CoE Sync" src="../images/ceremony-center-of-enablement-2.png"&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Lifetime&lt;/h1&gt;
&lt;p&gt;As shown below, the Center of Enablement (CoE) has a long-term lifetime, which starts with a terms of reference that outlines the "WHY" we need the CoE. Once we have business buy-in, we LAUNCH the CoE and switch to IN-FLIGHT mode until the value or energy of the CoE starts diminishing. We then TERMINATE the CoE and share the outcomes, the value, transparently.&lt;/p&gt;
&lt;p&gt;The CoE has a long lifespan, that is terminated by a technology or approach of philosophy becoming obsolete. For example, if we had On Prem Engineering CoE, once we move fully to the cloud, it will be terminated. During the decline phase, the membership, governance, and vision will become stale. This is where it is important for the CoE members to track and identify trends and start the process of termination.&lt;/p&gt;
&lt;p&gt;That said, think of the CoE lifetime as the &lt;a href="https://en.wikipedia.org/wiki/Huygens_(spacecraft)"&gt;Huygens&lt;/a&gt; space probe's lifetime, which could be describes as a potentially infinite journey without any known destination.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lifetime" src="../images/ceremony-center-of-enablement-lifetime.png"&gt; &lt;/p&gt;
&lt;p&gt;Emphasize the long-term lifetime, the strategic laser focus, and the "&lt;strong&gt;WHY we are&lt;/strong&gt;" here when creating a new CoE. Invest time to prepare your terms of reference for your CoE to ensure that you can launch with clear objectives and committed members. Walk up to a whiteboard or use a digital board to collaborate around &lt;strong&gt;Current State&lt;/strong&gt;, &lt;strong&gt;Future State&lt;/strong&gt;, &lt;strong&gt;Current Problems&lt;/strong&gt;, &lt;strong&gt;What can stop us&lt;/strong&gt;, &lt;strong&gt;What we need to do&lt;/strong&gt;, &lt;strong&gt;How do we know we are successful&lt;/strong&gt; to define your terms of reference.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CoE Planning" src="../images/ceremony-center-of-enablement-3.png"&gt; &lt;/p&gt;
&lt;p&gt;No &lt;strong&gt;flight plan&lt;/strong&gt; (terms of reference) and/or no &lt;strong&gt;take-off approval&lt;/strong&gt; (business buy-in), no CoE launch!&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What is our secret sauce?&lt;/h1&gt;
&lt;p&gt;Here is a recipe for our Center of Enablement ceremonies:&lt;/p&gt;
&lt;h2&gt;Executive buy-in!&lt;/h2&gt;
&lt;p&gt;Every CoE requires executive support to be empowered with a clear strategy, an innovation budget, and support where needed. It can take considerable effort to get the buy-in for innovation from skeptical engineering teams who &lt;em&gt;"have been doing it the same way for years."&lt;/em&gt; With executive buy-in these hurdles can usually be avoided or remediated.&lt;/p&gt;
&lt;h2&gt;Cross-discipline collaboration!&lt;/h2&gt;
&lt;p&gt;CoEs rely on cross-discipline collaboration to erode debilitating silos and bring together the right mix of passion and expertise. For example, our common engineering ecosystem relies on architecture, business, development, operations, and other disciplines who respect each other and engage to create more efficient and effective guardrails, processes, and products.&lt;/p&gt;
&lt;h2&gt;Consistency&lt;/h2&gt;
&lt;p&gt;CoEs must monitor and incentivize their members to adhere to the CoP guardrails and use the shared blueprints, working agreements, backlogs, processes, and products consistently. Consistency will enable cross-discipline and cross-CoE collaboration to flourish. &lt;/p&gt;
&lt;h2&gt;Transparency&lt;/h2&gt;
&lt;p&gt;Transparency of strategies, visions, goals, and outcomes are pivotal to avoid duplication of effort, creation of &lt;strong&gt;WASTE&lt;/strong&gt;, and fuel the overall energy. The CoE-Sync and the &lt;strong&gt;Townhall&lt;/strong&gt; event are two of the key incentives that enable monitoring, sync, and transparency.&lt;/p&gt;
&lt;h2&gt;Consistent guardrails!&lt;/h2&gt;
&lt;p&gt;CoEs require guardrails and a blueprint to standup and energize new CoPs. Here are some of our guidelines, sorted alphabetically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-pizza sized team (3-9 members).&lt;/li&gt;
&lt;li&gt;Groomed and prioritized backlog.&lt;/li&gt;
&lt;li&gt;Innovation charge code for members to commit their time.&lt;/li&gt;
&lt;li&gt;Long-term lifetime.&lt;/li&gt;
&lt;li&gt;Membership is by invitation only.&lt;/li&gt;
&lt;li&gt;CoE triggers Community of Practice, Working Group, and Dojo ceremonies linked to CoE.&lt;/li&gt;
&lt;li&gt;CoE owns Community of Practice, Working Group, and Dojo ceremony lists and planning.&lt;/li&gt;
&lt;li&gt;Recognition of attendance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terms of Reference&lt;/strong&gt; defining &lt;strong&gt;WHY&lt;/strong&gt; we are here and &lt;strong&gt;WHAT&lt;/strong&gt; are our objectives and hypothesis that defines the CoE's existence and purpose, for example standardization, guidance, governance, and removing blockers.&lt;/li&gt;
&lt;li&gt;Weekly to bi-weekly cadence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also have a look at our CoE working agreement poster for a crisp summary of these and other guidelines.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;What are our CoE deliverables?&lt;/h1&gt;
&lt;p&gt;The Center of Enablement acts as a hub for all the information, learnings, and outcomes for all the collaboration, community of practice, working group, and Dojo events it triggers. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regular updates on the CoE terms of reference, for example at the Townhall.&lt;/li&gt;
&lt;li&gt;Regular updates on the triggered events, for example at the Townhall.&lt;/li&gt;
&lt;li&gt;Recordings of all collaboration sessions.&lt;/li&gt;
&lt;li&gt;Ongoing Net Performance Score (NPS) from members and stakeholders.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;h2&gt;Quick Reference Posters&lt;/h2&gt;
&lt;p&gt;Download a copy of our ceremonies overview and CoE working agreement poster here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="../images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremonies-overview.pdf"&gt;Ceremony Overview Poster PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/working-agreement-ceremony-center-of-enablement.pdf"&gt;Working Agreement - Center of Enablement PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other ceremonies&lt;/h2&gt;
&lt;p&gt;Here are references to more information on ceremonies mentioned above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/ceremony-community-of-practice.html"&gt;Community of Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/dojo-events.html"&gt;Dojo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/townhall.html"&gt;Townhall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/ceremony-working-group.html"&gt;Working Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking forward to your "vibrant" collaboration and feedback!&lt;/p&gt;</content><category term="Posts"></category><category term="ceremony"></category><category term="devops"></category><category term="posters"></category></entry><entry><title>Do not automate anything unless you automate the tests</title><link href="https://wsbctechnicalblog.github.io/automate-tests.html" rel="alternate"></link><published>2021-11-04T00:00:00-07:00</published><updated>2021-11-04T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-04:/automate-tests.html</id><summary type="html">&lt;p&gt;Automating critical systems operations without having automated tests is risky practice&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Automate QA" src="../images/qatrex.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There are three types of automated tests that software engineers focus on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Customer-facing functionality&lt;/li&gt;
&lt;li&gt;Code structure quality&lt;/li&gt;
&lt;li&gt;Systems operations&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Customer-facing functionality&lt;/h2&gt;
&lt;p&gt;Teams build and ship features that enable customers to perform self-service activities. Customers appreciate the convenience of being in the driver’s seat and availing themselves of many useful and needed services.&lt;/p&gt;
&lt;p&gt;The desired behaviour of the systems that teams are building must be fully tested before it is placed in front of paying customers. It is extremely desirable to make the systems fully testable by writing automated tests. Such tests are faster and more reliable than manual tests. They enable teams to engage in continuous delivery while minimizing the risk of introducing defects.&lt;/p&gt;
&lt;h2&gt;Code structure quality&lt;/h2&gt;
&lt;p&gt;Unlike automating the tests that guarantee the desired behaviour of the system, automating the tests that guarantee the code structure quality is a bit trickier. Code structure quality hinges on many industry accepted design principles. Static code analysis tools can provide the metrics that expose the level of the code structure quality. Where the tricky part enters the picture is in deciding which of those metrics are a necessary factor when it comes to assessing the code structure quality.&lt;/p&gt;
&lt;p&gt;While the automated tests that verify customer-facing behaviour (i.e., functionality) are by their nature binary (i.e., either the functionality is present or it isn’t present), automated tests that assess the code structure quality are quite nuanced. It is up to the company’s quality standards to establish the bar – the minimum acceptable quality of the code structure that gets shipped to production.&lt;/p&gt;
&lt;h2&gt;Systems operations&lt;/h2&gt;
&lt;p&gt;When I started my career in the 1990s, the company I worked for (BC InfoHealth, cutting payroll for all hospitals in British Columbia) was still running their business on mainframe computers. Those behemoth machines were situated in the sealed, air-conditioned computer room with a crew of computer operators buzzing around wearing white lab coats (sounds like a scene from some futuristic movie).&lt;/p&gt;
&lt;p&gt;Back in the day, operating those large computer systems was completely manual. One of the reasons mainframe computers got phased out was the unwieldiness of the operations. It was too slow, cumbersome, tedious, and quirky, not to mention exorbitantly expensive.&lt;/p&gt;
&lt;p&gt;Fast forward to today when we finally managed to completely commoditize the computing infrastructure (infrastructure-as-code). Since infrastructure is code, that means it is fully programmable. And that’s why there is a big push toward automating all systems operations.&lt;/p&gt;
&lt;p&gt;To automate systems operations, one must become proficient in systems programming. Programming systems operations is not necessarily the same as programming business applications. If we are to efficiently program any systems operations, we need to understand how those systems work.&lt;/p&gt;
&lt;p&gt;I have seen plenty of very knowledgeable systems programmers write very elaborate programs that automatically run intricate computer operations. I remember reviewing large source code files, containing tens of thousands of lines of code per file. And in almost every of those large files, the code was far from being trivial. Hundreds, if not thousands of nested if-else statements, hundreds of try-catch blocks of code. It’s a veritable jungle!&lt;/p&gt;
&lt;p&gt;Whenever I review any such large files containing the code that runs intricate computer operations, I always make a point to ask the authors: “How did you test this and how do you plan to keep testing the changes going forward?”&lt;/p&gt;
&lt;p&gt;The answer always manages to shock me: “We always test it manually!”&lt;/p&gt;
&lt;p&gt;What is odd in that situation is that experts who spend a lot of time writing sophisticated programs and scripts to automate computer operations never seem to write automated tests. Almost always (in my experience), they resort to manual testing.&lt;/p&gt;
&lt;p&gt;That arrangement raises all sorts of red flags in my mind. When I look at those intricate and convoluted nested if-else statements and those numerous try-catch blocks of code, all I see is plenty of danger zones. If whoever is maintaining those automated scripts does not fully understand the logic governing the automation, they run a huge risk of introducing serious bugs while maintaining the automated system operations.&lt;/p&gt;
&lt;h2&gt;Never write any automated processing without first having automated tests that cover it&lt;/h2&gt;
&lt;p&gt;I think it would be foolhardy to produce a lot of automation without having tests that run any time we make any changes to the automated system and alert us if anything gets broken. That, in my mind, would be an absolute minimal requirement for a well-engineered solution.&lt;/p&gt;
&lt;p&gt;We have adopted and implemented TDD practices in WorkSafeBC. However, those practices only pertain to automating the processing of business policy rules. When it comes to automating systems operations, we don’t have any TDD, nor other automated testing strategy. Seems like we always tend to resort to manual testing when making changes to the source code that automates critical system operations.&lt;/p&gt;
&lt;p&gt;It is high time to mitigate the risks and discontinue such approach and to adopt and implement the test-first approach. It is very important to first and foremost implement executable expectation when automating any aspect of the system operation. Once we have that executable expectation up and running, we can safely proceed to implement the code that will automate the actual operation. That way, we will produce a safety net of tightly knit automated tests that will guarantee we won’t inadvertently break anything nor introduce any regression when maintaining, enhancing, enriching, or repurposing any of our automated operations.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Software engineers serve the business needs by automating business processes. But in addition to that, software engineers engage in continuous improvement of the processes that deliver the business automation.&lt;/p&gt;
&lt;p&gt;While the automation of the business processes is delivered via carefully chosen testing strategy, automation of the critical systems operations lacks such well-engineered strategy. It is critically important that we adopt stringent test-first approach to automating critical systems operations. The criticality is even more urgent when we realize that automated system processing always runs a risk of creating catastrophic damages by programmatically elevating the permissions during runtime. All it takes is for an automated program/script to issue the &lt;strong&gt;RunAs&lt;/strong&gt; command, and the program elevates itself to the highest level of authority on the system. Basically, the program becomes a super user, capable to doing anything on the system!&lt;/p&gt;
&lt;p&gt;We must make sure any such unauthorized breaches of security get caught by the tests before the automated script/program reaches production.&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category><category term="testing"></category><category term="TDD"></category><category term="testability"></category><category term="automation"></category><category term="system-programming"></category></entry><entry><title>Streamlining your pipeline approvals, without flooding DevSecOps with noise</title><link href="https://wsbctechnicalblog.github.io/pipelines-streamlined-approvals.html" rel="alternate"></link><published>2021-11-02T00:00:00-07:00</published><updated>2021-11-02T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-11-02:/pipelines-streamlined-approvals.html</id><summary type="html">&lt;p&gt;Back to the future, to optimize the Classic Azure Pipeline approvals.&lt;/p&gt;</summary><content type="html">&lt;p&gt;To improve our deployment frequency, reduce our lead time for change, and avoid unnecessary release stress, we have invested a lot of time reviewing processes and products. In this post I am &lt;strong&gt;NOT&lt;/strong&gt; covering the magic of YAML-based pipelines (see &lt;a href="https://wsbctechnicalblog.github.io/yaml-pipelines-part4.html"&gt;magic of queue time assembly&lt;/a&gt; for details) but am focusing on the classic Azure Release Pipelines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEPLOYMENT FREQUENCY - determines how many deployments are made to &lt;strong&gt;**production&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;LEAD TIME FOR CHANGE - is the average time between receiving a feature request and deploying it to &lt;strong&gt;production&lt;/strong&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Streamlined approvals&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Streamlined Approvals" src="../images/pipelines-streamlined-approvals-1.png"&gt;&lt;/p&gt;
&lt;p&gt;As shown, we assume we have a release pipeline that deploys artifacts received from the continuous integration (build) pipeline to a development, system test, canary, and production environment. Deployment to the development environment is automatic, whereas we have gates before can deploy to the system test, canary, and production environments.&lt;/p&gt;
&lt;p&gt;For each gate we use one or more Azure Active Directory (AAD) groups to define the group of users who are authorized to approve the deployment. See &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/deploy-using-approvals?view=azure-devops"&gt;use gates and approvals to control your deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may or should be frowning at this point, because anything that is deployed to the system test environment automatically triggers the Security Review. In our environment this led to agitated Security Engineers who were inundated with security review request across hundreds of release pipelines.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unhappy DevSecOps" src="../images/pipelines-streamlined-approvals-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Let us reduce the number of security reviews which are WASTEful and check back with DevSecOps.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Artifact filters&lt;/h1&gt;
&lt;p&gt;The eye of the storm is created as we are passing all the artifacts down the release pipeline, regardless from which source repository branch it originated from. In other words, security engineers were triggered for changes that were not ready for prime time (production).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Artifact Filters" src="../images/pipelines-streamlined-approvals-2.png"&gt;&lt;/p&gt;
&lt;p&gt;By adding an &lt;strong&gt;artifact filters&lt;/strong&gt; allow us to create a first line of defense against artifacts that were generated from source repository branches that are not trusted in production and therefore do not require a security review. We only allow artifacts originating from &lt;strong&gt;release&lt;/strong&gt; branches to trigger a security review and trundle down the pipeline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Happy DevSecOps" src="../images/pipelines-streamlined-approvals-5.png"&gt;
Artifact filters can be overridden if you have relevant permissions. If you need a "&lt;strong&gt;you shall not pass&lt;/strong&gt;" checkpoint, you should investigate the YAML-based pipelines as mentioned above.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="https://medium.com/objectsharp/branch-and-artifact-filters-in-azure-pipelines-83d4256ada98"&gt;Branch and Artifact Filters in Azure Pipelines&lt;/a&gt;, by Dave Lloyd, for a great overview of artifact filters. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Happy DevSecOps" src="../images/pipelines-streamlined-approvals-4.png"&gt;&lt;/p&gt;
&lt;p&gt;We now have less WASTE, which makes me happy, and a lot less security reviews, which improved our security engineers' mood and ability to be laser focused on potential production deployments.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Mulling over the future approvals&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Constantly think about how you could be doing things better. Keep questioning yourself."&lt;/em&gt; - Elon Musk
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We take this quote to heart and have been mulling over our streamlines approval process. When we map a pipeline to a value stream it becomes evident that all of the gates and the security review contribute to our &lt;strong&gt;Lead time for change&lt;/strong&gt; - WASTE.&lt;/p&gt;
&lt;p&gt;Where we can, we ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce the number and the sequence of approvals.&lt;/li&gt;
&lt;li&gt;Automate validations and approvals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Leaving us with security review, which is based on automated vulnerability and quality scans and a few pairs of security engineer eyeballs. My colleague Kevin and I have been chatting about the &lt;a href="https://nexus-card.ca/"&gt;NEXUS&lt;/a&gt;-type border control process, which may allow us to expedite parts of the security reviews based on &lt;strong&gt;trust&lt;/strong&gt;. Watch this space for updates.&lt;/p&gt;</content><category term="Posts"></category><category term="azure-devops"></category><category term="eliminate-waste"></category><category term="pipelines"></category><category term="tips"></category></entry><entry><title>Quality of Design</title><link href="https://wsbctechnicalblog.github.io/quality-of-design.html" rel="alternate"></link><published>2021-10-27T00:00:00-07:00</published><updated>2021-10-27T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-27:/quality-of-design.html</id><summary type="html">&lt;p&gt;Adopt design principles to ensure highest quality of the code design&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Quality of design" src="../images/quality-of-design.png"&gt;&lt;/p&gt;
&lt;p&gt;Quality of design in software engineering is focused on the code structure. There are many ways to implement the desired behaviour of a software product. Careless implementation of desired behaviour delivers poor quality of design. Consequently, the quality of the delivery gets compromised.&lt;/p&gt;
&lt;p&gt;It is therefore paramount to invest time and effort to ensure that quality of the designed code structure is optimal. There are two branches of industry standards that serve as guidelines when it comes to producing optimal quality of the designed code structure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design principles&lt;/li&gt;
&lt;li&gt;Design patterns&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Design patterns have been introduced more than 25 years ago (&lt;a href="https://www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?dchild=1&amp;amp;gclid=Cj0KCQjw8eOLBhC1ARIsAOzx5cH-0nZehpHbrYfJBmdgtJ5AAfU0wYOyyHk4LrPvKjNjmsHAy31fcO8aAlsVEALw_wcB&amp;amp;hvadid=353255290729&amp;amp;hvdev=c&amp;amp;hvlocphy=9001545&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=362995041334244275&amp;amp;hvtargid=kwd-301036555631&amp;amp;hydadcr=26084_9772498&amp;amp;keywords=design+patterns+gang+of+four&amp;amp;qid=1635370689&amp;amp;sr=8-1"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;, published in 1994). Most software engineers are by now familiar with many design patterns, which is a great improvement compared to earlier days of software engineering practices.&lt;/p&gt;
&lt;p&gt;Design principles, on the other hand, are still not as widely accepted as design patterns are. Now may be a good time to pay a bit closer attention to what design principles mean and how to adopt them in our daily practice.&lt;/p&gt;
&lt;h2&gt;What are design principles?&lt;/h2&gt;
&lt;p&gt;Organizing structural components of a software system should be following accepted industry standards. These standards comprise the body of design principles.&lt;/p&gt;
&lt;p&gt;The standardized body of design principles has two levels of abstraction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Coarse-grained design principles&lt;/li&gt;
&lt;li&gt;Fine-grained design principles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Coarse-grained design principles are difficult to apply in daily practice because they are quite abstract. There are four coarse-grained design principles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Low coupling&lt;/li&gt;
&lt;li&gt;High cohesion&lt;/li&gt;
&lt;li&gt;Low complexity&lt;/li&gt;
&lt;li&gt;Proper encapsulation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fine-grained design principles are less abstract and therefore easier to apply in daily practice. Adhering to fine-grained design principles ensures adherence to more abstract, coarse-grained design principles.&lt;/p&gt;
&lt;h2&gt;What are the benefits of design principles?&lt;/h2&gt;
&lt;p&gt;Design principles are helpful in building common basis of architectural knowledge. By following guidelines on how to implement fine-grained design principles, software engineers get enabled to build, understand, and maintain high-quality software systems. Systems built following design principles can successfully grow into large scale systems. Following those principles is also helpful in preventing us from unforeseen pitfalls.&lt;/p&gt;
&lt;h2&gt;An example of fine-grained design principle&lt;/h2&gt;
&lt;p&gt;An example of a fine-grained design principle may help understand the benefit of mastering those principles. For this exercise let’s have a quick look at &lt;strong&gt;Option Operand Principle (OOP)&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Every routine, method, or function operates on certain values. Those values are referred to as &lt;em&gt;operands&lt;/em&gt;. Typically, operands make their way into the body of a routine, method, or function by being passed in as an argument, or a parameter. The OOP principle states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The argument of a routine should only include operands (no options).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is meant by ‘option’ in the above principle? We can view option in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Option that the client calling the routine does not provide a value for the argument&lt;/li&gt;
&lt;li&gt;Option that is passed in as an argument but is not treated as an argument&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the first case, the onus is on the creator of the routine to provide a default value that will kick in in case the client chooses not to provide the value (i.e., in case the argument contains NULL value).&lt;/p&gt;
&lt;p&gt;In the second case, a value passed in as an argument is not being operated on by the routine. If the routine does not operate on a value passed in, that value is viewed as an option, not as an operand.&lt;/p&gt;
&lt;p&gt;Both cases of violating the OOP principle are considered bad code smell, with the first case being viewed as a mild code smell while the second case a more serious case of bad code smell.&lt;/p&gt;
&lt;p&gt;Providing default value for cases when the client chooses not to provide the value for an argument is a code smell because it places the onus on the routine to implement reasonable escape hatch (which may not always be easily achievable), while it may give the client code a false understanding of what to expect when calling the routine.&lt;/p&gt;
&lt;p&gt;Providing an option when calling a routine places onus on the called routine to handle the decision logic. That responsibility is better left to the calling client; they need some processing done; they should possess sufficient understanding which routine to call.&lt;/p&gt;
&lt;h2&gt;Detecting violations of the OOP principle&lt;/h2&gt;
&lt;p&gt;While it is very desirable to be able to automatically detect violations of this principle, in practice it is proving to be a tough challenge. Static code analyzers cannot easily distinguish between operands and options. The only time when it is possible to detect violations of this principle automatically and unambiguously is if the option type is Boolean. In such case it is obvious that Boolean argument serves to split the code into two paths and decide the mode of operation.&lt;/p&gt;
&lt;h2&gt;Conclusion​​​​​​​&lt;/h2&gt;
&lt;p&gt;There are numerous design principles that guide us in producing high quality structure of a software product. Adhering to those principles protects us from various pitfalls and improves the overall quality and maintainability of our system. In this episode I’ve reviewed only one design principle, to provide a simple example and a foretaste of how those principles may apply in our daily practice.&lt;/p&gt;</content><category term="Posts"></category><category term="design"></category><category term="code-quality"></category><category term="learning"></category></entry><entry><title>Don’t become an Expert Beginner</title><link href="https://wsbctechnicalblog.github.io/dont-become-expert-beginner.html" rel="alternate"></link><published>2021-10-25T00:00:00-07:00</published><updated>2021-10-25T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-25:/dont-become-expert-beginner.html</id><summary type="html">&lt;p&gt;How to avoid the trap of getting stuck in an Expert Beginner role&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dreyfus model lists five phases of skill acquisition:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Novice &lt;/li&gt;
&lt;li&gt;Competent &lt;/li&gt;
&lt;li&gt;Proficient &lt;/li&gt;
&lt;li&gt;Expert &lt;/li&gt;
&lt;li&gt;Master &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When paired with what Dreyfus refers to as Mental Functions (Recollection, Recognition, Decision and Awareness), the skill acquisition moves from "following the rules dogmatically without the awareness of the big picture", to "complete grasp of the big picture which manifests in the act of intuitive transcending of rules". So, while a Novice exhibits non-situational recollection, decomposed recognition analytical decision making and monitoring awareness, Master exhibits situational recollection, holistic recognition, intuitive decision making and absorbed awareness. And everything in-between (refer to the table below): &lt;/p&gt;
&lt;p&gt;&lt;img alt="From novice to master" src="../images/novice-to-master.png"&gt;&lt;/p&gt;
&lt;p&gt;In an optimistic situation, skill levels progress linearly, from Novice to Competent, then from Competent to Proficient, after which we progress from Proficient to Expert, and finally from Expert to Master: &lt;/p&gt;
&lt;p&gt;&lt;img alt="From novice to master 2" src="../images/novice-to-master2.png"&gt;&lt;/p&gt;
&lt;p&gt;Leaving the ultimate level (Mastery) out for the purposes of this discussion, let’s look into how things play out when we introduce a finer grained phase into the picture – Advanced Beginner: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Advanced beginner" src="../images/advanced-beginner.png"&gt;&lt;/p&gt;
&lt;p&gt;While Novices are obviously unsure of what lies ahead in terms of training needed to acquire necessary skills, after spending some time in training and reaching the Advanced Beginner status, trainees now gain much needed confidence. No one likes to feel inadequate, so Novices are extremely motivated to graduate to a higher skill level.&lt;/p&gt;
&lt;p&gt;Advanced Beginner is that next level. Practitioners reaching Advanced Beginner stage possess some skills but nevertheless lack the insight into the big picture. Because of that lack of insight, Advanced Beginners are in danger of confusing themselves with Experts. &lt;/p&gt;
&lt;p&gt;As they continue their skills acquisition trajectory, Advanced Beginners can take two paths: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Graduate to the Competent &lt;/li&gt;
&lt;li&gt;Graduate to the Expert Beginner &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If they graduate to the Competent stage, they gain the first precious insight into the big picture. At that point, the insight into the big picture (regardless of how incomplete that insight may be) prevents them from confusing themselves with Experts. Competent people are those who know that they don’t know. 
If Advanced Beginners graduate to the Expert Beginner level, they typically assume that now they’ve graduated to the Expert level, period. That assumption is fortified by the absence of insight into the big picture.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Expert beginner" src="../images/expert-beginner.png"&gt;&lt;/p&gt;
&lt;p&gt;What is also typical for the Expert Beginner level is that it is reinforced by the optimistic self-assessment which goes something like this: "I know that I’m doing it right because, as an expert, I’m pretty much doing everything right by definition." (i.e., they are still rules-bound).&lt;/p&gt;
&lt;p&gt;Expert Beginner is more advanced than the Advanced Beginner for the simple reason that Expert Beginner has more experience being a beginner. But Expert Beginner doesn’t yet have sufficient experience to be able to reach the level of Competent practitioner (due to the lack of the grasp of the big picture). &lt;/p&gt;
&lt;p&gt;So, while Competent practitioner may boast something like "ten years of experience", Expert Beginner can actually boast "one year of experience ten times." Notice the lack of progress in Expert Beginner. &lt;/p&gt;
&lt;p&gt;Progress is not possible without the awareness that there is more hard work awaiting to be done. But if we feel that we’ve reached the level of Expert, what else is there that remains to be done? &lt;/p&gt;
&lt;p&gt;The desire to deviate and to experiment vanishes from the Expert Beginner’s repertoire. And with it, any hope for progress disappears. It’s status quo that stretches indefinitely into the future.&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category></entry><entry><title>Your old and trusted hammer is not always the right tool for the job</title><link href="https://wsbctechnicalblog.github.io/hammer-is-not-always-the-right-tool-for-the-job.html" rel="alternate"></link><published>2021-10-23T00:00:00-07:00</published><updated>2021-10-23T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-23:/hammer-is-not-always-the-right-tool-for-the-job.html</id><summary type="html">&lt;p&gt;“I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail.” - Abraham Maslow 1966&lt;/p&gt;</summary><content type="html">&lt;p&gt;How often have you tried to fix everything using a hammer, often without considering other choices? Abraham Maslow's quote brings back precious memories from my childhood in sunny South-Africa, when the hammer seemed the fitting tool (or weapon) for any venture.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hammer" src="/images/hammer-is-not-always-the-right-tool-for-the-job-0.jpg"&gt;&lt;/p&gt;
&lt;p&gt;But I am not here to talk about hammers. To the contrary, I want to encourage everyone to question &lt;strong&gt;WHY&lt;/strong&gt; we do the things we do, make use of the technology of &lt;strong&gt;today&lt;/strong&gt;, continuously look for ways we can &lt;strong&gt;innovate&lt;/strong&gt;, &lt;strong&gt;simplify&lt;/strong&gt;, and reduce invaluable &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the 80's&lt;/h1&gt;
&lt;p&gt;Let us travel back in time to the early 1980's when I started my first job with Burroughs, working on the &lt;a href="https://en.wikipedia.org/wiki/Convergent_Technologies_Operating_System#:~:text=The%20Convergent%20Technologies%20Operating%20System%2C%20also%20known%20variously,STARSYS%2C%20was%20a%20modular%2C%20message-passing%2C%20multiprocess-based%20operating%20system."&gt;Convergent Technologies Operating System&lt;/a&gt; (CTOS) on 80186-based B21 mini-computers. Those were the days we were creative in Assembler and V2/PLM languages, operating within the 64 kilobytes (yes kilo, not giga) memory segments, and battling to backup 10MB hard-drives, staring at flickering green screens.&lt;/p&gt;
&lt;p&gt;&lt;img alt="B25" src="/images/hammer-is-not-always-the-right-tool-for-the-job-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;At home, I was the proud owner of a B21 mini-computer, like this photo I found on the Internet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="B21" src="/images/hammer-is-not-always-the-right-tool-for-the-job-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I am drifting off again ... focus! Back in those days, we had no version control services or software that tracked changes. Therefore, whenever we wanted to make a change to a document or a source file, we created a backup copy, typically by appending a &lt;strong&gt;-yyyzmmdd.rev&lt;/strong&gt; suffix to the filename. &lt;/p&gt;
&lt;p&gt;After a while we had a hard drive filled with endless copies of the same file with variations of changes.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the 90's&lt;/h1&gt;
&lt;p&gt;Teleporting to the mid-90's we find ourselves working with &lt;a href="https://www.bing.com/search?q=sourcesafe&amp;amp;cvid=4c7c624dc2ad4eed94ec071ebf6e15c2&amp;amp;aqs=edge.0.69i59j0l5j69i60l3.1977j0j4&amp;amp;FORM=ANAB01&amp;amp;PC=U531"&gt;Visual SourceSafe&lt;/a&gt;, a source control system that evolved from One Tree Software in North Carolina. &lt;/p&gt;
&lt;p&gt;&lt;img alt="SourceSafe" src="/images/hammer-is-not-always-the-right-tool-for-the-job-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It was the beginning of the journey that would take us into the era of Team Foundation Server, Visual Studio Team System, and today's flagship &lt;a href="https://azure.microsoft.com/en-us/services/devops/"&gt;Azure DevOps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was also the end of copying source files by hand to create version backups, polluting your storage with meaningless copies of the same bits and bytes.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Back to the future&lt;/h1&gt;
&lt;p&gt;Fast forward to 2021, which is four decades later, in a world with Google Docs or Office 365, boasting powerful collaboration and versioning features. I find myself staring at file servers filled with hundreds, if not thousands of Office documents such as Excel, PowerPoint, and Word. Most are copies created the same way we created backups for source code in the 80s. &lt;/p&gt;
&lt;p&gt;The worst is watching documents attached to emails, updated by recipients as separate copies, until a brave volunteer steps forward to merge all changes back into the master. &lt;strong&gt;Merge hell&lt;/strong&gt; all over again.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Merge Hell" src="/images/hammer-is-not-always-the-right-tool-for-the-job-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Please put your 80's hammer and mindset aside and start collaborating with the products, such as &lt;a href="https://www.office.com/"&gt;Office 365&lt;/a&gt; and &lt;a href="https://www.microsoft.com/en-ca/resilience/remote-development-solutions"&gt;Visual Studio Code Live Share&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only will you collaborate efficiently, but you will also cut down on the amount of &lt;strong&gt;WASTE&lt;/strong&gt; you produce and avoid the dreaded merge hell exercise.&lt;/p&gt;
&lt;p&gt;Still unconvinced? If yes, I recommend you try these two experiments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;EXPERIMENT 1&lt;/strong&gt;: Create an Excel document containing a beefy set of data and share it as an attachment with 13 of your colleagues. Ask everyone to update formulas and data. When done, ask them to send the changes back to you. Merge all the changes back into your master copy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EXPERIMENT 2&lt;/strong&gt;: Share the same file using Office Excel 365 and ask your colleagues to update formulas and data. You can literally watch &lt;strong&gt;everyone&lt;/strong&gt; co-author and instantly see any content changes in real-time. &lt;strong&gt;Simple&lt;/strong&gt; and effective!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will let you decide which is the simpler and more productive experiment, producing little to no &lt;strong&gt;WASTE.&lt;/strong&gt; I will place all my apples on the second experiment!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Collaboration" src="/images/hammer-is-not-always-the-right-tool-for-the-job-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Please pack away your hammer (habits) and explore the phenomenal collaboration products you have at your disposal!&lt;/p&gt;</content><category term="Posts"></category><category term="learning"></category><category term="eliminate-waste"></category></entry><entry><title>Cultivate apathy for details to enable refactoring</title><link href="https://wsbctechnicalblog.github.io/apathy-for-details.html" rel="alternate"></link><published>2021-10-15T00:00:00-07:00</published><updated>2021-10-15T00:00:00-07:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-10-15:/apathy-for-details.html</id><summary type="html">&lt;p&gt;Give equal care to the code structure as you would give to the code behaviour&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Law of Demeter" src="../images/law-of-demeter.png"&gt;&lt;/p&gt;
&lt;p&gt;Code behaviour cannot be implemented without having code structure. On the other hand, code structure that does not implement meaningful and useful behaviour is worthless. It thus becomes apparent that code behaviour and code structure go together – it is not possible to separate one from another.​​​​​​​&lt;/p&gt;
&lt;p&gt;Since code structure is never visible to end-users, the tendency is to assign much higher value to the code behaviour than to the code structure. From the business operations side of things, the most pressing question is always &lt;em&gt;Why&lt;/em&gt;? Why are we planning to make changes to our system? There’s got to be a valid business case for spending precious time, money, and effort on making proposed changes.&lt;/p&gt;
&lt;p&gt;Once the business case is justified, we move into the &lt;em&gt;What&lt;/em&gt; phase. What do we need to change in our system so that the business case gets fulfilled?&lt;/p&gt;
&lt;p&gt;It is this &lt;em&gt;What&lt;/em&gt; stage of development that defines the expected change in the behaviour of the system. Maybe we need to change the behaviour of the system in such way that it allows end-users to apply for a promotional discount? Now that we know what needs to get done, there is an urgent pressure to do it.&lt;/p&gt;
&lt;p&gt;That leads us to the &lt;em&gt;How&lt;/em&gt;. While our discussions and concerns around the &lt;em&gt;What&lt;/em&gt; had helped define the &lt;em&gt;expected behaviour&lt;/em&gt; (i.e., the desired functionality), when it comes to deciding &lt;em&gt;How&lt;/em&gt; to do it, we realize that there are many ways to skin a cat. And here is where the trouble can potentially begin.&lt;/p&gt;
&lt;p&gt;How to implement the agreed-upon behaviour is the sole responsibility of the code structure. We could implement it in a simple, straightforward way, or we could implement it in a convoluted, unnecessarily complex way. There are many possible ways to implement the same behaviour of the code. Having cleared the questions around the &lt;em&gt;Why&lt;/em&gt; and the &lt;em&gt;What&lt;/em&gt;, we are now discussing the &lt;em&gt;Way&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Substandard structure causes substandard behaviour&lt;/h2&gt;
&lt;p&gt;From the business operations standpoint, the most valuable way to implement the desired behaviour is the quickest, cheapest way. However, such approach usually belies false economy.&lt;/p&gt;
&lt;p&gt;If the desired behaviour, once implemented, is never going to change, one could argue that the cheapest, quickest, dirtiest way to implement it makes sense. However, it is extremely rare that newly added behaviour to the system never changes.&lt;/p&gt;
&lt;p&gt;Change in software is inevitable. Creating a substandard structure of the code results in inability to safely accommodate upcoming unavoidable changes. As such, what little gets saved upfront by not caring about the quality of the code structure, gets quickly eaten up by the exorbitant costs of having to make subsequent changes to the code. Not only that, but the changes to a lousy code structure tend to introduce a lot of bugs, defects, and breakages.&lt;/p&gt;
&lt;p&gt;Overall, not paying attention to the quality of the code structure (the &lt;em&gt;Way&lt;/em&gt;) results in the substandard behaviour of the system. It becomes brittle, unreliable, non-performant, and quickly turns from being an asset into becoming a liability.&lt;/p&gt;
&lt;h2&gt;Enable refactoring&lt;/h2&gt;
&lt;p&gt;Almost all knowledge-based activities are based on refactoring. We typically start any project by crafting the first draft. That first draft is far from being anywhere near good, but it’s a great starting point. We throw in quick outlines and paint with a broad brush (we approximate). Then we iterate. We make a second pass (either working on our own or collaborating on the project in a team). The second pass increases the resolution of the information provided in the document we are working on. That gradual increase in the precision of information is what we refer to as ‘refactoring’.&lt;/p&gt;
&lt;p&gt;Regardless of the type of the project we may be collaborating on (i.e., a financial plan, a technology roadmap, an important planning event, etc.), we never create a publishable version on the first pass. We must keep reworking our initial draft, adding more details, removing clumsy/cumbersome statements, and so on. We proceed piecemeal, step-by-step.&lt;/p&gt;
&lt;p&gt;After several iterations (i.e., refactoring sessions), we eventually arrive at a satisfactory version of our deliverable. It is finally ready to be published.&lt;/p&gt;
&lt;p&gt;There is absolutely no reason why writing software code should be any different. And yet, for some strange reason, we meet many software engineers who feel that refactoring is a waste of time. Some people think that good programmers must know how to write well-structured code on the first try.&lt;/p&gt;
&lt;p&gt;That mindset is very damaging to the quality of the delivery. It insists on ignoring the quality of the code structure and instead spending all the time only on implementing the desired behaviour of the code. The argument for such irresponsible practice is that since end-users will never see the code structure, why should we worry about its quality?&lt;/p&gt;
&lt;p&gt;It’s like saying “Since average drivers will never get to see the inside of the car engine, why worry about its quality? Instead, we should pour all our efforts into making the attractive exterior and interior, plus do an amazing paint job and add an awesome stereo system, heated leather seats, and so on!”&lt;/p&gt;
&lt;h2&gt;Why enable refactoring?&lt;/h2&gt;
&lt;p&gt;The key to enabling easy, risk-free refactoring is to practice &lt;em&gt;apathy for details&lt;/em&gt;. What do we mean by that? Maybe a hypothetical example could illustrate the concept better:&lt;/p&gt;
&lt;p&gt;Imagine a person arriving at the checkout in a supermarket and the cashier asks them to pay for their groceries. The person reaches into their pocket and takes out their car keys and gives the keys to the cashier. The cashier is confused, and the person says: “I’m parked in the stall 17, red Honda Accord. Go to my car, open the passenger side door, open the glove compartment, find my jacket in there, reach into the bottom right jacket pocket, grab my wallet, take out the cash and please leave the change in!”&lt;/p&gt;
&lt;p&gt;Naturally, the cashier would refuse to do that. Why? Because the cashier has &lt;em&gt;apathy for details&lt;/em&gt;. Simply put, the cashier only wants the money bills (the &lt;em&gt;What&lt;/em&gt;) and is absolutely not interested in the process by which that money arrives at their hands (disinterested in the &lt;em&gt;How&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;If we structure our code in such a way that it always refuses to know the annoying details (the &lt;em&gt;How&lt;/em&gt;), it will be easy to refactor it without any risk. If, on the other hand, we structure our code in such a way that it is hungry for details, we end up with tightly coupled code that is brittle, expensive, and risky to modify. Which is to say, we paint ourselves in the corner.&lt;/p&gt;
&lt;h2&gt;How to enable refactoring&lt;/h2&gt;
&lt;p&gt;The best way to enable refactoring is to write code that is &lt;em&gt;structure-shy&lt;/em&gt;. If the code is disinterested in knowing more details than is necessary, such code remains loosely coupled (easy and risk-free to change).&lt;/p&gt;
&lt;p&gt;Yes, but how to make sure the code we write is &lt;em&gt;structure-shy&lt;/em&gt;? The recommended way is to abstain from writing any code before we have created a client who will consume that code.&lt;/p&gt;
&lt;p&gt;To create the first client of the yet-to-be-written code, we focus on the &lt;em&gt;expected behaviour&lt;/em&gt;. The &lt;em&gt;expected behaviour&lt;/em&gt; should be obtained via a single step. The client should be able to ask the system to do something, and that ask should be a simple step. The system will then go away, do some processing behind the scenes, and return with the expected values.&lt;/p&gt;
&lt;p&gt;What we’ve described above is what is technically known as an interface, or an API.&lt;/p&gt;
&lt;p&gt;A quality interface/API is always &lt;em&gt;structure-shy&lt;/em&gt;. It does not care about the &lt;em&gt;How&lt;/em&gt;, only cares about the &lt;em&gt;What&lt;/em&gt;.
To create the client before we create the code that will serve the client’s expectations, we resort to writing microtests. Microtests are focused on small, atomic steps where the client sends one request to the system, and then, after receiving a response, asserts whether the response matches the initial expectation. That way, the client verifies that the behaviour of the system is still as expected.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;structure-shy&lt;/em&gt; code is now freely open for radical refactoring. With each refactoring step (i.e., a change made to the code structure), we run the clients (i.e., microtests) to confirm that nothing broke with that change and that the system still behaves as expected.&lt;/p&gt;</content><category term="Posts"></category><category term="technical-excellence"></category></entry></feed>