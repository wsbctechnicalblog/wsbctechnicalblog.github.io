<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>- Events</title><link href="https://wsbctechnicalblog.github.io/" rel="alternate"></link><link href="https://wsbctechnicalblog.github.io/feeds/events.atom.xml" rel="self"></link><id>https://wsbctechnicalblog.github.io/</id><updated>2021-06-21T00:00:00-07:00</updated><entry><title>Why we should (not) care about Pipelines!?!</title><link href="https://wsbctechnicalblog.github.io/meetup-devops-meetup-wsbc-pipeline-story.html" rel="alternate"></link><published>2021-06-21T00:00:00-07:00</published><updated>2021-06-21T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-06-21:/meetup-devops-meetup-wsbc-pipeline-story.html</id><summary type="html">&lt;p&gt;Enabling engineering to continuously build, validate, and deploy secure solutions to delight our customers&lt;/p&gt;</summary><content type="html">&lt;p&gt;On Tuesday, &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555/"&gt;June 15th 2021&lt;/a&gt;, we picked-up where we left off with the “Common Engineering System at WorkSafeBC“ session, on the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/270150093/"&gt;April 2020&lt;/a&gt; meetup.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="INTRO" src="/images/meetup-devops-meetup-wsbc-pipeline-story-intro-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We shared our insight into our ambitious journey to consolidate hundreds of inconsistent continuous delivery pipeline snowflakes into state-of-the-art pipeline-as-code, based on YAML and re-usable templates. Here is our story!&lt;/p&gt;
&lt;h1&gt;WHY?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHY" src="/images/meetup-devops-meetup-wsbc-pipeline-story-why-2a.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt; defines DevOps as the “the union of PEOPLE, PROCESS and PRODUCTS to enable the &lt;strong&gt;continuous&lt;/strong&gt; delivery of value to our CUSTOMERS”. The word &lt;strong&gt;continuous&lt;/strong&gt; in Donovan's statement implies that we &lt;strong&gt;automate everything automatable&lt;/strong&gt;, move repetitive tasks to machines, and enable engineering to focus on delighting our customers with features. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHY" src="/images/meetup-devops-meetup-wsbc-pipeline-story-why-2b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In addition, the &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;agents of chaos&lt;/a&gt; created guardrails defined by five essential values for the DevOps mindset. One of the values encourages us to innovate and improve beyond repeatable processes by &lt;strong&gt;reducing waste&lt;/strong&gt; and not doing things with no value or purpose.&lt;/p&gt;
&lt;p&gt;As alluded to by the checklist we built up during the session, we are not talking about pipelines to carry oil, but an enabler to automate continuous integration and delivery tasks. We embraced the Azure Pipelines years ago and standardized on what we refer to as the unified pipeline guardrail. It helped us build once, deploy the same build artifact to different environments, and streamline our manual approvals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHY" src="/images/meetup-devops-meetup-wsbc-pipeline-story-why-2c.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We were in technology heaven, until our automated weekly pipeline reports unearthed a scary and unnerving reality. Over 3000 pipeline definitions, growing at an alarming rate, and creating a pile of costly technical debt. Autonomy inspired a variety of snowflakes, some of which introduced vulnerabilities, and more recently, a growing number of release rejections due to security review failures.&lt;/p&gt;
&lt;p&gt;We also picked up that Microsoft began referring to the user interface based Azure Pipelines as &lt;strong&gt;classic&lt;/strong&gt; and stopped investing in the technology. As the classic and deprecated rot was setting in, we started to experiment with YAML-based Azure Pipelines in two consecutive hackathon events. We did not catch the attention of business and won no prize but embarked on an exciting pipeline journey with ambitious goals: alignment, consistency, simplicity, security, flexibility, and transparency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read &lt;a href="/yaml-pipelines-part1.html"&gt;Part 1: Pipelines - Why bother and what are our nightmares and options?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;WHAT?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHAT.1" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3a.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We fell in love with the potential of new YAML-based Azure Pipelines, based on a mature and human readable data serialization, originally proposed by Clark Evans in 2001. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YAML is often referred to as “yet another markup language” and “YAML ain’t markup language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Azure DevOps YAML pipelines are structurally YAML. Microsoft introduced no deviation or snowflake and forked the Azure DevOps pipeline repository to build their GitHub pipelines. Like applying a protective anti-rust coating on our Azure DevOps pipelines and opening exciting coexistence and future migration opportunities.&lt;/p&gt;
&lt;p&gt;Our pipeline working group switched their focus on &lt;strong&gt;pipeline as code&lt;/strong&gt;, a term introduced by &lt;a href="https://www.jenkins.io/doc/book/pipeline-as-code/"&gt;Jenkins&lt;/a&gt;. It is a technique that treats the pipeline configuration as code, placed under version control, packaged in reusable components, and automated deployment and testing. Comparable to infrastructure as code and the golden fleece for our pipeline adventure.&lt;/p&gt;
&lt;p&gt;Pipeline as code enables us in many ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All pipeline artifacts are placed in source control repositories, which can be viewed by all our engineers. There are no secrets! &lt;/li&gt;
&lt;li&gt;Tick off one of our goals, &lt;strong&gt;transparency&lt;/strong&gt;, a core ingredient to Agile and Lean development, as well as a healthy DevOps mindset. It fosters &lt;strong&gt;TRUST&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Allow our engineers to contribute to our common engineering system by submitting pipeline changes and innovations through the pull request workflow. We are &lt;strong&gt;centralizing&lt;/strong&gt;, not standardizing, and enable engineers by injecting re-usable templates.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHAT.1" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During the hackathons and subsequent proof-of-concepts we highlighted not only the &lt;strong&gt;risk&lt;/strong&gt; of rotting technology, but engineering distractions and focus on waste, instead of &lt;strong&gt;value&lt;/strong&gt;. For example, a typical YAML-based CI pipeline for an Azure Function requires 300 lines of code. With 927 continuous integration build pipelines, this amounts to a mere 278,100 lines of code that engineering need to craft. More than Photoshop 1.0 and just less than the Quake 3 engine. In my humble opinion, a huge pile of &lt;strong&gt;WASTE&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Our first-generation generic blueprint-based pipelines reduced this to 113,094 lines of CI code and to 25,956 lines of CI/CD code using our second-generation app-type blueprint-based pipelines. Read parts &lt;a href="/yaml-pipelines-part3.html"&gt;Part 3: Pipelines - Basic building blocks as templates and sprinkling on telemetry&lt;/a&gt;, &lt;a href="/yaml-pipelines-part4.html"&gt;Part 4: Pipelines - Magic of queue time assembly&lt;/a&gt;, &lt;a href="/yaml-pipelines-part5.html"&gt;Part 5: Pipelines - Blueprints to fuel consistency and enablement&lt;/a&gt;, and &lt;a href="/yaml-pipelines-part6.html"&gt;Part 6: Pipelines - Gotcha! The generic blueprint-based YAML pipeline simplicity&lt;/a&gt; of our pipeline series on our technical WorkSafeBC blog for more information.&lt;/p&gt;
&lt;p&gt;Templates allow us to define reusable CI and CD tasks, keeping our main pipeline definitions razor focused. They enable us to script and assemble pipelines at “queue” time. And most important, instead of editing hundreds of classic pipelines in a GUI editor, which can be mind numbing and error prone, we edit one template to make a change such changing guardrails. Once the template is saved, the change is automatically injected into all pipelines queued thereafter. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MAGIC!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For details on our 1st generation blueprints, read &lt;a href="/yaml-pipelines-part7.html"&gt;Part 7: Pipelines - There is more! Simplicity and enablement, courtesy of the app-type blueprint-based YAML pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a software developer, do I want to own, for example create and maintain, the pipelines to build and deploy my application? &lt;/p&gt;
&lt;p&gt;After more than 36 years of engineering software solutions, my answer is &lt;strong&gt;NO&lt;/strong&gt;. I will be glad to let another team take that responsibility while I focus on creating value for the business by delivering quality software. I just want access to the build pipeline templates and an ability to suggest changes, so that I can &lt;strong&gt;learn&lt;/strong&gt;, &lt;strong&gt;innovate&lt;/strong&gt;, and &lt;strong&gt;troubleshoot&lt;/strong&gt; issues, if any.&lt;/p&gt;
&lt;p&gt;The 1st generation app-type blueprints introduced re-usable application type continuous integration blueprints, which typically required me to update 2-3 lines of configuration and I am done with my pipeline.&lt;/p&gt;
&lt;p&gt;Some of the fairy dust is the &lt;strong&gt;extend template&lt;/strong&gt; feature in the YAML-based Azure Pipelines. It allows us to verify that a pipeline is based on a known and trusted template. If not, it is automatically rejected by service connections and/or environment checkpoints - at run time, with zero humanoid intervention.&lt;/p&gt;
&lt;p&gt;But, you guessed it, there is more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="WHAT.2" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3c.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you read &lt;a href="/yaml-pipelines-part8.html"&gt;Part 8: Pipelines - Pipelines - From CI to CD and beyond in one pipeline&lt;/a&gt; of pipeline series, on our technical WorkSafeBC blog, you will be amazed with our 2nd generation app-type blueprints, which are in &lt;strong&gt;early preview&lt;/strong&gt; in two of our engineering environments.&lt;/p&gt;
&lt;p&gt;The 2nd generation adds the same magic we discussed for continuous integration, to the continuous deployment. Thanks to pipeline as code and the way we have structured our pipelines and template repository, all engineers can review all templates, and submit improvements via a pull request. If the proposed change is within our guardrails the pipeline working group &lt;strong&gt;innovates&lt;/strong&gt;. If not, we collaborate with engineering and DevSecOps, occasionally terminating the pull request with “Kevin said so.” More about that in a minute.&lt;/p&gt;
&lt;p&gt;We have not realized our dream for &lt;strong&gt;self-service automation&lt;/strong&gt; yet. However, we have reached a stage where our blueprint-based pipelines are automation enablers, consistent, and simple. Furthermore, our pipeline working group is collaborating with the automation working group to realise our“Hello world in less than 1min”, aka walking skeleton, goal. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Would you prefer working in a manual humanoid driven world, or in an automated humanoid enabled world?&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHAT.2" src="/images/meetup-devops-meetup-wsbc-pipeline-story-what-3d.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at the quick poll results (slide 21) from Twitter and LinkedIN I am astounded at the percentage of engineers who tolerate hours to days to get a "walking skeleton" created for them. When I combine the two polls, an average of 33% are experiencing &lt;strong&gt;hours&lt;/strong&gt; and another 36% &lt;strong&gt;days&lt;/strong&gt;. That adds up to &lt;strong&gt;69%&lt;/strong&gt; ... I am gob smacked and shocked! I hope that we can come back to continue this session to share the success stories from our automation working group.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;HOW&lt;/h1&gt;
&lt;p&gt;HOW we managed, and at times battled, to grok the intricacies of YAML, evolve the emerging application-type blueprint-based pipelines, and enable automation was beyond the scope of this session and we deferred the &lt;strong&gt;HOW&lt;/strong&gt; for another day. Instead we shifted our focus to get a view through a software development engineer's and security engineer's lens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="HOW" src="/images/meetup-devops-meetup-wsbc-pipeline-story-how-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;A peek through a Software Development Engineers' Lens&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Said Akram" src="/images/Said-mug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Said delivered a great demo of our 2nd Generation App-type CI/CD blueprint, which we are previewing in two engineering environments. It was such a great demo, that I completely forgot to take screenshots.&lt;/p&gt;
&lt;p&gt;Watch the recording on &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/278727555/"&gt;DevOps Vancouver Meetup: June 2021&lt;/a&gt;, once it is published, and auto-forward to Said's demo. You will be mesmerized!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We also asked Kevin, why pipelines are so important to security and why he has been smiling from ear to ear, ever since the blueprints emerged from the pipeline working group.&lt;/p&gt;
&lt;h2&gt;A peek through a Security Engineer's Lens&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Kevin Schwantje" src="/images/Kevin-mug.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Time to invite our security lifeline. Kevin answered two of my questions and much more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can you give us an insight into your world and explain why are the pipelines so important to security? &lt;/li&gt;
&lt;li&gt;Could you enlighten us, why you been smiling from ear to ear, ever since the blueprints emerged from the pipeline working group?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="DEVSECOPS.1" src="/images/meetup-devsecops-meetup-wsbc-pipeline-story-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="DEVSECOPS.2" src="/images/meetup-devsecops-meetup-wsbc-pipeline-story-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;What is next?&lt;/h1&gt;
&lt;p&gt;Hopefully, we will return to the meetup with the automation success stories soon. We will demonstrate that it takes seconds, not minutes, hours to days, to create a new repository, add sample code, 2nd generation app-type blueprint-based CI/CD pipeline, tie everything together, and queue a continuous integration build for the newly created environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Poster" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/devops-meetup-wsbc-pipeline-story.pdf"&gt;devops-meetup-wsbc-pipeline-story deck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/devsecops-pipeline-presentation.pdf"&gt;devsecops-pipeline-presentation.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have any question or feedback, please ping us on twitter &lt;a href="https://twitter.com/saidakram007"&gt;@saidakram007&lt;/a&gt;, &lt;a href="https://twitter.com/604kev"&gt;@604kev&lt;/a&gt;, and &lt;a href="https://twitter.com/wpschaub"&gt;@wpschaub&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Feedback from the peanut gallery&lt;/h1&gt;
&lt;p&gt;I had a good fortune to attend the DevOps Meetup session that Willy described above. As an innocent bystander, I'd only like to add a couple of observations:&lt;/p&gt;
&lt;p&gt;Willy's explanation regarding minimizing waste is spot on. We do not want to spin off hundreds or thousands unique infrastructure solutions. Computing infrastructure is a commodity (i.e. dime-a-dozen) and it is therefore truly wateful to burn precious engineering cycles in re-inventing the wheel, so to speak. Willy and the crew are working hard on commoditizing all aspects of the infrastructure-as-code so that the engineers could sharpen their focus on making changes that are not available elsewhere (i.e. not commoditized on the market).&lt;/p&gt;
&lt;p&gt;Willy did, however, point out the fact that innovation is crucial, and that engineers are empowered (and advised) to work on improving the offered commodities. That's the true value stream delivery -- work smarter, not harder.&lt;/p&gt;
&lt;p&gt;Finally, the strongest takeaway from the session (for me, at least) was the conclusion that security concerns must become top of the mind for every engineer. Before making any changes to the system, the first thing we should ask ourselves is: "Is this change secure? Is it testable by running automated tests?" Only after we prove it to ourselves and to our coworkers that the change is secure and fully testable, should we continue making the desired change.&lt;/p&gt;
&lt;p&gt;Overall, this was a fantastic session; looking forward to part 2! (Alex Bunardzic)&lt;/p&gt;</content><category term="Events"></category><category term="azure-devops"></category><category term="pipelines"></category><category term="devops"></category></entry><entry><title>TDD for Non-Techies</title><link href="https://wsbctechnicalblog.github.io/tdd-for-nontechies.html" rel="alternate"></link><published>2021-05-26T00:00:00-07:00</published><updated>2021-05-26T00:00:00-07:00</updated><author><name>Alex Bunardzic; Christine Ozeroff</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-26:/tdd-for-nontechies.html</id><summary type="html">&lt;p&gt;TDD explained to non programmers by using the example of writing a short story&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuous learning is the essential prerequisite for staying competitive in the market. The competitive edge is oftentimes won by innovating. At WorkSafeBC, we take continuous education very seriously. On top of our regular training sessions, coding Dojos, ad hoc coding bootcamps, weekly micro learning episodes, regular blog posts on WorkSafeBC Technical Blog, etc., we also deliver regular Lunch &amp;amp; Learn sessions.
Last month, Christine Ozeroff (our Manager of Innovation &amp;amp; Technology Learning) organized an experimental Lunch &amp;amp; Learn session to teach Test Driven Development (TDD) to non-technical staff. It was a daring experiment (we don’t know of anyone else ever attempting to do something like that), and the stakes were high – will the session prove to be useful, or will we merely manage to confuse the attendees?&lt;/p&gt;
&lt;p&gt;We’re happy to report that the outcome of the session exceeded our expectations. Participants were pulled into the presentation and encouraged to interrupt the proceedings by asking very valuable and useful questions. At the end of the session, the overall sense was that the group learned something valuable.&lt;/p&gt;
&lt;h2&gt;How it all began&lt;/h2&gt;
&lt;p&gt;About two years ago the DevOps department introduced the practice of Test Driven Development (TDD). We started with training sessions then moved into regular TDD Dojos with kata exams. Today, all developers have reached at least the TDD yellow belt level, some are already at the orange belt level and moving on to take the green belt katas.&lt;/p&gt;
&lt;p&gt;That success created a bit of a stir as other departments began hearing the term TDD being thrown around. The curiosity started rising, so the time was opportune to consider having a session that would introduce and demystify the TDD practice.&lt;/p&gt;
&lt;h2&gt;How we went about organizing the session&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wsbctechnicalblog.github.io/author/alex-bunardzic.html"&gt;Alex Bunardzic&lt;/a&gt; proposed to deliver a hands-on exercise that would illustrate the TDD practice to staff that never performed any computer programming. Naturally, the hands-on exercise would not be in any way related to solving a computer programming challenge (because that would be counter-productive). After giving it some thought, Alex decided to use the familiar process of writing a short story. Everyone has at one point in their schooling written a short story or a short essay. The challenge now became: how do we write a short story/essay using the TDD approach?&lt;/p&gt;
&lt;p&gt;To enable the actual hands-on exercise, Alex had to quickly innovate and create, from scratch, a testing framework that would enable writers to first express an expectation before actually putting the pen on paper (or, in this case, before starting to type the content of their short story).&lt;/p&gt;
&lt;p&gt;The session was conducted using Alex’s newfangled testing framework. We were a bit concerned whether this experimental approach would make any sense to non-programmers, but as the session began unfolding, our anxieties were quickly appeased.&lt;/p&gt;
&lt;h2&gt;How did the session unfold?&lt;/h2&gt;
&lt;p&gt;Unfortunately, on the day we held the session Christine was out of the office; in her place, we had Chloe Ernst act as the MC. Chloe did a fantastic job setting up the stage, breaking the ice and explaining to the staff in attendance what the session is all about and what to expect.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lunch and learn" src="/images/Lunchnlearn.png"&gt;&lt;/p&gt;
&lt;p&gt;Once Chloe handed the control over to Alex, attendees were treated to a brief introduction to TDD, as it is practiced in software development. Shortly after the presentation began the questions started to come in. The frequency of interesting questions increased as the session moved to the hands-on exercise.
Alex took the time to address each question to the best of his ability. What was noteworthy was that the questions, coming from non-programmers, were very insightful and went straight into the very essence of the test-first approach to developing anything (be it a short story, a computer program/app, or anything else).&lt;/p&gt;
&lt;p&gt;At the end of the session, most of the questions were addressed and the feeling was the attendees left the presentation with a better understanding of the value that TDD practices bring to the quality of delivery.&lt;/p&gt;
&lt;h2&gt;Some interesting interactions with the participants&lt;/h2&gt;
&lt;p&gt;Let’s investigate some interesting details that unfolded during the hands-on session. Alex set the stage for the hands-on demonstration by explaining that we always start our work by formulating expectations. In the case of writing a short story, the first expectation is that the story should have a title.
The test-driven approach requires automatic verifications that confirm whether our expectations have been met. Alex demonstrated the framework he built specifically to write textual documents (please see the Appendix for more on this framework). The only way a system will automatically verify if the exceptions are met or not met is if we provide and prescribe formal rules to follow.&lt;/p&gt;
&lt;p&gt;In this case, we are working with a system that has two moving parts: one moving part is the story document (where by ‘moving’ we mean the content of the document keeps changing), the other moving part is a separate document that contains formalized expectations (we call that document 'tests').&lt;/p&gt;
&lt;p&gt;Because the rule of the test-driven development game is that we must always specify expectations before we make changes to the content, the first thing we do is declare the expectation that the short story document must contain a title.&lt;/p&gt;
&lt;p&gt;When we run the testing framework we see that it finds our story writing system in a broken state. To begin with, the testing framework was expecting to find a short story document and failed. Once we created the expected document, the testing framework checked to see if the short story contains the title. It could not find the title, so it failed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="TDD screenshot" src="/images/tddscreenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;From that moment on, the hands-on session continued to alternate between adding the expectation, seeing it fail, and then making changes to the document to fulfill the failed expectation. Rinse, repeat, until we get to the point where we feel that the first draft of the short story is ready for review.&lt;/p&gt;
&lt;h3&gt;Few questions emerged during the session:&lt;/h3&gt;
&lt;p&gt;Sangeeta Ben asked, “Is the testing framework case sensitive?” Alex answered by making the change to one of the tests by replacing the word starting with the upper-case with the same lower-case letter, saved the change and re-ran the tests. The test failed, which gives a clear answer that the tests are case sensitive.&lt;/p&gt;
&lt;p&gt;Boris Nester asked: “What happens when we learn that there is a new compliance regulation that implies that the business policy rule has changed? Do we then write a new test?” Alex attempted to answer by changing one of the existing tests and re-running all tests. The changed test failed because the implemented document did not meet the new expectations. The important takeaway point from this example is that change to the system must never be implemented at the document level. It must always be first made to the specification (i.e. the tests that declare the expectations). Once the change to the tests has been made, we need to run the tests to see that the implementation is causing one or more tests to fail. We then go back and make modifications to the implementation (i.e. we &lt;em&gt;refactor&lt;/em&gt;) until the modified expectations to the test cease to cause the tests to fail.&lt;/p&gt;
&lt;p&gt;Steven Tate asked: “Who writes the tests? I’m assuming it’s the creators of the content, in the case of software development it’s the developers. Is that correct?” Alex answered: “Not necessarily. There may be a new business policy rule that people who are developing software may not know about. Tests could be written by the team comprising not only developers but also other subject matter experts.”&lt;/p&gt;
&lt;h2&gt;Attendee’s feedback&lt;/h2&gt;
&lt;p&gt;Attendees provided their insight on their experience and what they learned during this Lunch and Learn session.  Alex’s efforts to make this session an engaging and relaxed environment for everyone to ask questions came through, as several comments reflected on how attendees like Sangeeta Ben “&lt;em&gt;felt comfortable attending...knowing the session was for non-techies&lt;/em&gt;”. &lt;/p&gt;
&lt;p&gt;Pindy wrote “&lt;em&gt;Alex made it easy to understand that TDD helps with producing simple designs…, and clean and meaningful code&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Boris Nester sums his insights of TDD as it’s “&lt;em&gt;all about shortening the feedback loop to enable quicker product evolution while maintaining quality and not impacting other parts of the application&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Thank-you to everyone for making this session a success!&lt;/p&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;p&gt;Necessity is the mother of invention, and once Christine and Alex agreed that teaching TDD by doing the hands-on demo on how to write a short story would be a good approach, the work on creating a testing framework began. Alex decided to build a simple, no bells-and-whistles framework.&lt;/p&gt;
&lt;p&gt;The short story testing framework is based on a couple of simple assumptions: there will be a document located on the local disk and that document will have a name and an &lt;em&gt;md&lt;/em&gt; extension (&lt;em&gt;md&lt;/em&gt; for markdown language). In addition to that there will be another document called &lt;em&gt;tests.txt&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Each time the tests run, the framework will attempt to locate and open the &lt;em&gt;.md&lt;/em&gt; file. If it fails, it will report an error in the console. If it finds and opens the document, it will read it line-by-line to see if the content in the document satisfies the expectations declared in the &lt;em&gt;tests.txt&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The testing framework is expecting several syntactical formulations that start at each non-blank line in the &lt;em&gt;tests.txt&lt;/em&gt; file. For example, one formalized rule is &lt;em&gt;Must contain:&lt;/em&gt;. This rule grabs the specified content to the right of the &lt;em&gt;Must contain:&lt;/em&gt; statement and then tries to find that content in the &lt;em&gt;.md&lt;/em&gt; document. The simplest implementation of that rule would be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Must contain: Title&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Any content could be specified to the right of the &lt;em&gt;Must contain:&lt;/em&gt; rule. The testing framework will examine the short story document to see if the specified expectation has been met.&lt;/p&gt;
&lt;p&gt;It is also possible to specify the expectation that the short story document must consist of a certain structure. That expectation can be encoded in the &lt;em&gt;test.txt&lt;/em&gt; by using the &lt;em&gt;Minimum number of subtitles:&lt;/em&gt; formalized expectation.&lt;/p&gt;
&lt;p&gt;Of course, the testing framework can check for minimum number of words, maximum number of words, minimum number of paragraphs, maximum number of paragraphs, minimum length in characters, maximum lenght, and so on.&lt;/p&gt;
&lt;p&gt;Using this primitive testing framework, it is possible to specify a lot of expecations that are then driving the story writing process.&lt;/p&gt;</content><category term="Events"></category><category term="agile"></category><category term="code"></category><category term="devops"></category><category term="leaning"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Lunch &amp; Learn - Revisiting Feature Flags</title><link href="https://wsbctechnicalblog.github.io/lunch-learn-revisiting-feature-flags.html" rel="alternate"></link><published>2021-05-07T00:00:00-07:00</published><updated>2021-05-07T00:00:00-07:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-05-07:/lunch-learn-revisiting-feature-flags.html</id><summary type="html">&lt;p&gt;Manage your blast radius through progressive exposure with feature flags&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have all been there. Minutes after releasing a new application feature, our support phone lines are flooded with calls from frustrated customers. Deploying new features to production can be risky business, especially when our goal is to always have delighted customers.&lt;/p&gt;
&lt;p&gt;What if we could progressively test and validate new features in production, with a small and focused group of early adopters? Would it not be phenomenal to fine-tune the customer’s experience of our product in production, or better, let our customer determine how and when to experience new features? Have we not wished we could revert our release with a flip of a switch as soon as we detect smoke?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="L&amp;amp;L" src="/images/lunch-learn-revisiting-feature-flags-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We believe in &lt;strong&gt;continuous learning&lt;/strong&gt;. Last week we hosted an Azure Pipeline workshop, attracting 74 humanoids from engineering, and this week Christine Ozeroff, Anthony Foli, and I hosted an interactive lunch &amp;amp; learn, to share experiences with Feature Flags, share the pros and cons, and unintentional misuse of feature flags.&lt;/p&gt;
&lt;p&gt;This is a crisp summary of the session.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Core theme&lt;/h1&gt;
&lt;h2&gt;WHY&lt;/h2&gt;
&lt;p&gt;With feature flags we have an option to continuously conduct experiments, progressively expose, test, enable and disable features, and pivot on the feedback … all in production. More importantly, we can separate deployments from releases, and release on demand. &lt;/p&gt;
&lt;p&gt;We have one of many ingredients that support a healthy DevOps mindset.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;DevOps is the union of PEOPLE, PROCESS and PRODUCTS to enable the continuous delivery of value to our CUSTOMERS.&lt;/em&gt;” - &lt;a href="https://donovanbrown.com/post/what-is-dev"&gt;Donovan Brown&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, Feature flags are one option to decouple feature  deployment from release, and fine-tune feature exposure, down to the individual user.&lt;/p&gt;
&lt;p&gt;When we look at Microsoft Edge and Azure DevOps, we notice another invaluable strategy. Preview features are deployed continuously and hidden by default. Users, like you and I, can  toggle the preview feature flags ourselves and manage our experience of the products. It empowers me, as the end-user, and delivers invaluable metrics to the engineering team. For example, which features are popular &lt;CR&gt; , and which are looked at, but &lt;CR&gt; reverted immediately.&lt;/p&gt;
&lt;h2&gt;WHAT&lt;/h2&gt;
&lt;p&gt;For Product Owners feature flags are an ON OFF switch. For Developers they are an IF ELSE programming construct.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WHAT are feature flags?&lt;/p&gt;
&lt;p&gt;&lt;img alt="WHAT" src="/images/lunch-learn-revisiting-feature-flags-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;HOW&lt;/h2&gt;
&lt;p&gt;I urge everyone to pause, before jumping into the deep end and introducing feature flags in your solution. 
You need an understanding of feature flags, governance around usage, maintenance, and ownership.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt;? Because progressive exposure (aka feature flags) comes at a cost!&lt;/p&gt;
&lt;p&gt;By adding flags, we are adding technical debt to our code, increasing code and test paths as shown. We must steward a feature code path for the ON state and another for the OFF state, and a unit test for both. &lt;/p&gt;
&lt;p&gt;Make sure you understand the implications of flipping a feature flag, so that you can avoid the scars I have from previous feature flag implementations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/bharry/a-rough-patch/"&gt;A Rough Patch | Brian Harry's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/archive/blogs/visualstudioalmrangers/how-we-checked-and-fixed-the-503-error-and-performance-issue-in-our-azure-function"&gt;How we checked and fixed the 503 error and Performance issue in our Azure Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Protect your infrastructure from such unexpected processing surges, by using retry patterns, throttling patterns, and circuit breakers. See &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; for more information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OUR FEATURE FLAG MANIFESTO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All feature flags must support the kill switch.&lt;/li&gt;
&lt;li&gt;Feature Flags are managed by Business, Security, &amp;amp; Quality Assurance … not development.&lt;/li&gt;
&lt;li&gt;Feature Flags are used to protect only production ready code.&lt;/li&gt;
&lt;li&gt;We favour software as a service over custom code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;To summarise the &lt;strong&gt;VALUE&lt;/strong&gt; of using feature flags …&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can ship code when you are ready.&lt;/li&gt;
&lt;li&gt;You can test your code in production.&lt;/li&gt;
&lt;li&gt;In case of an emergency, you can disable a feature.&lt;/li&gt;
&lt;li&gt;You can control your user’s experience or empower users to control their experience.&lt;/li&gt;
&lt;li&gt;And most importantly, you can experiment, learn, and adapt in production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you commit to feature flags, please ask yourself at least FIVE times, “WHY do we need feature flags?”&lt;/p&gt;
&lt;p&gt;Also, ensure you have an owner for your feature flag solution and associated feature flag configuration. Especially if it is a custom solution! &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember, feature flags are not free!&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Q&amp;amp;A&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Question" src="/images/lunch-learn-revisiting-feature-flags-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Here are a few of the questions we got during the lunch &amp;amp; learn, shared "as-is" in italic. Plus, the answer and/or my personal thoughts.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;QUESTION&lt;/th&gt;
&lt;th&gt;ANSWER / THOUGHT(S)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Feature flags should be short-lived?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Once a feature is released, the associated feature flag should be deprecated and removed from the system. Similarly, once we have completed an experiment and the associated hypothesis has been proven or disproven, the associated feature flag should be retired. &lt;br/&gt; &lt;br/&gt; I recommend the following: &lt;br/&gt; 1. If you do not need feature flags, do not use them! &lt;br/&gt; 2. If you use them, ensure they are short-lived! &lt;br/&gt; 3. Remove all traces of the feature flags from codebase as soon as possible!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;What is the development overhead for building feature flags? If i want to compare with the release overhead ..? I do understand Feature flags offer more flexibility. But the governance is very important.&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Adding feature flags and toggling feature flags is trivial. Managing feature flags and understanding dependencies is complex, yet pivotal to a healthy solution. It is difficult to quantify the overhead without more context, other than confirming that the overhead is a lot higher and complex, when building your own custom solution. You should not just ask what the overhead is when developing or using feature flag, but also what the overhead is when we release without feature flags to manage the blast radius of new features.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Should specific feature flags be deprecated later down the road if they are a permanent feature?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Feature Flags that represent a short- or long-term feature, should be deprecated as soon as possible. Feature Flags should not create a long-term bond with the feature(s) they represent. The longer you allow feature flags to camp in your code, the less likely it will be that engineering can remove them without risk, raising the likelihood that they will remain permanently, compounding your technical debt.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;So sounds like we would need to understand the feature flag configuration for any prod incidents, in case it was a factor in the incident? And then reproduce this config in test environments if we need to reproduce the problem for troubleshooting?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;This is part of the challenge of using feature flags. We need to know the exact state of all feature flags during an incident. It is vital evidence for a speedy remediation and root cause analysis during the infamous 2AM call we mention a couple of times in the &lt;a href="https://www.tactec.ca/ndtw-resources/"&gt;Navigating DevOps through Waterfalls&lt;/a&gt; journey.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Could you give a brief example of how a circuit breaker would function if the need arose - ie. things go wrong after a FF switch is flipped?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;As discussed in &lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt; the hypothesis of the circuit breaker pattern is that the failed service call is likely to succeed if (and only if) it is automatically retried after a significant delay. If we flip a feature flag and our backend services are experience unexpected load, for example Active Directory is inundated with authentication requests, the circuit breaker can break the circuit (network connection), shield, and allow the backend services to recover.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;I think the worst case scenario is if a particular FF config creates a non-trivial data corruption issue which isn’t detected immediately?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Any data corruption is serious. If the act of flipping a feature flag results in data corruption, the kill switch is unlikely to bring any relief. Yes, this is a nightmare scenario, but not limited to feature flags.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;I am assuming no code should be sunset to the SRE group with any feature flags in it?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Feature Flags should be short-term, focused on preview features. They are not relevant when a solution enters sustainment, maintenance, or sunset mode. In my opinion, the site reliability engineers (SRE) should &lt;strong&gt;not&lt;/strong&gt; accepts a solution that harbours technical debt and stale feature flag logic. &lt;br/&gt; &lt;br/&gt; The only exception are long-lived operations and security feature flags, but only as an exception!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Why do you favour a SaaS solution?&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;In 2005 I, and many other Microsoft MVPs, had immense fun installing the first versions of Team Foundation Server. It was a painstaking and mind-boggling experience, a drain on engineering resources, and an unrecoverable expense ... but it was fun, for a while. Yes, we had to understand every nut and bolt of the solution and quickly became TFS experts, which resulted in a few of us joining Microsoft. A win for TFS, but a loss for the engineering teams we left behind. Then came Azure DevOps, formerly known as VSO and VSTS, which opened our eyes to the value of Software as a Service (SaaS). No more installations, no more maintenance of hardware, no more patching, and automatic update of features every 3-weeks, &lt;br/&gt; &lt;br/&gt; The above-mentioned experience convinced me of the value of SaaS solutions. In the context of feature flags, it means we do not have to invest precious development and operational resources to build and maintain a solution that will grow with us - basic feature flag management, A/B testing, stale and dependency flag detection and management, metrics, reliability, scalability, ... the list goes on.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Session presentation thumbnails&lt;/p&gt;
&lt;p&gt;&lt;img alt="Thumbnails" src="/images/lunch-learn-revisiting-feature-flags-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Download" src="/images/moving-hundreds-of-pipeline-snowflakes-qr-1-2.png"&gt;&lt;/p&gt;
&lt;p&gt;DOWNLOAD &amp;gt;&amp;gt; &lt;a href="/documents/Revisiting-Feature-Flags-2021.pdf"&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Reference Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/bharry/a-rough-patch/"&gt;A Rough Patch | Brian Harry's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/archive/blogs/visualstudioalmrangers/how-we-checked-and-fixed-the-503-error-and-performance-issue-in-our-azure-function"&gt;How we checked and fixed the 503 error and Performance issue in our Azure Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/19/9/transient-faults-devops"&gt;3 ways to handle transient faults for DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/19/6/why-hypothesis-driven-development-devops"&gt;Why hypothesis-driven development is key to DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;What's the cost of feature flags?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;Summary of my publications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Events"></category><category term="devops"></category><category term="events"></category><category term="feature-flags"></category><category term="learning"></category></entry><entry><title>Wandering down memory lane - feature flags</title><link href="https://wsbctechnicalblog.github.io/memory-lane-feature-flags.html" rel="alternate"></link><published>2021-03-12T00:00:00-08:00</published><updated>2021-03-12T00:00:00-08:00</updated><author><name>Willy-Peter Schaub</name></author><id>tag:wsbctechnicalblog.github.io,2021-03-12:/memory-lane-feature-flags.html</id><summary type="html">&lt;p&gt;Use feature flags to fine-tune each release in production.&lt;/p&gt;</summary><content type="html">&lt;p&gt;More memory lane content pulled from my personal blog, before it is deprecated in favour of this technical blog.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;DevOps vancouver Meetup January 2019&lt;/h1&gt;
&lt;p&gt;We had a really great turnout and a vibrant meetup hosted by &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/members/44231812/"&gt;Andre Kaminski&lt;/a&gt;, featuring three topics in January 2019:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entropy in DevOps Teams: Andrew Rose&lt;/li&gt;
&lt;li&gt;The Virtues of Being T-shaped: Kyle Young&lt;/li&gt;
&lt;li&gt;Progressive Exposure Using Feature Flags: &lt;a href="https://wsbctechnicalblog.github.io/pages/authors.html"&gt;Willy Schaub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-3.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find a copy of my feature flags presentation &lt;a href="https://1drv.ms/b/s!AoTKFn7kQntwmop6lYMUH2ki07YkpA"&gt;HERE&lt;/a&gt;. Ping me if the link is blocked by your firewall.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Top 6 FAQs from my talk&lt;/h1&gt;
&lt;h2&gt;What's DevOps and what's the link to the session?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps, by &lt;a href="https://www.donovanbrown.com/post/what-is-devops"&gt;Donovan Brown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-5.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Link to the &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/events/257318843/"&gt;January 2019&lt;/a&gt; session and &lt;a href="https://www.meetup.com/DevOps-Vancouver-BC-Canada/photos/29645676/"&gt;photos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;When should I use rings versus feature flags?&lt;/h2&gt;
&lt;p&gt;I think of a &lt;strong&gt;package&lt;/strong&gt; when using the ring-based deployment model to deploy a release and a small &lt;strong&gt;screwdriver&lt;/strong&gt; to "tweak" feature flags to fine-tune the release. See &lt;a href="https://opensource.com/article/18/2/feature-flags-ring-deployment-model"&gt;Deploying new releases: Feature flags or rings?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;How do I manage the technical debt introduced by feature flags?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;KEEP IT SIMPLE!&lt;/strong&gt; Define technical governance to clearly define who owns the feature flags, when and how to remove feature flags and the associated technical debt,  and scenarios that are suitable for feature flags. See &lt;a href="https://opensource.com/article/18/7/does-progressive-exposure-really-come-cost"&gt;What's the cost of feature flags?&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Who owns feature flags?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-2.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most feature flags are scoped to a business feature, backed by a business case, and delivering value, which places the ownership of the feature flag switch with the business. Some feature flags are scoped to an operational feature, which places the ownership with operations (Ops).&lt;/p&gt;
&lt;h2&gt;What do we mean with "Do not hide non-production ready code behind feature flags"?&lt;/h2&gt;
&lt;p&gt;Production ready implies hat we have met an agreed quality bar and are confident to release the feature to production. It does not mean feature ready, as we may expose a production ready minimally viable product to perform experiments and A|B testing. Risk of hiding non-production ready code behind feature flags is high - it's easy to flip a switch and expose incomplete,unstable, of security breaches by mistake.&lt;/p&gt;
&lt;h2&gt;Why the product we introduced at the meetup?&lt;/h2&gt;
&lt;p&gt;You need to investigate and create your own opinion, but here are a few highlights from our evaluation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's a Software as a Service (&lt;strong&gt;SaaS&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt; administration&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;experimentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Feature flag &lt;strong&gt;dependency management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Identify &lt;strong&gt;stale flags&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rules&lt;/strong&gt; to manage exposure and blast radius&lt;/li&gt;
&lt;li&gt;... and much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Can you tell me more about circuit breakers?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-4.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Netflix/Hystrix/wiki"&gt;Hystrix&lt;/a&gt; evolved out of resilience engineering work that the Netflix API team began in 2011. See &lt;a href="https://aka.ms/bh-ff-sos"&gt;A Rough Path&lt;/a&gt;, by Brian Harry for an example, where circuit breakers could have protected us from an Operational meltdown, caused by simply "flipping a flag".&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Two epiphanies&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-6b.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-7b.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;Last, but not least, our feature flag manifesto&lt;/h1&gt;
&lt;p&gt;On our common engineering site, we have a collection of verbal declaration of intentions, motives, or views of the issuer, for processes and products.&lt;/p&gt;
&lt;p&gt;Here is a copy of our feature flag manifesto.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Pipeline" src="/images/memory-lane-feature-flags-1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The worlds of our &lt;a href="/why-pipelines-part1.html"&gt;pipelines&lt;/a&gt; and feature flags are likely to collide when we innovate our ability to &lt;strong&gt;release on demand&lt;/strong&gt;. See you there!&lt;/p&gt;</content><category term="Events"></category><category term="azure-devops"></category><category term="devops"></category><category term="feature-flags"></category><category term="pipelines"></category></entry><entry><title>WorkSafeBC DevOps Celebrate 100th Sprint</title><link href="https://wsbctechnicalblog.github.io/wsbc-devops-celebrate-hundredth-sprint.html" rel="alternate"></link><published>2021-02-19T00:00:00-08:00</published><updated>2021-02-19T00:00:00-08:00</updated><author><name>Alex Bunardzic</name></author><id>tag:wsbctechnicalblog.github.io,2021-02-19:/wsbc-devops-celebrate-hundredth-sprint.html</id><summary type="html">&lt;p&gt;WorkSafeBC DevOps 100th sprint celebration coincided with the 20th anniversary of the Agile Manifesto&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Navigating the Future&lt;/h2&gt;
&lt;p&gt;A happy coincidence of celebrating WorkSafeBC DevOps 100th sprint at the same time when we are celebrating 20th anniversary of the Agile Movement, provided an opportunity to host &lt;a href="https://wingman-sw.com/about"&gt;James Grenning&lt;/a&gt;, the original signatory of the Agile Manifesto.&lt;/p&gt;
&lt;p&gt;A regular &lt;strong&gt;Navigating the Future&lt;/strong&gt; session, which DevOps is holding every PI, served as a good platform to usher the celebrations.&lt;/p&gt;
&lt;p&gt;The celebration started with WorkSafeBC &lt;strong&gt;IT Director&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/andrekaminski/"&gt;Andre Kaminski&lt;/a&gt; describing his journey to Agile and DevOps. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Andre Kaminski" src="/images/Andre_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Andre explained how in the early days his relentless focus on value delivery to the customer led him to search for ways that are not heavily based on the process and on producing copious documentation. As soon as Agile arrived on the scene, Andre was an early adopter; he was also a pioneer with adopting early stages of DevOps. Andre concluded his presentation by saying that after successfully embracing Agile and DevOps, he never looked back.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Indispensable Value of Technical Excellence&lt;/h2&gt;
&lt;p&gt;Our guest of honour, James Grenning, generously spent one hour sharing his journey from the early days of switches and toggles programming, all the way to the present day of Agile DevOps and Continuous Delivery. James had repeatedly potentiated that it is important to strive to avoid getting stuck in the 'Do' loop, where we have mastered some skills and reached the plateau. It's the 'Expert Beginner' stage that is the bottleneck slowing us down and preventing us from reaching our full potential.&lt;/p&gt;
&lt;p&gt;&lt;img alt="James Grenning" src="/images/James_Grenning.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;The only way to prevent the 'Expert Beginner' impasse is to focus on &lt;em&gt;technical excellence&lt;/em&gt;. And the most effective way to pursue technical excellence is adopting &lt;strong&gt;Extreme Programming (XP)&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Service Virtualization&lt;/strong&gt; and &lt;strong&gt;SOLID principles&lt;/strong&gt; and &lt;strong&gt;design patterns&lt;/strong&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Finally, &lt;a href="https://www.linkedin.com/in/todd-yule-4679646/"&gt;Todd Yule&lt;/a&gt; (our &lt;strong&gt;Head of Innovation and Chief Digital Officer&lt;/strong&gt;) tied everything together by highlighting the salient points of our DevOps progress, which he had originally instigated and is now leading. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Todd Yule" src="/images/Todd_anniversary.png"&gt;&lt;/p&gt;
&lt;p&gt;Todd repeated James' advice to use &lt;strong&gt;Scrum&lt;/strong&gt; as a practice that points out deficiencies which need to be solved by using &lt;strong&gt;XP&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Agile Mindset&lt;/strong&gt; and &lt;strong&gt;Continuous Delivery&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Events"></category><category term="agile"></category><category term="devops"></category><category term="events"></category></entry></feed>